<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Diagram.Base</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CollectionExChangeType">
            <summary>
            Identifies a type of change made to a collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionExChangeType.Insert">
            <summary>
            One or more items were inserted into the collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionExChangeType.Remove">
            <summary>
            One or more items were removed from the collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionExChangeType.Clear">
            <summary>
            All of the items were removed from the collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionExChangeType.Set">
            <summary>
            One of the items in the collection was modified.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CollectionEx">
            <summary>
            Base class for list collections that fire events before and after changes
            occur.
            </summary>
            <remarks>
            This class provides a base implementation of the IList and IEnumerable
            interfaces. The internal implementation of the collection is an ArrayList.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionEx.items">
            <summary>
            Contents of collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for a collection.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionEx)">
            <summary>
            Copy constructor.
            </summary>
            <remarks>
            <para>
            Makes a deep copy of the collection.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the list or a portion of the list to an array.
            </summary>
            <param name="array">Array in which to copy the items in the list.</param>
            <param name="index">Index at which to start copying in target array.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the items.
            in the list.
            </summary>
            <returns>Enumerator for iterating through collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#Clear">
            <summary>
            Removes all items from the list.
            </summary>
            <remarks>
            <para>
            This method calls OnChanging before clearing the the collection and
            calls OnChangeComplete after clearing the collection.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds a new item to the list.
            </summary>
            <param name="value">Object to add.</param>
            <returns>Zero-based index at which item was added.</returns>
            <remarks>
            <para>
            This method calls OnChanging before adding the item and then calls
            OnChangeComplete after adding the item.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a new item into the list at the specified position.
            </summary>
            <param name="index">Zero-based index at which to insert the object.</param>
            <param name="value">Object to insert.</param>
            <remarks>
            <para>
            This method calls OnChanging before inserting the item and then calls
            OnChangeComplete after inserting the item.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines if the list contains the specified object.
            </summary>
            <param name="value">Object to search for.</param>
            <returns>
            True if the object is contained by the collection;
            otherwise False.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the specified object in the list.
            </summary>
            <param name="value">Object to search for.</param>
            <returns>Zero-based index of item in the list or -1 if not found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.Remove(System.Object)">
            <summary>
            Removes the given object from the list.
            </summary>
            <param name="value">Object to remove.</param>
            <returns>True if the object has been removed; otherwise False.</returns>
            <remarks>
            <para>
            This method calls OnChanging before removing the item and then calls
            OnChangeComplete after removing the item.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.Concat(System.Collections.ICollection)">
            <summary>
            Concatenates another collection with this collection.
            </summary>
            <param name="coll">
            Collection containing items to add to this collection.
            </param>
            <remarks>
            <para>
            This method calls OnChanging before concatenating the list and
            then calls OnChangeComplete after concatenating the list.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index position.
            </summary>
            <param name="index">Zero-based index of item to remove.</param>
            <returns>True if the item was successfully removed; ptherwise False.</returns>
            <remarks>
            <para>
            This method calls OnChanging before removing the item and then calls
            OnChangeComplete after removing the item.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
            <remarks>
            <para>
            This method calls OnChanging before clearing the the collection and
            calls OnChangeComplete after clearing the collection.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the item in the list.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Zero-based collection index or -1 if not found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo object with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Creates an object derived from the CollectionExEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
            <remarks>
            <para>
            Derived collection classes override this method to supply their own
            type-safe, CollectionExEventArgs derived class.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Creates an object derived from the CollectionExEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
            <remarks>
            <para>
            Derived collection classes override this method to supply their own
            type-safe, CollectionExEventArgs derived class.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Creates an object derived from the CollectionExEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <param name="index">Zero-based collection index at which the event occurred.</param>
            <returns>CollectionExEventArgs derived object.</returns>
            <remarks>
            <para>
            Derived collection classes override this method to supply their own
            type-safe, CollectionExEventArgs derived class.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Creates an object derived from the CollectionExEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="objs">Collection of objects involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
            <remarks>
            <para>
            Derived collection classes override this method to supply their own
            type-safe, CollectionExEventArgs derived class.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called before a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            The
            <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            parameter passed to this method is an instance of a class derived from
            CollectionExEventArgs. Derived classes are responsible for downcasting
            this parameter to the correct type.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called after a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            The
            <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            parameter passed to this method is an instance of a class derived from
            CollectionExEventArgs. Derived classes are responsible for downcasting
            this parameter to the correct type.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.List">
            <summary>
            The list contained by the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.InnerList">
            <summary>
            The raw ArrayList contained by the collection.
            </summary>
            <remarks>
            Making changes to the list through this property does not
            fire events.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.IsSynchronized">
            <summary>
            Determines if the collection is thread-safe.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.SyncRoot">
            <summary>
            Object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets / sets the item at the specified index in the list.
            </summary>
            <remarks>
            <para>
            The set method for this property calls OnChanging before setting the
            item value and then calls OnChangeComplete after setting the item's
            value.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#IsReadOnly">
            <summary>
            Indicates if the collection is Read-only.
            </summary>
            <remarks>Always returns False.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#IsFixedSize">
            <summary>
            Indicates if the collection is fixed size.
            </summary>
            <remarks>Always returns True.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs">
            <summary>
            Arguments for collection change events.
            </summary>
            <remarks>
            <para>
            This is the base class for the arguments passed to collection change
            events. The
            <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExChangeType"/>
            is included in the event arguments. The index position of the element
            that was changed by the event is also included in the event arguments.
            </para>
            <para>
            Derived classes extend this base class to include an array of objects
            along with type-safe accessor methods. When the CollectionEx class
            needs to call the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            and
            <see cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            methods, it creates an EventArgs object by calling the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)"/>
            method. Derived classes override MakeEventArgs to create their own
            type-safe event argument objects.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Construct CollectionExEventArgs object of a given type.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Int32)">
            <summary>
            Constructs a CollectionExEventArgs object of a given type and
            assigns the collection index value.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="index">Index position at which the event occurred.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs.ChangeType">
            <summary>
            Type of change that caused the event.
            </summary>
            <remarks>
            <para>
            The reason this property exists is to reduce the number of events
            that collections must declare and manage. If this property did not
            exist, then the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            and
            <see cref="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)"/>
            callbacks and their corresponding events in derived classes would mushroom
            to around 10 callbacks and events.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs.Index">
            <summary>
            Zero-based index into the collection at which the event occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs.Cancel">
            <summary>
            Indicates whether the operation should be cancelled.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollection">
            <summary>
            List of <see cref="T:Syncfusion.Windows.Forms.Diagram.Connection"/> objects.
            </summary>
            <remarks>
            A ConnectionCollection can be attached to an object that implements the
            IPortContainer interface. If it is, the ConnectionCollection automatically
            synchronizes the connections in foreign symbols when connections are
            added or removed.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Connection"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.#ctor">
            <summary>
            Construct a ConnectionCollection object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.#ctor(Syncfusion.Windows.Forms.Diagram.ConnectionCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for a collection.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.Add(Syncfusion.Windows.Forms.Diagram.Connection)">
            <summary>
            Add a connection to this collection.
            </summary>
            <param name="obj">Connection to add.</param>
            <returns>Zero-based index at which the item was added.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.Concat(Syncfusion.Windows.Forms.Diagram.ConnectionCollection)">
            <summary>
            Concatenate a collection to this collection.
            </summary>
            <param name="coll">Collection to append.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.Remove(Syncfusion.Windows.Forms.Diagram.Connection)">
            <summary>
            Removes the specified connection from the collection.
            </summary>
            <param name="obj">Connection to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.Remove(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Remove a connection from the collection given a source and target port.
            </summary>
            <param name="sourcePort">Source port of connection to remove.</param>
            <param name="targetPort">Target port of connection to remove.</param>
            <returns>The connection removed or NULL if not found.</returns>
            <remarks>
            This method searches the collection for a connection matching the given
            source and target ports. If one is found, it is removed and returned to
            the caller.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.Contains(Syncfusion.Windows.Forms.Diagram.Connection)">
            <summary>
            Determine if the specified connection exists in this collection.
            </summary>
            <param name="obj">Object to search for.</param>
            <returns>True if the item is found; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.Find(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Searches the collection for a connection matching the given
            source and target ports.
            </summary>
            <param name="sourcePort">Source port of connection.</param>
            <param name="targetPort">Target port of connection.</param>
            <returns>
            Connection object matching the given source and target ports or
            NULL if one does not exist in the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Creates and returns an instance of the ConnectionCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Creates and returns an instance of the ConnectionCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Creates and returns an instance of the ConnectionCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <param name="index">Zero-based collection index at which the event occurred.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Creates and returns an instance of the ConnectionCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="objs">Collection of objects involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called before a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method downcasts the CollectionExEventArgs parameter to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            object. Then it fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.Changing"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called after a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method downcasts the CollectionExEventArgs parameter to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            object. Then it fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.ChangeComplete"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.Item(System.Int32)">
            <summary>
            Gets / sets the item at the specified zero-based index
            in the collection.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.Changing">
            <summary>
            Fired before a change is made to the collection.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ConnectionCollection.ChangeComplete">
            <summary>
            Fired after a change is made to the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs">
            <summary>
            Event argument class for ConnectionCollection events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Constructs a ConnectionCollectionEventArgs given a change type.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Constructs a ConnectionCollectionEventArgs object from a specified
            connection.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Connection involved in the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Constructs a ConnectionCollectionEventArgs object from a specified
            connection and collection index.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Connection involved in the event.</param>
            <param name="index">Index position at which the event occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Constructs a ConnectionCollectionEventArgs object from a collection
            of connections.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="objs">Collection of connections involved in the event.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs.Connection">
            <summary>
            The connection involved in the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs.Connections">
            <summary>
            Array of connections involved in the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventHandler">
            <summary>
            Delegate definition for ConnectionCollection events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LabelCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.Label"/> objects.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Label"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.#ctor">
            <summary>
            Construct a LabelCollection object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for a collection.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.#ctor(Syncfusion.Windows.Forms.Diagram.LabelCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.Add(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Adds a label to the collection.
            </summary>
            <param name="obj">Label to add.</param>
            <returns>Zero-based index of item added.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Inserts a label into the collection.
            </summary>
            <param name="index">Zero-based index at which to add the label.</param>
            <param name="obj">Label to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.Concat(Syncfusion.Windows.Forms.Diagram.LabelCollection)">
            <summary>
            Concatenate a collection to this collection.
            </summary>
            <param name="coll">Collection to concatenate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.Remove(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Remove the specified label from the collection.
            </summary>
            <param name="obj">Label to remove from the collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.Contains(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Determines if the collection contains the specified label.
            </summary>
            <param name="obj">Label to search for.</param>
            <returns>True if found; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Creates and returns an instance of the LabelCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Creates and returns an instance of the LabelCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Creates and returns an instance of the LabelCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <param name="index">Zero-based collection index at which the event occurred.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Creates and returns an instance of the LabelCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="objs">Collection of objects involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called before a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method downcasts the CollectionExEventArgs parameter to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs"/>
            object. Then it fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.LabelCollection.Changing"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called after a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method downcasts the CollectionExEventArgs parameter to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs"/>
            object. Then it fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.LabelCollection.ChangeComplete"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LabelCollection.Item(System.Int32)">
            <summary>
            Gets / sets the item at the specified zero-based index
            in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LabelCollection.Item(System.String)">
            <summary>
            Return the label matching the specified name.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.LabelCollection.Changing">
            <summary>
            Fired before a change is made to the collection.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.LabelCollection.ChangeComplete">
            <summary>
            Fired after a change is made to the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs">
            <summary>
            Event argument class for LabelCollection events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Constructs a LabelCollectionEventArgs given a change type.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Constructs a LabelCollectionEventArgs object from a specified
            label.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Label involved in the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Constructs a LabelCollectionEventArgs object from a specified
            label and collection index.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Label involved in the event.</param>
            <param name="index">Index position at which the event occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Constructs a LabelCollectionEventArgs object from a collection
            of labels.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="objs">Collection of labels involved in the event.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs.Label">
            <summary>
            The label involved in the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs.Labels">
            <summary>
            Array of labels involved in the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventHandler">
            <summary>
            Delegate definition for LabelCollection events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayerCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/> objects.
            </summary>
            <remarks>
            This class implements the ILayerContainer interface, which provides host
            services for layers.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILayerContainer"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ILayerContainer">
            <summary>
            Interface to objects that contain a collection of layers.
            </summary>
            <remarks>
            <para>
            This interface provides methods for managing nodes across a collection
            of layers.
            </para>
            <para>
            IMPORTANT NOTE: A node can belong to only one layer.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IZOrderContainer">
            <summary>
            Summary description for ZOrderContainer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.GetZOrder(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the Z-order value of the given node.
            </summary>
            <param name="node">Node to get Z-order for.</param>
            <returns>
            Zero-based Z-order value of the node or -1 if the node
            does not exist.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.SetZOrder(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Sets the Z-order of the given node.
            </summary>
            <param name="node">Node to set Z-order for.</param>
            <param name="zOrder">Zero-based Z-order value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.BringForward(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Moves the specified node forward in the Z-order.
            </summary>
            <param name="node">Node to move forward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.SendBackward(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Sends the specified node back in the Z-order.
            </summary>
            <param name="node">Node to move backward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.BringToFront(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Brings the specified node to the front of the Z-order.
            </summary>
            <param name="node">Node to bring to the front.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.SendToBack(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Sends the specified node to the back of the Z-order.
            </summary>
            <param name="node">Node to send to the back.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.ZOrderDepth">
            <summary>
            Number of items in the Z-order for this container.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILayerContainer.Contains(System.String)">
            <summary>
            Determines if the container has a layer matching the specified name.
            </summary>
            <param name="layerName">Name of layer to search for.</param>
            <returns>True if the layer is found; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILayerContainer.FindNodeLayer(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Finds the layer to which the specified node belongs.
            </summary>
            <param name="node">Node to search for.</param>
            <returns>Layer containing the specified node.</returns>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILayerContainer.PropertyContainer">
            <summary>
            Property container that the all layers in the layer container inherit.
            </summary>
            <remarks>
            <para>
            Nodes in a layer inherit properties from the layer they belong to. Layers
            inherit properties from the property container referenced by this property.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILayerContainer.NodeContainer">
            <summary>
            Composite node that contains all of the nodes in the layers.
            </summary>
            <remarks>
            <para>
            This provides the layers with a reference to the composite node that
            owns all of the nodes.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayerCollection.propertyContainer">
            <summary>
            Reference to parent property container.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayerCollection.nodeContainer">
            <summary>
            Reference to the parent composite node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.#ctor(Syncfusion.Windows.Forms.Diagram.ICompositeNode)">
            <summary>
            Construct a layer container given a specified composite node container.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for a collection.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.#ctor(Syncfusion.Windows.Forms.Diagram.LayerCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.GetService(System.Type)">
            <summary>
            
            </summary>
            <param name="svcType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.Add(System.String)">
            <summary>
            Creates and adds a new layer with the given name.
            </summary>
            <param name="layerName">Name of layer to create.</param>
            <returns>Layer created or NULL on failure.</returns>
            <remarks>
            This method returns NULL if a layer matching the specified
            name already exists.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.Insert(System.Int32,System.String)">
            <summary>
            Creates and inserts a new layer with the given name.
            </summary>
            <param name="index">Index position at which to insert the new layer.</param>
            <param name="layerName">Name of the layer to create.</param>
            <remarks>
            This method returns NULL if a layer matching the specified
            name already exists.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.Remove(System.String)">
            <summary>
            Removes the layer matching the specified name.
            </summary>
            <param name="layerName">Name of layer to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.IndexOf(System.String)">
            <summary>
            Returns the index position of the layer matching the specified name.
            </summary>
            <param name="layerName">Name of layer to search for.</param>
            <returns>Zero-based index position of the layer or -1 if not found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.Contains(System.String)">
            <summary>
            Determines if the collection contains the specified layer.
            </summary>
            <param name="layerName">Name of layer to search for.</param>
            <returns>
            True if the collection contains a layer matching the specified
            name; otherwise False.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.FindNodeLayer(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Find the layer that contains the given node.
            </summary>
            <param name="node">Node to search for in the collection of layers.</param>
            <returns>
            Layer object containing the specified node or NULL if
            no layer is found that contains the node.
            </returns>
            <remarks>
            A node can belong to only one layer at any given time.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.GetZOrder(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the Z-order value of the given node.
            </summary>
            <param name="node">Node to get Z-order for.</param>
            <returns>
            Zero-based Z-order value of the node or -1 if the node
            does not exist.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.SetZOrder(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Sets the Z-order of the given node.
            </summary>
            <param name="node">Node to set Z-order for.</param>
            <param name="zOrder">Zero-based Z-order value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.BringForward(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Moves the specified node forward in the Z-order.
            </summary>
            <param name="node">Node to move forward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.SendBackward(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Sends the specified node back in the Z-order.
            </summary>
            <param name="node">Node to move backward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.BringToFront(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Brings the specified node to the front of the Z-order.
            </summary>
            <param name="node">Node to bring to the front.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.SendToBack(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Sends the specified node to the back of the Z-order.
            </summary>
            <param name="node">Node to send to the back.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.RemoveAllMembers">
            <summary>
            Clears out every layer in the collection.
            </summary>
            <remarks>
            This method removes all nodes from every layer in the collection.
            It does not reset layer properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Creates and returns an instance of the LayerCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Creates and returns an instance of the LayerCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Creates and returns an instance of the LayerCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <param name="index">Zero-based collection index at which the event occurred.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Creates and returns an instance of the LayerCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="objs">Collection of objects involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called before a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method downcasts the CollectionExEventArgs parameter to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollectionEventArgs"/>
            object. Then it fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.LayerCollection.Changing"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called after a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method downcasts the CollectionExEventArgs parameter to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollectionEventArgs"/>
            object. Then it fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.LayerCollection.ChangeComplete"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.GenerateUniqueLayerName(Syncfusion.Windows.Forms.Diagram.Layer,System.String@)">
            <summary>
            Generates a unique name for the given layer.
            </summary>
            <param name="layer">Layer to generate unique name for.</param>
            <param name="layerName">Output parameter to receive new name.</param>
            <returns>True if name was changed; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerCollection.Item(System.Int32)">
            <summary>
            Gets the layer at the specified index position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerCollection.Item(System.String)">
            <summary>
            Gets the layer matching the given name.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerCollection.PropertyContainer">
            <summary>
            The base property container for all layers in the collection.
            </summary>
            <remarks>
            All of the layers in the collection inherit properties from
            this property container.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerCollection.NodeContainer">
            <summary>
            Composite node that contains all of the nodes in the layers.
            </summary>
            <remarks>
            <para>
            This provides the layers with a reference to the composite node that
            owns all of the nodes.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerCollection.ZOrderDepth">
            <summary>
            Number of items in the Z-order for this container.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.LayerCollection.Changing">
            <summary>
            Fired before a change is made to the collection.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.LayerCollection.ChangeComplete">
            <summary>
            Fired after a change is made to the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayerCollectionEventArgs">
            <summary>
            Event argument class for LayerCollection events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Constructs a LayerCollectionEventArgs given a change type.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Constructs a LayerCollectionEventArgs object from a specified
            layer.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Layer involved in the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Constructs a LayerCollectionEventArgs object from a specified
            layer and collection index.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Layer involved in the event.</param>
            <param name="index">Index position at which the event occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Constructs a LayerCollectionEventArgs object from a collection
            of layers.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="objs">Collection of layers involved in the event.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerCollectionEventArgs.Layer">
            <summary>
            The layer involved in the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerCollectionEventArgs.Layers">
            <summary>
            Array of layers involved in the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayerCollectionEventHandler">
            <summary>
            Delegate definition for LayerCollection events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.INodeCollection">
            <summary>
            Interface to a collection of nodes.
            </summary>
            <remarks>
            <para>
            This interface provides methods for retrieving the nodes
            in a collection. It provides Read-only access by design.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.INodeCollection.GetNodeByName(System.String)">
            <summary>
            Returns the node that matches the given name.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.INodeCollection.Contains(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Determines if the collection contains the specified node.
            </summary>
            <param name="obj">Node to search for.</param>
            <returns>True if the node is found; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.INodeCollection.Contains(System.String)">
            <summary>
            Determines if the collection contains a node matching the specified
            name.
            </summary>
            <param name="nodeName">Name of the node to search for.</param>
            <returns>True if the node is found; otherwise False.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.INode"/> objects.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.INode"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for a collection.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.#ctor(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.GetNodeByName(System.String)">
            <summary>
            Returns the node that matches the given name.
            </summary>
            <param name="nodeName">Name to search for.</param>
            <returns>Node that matches the name or NULL if not found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Add(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Adds a node to the collection.
            </summary>
            <param name="obj">Node to add.</param>
            <returns>Zero-based index position where the add occurred.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Add(Syncfusion.Windows.Forms.Diagram.INodeCollection,System.Int32@)">
            <summary>
            
            </summary>
            <param name="objs"></param>
            <param name="startIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Inserts a node into the collection at the specified index position.
            </summary>
            <param name="index">Zero-based index position at which to insert the node.</param>
            <param name="obj">Node to insert.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Concat(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Concatenate a collection to this collection.
            </summary>
            <param name="coll">Collection to concatenate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Remove(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Removes the specified node from the collection.
            </summary>
            <param name="obj">Node to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Contains(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Determines if the collection contains the specified node.
            </summary>
            <param name="obj">Node to search for.</param>
            <returns>True if the node is found; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Contains(System.String)">
            <summary>
            Determines if the collection contains a node matching the specified
            name.
            </summary>
            <param name="nodeName">Name of the node to search for.</param>
            <returns>True if the node is found; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Find(System.String)">
            <summary>
            Returns the index position of the node matching the specified node
            name.
            </summary>
            <param name="nodeName">Name of node to search for.</param>
            <returns>Zero-based index position of the node or -1 if not found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.SortAscending(Syncfusion.Windows.Forms.Diagram.NodeCompare)">
            <summary>
            Sort the collection of nodes based on the given comparison function.
            </summary>
            <param name="cmpFunc">Function for comparing two nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.GetServices(System.Type)">
            <summary>
            Return an array of services available in the collection.
            </summary>
            <param name="svcType">Type of service to look for.</param>
            <returns>Array of service objects.</returns>
            <remarks>
            <para>
            This method iterates through each node in the collection and calls
            its GetService method. If a node has the specified service, the
            service is added to the output array.
            </para>
            <para>
            This is useful for getting an array of styles back from a collection
            of nodes. The style type can be passed in as the service type.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Creates and returns an instance of the NodeCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Creates and returns an instance of the NodeCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Creates and returns an instance of the NodeCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <param name="index">Zero-based collection index at which the event occurred.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Creates and returns an instance of the NodeCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="objs">Collection of objects involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called before a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method downcasts the CollectionExEventArgs parameter to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            object. Then it fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.NodeCollection.Changing"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called after a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method downcasts the CollectionExEventArgs parameter to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            object. Then it fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.NodeCollection.ChangeComplete"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeCollection.Item(System.Int32)">
            <summary>
            Gets / sets the node at the specified index position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeCollection.Item(System.String)">
            <summary>
            Returns the node matching the specified name.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeCollection.First">
            <summary>
            Gets the first node in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeCollection.Last">
            <summary>
            Gets the last node in the collection.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.NodeCollection.Changing">
            <summary>
            Fired before a change is made to the collection.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.NodeCollection.ChangeComplete">
            <summary>
            Fired after a change is made to the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs">
            <summary>
            Event argument class for NodeCollection events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Constructs a NodeCollectionEventArgs given a change type.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Constructs a NodeCollectionEventArgs object from a specified
            node.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Node involved in the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Constructs a NodeCollectionEventArgs object from a specified
            node and collection index.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Node involved in the event.</param>
            <param name="index">Index position at which the event occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Constructs a NodeCollectionEventArgs object from a collection.
            of nodes.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="objs">Collection of nodes involved in the event.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs.Node">
            <summary>
            The node involved in the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs.Nodes">
            <summary>
            Array of nodes involved in the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventHandler">
            <summary>
            Delegate definition for NodeCollection events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ClipboardNodeCollection">
            <summary>
            Collection of nodes that can be transferred to and from the clipboard.
            </summary>
            <remarks>
            <para>
            This is a specialized NodeCollection class that is used for storing nodes
            on the clipboard. It maintains a GUID (Globally Unique IDentifier) that
            identifies the object that placed the collection of nodes on the clipboard.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClipboardNodeCollection.#ctor(System.Guid)">
            <summary>
            Constructs a ClipboardNodeCollection given a GUID.
            </summary>
            <param name="srcGuid">GUID that identifies the source of the nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClipboardNodeCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for a ClipboardNodeCollection.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClipboardNodeCollection.CompareSourceGuid(System.Guid)">
            <summary>
            Compares the given GUID to the source GUID of the collection.
            </summary>
            <param name="guid">GUID to compare.</param>
            <returns>True if the GUIDs match; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClipboardNodeCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PortCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.Port"/> objects.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for a collection.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.#ctor(Syncfusion.Windows.Forms.Diagram.PortCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.Add(Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Add a port to the collection.
            </summary>
            <param name="obj">Port to add.</param>
            <returns>Zero-based index position at which the port was added.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Insert a port into the collection at the specified index position.
            </summary>
            <param name="index">Zero-based index position at which to insert.</param>
            <param name="obj">Port to insert.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.Concat(Syncfusion.Windows.Forms.Diagram.PortCollection)">
            <summary>
            Concatenate a collection to this collection.
            </summary>
            <param name="coll">Collection to concatenate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.Remove(Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Remove the specified port from the collection.
            </summary>
            <param name="obj">Port to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.Contains(Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Determine if the collection contains the specified port.
            </summary>
            <param name="obj">Port to search for.</param>
            <returns>True if the collection contains the port; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Creates and returns an instance of the PortCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Creates and returns an instance of the PortCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Creates and returns an instance of the PortCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <param name="index">Zero-based collection index at which the event occurred.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Creates and returns an instance of the PortCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="objs">Collection of objects involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called before a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method downcasts the CollectionExEventArgs parameter to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs"/>
            object. Then it fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.PortCollection.Changing"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollection.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called after a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method downcasts the CollectionExEventArgs parameter to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs"/>
            object. Then it fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.PortCollection.ChangeComplete"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PortCollection.Item(System.Int32)">
            <summary>
            Gets / sets the port at the specified index position.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.PortCollection.Changing">
            <summary>
            Fired before a change is made to the collection.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.PortCollection.ChangeComplete">
            <summary>
            Fired after a change is made to the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs">
            <summary>
            Event argument class for PortCollection events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Constructs a PortCollectionEventArgs given a change type.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Constructs a PortCollectionEventArgs object from a specified
            port.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Port involved in the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Constructs a PortCollectionEventArgs object from a specified
            port and collection index.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Port involved in the event.</param>
            <param name="index">Index position at which the event occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Constructs a PortCollectionEventArgs object from a collection
            of ports.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="objs">Collection of ports involved in the event.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs.Port">
            <summary>
            The port involved in the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs.Ports">
            <summary>
            Array of ports involved in the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PortCollectionEventHandler">
            <summary>
            Delegate definition for PortCollection events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ToolCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/> objects.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollection.#ctor(Syncfusion.Windows.Forms.Diagram.ToolCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollection.Add(Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            Adds a tool to the collection.
            </summary>
            <param name="obj">Tool to add.</param>
            <returns>Zero-based index position at which the item was added.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            Inserts a tool into the collection at the specified index position.
            </summary>
            <param name="index">Index position at which to add the tool.</param>
            <param name="obj">Tool to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollection.Remove(Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            Remove the specified tool from the collection.
            </summary>
            <param name="obj">Tool to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollection.IndexOf(Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            Returns the index position of the specified tool in the collection.
            </summary>
            <param name="obj">Tool to search for.</param>
            <returns>Zero-based index position of the item or -1 if not found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Creates and returns an instance of the ToolCollection.EventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Creates and returns an instance of the ToolCollection.EventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Creates and returns an instance of the ToolCollection.EventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <param name="index">Zero-based collection index at which the event occurred.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Creates and returns an instance of the ToolCollection.EventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="objs">Collection of objects involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollection.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called before a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method does nothing because the ToolCollection class
            does not fire events.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollection.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called after a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method does nothing because the ToolCollection class
            does not fire events.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ToolCollection.Item(System.Int32)">
            <summary>
            Gets the tool at the specified index position.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ToolCollectionEventArgs">
            <summary>
            Event argument class for ToolCollection events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Constructs a ToolCollectionEventArgs given a change type.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Constructs a ToolCollectionEventArgs object from a specified
            tool.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Tool involved in the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Constructs a ToolCollectionEventArgs object from a specified
            tool and collection index.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Tool involved in the event.</param>
            <param name="index">Index position at which the event occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ToolCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Constructs a ToolCollectionEventArgs object from a collection
            of tools.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="objs">Collection of tools involved in the event.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ToolCollectionEventArgs.Tool">
            <summary>
            The tool involved in the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ToolCollectionEventArgs.Tools">
            <summary>
            Array of tools involved in the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VerbCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.IVerb"/> objects.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IVerb"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for a collection.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.#ctor(Syncfusion.Windows.Forms.Diagram.VerbCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.Add(Syncfusion.Windows.Forms.Diagram.IVerb)">
            <summary>
            Adds a verb to the collection.
            </summary>
            <param name="obj">Verb to add.</param>
            <returns>Zero-based index position at which the item was added.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.Concat(Syncfusion.Windows.Forms.Diagram.VerbCollection)">
            <summary>
            Concatenate a collection to this collection.
            </summary>
            <param name="coll">Collection to concatenate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.Remove(Syncfusion.Windows.Forms.Diagram.IVerb)">
            <summary>
            Removes the specified verb from the collection.
            </summary>
            <param name="obj">Verb to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.Contains(Syncfusion.Windows.Forms.Diagram.IVerb)">
            <summary>
            Determines if the collection contains the specified verb.
            </summary>
            <param name="obj">Verb to search for.</param>
            <returns>True if the verb is found; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Creates and returns an instance of the VerbCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Creates and returns an instance of the VerbCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Creates and returns an instance of the VerbCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="obj">Object involved in the event.</param>
            <param name="index">Zero-based collection index at which the event occurred.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.MakeEventArgs(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Creates and returns an instance of the VerbCollectionEventArgs class.
            </summary>
            <param name="changeType">Type of change that caused the event.</param>
            <param name="objs">Collection of objects involved in the event.</param>
            <returns>CollectionExEventArgs derived object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called before a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method downcasts the CollectionExEventArgs parameter to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.VerbCollectionEventArgs"/>
            object. Then it fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.VerbCollection.Changing"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VerbCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollection.OnChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called after a change is made to the collection.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method downcasts the CollectionExEventArgs parameter to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.VerbCollectionEventArgs"/>
            object. Then it fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.VerbCollection.ChangeComplete"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VerbCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VerbCollection.Item(System.Int32)">
            <summary>
            Gets / sets the verb at the specified index position.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.VerbCollection.Changing">
            <summary>
            Fired before a change is made to the collection.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.VerbCollection.ChangeComplete">
            <summary>
            Fired after a change is made to the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VerbCollectionEventArgs">
            <summary>
            Event argument class for VerbCollection events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType)">
            <summary>
            Constructs a VerbCollectionEventArgs given a change type.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object)">
            <summary>
            Constructs a VerbCollectionEventArgs object from a specified
            verb.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Verb involved in the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Constructs a VerbCollectionEventArgs object from a specified
            verb and collection index.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="obj">Verb involved in the event.</param>
            <param name="index">Index position at which the event occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerbCollectionEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection)">
            <summary>
            Constructs a VerbCollectionEventArgs object from a collection
            of verbs.
            </summary>
            <param name="changeType">Type of change that occurred.</param>
            <param name="objs">Collection of verbs involved in the event.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VerbCollectionEventArgs.Verb">
            <summary>
            The verb involved in the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VerbCollectionEventArgs.Verbs">
            <summary>
            Array of verbs involved in the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VerbCollectionEventHandler">
            <summary>
            Delegate definition for VerbCollection events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.AlignCmd">
            <summary>
            Align two or more nodes along a specified vertical or horizontal edge.
            </summary>
            <remarks>
            The first node in the command's node collection is always the anchor
            node. The anchor node is never moved by this command. There must be
            at least two nodes in the node collection for this command to work.
            A <see cref="T:Syncfusion.Windows.Forms.Diagram.BoxOrientation"/> value
            specifies which vertical or horizontal edge of the bounding box the
            nodes will be aligned with. For example, if BoxOrientation.Middle is
            specified then the nodes will be aligned along the horizontal line
            passing through the center of the anchor node.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd">
            <summary>
            Base class for commands that operate on multiple nodes.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Nodes"/>
            property contains the collection of nodes that are affected by the
            command.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICommand"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ICommand">
            <summary>
            This interface is implemented by command objects.
            </summary>
            <remarks>
            A command object encapsulates an action and the data required to
            perform the action. A command is executed using
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IVerb.Do(System.Object)"/> and can
            be reversed using the <see cref="M:Syncfusion.Windows.Forms.Diagram.ICommand.Undo"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IVerb"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IVerb">
            <summary>
            Interface to verb objects.
            </summary>
            <remarks>
            A verb is an object that performs an action.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IVerb.Do(System.Object)">
            <summary>
            Performs the action defined by the verb.
            </summary>
            <param name="target">Object that is acted upon (noun).</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICommand.Undo">
            <summary>
            Reverses the command.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ICommand.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ICommand.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Do(System.Object)">
            <summary>
            Execute the command.
            </summary>
            <param name="cmdTarget">Target of the command.</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Undo">
            <summary>
            Reverse the affects of the command.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.CreateNodeIndexTable">
            <summary>
            Creates a hashtable for mapping nodes to their index position
            in a collection.
            </summary>
            <remarks>
            This method is called by derived classes in order to create a
            hashtable containing index positions of nodes in a collection.
            It is used to implement Undo for commands that must remember
            the previous position of each node before the command was
            executed.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.ClearNodeIndexTable">
            <summary>
            Removes all entries from the node index hashtable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.GetNodeIndex(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the saved index position of the given node.
            </summary>
            <param name="node">Node to get index position of.</param>
            <returns>Index position of node or -1 if not found.</returns>
            <remarks>
            Derived classes that change the position of nodes in a collection
            use this method to implement Undo. The position of a node can
            be saved prior to executing the command using the SetNodeIndex
            method and retrieved using this method during Undo.
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.SetNodeIndex(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.SetNodeIndex(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Saves the index position of the given node.
            </summary>
            <param name="node">Node to save index of.</param>
            <param name="nodeIdx">Index position of node.</param>
            <remarks>
            Derived classes that change the position of nodes in a collection
            use this method to implement Undo. The position of a node can
            be saved prior to executing the command using this method and then
            retrieved using the SetNodeIndex method.
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.GetNodeIndex(Syncfusion.Windows.Forms.Diagram.INode)"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.nodes">
            <summary>
            Collection of nodes for the command to act upon.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.resultNodes">
            <summary>
            Collection of nodes actually affected by the command.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.nodeIndexTable">
            <summary>
            Map of nodes to their corresponding index position
            within a collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Nodes">
            <summary>
            Collection of nodes for the command act upon.
            </summary>
            <remarks>
            The caller must populate this collection before executing the
            command.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.ResultNodes">
            <summary>
            Collection of nodes actually affected by the command.
            </summary>
            <remarks>
            This collection is populated when the command is executed. It contains
            the collection of nodes that the command actually modified. This collection
            may differ from the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Nodes"/>
            collection due to constraints on some nodes.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AlignCmd.#ctor(Syncfusion.Windows.Forms.Diagram.BoxOrientation)">
            <summary>
            Construct an AlignCmd object given a box orientation value.
            </summary>
            <param name="orientation">
            Specifies which edge of the bounding boxes will be aligned.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AlignCmd.Do(System.Object)">
            <summary>
            Executes the alignment command.
            </summary>
            <param name="cmdTarget">Unused</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            This method iterates through each node and aligns it with the
            anchor node, which is always the first node in the list. The nodes
            are aligned either vertically or horizontally depending on the value
            of the <see cref="P:Syncfusion.Windows.Forms.Diagram.AlignCmd.Orientation"/> property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AlignCmd.Undo">
            <summary>
            Reverse the alignment command.
            </summary>
            <returns>Always returns True.</returns>
            <remarks>
            This method restores the nodes affected by the align command
            to their original positions.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.AlignCmd.orientation">
            <summary>
            Specifies the horizontal or vertical edge used for alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.AlignCmd.undoVerbs">
            <summary>
            Collection of verbs used to undo the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.AlignCmd.Orientation">
            <summary>
            Specifies the vertical or horizontal edge along which the nodes
            will be aligned.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoxOrientation"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.AlignCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.AlignCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ICommandDispatcher">
            <summary>
            Interface to command dispatcher objects.
            </summary>
            <remarks>
            A command dispatcher is an object that acts as a central point
            for executing commands and provides command history.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICommand"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICommandDispatcher.ExecuteCommand(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Executes the given command. If successful, updates the undo buffer.
            </summary>
            <param name="cmd">Command to execute.</param>
            <returns>True if command executed successfully; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICommandDispatcher.UndoCommand">
            <summary>
            Pops the last command off of the undo stack and calls its Undo method.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICommandDispatcher.RedoCommand">
            <summary>
            Pops the last command off of the redo stack and calls its Do method.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICommandDispatcher.PeekUndo(System.Int32)">
            <summary>
            Returns a command from the undo buffer based on position.
            </summary>
            <returns>Command at the given offset in the undo buffer.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICommandDispatcher.PeekRedo(System.Int32)">
            <summary>
            Returns a command from the redo buffer based on position.
            </summary>
            <returns>Command at the given offset in the redo buffer.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICommandDispatcher.ClearHistory">
            <summary>
            Removes all commands from the undo and redo buffers.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ICommandDispatcher.MaxHistory">
            <summary>
            Maximum number of commands that can be stored in the undo and
            redo buffers.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ICommandDispatcher.UndoCount">
            <summary>
            Current number of commands in the undo buffer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ICommandDispatcher.RedoCount">
            <summary>
            Current number of commands in the redo buffer.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CreateFigureCmd">
            <summary>
            This command creates a <see cref="T:Syncfusion.Windows.Forms.Diagram.Figure"/>
            node and fills it with the GraphicsPaths from the list of nodes bound
            to the command.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Figure"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CreateFigureCmd.figure">
            <summary>
            Figure created when the command is executed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CreateFigureCmd.figureParent">
            <summary>
            Composite node the figure is added to.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CreateFigureCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CreateFigureCmd.Do(System.Object)">
            <summary>
            Creates a figure and fills it with the graphics from the list of nodes
            attached to the command.
            </summary>
            <param name="cmdTarget">Parent node that will contain the new figure.</param>
            <returns>True if successful, otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CreateFigureCmd.Undo">
            <summary>
            Destroys the figure created by executing the command.
            </summary>
            <returns>True if successful, otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CreateFigureCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CreateFigureCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DeleteVertexCmd">
            <summary>
            Deletes a vertex from a node.
            </summary>
            <remarks>
            This command deletes a vertex from the given node. The node must
            support the IPoints interface.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SingleNodeCmd">
            <summary>
            Base class for commands that operate on a single node.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Windows.Forms.Diagram.SingleNodeCmd.Node"/>
            property contains the node that is affected by the command.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICommand"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SingleNodeCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SingleNodeCmd.#ctor(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Construct a SingleNodeCmd given a node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SingleNodeCmd.Do(System.Object)">
            <summary>
            Execute the command.
            </summary>
            <param name="cmdTarget">Target of the command.</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SingleNodeCmd.Undo">
            <summary>
            Reverse the affects of the command.
            </summary>
            <returns>True if successful, otherwise False.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SingleNodeCmd.node">
            <summary>
            Node that the command operates on.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SingleNodeCmd.nodeIdx">
            <summary>
            Index of the node within its parent container.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SingleNodeCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SingleNodeCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SingleNodeCmd.Node">
            <summary>
            Node that the command operates on.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SingleNodeCmd.NodeIndex">
            <summary>
            Zero-based index of the node within its parent container.
            </summary>
            <remarks>
            This property can be used by the derived class to keep track of the
            index position of the node for the purpose of implementing Undo.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DeleteVertexCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DeleteVertexCmd.#ctor(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Constructs a DeleteVertexCmd given a node.
            </summary>
            <param name="node">Node to apply command to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DeleteVertexCmd.#ctor(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Constructs a DeleteVertexCmd given a node and a vertex index.
            </summary>
            <param name="node">Node to apply command to.</param>
            <param name="vertexIdx">Zero-based index of vertex to delete.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DeleteVertexCmd.Do(System.Object)">
            <summary>
            Deletes the specified vertex from the node.
            </summary>
            <param name="cmdTarget">Unused</param>
            <returns>True if successful, otherwise False.</returns>
            <remarks>
            This method gets the IPoints interface from the node and
            calls <see cref="M:Syncfusion.Windows.Forms.Diagram.IPoints.RemovePoint(System.Int32)"/>
            to remove the vertex.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DeleteVertexCmd.Undo">
            <summary>
            Reverses a delete vertex command.
            </summary>
            <returns>True if successful, otherwise False.</returns>
            <remarks>
            This method inserts the vertex back into the object.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DeleteVertexCmd.vertexIdx">
            <summary>
            Zero-based index of vertex to delete.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DeleteVertexCmd.ptValue">
            <summary>
            Value of vertex deleted - saved for undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DeleteVertexCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DeleteVertexCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DeleteVertexCmd.Vertex">
            <summary>
            Zero-based index of vertex to delete.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.GroupCmd">
            <summary>
            This command creates a <see cref="T:Syncfusion.Windows.Forms.Diagram.Group"/>
            node and populates it with the list of nodes attached to the command.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Group"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GroupCmd.group">
            <summary>
            Group created when the command is executed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GroupCmd.groupParent">
            <summary>
            Composite node the group is added to.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GroupCmd.parentMap">
            <summary>
            Contains map of children to their previous parents - for
            implementing undo.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GroupCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GroupCmd.Do(System.Object)">
            <summary>
            Creates a group and populates it with the list of nodes attached to
            the command.
            </summary>
            <param name="cmdTarget">Parent node that will contain the new group.</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GroupCmd.Undo">
            <summary>
            Destroys the group created by executing the command and restores
            the nodes to their original parent.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GroupCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GroupCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd">
            <summary>
            This command adds one or more nodes into a target node.
            </summary>
            <remarks>
            The nodes to be added are specified by the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Nodes"/>
            property. The parent node to which the nodes are added is specified by
            the cmdTarget parameter of the Execute method. If the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd.Location"/>
            property is set, the nodes will be moved to the specified location.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd.Do(System.Object)">
            <summary>
            Inserts the nodes into the given parent node.
            </summary>
            <param name="cmdTarget">Parent node to add the nodes to.</param>
            <returns>True if successful, otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd.Undo">
            <summary>
            Reverses the affects of executing an insert nodes command.
            </summary>
            <returns>True if successful, otherwise False.</returns>
            <remarks>
            Removes the nodes from the parent they were added to by the
            Execute method.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd.Location">
            <summary>
            The location at which to add the nodes.
            </summary>
            <remarks>
            If this property is set, the nodes are moved to this location
            after they are added to the parent. If this property is not set,
            then the location of the nodes is unaffected.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd.Offset">
            <summary>
            Relative offset at which to add the nodes.
            </summary>
            <remarks>
            If this property is set, the nodes are translated by this value
            after they are added to the parent. If this property is not set,
            then the offset of the nodes is unaffected.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd.LayerName">
            <summary>
            Name of layer in which to insert the nodes.
            </summary>
            <remarks>
            <para>
            This property is relevant only when the command target parameter passed
            to the <see cref="M:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd.Do(System.Object)"/>
            method is a <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/> object.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd">
            <summary>
            Inserts a vertex into a node.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Windows.Forms.Diagram.SingleNodeCmd.Node"/>
            property contains the node that the vertex will be added to. The
            node must support the IPoints interface.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd.#ctor(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Constructs an InsertVertexCmd object given a node.
            </summary>
            <param name="node">Node receiving the new vertex.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd.#ctor(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Drawing.PointF)">
            <summary>
            Constructs an InsertVertexCmd object given a node and a vertex.
            </summary>
            <param name="node">Node receiving the new vertex.</param>
            <param name="vertexIdx">Index position of vertex to insert.</param>
            <param name="point">Value of vertex to insert.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd.#ctor(Syncfusion.Windows.Forms.Diagram.INode,System.Drawing.PointF)">
            <summary>
            Constructs an InsertVertexCmd object given a node and a vertex.
            </summary>
            <param name="node">Node receiving the new vertex.</param>
            <param name="point">Value of vertex to insert.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd.Do(System.Object)">
            <summary>
            Inserts the specified vertex into the node.
            </summary>
            <param name="cmdTarget">Unused.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd.Undo">
            <summary>
            Removes the vertex that was added by the Execute method.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd.vertexIdx">
            <summary>
            Index of the vertex inserted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd.point">
            <summary>
            Value of the vertex.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd.Vertex">
            <summary>
            Zero-based index position of the vertex inserted.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd.Point">
            <summary>
            Value of the vertex to insert.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LinkCmd">
            <summary>
            Creates a Link object and connects it to two symbols.
            </summary>
            <remarks>
            <para>
            This command creates a new link and adds it to the diagram. It then
            creates a connection between the tail port of the link and the port
            specified by the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.SourcePort"/>
            property. Next, it creates a connection between the head port of
            the link and the port specified by the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.TargetPort"/>
            property. The SourcePort and TargetPort are allowed to be NULL. If
            the SourcePort is NULL, then no connection will be created for the
            tail port of the link. If the TargetPort is NULL, then no connection
            will be created for the head port of the link.
            </para>
            <para>
            Creation of the link can be controlled by setting the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.LinkFactory"/>
            property, which is a delegate that is invoked when the command
            needs to create the link. The LinkFactory can be used to create
            links containing different shapes and properties. It can also be
            used to create objects derived from the Link class. The default
            LinkFactory creates an object of type
            Syncfusion.Windows.Forms.Diagram.Link containing a polyline.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Link"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkCmd.#ctor(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port,System.Drawing.PointF[])">
            <summary>
            Construct a LinkCmd object given two ports and an array of points.
            </summary>
            <param name="sourcePort">Port to connect to the tail of the link.</param>
            <param name="targetPort">Port to connect to the head of the link.</param>
            <param name="pts">Array of points to create the link with.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkCmd.Do(System.Object)">
            <summary>
            Creates a Link object and connects the tail port and head
            port of the link.
            </summary>
            <param name="cmdTarget">Parent node to add the link to.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            If the <see cref="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.Link"/>
            property is NULL when this method is called, then a new Link object
            is created by invoking the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.LinkFactory"/>
            delegate. The Link object is then added to the node passed in the
            cmdTarget parameter. Next, the tail of the link is connected to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.SourcePort"/>
            and the head of the link is connected to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.TargetPort"/>.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.LinkFactory"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkCmd.Undo">
            <summary>
            Removes the Link object from the diagram and disconnects it
            from the symbols.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkCmd.DefaultLinkFactory(System.Drawing.PointF[])">
            <summary>
            Creates a Link object and loads it with the array of points.
            </summary>
            <param name="pts">Array of points to add to link.</param>
            <returns>Link object.</returns>
            <remarks>
            The Link object created contains a PolyLine shape.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.SourcePort">
            <summary>
            Port on symbol to connect the tail port of the link to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.TargetPort">
            <summary>
            Port on symbol to connect the head port of the link to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.Link">
            <summary>
            The Link object to add to the diagram.
            </summary>
            <remarks>
            If this property is NULL when the command is executed, then the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.LinkFactory"/>
            is used to create a Link object.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.LinkFactory">
            <summary>
            Delegate that is called to create the Link object.
            </summary>
            <remarks>
            This property allows the caller to plug in a function that creates
            and configures the Link.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkCmd.Points">
            <summary>
            Array of points to add to the Link object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MacroCmd">
            <summary>
            List of commands that are bundled into a single command.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MacroCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MacroCmd.Do(System.Object)">
            <summary>
            Executes all commands in the macro.
            </summary>
            <param name="cmdTarget">Command target object.</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MacroCmd.Undo">
            <summary>
            Reverses the command.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MacroCmd.AddCommand(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Add a command to the macro.
            </summary>
            <param name="cmd">Command to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MacroCmd.Clear">
            <summary>
            Removes all commands from the macro.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MacroCmd.cmds">
            <summary>
            List of commands to execute.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MacroCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MacroCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MoveCmd">
            <summary>
            Moves one or more nodes by a specified X and Y offset.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveCmd.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a MoveCmd object given an X and Y offset.
            </summary>
            <param name="dx">Distance to move the nodes in the X direction.</param>
            <param name="dy">Distance to move the nodes in the Y direction.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveCmd.Do(System.Object)">
            <summary>
            Moves the collection of nodes by the offsets specified in the
            X and Y properties.
            </summary>
            <param name="cmdTarget">Unused.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            The node must support the ITransform interface. The
            ITransform.Translate method is called on each node.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveCmd.Undo">
            <summary>
            Moves the nodes back to their original positions.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveCmd.X">
            <summary>
            Distance to move the nodes in the X direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveCmd.Y">
            <summary>
            Distance to move the nodes in the Y direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd">
            <summary>
            Moves either the head port or tail port of a link and optionally
            connects it to another symbol.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Link"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd.Do(System.Object)">
            <summary>
            Moves the port on the link and optionally reconnects to a new
            port.
            </summary>
            <param name="cmdTarget">Unused.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            First, any existing connections on the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd.LinkPort"/>
            are removed. Next, if the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd.Points"/>
            property is not NULL, it is used to update the link's vertices. And
            finally, the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd.LinkPort"/>
            is connected to the 
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd.TargetPort"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd.Undo">
            <summary>
            Restores the Link object to the state it was in before the
            command was executed.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd.Link">
            <summary>
            Link to be updated.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd.LinkPort">
            <summary>
            Port on the link that will be moved.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd.TargetPort">
            <summary>
            Port to connect the LinkPort to.
            </summary>
            <remarks>
            If this property is NULL, no connection is made on the LinkPort.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd.Points">
            <summary>
            Points to assign to the link.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MoveVertexCmd">
            <summary>
            Moves a vertex on a node by a specified X and Y offset.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveVertexCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveVertexCmd.#ctor(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Constructs a MoveVertexCmd object given a node.
            </summary>
            <param name="node">Node affected by command.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveVertexCmd.#ctor(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Single,System.Single)">
            <summary>
            Constructs a MoveVertexCmd object given a node, vertex, and
            offset values.
            </summary>
            <param name="node">Node affected by command.</param>
            <param name="vertexIdx">Zero-based index of vertex to move.</param>
            <param name="dx">Distance to move vertex in X direction.</param>
            <param name="dy">Distance to move vertex in Y direction.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveVertexCmd.Do(System.Object)">
            <summary>
            Moves the vertex of the node by the specified amount.
            </summary>
            <param name="cmdTarget">Unused.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            The node must support the IPoints interface. The IPoints.SetPoint
            method is used to move the point by the specified offset.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveVertexCmd.Undo">
            <summary>
            Moves the vertex back to the position it was in before the
            command was executed.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveVertexCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveVertexCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveVertexCmd.Vertex">
            <summary>
            Zero-based index of vertex to move.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveVertexCmd.X">
            <summary>
            Distance to move vertex in the X direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveVertexCmd.Y">
            <summary>
            Distance to move vertex in the Y direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RemoveNodesCmd">
            <summary>
            Removes one or more nodes from the diagram.
            </summary>
            <remarks>
            The nodes to be removed are specified in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Nodes"/>
            property.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.INode"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RemoveNodesCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RemoveNodesCmd.Do(System.Object)">
            <summary>
            Removes the specified nodes from the diagram.
            </summary>
            <param name="cmdTarget">Parent node to remove the nodes from.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            The nodes to be removed are specified in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Nodes"/>.
            The cmdTarget parameter must implement the ICompositeNode interface.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RemoveNodesCmd.Undo">
            <summary>
            Adds the nodes that were removed by executing
            the command back into the diagram.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RemoveNodesCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RemoveNodesCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ResizeCmd">
            <summary>
            Resizes one or more nodes by a specified X and Y amount relative to a
            bounding box anchor point.
            </summary>
            <remarks>
            <para>
            The nodes to be resized are specified in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Nodes"/>
            property.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ResizeCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ResizeCmd.#ctor(System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.BoxPosition)">
            <summary>
            Construct a ResizeCmd object given the offset width and height and
            the handle position.
            </summary>
            <param name="offsetWidth">Amount to resize along the X axis.</param>
            <param name="offsetHeight">Amount to resize along the Y axis.</param>
            <param name="posHandle">
            Position of handle on bounding box that serves as the anchor point.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ResizeCmd.Do(System.Object)">
            <summary>
            Resizes the referenced nodes by the given X and Y amount.
            </summary>
            <param name="cmdTarget">Not used.</param>
            <returns>True if at least one node was successfully resized; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ResizeCmd.Undo">
            <summary>
            Restores the nodes to their original size.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ResizeCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ResizeCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ResizeCmd.Anchor">
            <summary>
            Anchor point on bounding box that resize operation is relative to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ResizeCmd.OffsetWidth">
            <summary>
            Number of logical units to resize on the X axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ResizeCmd.OffsetHeight">
            <summary>
            Number of logical units to resize on the Y axis.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RotateCmd">
            <summary>
            Rotates one or more nodes by a specified angle.
            </summary>
            <remarks>
            <para>
            The nodes to be rotated are specified in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Nodes"/>
            property. Each node in the Nodes property is rotated by the number of
            degrees specified in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.RotateCmd.Degrees"/>
            property.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotateCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotateCmd.Do(System.Object)">
            <summary>
            Rotates the nodes referenced by the command by the specified angle.
            </summary>
            <param name="cmdTarget">Not used.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            <para>
            This method iterates through each node in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Nodes"/>
            collection and rotates it by the angle specified by the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.RotateCmd.Degrees"/>
            property.
            </para>
            <para>
            This method returns True if at least one node is successfully rotated.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotateCmd.Undo">
            <summary>
            Restores the nodes rotated by this command to their original angle.
            </summary>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            <para>
            This method returns True if at least one node is successfully rotated
            back to its original angle.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RotateCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RotateCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RotateCmd.Radians">
            <summary>
            Angle to rotate the nodes in radians.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RotateCmd.Degrees">
            <summary>
            Angle to rotate the nodes in degrees.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ScaleCmd">
            <summary>
            Scale one or more nodes by a specified X and Y ratio.
            </summary>
            <remarks>
            The nodes to be scaled are specified in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Nodes"/>
            property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScaleCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScaleCmd.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="sx"></param>
            <param name="sy"></param>
            <summary>
            Construct a ScaleCmd object given the X and Y axis ratios to scale by.
            </summary>
            <param name="sx">Amount to scale along the X axis.</param>
            <param name="sy">Amount to scale along the Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScaleCmd.Do(System.Object)">
            <summary>
            Scales the node(s) by the given <see cref="P:Syncfusion.Windows.Forms.Diagram.ScaleCmd.ScaleX"/> and <see cref="P:Syncfusion.Windows.Forms.Diagram.ScaleCmd.ScaleY"/> values.
            </summary>
            <param name="cmdTarget">Not used.</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScaleCmd.Undo">
            <summary>
            Restores the node(s) to their original scale ratios.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ScaleCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ScaleCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ScaleCmd.ScaleX">
            <summary>
            The scale ratio along the X axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ScaleCmd.ScaleY">
            <summary>
            The scale ratio along the Y axis.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd">
            <summary>
            Sets the value of a property in one or more nodes.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.#ctor(System.String,System.Object)">
            <summary>
            Constructs a SetPropertyCmd object given a property name and value.
            </summary>
            <param name="propertyName">Name of property to assign value to.</param>
            <param name="propertyValue">Value to assign to the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.Do(System.Object)">
            <summary>
            Sets the value of the property in the collection of nodes.
            </summary>
            <param name="cmdTarget">Unused.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            The node must support the IPropertyContainer interface.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.Undo">
            <summary>
            Restores the original property values.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.PropertyName">
            <summary>
            Name of the property to set.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.PropertyValue">
            <summary>
            Value to assign to the property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SetSizeCmd">
            <summary>
            Sets the width and height of the given nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetSizeCmd.#ctor(System.Drawing.SizeF)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetSizeCmd.Do(System.Object)">
            <summary>
            
            </summary>
            <param name="cmdTarget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetSizeCmd.Undo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SetSizeCmd.undoVerbs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SetSizeCmd.nodeSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetSizeCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetSizeCmd.Size">
            <summary>
            Size to set nodes to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetSizeCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SetWidthCmd">
            <summary>
            Sets the width of the given nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetWidthCmd.#ctor(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetWidthCmd.Do(System.Object)">
            <summary>
            
            </summary>
            <param name="cmdTarget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetWidthCmd.Undo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SetWidthCmd.undoVerbs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SetWidthCmd.width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetWidthCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetWidthCmd.Width">
            <summary>
            Width to set nodes to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetWidthCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SetHeightCmd">
            <summary>
            Sets the height of the given nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetHeightCmd.#ctor(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetHeightCmd.Do(System.Object)">
            <summary>
            
            </summary>
            <param name="cmdTarget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetHeightCmd.Undo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SetHeightCmd.undoVerbs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SetHeightCmd.height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetHeightCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetHeightCmd.Height">
            <summary>
            Width to set nodes to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetHeightCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SetVertexCmd">
            <summary>
            Sets the value of a vertex on a node.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetVertexCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetVertexCmd.#ctor(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Constructs a SetVertexCmd object given a node.
            </summary>
            <param name="node">Node affected by command.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetVertexCmd.#ctor(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Drawing.PointF)">
            <summary>
            Constructs a SetVertexCmd object given a node, vertex index, and
            point.
            </summary>
            <param name="node">Node affected by command.</param>
            <param name="vertexIdx">Zero-based index of vertex to move.</param>
            <param name="location">Value to assign to vertex.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetVertexCmd.Do(System.Object)">
            <summary>
            Assign the value to the vertex of the node.
            </summary>
            <param name="cmdTarget">Unused.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            The node must support the IPoints interface. The IPoints.SetPoint
            method is used to set the point to the specified value.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetVertexCmd.Undo">
            <summary>
            Moves the vertex back to the location it was in before the
            command was executed.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetVertexCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetVertexCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetVertexCmd.Vertex">
            <summary>
            Zero-based index of vertex to assign the value to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetVertexCmd.Location">
            <summary>
            Value to assign to the vertex.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SpacingDirection">
            <summary>
            Used to indicate the direction for a spacing command.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SpacingDirection.Across">
            <summary>
            Position nodes across the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SpacingDirection.Down">
            <summary>
            Position nodes down the page.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SpacingCmd">
            <summary>
            Evenly space two or more nodes either down or across the page.
            </summary>
            <remarks>
            The nodes to be spaced are specified in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Nodes"/>
            property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SpacingCmd.#ctor(Syncfusion.Windows.Forms.Diagram.SpacingDirection)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SpacingCmd.Do(System.Object)">
            <summary>
            
            </summary>
            <param name="cmdTarget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SpacingCmd.Undo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SpacingCmd.dir">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SpacingCmd.undoVerbs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SpacingCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SpacingCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports Undo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TextFormatCmd">
            <summary>
            Base class for text formatting commands.
            </summary>
            <remarks>
            <para>
            This is the base class for a series of text formatting commands that
            modify the font style and alignment of text objects. The
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.FormattingValue"/>
            property contains the value to be applied to the text object. Each derived
            text formatting command class determines how the FormattingValue is applied
            to the text object.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.TextFormatter"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.#ctor(System.Object)">
            <summary>
            Construct a text formatting command with the specified value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.Do(System.Object)">
            <summary>
            Applies the text formatting value to the text nodes attached to the command.
            </summary>
            <param name="cmdTarget">Unused.</param>
            <returns>True if formatting applied to at least one node; otherwise False.</returns>
            <remarks>
            <para>
            This method iterates through each node attached to the command and passes
            it to the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.FormatNode(Syncfusion.Windows.Forms.Diagram.INode,System.Object)"/>
            method, which is implemented by the derived text formatting command
            classes.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.Undo">
            <summary>
            Restores the original text formatting to each node attached to the command.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.FormatNode(Syncfusion.Windows.Forms.Diagram.INode,System.Object)">
            <summary>
            Applies text formatting value to the given node.
            </summary>
            <param name="node">Node to format.</param>
            <param name="value">Value to assign to the node.</param>
            <returns>Previous value of formatting property.</returns>
            <remarks>
            <para>
            Each derived text formatting command class must implement
            this method.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports Undo.
            </summary>
            <remarks>
            <para>
            All text formatting commands support Undo.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.FormattingValue">
            <summary>
            Value to assign to text formatting property.
            </summary>
            <remarks>
            <para>
            This property is interpreted by the text formatting command
            classes derived from this base class.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BoldTextCmd">
            <summary>
            Sets the value of the Bold text property.
            </summary>
            <remarks>
            <para>
            This command applies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.FormattingValue"/>
            to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Bold"/>
            property of the text object's FontStyle.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FontStyle"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoldTextCmd.#ctor(System.Boolean)">
            <summary>
            Construct a BoldTextCmd with the given value.
            </summary>
            <param name="formattingValue">Value to assign to the Bold property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoldTextCmd.FormatNode(Syncfusion.Windows.Forms.Diagram.INode,System.Object)">
            <summary>
            Applies formatting value to the given node.
            </summary>
            <param name="node">Node to format.</param>
            <param name="value">Value to assign to the node.</param>
            <returns>Previous value of formatting property.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ItalicTextCmd">
            <summary>
            Sets the value of the Italic text property.
            </summary>
            <remarks>
            <para>
            This command applies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.FormattingValue"/>
            to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Italic"/>
            property of the text object's FontStyle.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FontStyle"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ItalicTextCmd.#ctor(System.Boolean)">
            <summary>
            Construct an ItalicTextCmd with the given value.
            </summary>
            <param name="formattingValue">Value to assign to the Italic property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ItalicTextCmd.FormatNode(Syncfusion.Windows.Forms.Diagram.INode,System.Object)">
            <summary>
            Applies formatting value to the given node.
            </summary>
            <param name="node">Node to format.</param>
            <param name="value">Value to assign to the node.</param>
            <returns>Previous value of formatting property.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.UnderlineTextCmd">
            <summary>
            Sets the value of the Underline text property.
            </summary>
            <remarks>
            <para>
            This command applies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.FormattingValue"/>
            to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Underline"/>
            property of the text object's FontStyle.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FontStyle"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UnderlineTextCmd.#ctor(System.Boolean)">
            <summary>
            Construct an UnderlineTextCmd with the given value.
            </summary>
            <param name="formattingValue">Value to assign to the Underline property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UnderlineTextCmd.FormatNode(Syncfusion.Windows.Forms.Diagram.INode,System.Object)">
            <summary>
            Applies formatting value to the given node.
            </summary>
            <param name="node">Node to format.</param>
            <param name="value">Value to assign to the node.</param>
            <returns>Previous value of formatting property.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.StrikeoutTextCmd">
            <summary>
            Sets the value of the Strikeout text property.
            </summary>
            <remarks>
            <para>
            This command applies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.FormattingValue"/>
            to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Strikeout"/>
            property of the text object's FontStyle.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FontStyle"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.StrikeoutTextCmd.#ctor(System.Boolean)">
            <summary>
            Construct a StrikeoutTextCmd with the given value.
            </summary>
            <param name="formattingValue">Value to assign to the Strikeout property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.StrikeoutTextCmd.FormatNode(Syncfusion.Windows.Forms.Diagram.INode,System.Object)">
            <summary>
            Applies formatting value to the given node.
            </summary>
            <param name="node">Node to format.</param>
            <param name="value">Value to assign to the node.</param>
            <returns>Previous value of formatting property.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FontFamilyCmd">
            <summary>
            Sets the value of the font family.
            </summary>
            <remarks>
            <para>
            This command applies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.FormattingValue"/>
            to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Family"/>
            property of the text object's FontStyle.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FontStyle"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontFamilyCmd.#ctor(System.String)">
            <summary>
            Construct a FontFamilyCmd with the given value.
            </summary>
            <param name="formattingValue">Value to assign to the font family property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontFamilyCmd.FormatNode(Syncfusion.Windows.Forms.Diagram.INode,System.Object)">
            <summary>
            Applies formatting value to the given node.
            </summary>
            <param name="node">Node to format.</param>
            <param name="value">Value to assign to the node.</param>
            <returns>Previous value of formatting property.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PointSizeCmd">
            <summary>
            Sets the value of the font family.
            </summary>
            <remarks>
            <para>
            This command applies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.FormattingValue"/>
            to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.FontStyle.PointSize"/>
            property of the text object's FontStyle.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FontStyle"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PointSizeCmd.#ctor(System.Single)">
            <summary>
            Construct a PointSizeCmd with the given value.
            </summary>
            <param name="formattingValue">Value to assign to the point size property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PointSizeCmd.FormatNode(Syncfusion.Windows.Forms.Diagram.INode,System.Object)">
            <summary>
            Applies formatting value to the given node.
            </summary>
            <param name="node">Node to format.</param>
            <param name="value">Value to assign to the node.</param>
            <returns>Previous value of formatting property.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HorizontalTextAlignCmd">
            <summary>
            Sets the horizontal alignment of the text nodes.
            </summary>
            <remarks>
            <para>
            This command applies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.FormattingValue"/>
            to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.HorizontalAlignment"/>
            property of the text object.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextBase"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HorizontalTextAlignCmd.#ctor(System.Drawing.StringAlignment)">
            <summary>
            Construct a PointSizeTextCmd with the given value.
            </summary>
            <param name="formattingValue">Value to assign to the horizontal alignment property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HorizontalTextAlignCmd.FormatNode(Syncfusion.Windows.Forms.Diagram.INode,System.Object)">
            <summary>
            Applies formatting value to the given node.
            </summary>
            <param name="node">Node to format.</param>
            <param name="value">Value to assign to the node.</param>
            <returns>Previous value of formatting property.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TextColorCmd">
            <summary>
            Sets the value of the text color.
            </summary>
            <remarks>
            <para>
            This command applies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextFormatCmd.FormattingValue"/>
            to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Color"/>
            property of the text object's FillStyle.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextColorCmd.#ctor(System.Drawing.Color)">
            <summary>
            Construct a TextColorCmd with the given value.
            </summary>
            <param name="formattingValue">Value to assign to the text color property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextColorCmd.FormatNode(Syncfusion.Windows.Forms.Diagram.INode,System.Object)">
            <summary>
            Applies formatting value to the given node.
            </summary>
            <param name="node">Node to format.</param>
            <param name="value">Value to assign to the node.</param>
            <returns>Previous value of formatting property.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.UngroupCmd">
            <summary>
            Remove nodes from a group and add them to the diagram.
            </summary>
            <remarks>
            <para>The nodes to be ungrouped are specified in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Nodes"/>
            property.</para>
            <para>This command removes the group from the diagram and adds
            all nodes in the group to the group's parent node.</para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.UngroupCmd.parentNode">
            <summary>
            Composite node to which the children of the groups are added.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.UngroupCmd.parentTable">
            <summary>
            Maps each group removed to its original parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.UngroupCmd.groupIndices">
            <summary>
            Preserves the position of the group within its parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.UngroupCmd.childTransforms">
            <summary>
            Preserves the transformation matrix for each child ungrouped.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UngroupCmd.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UngroupCmd.Do(System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="cmdTarget">Node to add the members of the group to.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            <para>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UngroupCmd.Undo">
            <summary>
            Restores the groups that were removed by the command.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.UngroupCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.UngroupCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ZOrderUpdate">
            <summary>
            Specifies relative Z-order movement.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ZOrderUpdate.Front">
            <summary>
            Move to front of Z-order.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ZOrderUpdate.Back">
            <summary>
            Move to back of Z-order.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ZOrderUpdate.Forward">
            <summary>
            Move forward in Z-order by 1.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ZOrderUpdate.Backward">
            <summary>
            Move backward in Z-order by 1.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd">
            <summary>
            Change the Z-order of one or more nodes.
            </summary>
            <remarks>
            <para>Z-order determines the order in which nodes are rendered
            and affects how nodes overlap.</para>
            <para>The nodes to be ungrouped are specified in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.MultipleNodeCmd.Nodes"/>
            property.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZOrderCmd.#ctor(Syncfusion.Windows.Forms.Diagram.ZOrderUpdate)">
            <summary>
            Constructs a ZOrderCmd with the specified update type.
            </summary>
            <param name="updType">Specifies how Z-order will be changed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZOrderCmd.Do(System.Object)">
            <summary>
            Executes the ZOrderCmd.
            </summary>
            <param name="cmdTarget">Not used.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            <para>
            Loops through the nodes attached to the command and changes the Z-order of each
            node. The type of change made to the Z-order is specified by the ZOrderUpdate
            parameter passed in the constructor. The parent of each node must support the
            IZOrderContainer service.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IZOrderContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderUpdate"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZOrderCmd.Undo">
            <summary>
            Restores the Z-order of the attached nodes back to their original position.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ZOrderCmd.Description">
            <summary>
            Short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ZOrderCmd.CanUndo">
            <summary>
            Indicates whether or not the command supports undo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ActivateStyle">
            <summary>
            Specifies an activation style for the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> node type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ActivateStyle.None">
            <summary>
            Specifies that the Control will not be activated.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ActivateStyle.Click">
            <summary>
            Specifies that clicking a ControlNode will activate the Control hosted in it.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ActivateStyle.SelectedClick">
            <summary>
            Specfies that clicking a selected ControlNode will activate the Control hosted in it.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ActivateStyle.DoubleClick">
            <summary>
            Specifies that double clicking a ControlNode will activate the Control hosted in it.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ControlNode">
            <summary>
            The ControlNode class implements a node type that has the capability to host Windows Forms Controls on a diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.INode">
            <summary>
            Interface to a node in a hierarchy or graph of objects.
            </summary>
            <remarks>
            <para>
            A node is a named object in a hieararchical tree structure. Each node
            has a <see cref="P:Syncfusion.Windows.Forms.Diagram.INode.Name"/>
            and a parent. A node's name must is unique within the scope of its
            parent node. The
            <see cref="P:Syncfusion.Windows.Forms.Diagram.INode.FullName"/>
            of a node is unique within the scope of the entire node hieararchy.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.INode.Parent">
            <summary>
            Reference to the composite node this node is a child of.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.INode.Root">
            <summary>
            The root node in the node hieararchy.
            </summary>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.INode.Name">
            <summary>
            Name of the node.
            </summary>
            <remarks>
            Must be unique within the scope of the parent node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.INode.FullName">
            <summary>
            Fully qualified name of the node.
            </summary>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IDraw">
            <summary>
            Interface to objects that render themselves to a Graphics context.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDraw.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the object onto a graphics context.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IBounds2DF">
            <summary>
            Interface to objects with two-dimensional, floating point bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IBounds2DF.Bounds">
            <summary>
            Position and size of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IBounds2DF.X">
            <summary>
            X-coordinate of the location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IBounds2DF.Y">
            <summary>
            Y-coordinate of the location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IBounds2DF.Width">
            <summary>
            Width of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IBounds2DF.Height">
            <summary>
            Height of the object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ILocalBounds2DF">
            <summary>
            Interface to objects with two-dimensional, floating point bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILocalBounds2DF.Bounds">
            <summary>
            Position and size of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILocalBounds2DF.X">
            <summary>
            X-coordinate of the location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILocalBounds2DF.Y">
            <summary>
            Y-coordinate of the location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILocalBounds2DF.Width">
            <summary>
            Width of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILocalBounds2DF.Height">
            <summary>
            Height of the object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ITransform">
            <summary>
            Interface to nodes that can translate, scale, and rotate.
            </summary>
            <remarks>
            <para>
            This interface provides methods for transforming nodes via a
            transformation matrix.
            </para>
            <seealso cref="F:Syncfusion.Windows.Forms.Diagram.Global.MatrixStack"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ITransform.Translate(System.Single,System.Single)">
            <summary>
            Moves the node by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ITransform.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the node a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="degrees">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ITransform.Rotate(System.Single)">
            <summary>
            Rotates the node a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ITransform.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Scales the node about a specified anchor point by a given ratio.
            </summary>
            <param name="ptAnchor">Fixed point about which to scale.</param>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ITransform.Scale(System.Single,System.Single)">
            <summary>
            Scales the node about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ITransform.LocalTransform">
            <summary>
            Matrix containing local transformations for this node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ITransform.WorldTransform">
            <summary>
            Returns a matrix containing transformations for this node and all of
            its ancestors.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ITransform.ParentTransform">
            <summary>
            Returns a matrix containing the transformations of this node's parent.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IHitTestBounds">
            <summary>
            Interface for performing hit testing on the bounding box of an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IHitTestBounds.ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Graphics context used to hit test bounds.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IHitTestBounds.IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Graphics context used to hit test bounds.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IHitTestBounds.ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Graphics context used to hit test bounds.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IHitTestBounds.IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ILogicalUnitContainer">
            <summary>
            Interface to objects that contain logical units.
            </summary>
            <remarks>
            <para>
            The purpose of this interface is to provide a way to convert logical units
            contained by an object to be converted from one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILogicalUnitContainer.ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILogicalUnitContainer.ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer">
            <summary>
            Late-binding interface for accessing dynamic properties.
            </summary>
            <remarks>
            <para>
            This interface provides access to the properties of an object. There
            are several advantages to using this interface. Code accessing the
            properties of an object do not need to be coupled to the object type;
            it only requires this interface. Objects that support this interface
            have flexibility in how it is implemented. For example, a class can
            support both static (compile-time) properties and dynamic (run-time)
            properties through this interface. Property inheritance is also
            an important feature made possible by this interface.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPropertyContainer.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the container.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            container to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPropertyContainer.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPropertyContainer.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPropertyContainer.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPropertyContainer.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPropertyContainer.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents">
            <summary>
            Provides nodes with a mechanism for forwarding events up the node hierarchy.
            </summary>
            <remarks>
            Nodes that implement this interface can be notified of events and will
            respond by either forwarding the event up the node hierarchy or handling the
            event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.ChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called before a change is made to the collection of child nodes belonging
            to a composite node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.ChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called after a change is made to the collection of child nodes belonging
            to a composite node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of a node changes.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when a node is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when a node is rotated.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when a node is scaled.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Click(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.DoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is double clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.MouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse enters a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.MouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse leaves a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.InsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is inserted into a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.DeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is deleted from a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.MoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.ConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called before the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.ConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called after the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> class with the given bounds.
            </summary>
            <param name="bounds">Rectangle containing the node size and position.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> class with the given child control.
            </summary>
            <param name="assemblyname">The name of the assembly containing the control type.</param>
            <param name="classname">The name of the control type.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.#ctor(Syncfusion.Windows.Forms.Diagram.ControlNode)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">The <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for control nodes.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.GetControlType">
            <summary>
            Gets the Type for the Windows Forms Control hosted by the node.
            </summary>
            <returns>A <see cref="T:System.Type"/> value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the control onto a graphics context.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Translate(System.Single,System.Single)">
            <summary>
            Moves the shape by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
            <remarks>
            Applies a translate operation to the the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the shape a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Rotate(System.Single)">
            <summary>
            Rotates the shape a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Scales the shape by a given ratio along the X and Y axes.
            </summary>
            <param name="ptAnchor">Fixed point about which to scale.</param>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Scale(System.Single,System.Single)">
            <summary>
            Scales the shape about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the shapes's bounding box contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the shapes's bounding box intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the shape's bounding box contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the shapes's bounding box intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the shape.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            shape to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.OnPropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            before a property changes by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the property change by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when the position of the node is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the move by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when the node is rotated.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the rotation by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when the node is scaled.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the scaling by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.OnBoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the rcBounds of the node change.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the change in rcBounds by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IBounds2DF"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ITransform"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.EditStyle"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.BorderStyle"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.CreateStyles">
            <summary>
            Creates style objects for this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.CheckConstrainingRegion">
            <summary>
            Tests to see if the current position of the shape falls within the
            constraining region specified by the parent node.
            </summary>
            <returns>True if position is valid; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.CreateControl">
            <summary>
            Instantiates the child control hosted by this <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.ActivateControl">
            <summary>
            Activates the Windows Forms Control hosted by the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.DeactivateControl">
            <summary>
            Deactivates the Windows Forms Control hosted by the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.strName">
            <summary>
            Name of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.parentNode">
            <summary>
            Reference to parent node in the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.matrix">
            <summary>
            Local transformation matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.rcBounds">
            <summary>
            The rcBounds of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.propertyValues">
            <summary>
            Hashtable containing property name / value pairs.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.bdrStyle">
            <summary>
            Properties for drawing lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.edtStyle">
            <summary>
            Properties for determining edit capabilities.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.szOffset">
            <summary>
            The offset used for positioning the Control inside the Node bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.ctrlAssemblyName">
            <summary>
            Name of assembly the control implementation resides in.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.ctrlClassName">
            <summary>
            Class name of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.ctrlType">
            <summary>
            Cached type information for the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.childControl">
            <summary>
            The Windows Forms Control hosted by the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.parentCtrl">
            <summary>
            The parent Windows Forms Diagram Control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Visible">
            <summary>
            Determines if the shape is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.ControlAssemblyName">
            <summary>
            Gets or sets the name of the assembly containing the definition for the Control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.ControlClassName">
            <summary>
            Gets or sets the class name for the Control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.ControlType">
            <summary>
            The <see cref="T:System.Type"/> of the Control.
            </summary>		
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Control">
            <summary>
            Gets or sets the Windows Forms Control contained by the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.ActivateStyle">
            <summary>
            Gets or sets the activation mode for the Control.		
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Diagram.ActivateStyle"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.BorderStyle">
            <summary>
            Properties for drawing the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.EditStyle">
            <summary>
            Properties for determining how the text object can be edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Parent">
            <summary>
            Reference to the composite node this node is a child of.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Root">
            <summary>
            The root node in the node hieararchy.
            </summary>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Name">
            <summary>
            Name of the node.
            </summary>
            <remarks>
            Must be unique within the scope of the parent node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.FullName">
            <summary>
            Fully qualified name of the node.
            </summary>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Bounds">
            <summary>
            The control's bounding box.
            </summary>
            <remarks>
            Always returns the rcBounds of the control in world coordinates, regardless
            of what is on the matrix stack at the time of the call.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.X">
            <summary>
            X-coordinate of the control's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Y">
            <summary>
            Y-coordinate of the control's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Width">
            <summary>
            Width of the control.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Height">
            <summary>
            Height of the control.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Offset">
            <summary>
            Number of logical units to offset the Control from the edges of the Node.
            </summary>
            <remarks>
            <para>
            The Control bounds will be equal to the Node bounds deflated by the specfied offset.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Bounds">
            <summary>
            Bounding box of the control node in local coordinates.
            </summary>
            <remarks>
            The value returned depends on the contents of the matrix stack. If the
            matrix stack is empty, then the value returned is in local coordinates.
            This method is generally used by functions that recursively traverse
            the node hierarchy, pushing and popping the matrix stack as they go.
            <seealso cref="F:Syncfusion.Windows.Forms.Diagram.Global.MatrixStack"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Bounds"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#X">
            <summary>
            X-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Y">
            <summary>
            Y-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Width">
            <summary>
            Width of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Height">
            <summary>
            Height of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.LocalTransform">
            <summary>
            Matrix containing transformations for this node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.WorldTransform">
            <summary>
            Returns a matrix containing transformations for this node and all of
            its ancestors.
            </summary>
            <remarks>
            Chains up the node hierarchy and builds a transformation matrix containing
            all transformations that apply to this node in the world coordinate space.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.ParentTransform">
            <summary>
            Returns a matrix containing the transformations of this node's parent.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorEditor">
            <summary>
            Property editor for line endpoints.
            </summary>
            <remarks>
            This custom property editor displays a combo box that allows
            the user to select from a list of endpoints.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorListBox"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorListBox">
            <summary>
            This class implements a list box that contains a list of line
            decorators that the user can choose from.
            </summary>
            <remarks>
            The items in the list are an actual image of the endpoints that
            the user can choose. Each item in the list is associated with
            a System.Type which must be a EndPointDecorator derived class.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorEditor"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorListBox.#ctor(Syncfusion.Windows.Forms.Diagram.EndPointDecoratorPalette)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorListBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorListBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorListBox.SelectedModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorListBox.SelectedModelName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LabelNameEditor">
            <summary>
            Property editor for default label name in a symbol.
            </summary>
            <remarks>
            This custom property editor displays a combo box filled with the
            collection of labels available in a symbol.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelNameEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelNameEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayerNameEditor">
            <summary>
            Property editor for default layer name in a model.
            </summary>
            <remarks>
            This custom property editor displays a combo box filled with the
            collection of layers available in a model.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerNameEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerNameEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LinkLabelCollectionEditor">
            <summary>
            Custom property editor for labels on a link object.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Link"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkLabelCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="collectionType"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkLabelCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LinkLabelCollectionEditor.newItemTypes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SymbolLabelCollectionEditor">
            <summary>
            Custom property editor for labels on a Symbol object.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Symbol"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolLabelCollectionEditor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="collectionType"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolLabelCollectionEditor.CreateNewItemTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolLabelCollectionEditor.newItemTypes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BitmapNode">
            <summary>
            Stores and renders a bitmap image.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ImageNode">
            <summary>
            Base class for image nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IHitTestRegion">
            <summary>
            Interface for performing hit testing on the region of an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IHitTestRegion.ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's region contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IHitTestRegion.IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's region intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IHitTestRegion.ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's region contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IHitTestRegion.IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.#ctor(Syncfusion.Windows.Forms.Diagram.ImageNode)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">ImageNode to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for images.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the image onto a System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the image's bounding box contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the image's bounding box intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs, otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the image's bounding box contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the image's bounding box intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the image's bounding box contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the image's bounding box intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the image's bounding box contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the image's region intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the image.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            image to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Translate(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Currently not implemented for bitmaps.
            </summary>
            <param name="ptAnchor"></param>
            <param name="degrees"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Rotate(System.Single)">
            <summary>
            Currently not implemented for bitmaps.
            </summary>
            <param name="degrees"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Currently not implemented for bitmaps.
            </summary>
            <param name="ptAnchor"></param>
            <param name="sx"></param>
            <param name="sy"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Scale(System.Single,System.Single)">
            <summary>
            Scales the node about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called before the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called after the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Click(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#InsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called before the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called after the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.OnPropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            before a property changes by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Parent"/>
            of the property change by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when the position of the image is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the move by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when the image is rotated.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the rotation by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when the image is scaled.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the scaling by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.OnBoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of the node change.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Parent"/>
            of the change in bounds by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.OnClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.OnDoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.OnMouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.OnMouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.CheckConstrainingRegion">
            <summary>
            Tests to see if the current position of the shape falls within the
            constraining region specified by the parent node.
            </summary>
            <returns>True if position is valid; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.CreateStyles">
            <summary>
            Creates style objects for this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageNode.GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
              N/A
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ImageNode.name">
            <summary>
            Name of the image node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ImageNode.matrix">
            <summary>
            Transformation matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ImageNode.parent">
            <summary>
            Reference to the parent node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ImageNode.propertyValues">
            <summary>
            Hashtable containing property / value pairs.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ImageNode.lineStyle">
            <summary>
            Properties for drawing lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ImageNode.editStyle">
            <summary>
            Properties for determining edit capabilities.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ImageNode.imageBounds">
            <summary>
            Bounds of the image.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Visible">
            <summary>
            Determines if the shape is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Image">
            <summary>
            Reference to the Image object contained by this node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.GraphicsUnit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Parent">
            <summary>
            Reference to the composite node this node is a child of.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Root">
            <summary>
            The root node in the node hieararchy.
            </summary>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Name">
            <summary>
            Name of the node.
            </summary>
            <remarks>
            Must be unique within the scope of the parent node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.FullName">
            <summary>
            Fully qualified name of the node.
            </summary>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Bounds">
            <summary>
            The image's bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.X">
            <summary>
            X-coordinate of the image's location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Y">
            <summary>
            Y-coordinate of the image's location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Width">
            <summary>
            Width of the image's bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Height">
            <summary>
            Height of the image's bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Bounds">
            <summary>
            Bounding box of the shape in local coordinates.
            </summary>
            <remarks>
            The value returned depends on the contents of the matrix stack. If the
            matrix stack is empty, then the value returned is in local coordinates.
            This method is generally used by functions that recursively traverse
            the node hierarchy, pushing and popping the matrix stack as they go.
            <seealso cref="F:Syncfusion.Windows.Forms.Diagram.Global.MatrixStack"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Bounds"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#X">
            <summary>
            X-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Y">
            <summary>
            Y-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Width">
            <summary>
            Width of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Height">
            <summary>
            Height of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.LocalTransform">
            <summary>
            Matrix containing transformations for this image.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.WorldTransform">
            <summary>
            Returns a matrix containing transformations for this image and all of
            its ancestors.
            </summary>
            <remarks>
            Chains up the node hierarchy and builds a transformation matrix containing
            all transformations that apply to this node in the world coordinate space.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageNode.ParentTransform">
            <summary>
            Returns a matrix containing the transformations of this node's parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor(System.IO.Stream)">
            <summary>
            Construct a BitmapNode from an IO stream.
            </summary>
            <param name="stream">IO stream containing the bitmap.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for bitmaps.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor(System.String)">
            <summary>
            Construct a BitmapNode from a file.
            </summary>
            <param name="filename">Name of file to load bitmap from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor(System.Drawing.Bitmap)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor(System.Drawing.Bitmap,System.Drawing.RectangleF)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="rcBounds"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor(Syncfusion.Windows.Forms.Diagram.BitmapNode)">
            <summary>
            
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BitmapNode.Image">
            <summary>
            Image rendered by the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BitmapNode.GraphicsUnit">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MetafileNode">
            <summary>
            Stores and renders an enhanced metafile image.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor(System.Drawing.Imaging.Metafile)">
            <summary>
            
            </summary>
            <param name="metafile"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            
            </summary>
            <param name="metafile"></param>
            <param name="bounds"></param>
            <param name="grfxUnit"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for bitmaps.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor(Syncfusion.Windows.Forms.Diagram.MetafileNode)">
            <summary>
            
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetafileNode.Image">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetafileNode.GraphicsUnit">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HandleEditMode">
            <summary>
            Modes for interactively editing objects with selection handles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleEditMode.None">
            <summary>
            No edit mode allowed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleEditMode.Resize">
            <summary>
            Resize the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleEditMode.Vertex">
            <summary>
            Edit the object's vertices.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ResizeHandleStyle">
            <summary>
            Specifies how resize handles are to be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ResizeHandleStyle.OutsideBounds">
            <summary>
            Render handles outside the bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ResizeHandleStyle.OverlapBounds">
            <summary>
            Render handles on the bounds.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayoutManager">
            <summary>
            Base class for layout managers.
            </summary>
            <remarks>
            <para>
            This class provides the basic plumbing for layout managers. A layout
            manager is an object that controls the positioning of nodes in a model.
            Each layout manager object is attached to a single model by the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LayoutManager.Model"/>
            property.
            </para>
            <para>
            Layout managers can operate one of two modes: manual or
            auto-update. When the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LayoutManager.AutoLayout"/>
            flag is set to True, the layout manager responds to events in the model
            by automatically repositioning nodes in the model. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.UpdateLayout(System.Object)"/>
            method can be called at any time to reposition the nodes in the model.
            If the AutoLayout flag is False, then UpdateLayout must be called manually
            in order to update the layout of nodes in the model.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Construct a layout manager given a model.
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.UpdateLayout(System.Object)">
            <summary>
            Updates the layout of the nodes in the model.
            </summary>
            <param name="contextInfo">Provides context infomation to help with updating the layout.</param>
            <returns>True if changes were made; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.OnNodeCollectionChanged(System.Object,Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called when nodes are added or removed from the model.
            </summary>
            <param name="sender">Model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.OnNodeBoundsChanged(System.Object,Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of a node changes in the model.
            </summary>
            <param name="sender">Model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.OnNodeMoved(System.Object,Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when one or more nodes are moved.
            </summary>
            <param name="sender">Model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.OnNodeScaled(System.Object,Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when one or more nodes are scaled.
            </summary>
            <param name="sender">Model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.OnNodeRotated(System.Object,Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when one or more nodes in the model are scaled.
            </summary>
            <param name="sender">Model sending the event.</param>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.OnConnectionsChanged(System.Object,Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.OnLayoutUpdated(System.EventArgs)">
            <summary>
            Called after the layout has been updated by the layout manager.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayoutManager.LayoutUpdated">
            <summary>
            Fired after the layout has been updated by the layout manager.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayoutManager.mdl">
            <summary>
            Reference to model and layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayoutManager.autoLayoutFlag">
            <summary>
            Flag indicating if layout is to be updated automatically.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutManager.Model">
            <summary>
            The model attached to this layout manager.
            </summary>
            <remarks>
            <para>
            The model referenced by this property is updated when the
            UpdateLayout method is called.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutManager.AutoLayout">
            <summary>
            Determines if the layout manager automatically updates the layout of the model.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineRouter">
            <summary>
            A line router provides line routing services for a diagram
            model.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.#ctor(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Constructs a line router for the given model.
            </summary>
            <param name="model">Model to attach line router to</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.RouteLine(Syncfusion.Windows.Forms.Diagram.IRoutableLine)">
            <summary>
            Routes the given line.
            </summary>
            <param name="routableLine">Line to route</param>
            <returns>true if changes were made; otherwise false</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.RouteLines(System.String)">
            <summary>
            Route all lines in the given layer.
            </summary>
            <param name="layerName">Name of layer to route lines in</param>
            <returns>true if changes were made; otherwise false</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.RouteAllLines">
            <summary>
            Route all lines in the model.
            </summary>
            <returns>true if changes were made; otherwise false</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.DoRouting">
            <summary>
            Routes all lines currently registered in the obstacle map.
            </summary>
            <returns>true if changes were made; otherwise false</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.FindObstacles(Syncfusion.Windows.Forms.Diagram.IRoutableLine)">
            <summary>
            Find all obstacles that lay on the given routable line.
            </summary>
            <param name="routableLine">Line to find obstacles for</param>
            <returns>Number of obstacles found</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.ClearObstacles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.IsNodeObstacle(Syncfusion.Windows.Forms.Diagram.IRoutableLine,Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Determines if a node should be treated as an obstacle to the
            given routable line.
            </summary>
            <param name="routableLine">routable line to test</param>
            <param name="node">Node to test</param>
            <returns>true if the node should be treated as an obstacle; otherwise false</returns>
            <remarks>
            <para>
            IMPORTANT: This method does not test to see if the node intersects the
            routable line. Its only purpose is to determine whether the given node
            is capable of being an obstacle to the given line. For example, the
            symbols that are connected to a link should never be considered as
            obstacles to the link.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.HookModelEvents">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.UnhookModelEvents">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.OnNodeCollectionChanged(System.Object,Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called when nodes are added or removed from the model.
            </summary>
            <param name="sender">Model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.OnMoveVertex(System.Object,Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.OnConnectionsChangeComplete(System.Object,Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="evtArgs"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRouter.Model">
            <summary>
            Model the line router is attached to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRouter.AutoUpdate">
            <summary>
            Flag indicating whether the line router should automatically
            route lines as changes are made in the model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRouter.ObstacleMap">
            <summary>
            Map of obstacles currently being examined by the line router.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRouter.LineBridgeSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacle">
            <summary>
            Encapsulates information about an obstacle that lies on a
            line segment of a given routable line.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacle.#ctor(Syncfusion.Windows.Forms.Diagram.INode,Syncfusion.Windows.Forms.Diagram.IRoutableLine,System.Int32)">
            <summary>
            Constructs a line routing obstacle.
            </summary>
            <param name="node">Node creating the obstacle</param>
            <param name="routableLine">routable line the obstacle lies on</param>
            <param name="segIdx">Index of the segment the obstacle lies on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacle.GetOrthogonalLineIntersect(System.Single@)">
            <summary>
            Determines if the obstacle is an intersection with an
            orthogonal line and if so, returns the offset of the
            intersection.
            </summary>
            <param name="offset">Receives the offset of the intersection</param>
            <returns>true if the obstacle is an orthogonal line; otherwise false</returns>
            <remarks>
            <para>
            If the obstacle is an orthogonal line, the the offset from
            the first point in the line segment is returned.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacle.GetZOrderDiff(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Returns the difference in Z-order between the obstacle and
            the routable line.
            </summary>
            <param name="mdl">Model containing the node and line</param>
            <returns>
            Positive value if the obstacle is in front of the routable
            line. Negative value if the obstacle is behind the routable
            line.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacle.Node">
            <summary>
            The node that is creating the obstacle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacle.RoutableLine">
            <summary>
            Line on which the obstacle lies.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacle.SegmentIndex">
            <summary>
            Index of the line segment on which the obstacle lies.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacle.LineSegment">
            <summary>
            The line segment the obstacle lies on.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacleMap">
            <summary>
            A collection of line routing obstacles.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacleMap.Clear">
            <summary>
            Removes all obstacles from the map.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacleMap.AddObstacle(Syncfusion.Windows.Forms.Diagram.INode,Syncfusion.Windows.Forms.Diagram.IRoutableLine,System.Int32)">
            <summary>
            Adds an obstacle to the map.
            </summary>
            <param name="node">Node that lies on the routable line</param>
            <param name="routableLine">routable line the obstacle is on</param>
            <param name="segIdx">Zero-based index of the segment on which the obstacle lies</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacleMap.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacleMap.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacleMap.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacleMap.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRoutingObstacleMap.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DefaultLineRouter">
            <summary>
            Basic implementation of a line router.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DefaultLineRouter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DefaultLineRouter.#ctor(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DefaultLineRouter.DoRouting">
            <summary>
            Routes all lines currently registered in the obstacle map.
            </summary>
            <returns>true if changes were made; otherwise false</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IRoutableLine">
            <summary>
            Interface to objects that are lines that can be routed by a
            line router.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IRoutableLine.GetLineSegment(System.Int32)">
            <summary>
            Returns the line segment at the given index position.
            </summary>
            <param name="segIdx">Index of line segment to return</param>
            <returns>Line segment at the given index offset.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IRoutableLine.GetLineSegmentAt(System.Drawing.PointF)">
            <summary>
            Hit tests the object to determine which line segment (if any) intersects
            the given point.
            </summary>
            <param name="pt">Point to test.</param>
            <returns>
            Zero-based index of line segment hit or -1 if the hit test fails.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IRoutableLine.MoveLineSegment(System.Int32,System.Single,System.Single)">
            <summary>
            Moves the line segment by the specified X and Y offsets.
            </summary>
            <param name="segIdx">Index of line segment to move</param>
            <param name="dx">Distance to move the line segment along the X axis</param>
            <param name="dy">Distance to move the line segment along the Y axis</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IRoutableLine.BridgeLineSegment(System.Int32,System.Single,System.Single)">
            <summary>
            Adds a bridge to the specified line segment.
            </summary>
            <param name="segIdx">Zero-based index of line segment to add the bridge to</param>
            <param name="offset">Offset from the beginning of the segment at which to add the bridge</param>
            <param name="size">Size of the bridge to add</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IRoutableLine.IsNodeObstacle(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Tells the line router whether or not the given node should be treated
            as an obstacle.
            </summary>
            <param name="node">Node to test</param>
            <returns>true if the node should be treated as an obstacle; otherwise false</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IRoutableLine.LineSegmentCount">
            <summary>
            Number of line segments in the object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ICommandNotify">
            <summary>
            Notifies that a command that might cause a change in an object's connections collection is being 
            executed. Implementing this interface allows symbols to connect / disconnect their connections 
            depending on the command.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode">
            <summary>
            A composite node is a node that contains children.
            </summary>
            <remarks>
            <para>
            This interface has methods for adding and removing child
            nodes.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.INode"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetChild(System.Int32)">
            <summary>
            Returns the child node at the given index position.
            </summary>
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
            <returns>Child node at the given position or NULL if the index is out of range.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetChildByName(System.String)">
            <summary>
            Returns the child node matching the given name.
            </summary>
            <param name="childName">Name of node to return.</param>
            <returns>Node matching the given name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetChildIndex(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the index position of the given child node.
            </summary>
            <param name="child">Child node to query.</param>
            <returns>Zero-based index into the collection of child nodes.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.AppendChild(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Appends the given node to the collection of child nodes.
            </summary>
            <param name="child">Node to append.</param>
            <returns>
            Zero-based index at which the node was added to the collection or -1 for failure.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.AppendChildren(Syncfusion.Windows.Forms.Diagram.INodeCollection,System.Int32@)">
            <summary>
            Appends the given collection of nodes as child nodes.
            </summary>
            <param name="children">Nodes to append.</param>
            <param name="startIdx">
            Zero-based index at which the first node was added to the collection of child nodes.
            </param>
            <returns>Number of child nodes appended.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.InsertChild(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Insert the given node into the collection of child nodes at a
            specific position.
            </summary>
            <param name="child">Node to insert.</param>
            <param name="childIndex">Zero-based index at which to insert the node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.RemoveChild(System.Int32)">
            <summary>
            Removes the child node at the given position.
            </summary>
            <returns>True if the node was successfully removed; otherwise False.</returns>
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.RemoveAllChildren">
            <summary>
            Removes all child nodes from the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetConstrainingRegion(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the region that the bounds of the given child node is constrained by.
            </summary>
            <param name="child">Child to get constraining region for.</param>
            <returns>Region that constrains the bounds of the given child.</returns>
            <remarks>
            <para>
            This method is used to limit the bounds of a child node to a specified area.
            The node cannot be moved, resized, or rotated beyond the edges of this region.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.CheckConstrainingRegion(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Tests to see if the given node falls within the constraining region
            of the composite node.
            </summary>
            <param name="node">Node to test.</param>
            <returns>
            True if node falls within the constraining region; False if it does
            not.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetChildrenAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Returns all children that are intersected by the given point.
            </summary>
            <param name="childNodes">
            Collection in which to add the children hit by the given point.
            </param>
            <param name="ptWorld">Point to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of child nodes that intersect the given point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetChildrenIntersecting(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Returns all children that intersect the given rectangle.
            </summary>
            <param name="childNodes">
            Collection in which to add the children hit by the given point.
            </param>
            <param name="rcWorld">Rectangle to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of child nodes that intersect the given rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetChildrenContainedBy(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Returns all children inside the given rectangle.
            </summary>
            <param name="childNodes">
            Collection in which to add the children inside the specified rectangle.
            </param>
            <param name="rcWorld">Rectangle to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of child nodes added to the collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetPropertyContainer(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the inherited property container for the given child node.
            </summary>
            <param name="childNode">The child node making the request.</param>
            <returns>Parent property container for the given node.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ICompositeNode.ChildCount">
            <summary>
            The number of child nodes contained by this node.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Controller">
            <summary>
            Processes input events and translates them into actions on the diagram.
            </summary>
            <remarks>
            <para>
            The controller is an object that is responsible for handling input in the
            model-view-controller architecture. The controller receives input events
            and translates them into commands that affect the model and view.
            </para>
            <para>
            The features of a controller are implemented as distinct objects called
            tools. A tool is an object that implements a slice of functionality for
            the controller. Tools can be added to the controller using the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.RegisterTool(Syncfusion.Windows.Forms.Diagram.Tool)"/>
            method in order to customize the behavior of the controller.
            </para>
            <para>
            This class is an abstract base class from which concrete controller
            classes are derived. This class does not does not register any tools.
            Derived controller classes must override the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.Initialize(Syncfusion.Windows.Forms.Diagram.View)"/>
            method in order to register the tools needed by that specific type
            of controller.
            </para>
            <para>
            The controller is responsible for coordinating the activation and
            deactivation of tools. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.ActivateTool(System.String)"/>
            method activates a specified tool. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.DeactivateTool(Syncfusion.Windows.Forms.Diagram.Tool)"/>
            method deactivates a specified tool. Tools can be accessed by name with the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.GetTool(System.String)"/>
            method.
            </para>
            <para>
            The controller is responsible for coordinating the executing of commands.
            A command is typically executed by a tool when it reaches a certain
            state during its processing of input events. For example, the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.RectangleTool"/>
            executes an
            <see cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            command when it receives a mouse up event. The controller implements the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ICommandDispatcher"/>
            interface, which defines the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.ExecuteCommand(Syncfusion.Windows.Forms.Diagram.ICommand)"/>
            method used to execute commands. The ICommandDispatcher interface also
            defines methods to undo commands, redo commands, and manage the undo
            and redo stacks.
            </para>
            <para>
            The controller captures all mouse events and performs hit testing on
            the diagram. Nodes, ports, and vertices hit by mouse movements are
            tracked by the controller. Tools can access this hit testing
            information in the controller. In other words, the controller provides
            basic hit testing services to tools so that each tool doesn't need to
            implement (and possible duplicate) that hit testing logic. The following
            properties and methods provide access to the hit testing state information:
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Controller.MouseLocation"/>,
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Controller.NodesHit"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.GetSelectedNodesHit(Syncfusion.Windows.Forms.Diagram.NodeCollection)"/>,
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Controller.ResizeHandleHitNode"/>,
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Controller.ResizeHandleHit"/>,
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Controller.VertexHandleHitNode"/>,
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Controller.VertexHit"/>
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICommandDispatcher"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.DiagramController"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.#ctor">
            <summary>
            Constructs a controller object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.#ctor(Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Constructs a controller and attaches it to get specified view.
            </summary>
            <param name="view">View to attach to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Dispose(System.Boolean)">
            <summary>
            Called to release resources held by the controller.
            </summary>
            <param name="disposing">
            Indicates if this method is being called explicitly by a call to Dispose()
            or by the destructor through the garbage collector.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.UpdateView">
            <summary>
            Redraws the view if changes have been made.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.UpdateAllViews">
            <summary>
            This method calls
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.UpdateViews"/>
            on the model which fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.ViewUpdate"/>
            event.
            </summary>
            <remarks>
            <para>
            This method is called to notify all views that they should update
            themselves.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Initialize(Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Initializes the controller for the given view.
            </summary>
            <param name="view">The view object to attach to the controller.</param>
            <remarks>
            This method wires the controller up to the view. The controller subscribes
            to numerous events in the view's parent control. The controller also attaches
            its selection list to the view.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.DetachView">
            <summary>
            Detaches the controller from the view.
            </summary>
            <remarks>
            <para>
            Disconnects event handlers and sets the controller's view to NULL.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.View"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.GetSelectedNodesHit(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Returns the subset of nodes hit that are currently selected.
            </summary>
            <param name="nodes">Collection to add nodes into.</param>
            <returns>The number of nodes added to the collection.</returns>
            <remarks>
            This function iterates through the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Controller.NodesHit"/>
            collection and returns the nodes that also in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            collection.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.MouseLocation"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.GetSelectedNodesHit">
            <summary>
            Returns the number of nodes hit that are currently selected.
            </summary>
            <returns>
            A count of nodes hit during the last mouse event that are in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.MouseLocation"/>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.HitTestHandles">
            <summary>
            This method gets the resize handle and vertex handle at the current
            mouse location.
            </summary>
            <remarks>
            This method checks for both resize handles and vertex handles. The point
            tested is
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Controller.MouseLocation"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.HitTestLineSegments(Syncfusion.Windows.Forms.Diagram.ILineSegments)">
            <summary>
            Hit tests the given collection of line segments.
            </summary>
            <param name="lineSegs">Line segments to hit test.</param>
            <returns>
            Zero-based index of the line segment hit or -1 if the hit test fails.
            </returns>
            <remarks>
            <para>
            This method tests to see if the current mouse location hits one
            of the line segments in the specified object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.RegisterTool(Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            Adds a new tool to the controller.
            </summary>
            <param name="tool">Tool object to register.</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.UnRegisterTool(Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            Removes a previously registered tool from the Controller.
            </summary>
            <param name="tool">Tool object to unregister.</param>
            <returns>True if the unregistration is successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.GetTool(System.String)">
            <summary>
            Returns the Tool object matching the given name.
            </summary>
            <param name="toolName">Name of Tool object to return.</param>
            <returns>Tool object matching the given name, or NULL if not found.</returns>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.GetAllTools">
            <summary>
            Returns an array of all Tool objects registered with the controller.
            </summary>
            <returns>Array of registered Tool objects.</returns>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ActivateTool(System.String)">
            <summary>
            Activates the Tool object matching the given name.
            </summary>
            <param name="toolName">Name of Tool to activate.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            This method first locates the tool matching the given name and
            then passes it to the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.ActivateTool(System.String)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ActivateTool(Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            Activates the given Tool object.
            </summary>
            <param name="tool">Tool to activate.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            This method first iterates through all of the other registered
            tools (excluding the one to be activated) and notifies each one
            of the activations by calling
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Tool.ToolActivating(Syncfusion.Windows.Forms.Diagram.Tool)"/>.
            This gives the other tools a chance to suspend themselves or do
            any necessary cleanup before a new tool becomes active. Next, this
            method activates the Tool by calling its
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Tool.Activate"/>
            method. Finally, it fires the controller's ToolActivate event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.DeactivateTool(Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            Deactivates the given Tool object.
            </summary>
            <param name="tool">The Tool to deactivate.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            First, this method iterates through all of the other tools
            (excluding the one to be deactivated) and notifies them of the
            deactivation by calling the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Tool.ToolDeactivating(Syncfusion.Windows.Forms.Diagram.Tool)"/>
            method. Next, this method deactivates the Tool by calling its
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Tool.Deactivate"/>
            method. Finally, this method fires the controller's ToolDeactivate
            event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse down event occurs.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method updates the current mouse location and then performs hit testing
            for handles and nodes. Then it forwards the event onto all tools that
            implement the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            interface.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse move event occurs.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method updates the current mouse location and then performs hit testing
            for handles and nodes. Then it forwards the event onto all tools that
            implement the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            interface.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse up event is received.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method updates the current mouse location and then performs hit testing
            for handles and nodes. Then it forwards the event onto all tools that
            implement the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            interface.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.OnClick(System.Object,System.EventArgs)">
            <summary>
            Called when a click event is received.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Iterates through the nodes hit by the click event and notifies them
            of the click by calling the 
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Click(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>
            method. Then it iterates through all tools that implement the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IClickEventReceiver"/>
            interface and forwards the event onto them.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IClickEventReceiver"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.OnDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Called when a double click event is received.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Iterates through the nodes hit by the double click event and notifies
            them of the click by calling the 
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.DoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>
            method. Then it iterates through all tools that implement the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IClickEventReceiver"/>
            interface and forwards the event onto them.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IClickEventReceiver"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.OnKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key down event is received.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Iterates through all tools that implement the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IKeyboardEventReceiver"/>
            interface and forwards the event onto them.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IKeyboardEventReceiver"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.OnKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key up event is received.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Iterates through all tools that implement the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IKeyboardEventReceiver"/>
            interface and forwards the event onto them.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IKeyboardEventReceiver"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.OnKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called when a key press event is received.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Iterates through all tools that implement the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IKeyboardEventReceiver"/>
            interface and forwards the event onto them.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IKeyboardEventReceiver"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.OnVerticalScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Called when a VerticalScroll event is received.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Iterates through all tools that implement the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IScrollEventReceiver"/>
            interface and forwards the event onto them.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IScrollEventReceiver"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.OnHorizontalScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Called when a HorizontalScroll event is received.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Iterates through all tools that implement the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IScrollEventReceiver"/>
            interface and forwards the event onto them.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IScrollEventReceiver"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.SelectAll">
            <summary>
            Adds all nodes in the model to the SelectionList.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.OnSelectionChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called before the contents of the selection list change.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.OnSelectionChanged(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called when the contents of the selection list change.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ExecuteCommand(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Executes the given command and adds it to the undo stack.
            </summary>
            <param name="cmd">Command to execute.</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.UndoCommand">
            <summary>
            Execute the command on the top of the undo stack and remove it
            from the stack.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.RedoCommand">
            <summary>
            Execute the command on the top of the redo stack and remove it
            from the stack.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.PeekUndo(System.Int32)">
            <summary>
            Returns a command from the undo stack.
            </summary>
            <param name="offset">Offset into the undo stack.</param>
            <returns>Command object at the given offset in the undo stack.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.PeekRedo(System.Int32)">
            <summary>
            Returns a command from the redo stack.
            </summary>
            <param name="offset">Offset into the redo stack.</param>
            <returns>Command object at the given offset in the redo stack.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ClearHistory">
            <summary>
            Remove all commands from the undo and redo stacks.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Cut">
            <summary>
            Remove the currently selected nodes from the diagram and move them to the clipboard.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Copy">
            <summary>
            Copy the currently selected nodes to the clipboard.
            </summary>
            <remarks>
            Creates a new
            <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>
            and copies the selected nodes into it. It then copies the new
            NodeCollection to the clipboard.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Paste">
            <summary>
            Paste the contents of the clipboard to the diagram.
            </summary>
            <remarks>
            If a <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>
            is available on the clipboard, this method gets it and inserts
            it into the diagram by creating and executing a 
            <see cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            command.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Paste(System.String,System.Drawing.PointF)">
            <summary>
            Paste the contents of the clipboard to the diagram.
            </summary>
            <param name="layername">Name of the layer in which to insert the nodes.</param>
            <param name="location">The location at which to insert the nodes.</param>
            <remarks>
            If a <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>
            is available on the clipboard, this method gets it and inserts
            it into the diagram by creating and executing a 
            <see cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            command.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Delete">
            <summary>
            Deletes the selected nodes from the diagram.
            </summary>
            <remarks>
            Differs from the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.Cut"/>
            method in that it doesn't copy the nodes the clipboard before
            removing them.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.BringToFront">
            <summary>
            Brings the selected nodes to the front of the Z-order.
            </summary>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            This method creates and executes a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/> command.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.SendToBack">
            <summary>
            Sends the selected nodes to the back of the Z-order.
            </summary>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            This method creates and executes a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/> command.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.BringForward">
            <summary>
            Brings the selected nodes forward in the Z-order.
            </summary>
            <returns>True if successfulk; otherwise False.</returns>
            <remarks>
            This method creates and executes a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/> command.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.SendBackward">
            <summary>
            Sends the selected nodes backward in the Z-order.
            </summary>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            This method creates and executes a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/> command.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.SameWidth">
            <summary>
            Sets the width of the selected nodes to be equal.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.SameHeight">
            <summary>
            Sets the height of the selected nodes to be equal.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.SameSize">
            <summary>
            Sets the width and height of the selected nodes to be equal.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.CreateFigure">
            <summary>
            Creates a new <see cref="T:Syncfusion.Windows.Forms.Diagram.Figure"/> node composed of 
            the GraphicsPaths of the selected nodes.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.CreateTextFormatter">
            <summary>
            Creates the text editor for this controller.
            </summary>
            <returns>Object that implements ITextEditor.</returns>
            <remarks>
            <para>
            This method can be overridden in derived classes to plug in
            a custom text editor.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.view">
            <summary>
            View attached to this controller.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.tools">
            <summary>
            List of tools registered with this controller.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.toolTable">
            <summary>
            Hashtable that maps tool names onto tool objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.mouseEventReceivers">
            <summary>
            List of tools that support the IMouseEventReceiver interface.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.clickEventReceivers">
            <summary>
            List of tools that support the IClickEventReceiver interface.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.keyboardEventReceivers">
            <summary>
            List of tools that support the IKeyboardEventReceiver interface.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.scrollEventReceivers">
            <summary>
            List of tools that support the IScrollEventReceiver interface.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.selectedNodes">
            <summary>
            List of selected nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.maxHistory">
            <summary>
            Maximum size of the undo and redo stacks.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.undoStack">
            <summary>
            Stack containing commands that can have Undo applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.redoStack">
            <summary>
            Stack containing commands that can have Redo applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.eventsEnabled">
            <summary>
            Flag controlling whether or not events are fired by the controller.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.mouseLocation">
            <summary>
            Last known position of the mouse pointer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.mouseTrackingEnabled">
            <summary>
            Flag indicating if the controller should track mouse movements in the view.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.nodesHit">
            <summary>
            Collection of nodes hit by the most recent mouse event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.resizeHandleHitNode">
            <summary>
            Node that owns the resize handle hit by the most recent mouse event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.resizeHandleHit">
            <summary>
            Position of resize handle hit by the most recent mouse event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.vertexHandleHitNode">
            <summary>
            Node that owns the vertex handle hit by the most recent mouse event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.vertexHit">
            <summary>
            Index position of the vertex handle hit by the most recent mouse event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.hoverNodes">
            <summary>
            List of nodes in which the mouse is currently hovering.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.propertyContainer">
            <summary>
            Reference to the attached view's property container.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.textFormatter">
            <summary>
            Text editor registered to this controller.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.guid">
            <summary>
            Unique ID used to identify the source of copy and paste operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.pasteIndex">
            <summary>
            Number of consecutive paste operations - used to offset nodes pasted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.disposed">
            <summary>
            Indicates if the Dispose() method has been called.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.View">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Diagram.View"/> object
            attached to this controller.
            </summary>
            <remarks>
            The View object is attached by the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.Initialize(Syncfusion.Windows.Forms.Diagram.View)"/>
            method.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.Model">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/> object
            attached to this controller.
            </summary>
            <remarks>
            The Model object is attached to the controller indirectly through
            the View object. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.ParentControl">
            <summary>
            System.Windows.Forms.Control that owns the view that this
            controller is attached to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.Cursor">
            <summary>
            Cursor to use inside the view.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.MouseLocation">
            <summary>
            Last known location of the mouse pointer.
            </summary>
            <remarks>
            This property is updated each time the controller receives a mouse event:
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.NodesHit"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Controller.GetSelectedNodesHit(Syncfusion.Windows.Forms.Diagram.NodeCollection)"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.ResizeHandleHitNode"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.ResizeHandleHit"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.VertexHandleHitNode"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.VertexHit"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.MouseTrackingEnabled">
            <summary>
            Indicates if mouse tracking is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.TextFormatter">
            <summary>
            Interface for formatting text objects on the diagram.
            </summary>
            <remarks>
            <para>
            This property is a reference to an object that implements the IFormatText
            interface which allows the caller to retrieve and apply text formatting
            properties to the currently selected text objects.
            </para>
            <para>
            The virtual
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.CreateTextFormatter"/>
            method is called by the controller to create the TextFormatter object. The
            default implementation of CreateTextFormatter returns an instance of
            <see cref="T:Syncfusion.Windows.Forms.Diagram.TextFormatter"/> which is the
            default implementation of the IFormatText interface. By subclassing the
            controller and overriding CreateTextFormatter, it is possible to plug in
            custom TextFormatter objects.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Controller.CreateTextFormatter"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IFormatText"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextFormatter"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.EventsEnabled">
            <summary>
            Indicates whether or not event will be fired.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.NodesHit">
            <summary>
            List of nodes that were hit during the last received mouse event.
            </summary>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.MouseLocation"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.ResizeHandleHitNode">
            <summary>
            Node that owns the resize handle hit during the last mouse event.
            </summary>
            <remarks>
            This property is updated during each mouse event. If a resize
            handle is hit during the mouse event, this property contains the
            node that owns the handle. If a resize handle was not hit during
            the mouse event, this property is NULL.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.ResizeHandleHit"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.MouseLocation"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.ResizeHandleHit">
            <summary>
            Position of the handle hit during the last mouse event.
            </summary>
            <remarks>
            This property is only valid if ResizeHandleHitNode is not NULL.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.ResizeHandleHitNode"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.MouseLocation"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.VertexHandleHitNode">
            <summary>
            Node that owns the vertex handle hit during the last mouse event.
            </summary>
            <remarks>
            If a vertex was not hit during the last mouse event, this property
            will be NULL.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.VertexHit"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.MouseLocation"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.VertexHit">
            <summary>
            Zero-based index position of the vertex hit during the last mouse
            event.
            </summary>
            <remarks>
            This property is valid only if the VertexHandleHitNode property is
            non-NULL.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.VertexHandleHitNode"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.MouseLocation"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.HandleEditMode">
            <summary>
            The select handle mode determines the type of handles to draw and hit test.
            </summary>
            <remarks>
            This property determines if resize handles or vertex handles will be drawn
            and hit tested. The value is usually Resize, except during vertex editing when
            the value is set to Vertex.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.IsSelectionHandleHit">
            <summary>
            Indicates if a selection handle was hit during the last mouse event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList">
            <summary>
            List of nodes that are currently selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.MaxHistory">
            <summary>
            Maximum number of commands that can be stored in the undo and redo stacks.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.UndoCount">
            <summary>
            Current number of commands in the undo stack.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.RedoCount">
            <summary>
            Current number of commands in the redo stack.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.CanCut">
            <summary>
            Indicates if there are any selected nodes that can be removed from the
            the model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.CanCopy">
            <summary>
            Indicates if there are any selected nodes that can be copied to the clipboard.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.CanPaste">
            <summary>
            Indicates if there is any data in the clipboard that can be pasted
            into the model.
            </summary>
            <remarks>
            This method checks the clipboard to see if a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>
            is available.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.Syncfusion#Windows#Forms#IMouseController#Cursor">
            <summary>
            The cursor currently assigned to the controller.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.Syncfusion#Windows#Forms#IMouseController#Name">
            <summary>
            Name of the mouse controller.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Controller.ToolActivate">
            <summary>
            Fired when the controller activates a tool.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Controller.ToolDeactivate">
            <summary>
            Fired when the controller deactivates a tool.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Controller.SelectionChanging">
            <summary>
            Fired before the contents of the selection list change.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Controller.SelectionChanged">
            <summary>
            Fired when the contents of the selection list change.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Controller.MouseDown">
            <summary>
            Fired when the mouse pointer is over the Controller and a mouse button is pressed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Controller.MouseUp">
            <summary>
            Fired when the mouse pointer is over the Controller and a mouse button is released.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Controller.ToolEventArgs">
            <summary>
            This class encapsulates event arguments for events fired by the
            controller that are caused by
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/> objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ToolEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            Constructs a ToolEventArgs object given a tool object.
            </summary>
            <param name="tool"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.ToolEventArgs.Tool">
            <summary>
            Returns the tool object that generated the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Controller.ToolEventHandler">
            <summary>
            Delegate used for tool events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DiagramController">
            <summary>
            Implements a generic diagram controller containing a default set
            of tools.
            </summary>
            <remarks>
            <para>
            This class implements a concrete controller with a generic
            diagramming user interface. It overrides the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.Initialize(Syncfusion.Windows.Forms.Diagram.View)"/>
            method and registers all available tools in the Syncfusion.Diagram.dll
            assembly.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Controller"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramController.#ctor(Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Constructs a DiagramController and attaches it to get specified view.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramController.Initialize(Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Initializes the controller for the given view.
            </summary>
            <param name="view">The view object to attach to the controller.</param>
            <remarks>
            This method initializes the controller and registers all of the
            tools in the Essential Diagram library.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SymbolEditController">
            <summary>
            Implements a controller used for editing symbols.
            </summary>
            <remarks>
            This controller is tailored to editing symbols in the Symbol Designer
            utility. It registers the following tools:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.MoveTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ResizeTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.LineTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.PolyLineTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.RectangleTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ArcTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.PolygonTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.EllipseTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.CurveTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.PortTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.TextTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ZoomTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.PanTool"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.SelectTool"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolEditController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolEditController.#ctor(Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Constructs a DiagramController and attaches it to get specified view.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolEditController.Initialize(Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Initializes the controller for the given view.
            </summary>
            <param name="view">The view object to attach to the controller.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IGraphNode">
            <summary>
            Interface to a node in a graph.
            </summary>
            <remarks>
            A node is an object in a graph that can have edges entering
            and leaving. Nodes are connected to other nodes by edges.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphEdge"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGraphNode.Edges">
            <summary>
            Collection of all edges entering or leaving the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGraphNode.EdgesEntering">
            <summary>
            Collection of edges entering the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGraphNode.EdgesLeaving">
            <summary>
            Collection of edges leaving the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IGraphEdge">
            <summary>
            Interface to an edge in a graph.
            </summary>
            <remarks>
            An edge links together two nodes in a graph. It provides a path
            between two nodes.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphNode"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IGraphEdge.IsNodeLeaving(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Determines if this edge is leaving the given node.
            </summary>
            <param name="graphNode">Node to test.</param>
            <returns>True if edge is leaving the given node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IGraphEdge.IsNodeEntering(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Determines if this edge is entering the given node.
            </summary>
            <param name="graphNode">Node to test.</param>
            <returns>True if edge is entering the given node.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGraphEdge.FromNode">
            <summary>
            Node connected to the tail of the edge.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGraphEdge.ToNode">
            <summary>
            Node connected to the head of the edge.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGraphEdge.EdgeWeight">
            <summary>
            Weight value associated with the edge.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Group">
            <summary>
            A group is a node that acts as a transparent container for other nodes.
            </summary>
            <remarks>
            <para>
            A group is a composite node that controls a set of child nodes. The
            bounding rectangle of a group is the union of the bounds of its
            children. The group renders itself by iterating through its children
            and rendering them. Child nodes cannot be selected or manipulated
            individually.
            </para>
            <para>
            Members of the group are added and removed through the ICompositeNode
            interface.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.GroupCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IGraphics">
            <summary>
            Interface to an object that can draw itself and generate a
            GraphicsPath and region.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IGraphics.CreateRegion(System.Single)">
            <summary>
            
            </summary>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGraphics.GraphicsPath">
            <summary>
            Visual representation of the object as a GraphicsPath.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.#ctor(Syncfusion.Windows.Forms.Diagram.Group)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for symbols.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetChild(System.Int32)">
            <summary>
            Returns the child node at the given index position.
            </summary>
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
            <returns>Child node at the given position or NULL if the index is out of range.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetChildByName(System.String)">
            <summary>
            Returns the child node matching the given name.
            </summary>
            <param name="childName">Name of node to return.</param>
            <returns>Node matching the given name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetChildIndex(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the index position of the given child node.
            </summary>
            <param name="child">Child node to query.</param>
            <returns>Zero-based index into the collection of child nodes.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.AppendChild(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Appends the given node to the collection of child nodes.
            </summary>
            <param name="child">Node to append.</param>
            <returns>
            Zero-based index at which the node was added to the collection or -1 for failure.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.AppendChildren(Syncfusion.Windows.Forms.Diagram.INodeCollection,System.Int32@)">
            <summary>
            Appends the given collection of nodes as child nodes.
            </summary>
            <param name="children">Nodes to append.</param>
            <param name="startIdx">
            Zero-based index at which the first node was added to the collection of child nodes.
            </param>
            <returns>Number of child nodes appended.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.InsertChild(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Insert the given node into the collection of child nodes at a
            specific position.
            </summary>
            <param name="child">Node to insert.</param>
            <param name="childIndex">Zero-based index at which to insert the node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.RemoveChild(System.Int32)">
            <summary>
            Removes the child node at the given position.
            </summary>
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
            <returns>True if the node was successfully removed; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.RemoveAllChildren">
            <summary>
            Removes all child nodes from the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetConstrainingRegion(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the region that the bounds of the given child node is constrained by.
            </summary>
            <param name="child">Child to get constraining region for.</param>
            <returns>Region that constrains the bounds of the given child.</returns>
            <remarks>
            <para>
            This method is used to limit the bounds of a child node to a specified area.
            The node cannot be moved, resized, or rotated beyond the edges of this region.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.CheckConstrainingRegion(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Tests to see if the given node falls within the constraining region
            of the composite node.
            </summary>
            <param name="node">Node to test.</param>
            <returns>
            True if node falls within the constraining region; False if it does
            not.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetChildrenAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Returns all children that are intersected by the given point.
            </summary>
            <param name="childNodes">
            Collection in which to add the children hit by the given point.
            </param>
            <param name="ptWorld">Point to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of child nodes that intersect the given point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetChildrenIntersecting(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Returns all children that intersect the given rectangle.
            </summary>
            <param name="childNodes">
            Collection in which to add the children hit by the given point.
            </param>
            <param name="rcWorld">Rectangle to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of child nodes that intersect the given rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetChildrenContainedBy(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Returns all children inside the given rectangle.
            </summary>
            <param name="childNodes">
            Collection in which to add the children inside the specified rectangle.
            </param>
            <param name="rcWorld">Rectangle to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of child nodes added to the collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetPropertyContainer(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the inherited property container for the given child node.
            </summary>
            <param name="childNode">The child node making the request.</param>
            <returns>Parent property container for the given node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the group onto a System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
            <remarks>
            Iterates through all child nodes and renders them.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.CreateRegion(System.Single)">
            <summary>
            Returns an object that describes the interior of the shape.
            </summary>
            <param name="padding">Amount of padding to add.</param>
            <returns>System.Drawing.Region object</returns>
            <remarks>
            Region objects are used for hit testing and geometrical calculations.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Group.GraphicsPath"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Translate(System.Single,System.Single)">
            <summary>
            Moves the group by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
            <remarks>
            Applies a translate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the group a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Rotate(System.Single)">
            <summary>
            Rotates the group a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Scales the group by a given ratio along the X and Y axes.
            </summary>
            <param name="ptAnchor">Fixed point about which to scale.</param>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Scale(System.Single,System.Single)">
            <summary>
            Scales the group about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the group's bounding box intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetZOrder(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the Z-order value of the given node.
            </summary>
            <param name="node">Node to get Z-order for.</param>
            <returns>
            Zero-based Z-order value of the node or -1 if the node
            does not exist.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.SetZOrder(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Sets the Z-order of the given node.
            </summary>
            <param name="node">Node to set Z-order for.</param>
            <param name="zOrder">Zero-based Z-order value.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.BringForward(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Moves the specified node forward in the Z-order.
            </summary>
            <param name="node">Node to move forward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.SendBackward(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Sends the specified node back in the Z-order.
            </summary>
            <param name="node">Node to move backward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.BringToFront(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Brings the specified node to the front of the Z-order.
            </summary>
            <param name="node">Node to bring to the front.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.SendToBack(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Sends the specified node to the back of the Z-order.
            </summary>
            <param name="node">Node to send to the back.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the group.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            group to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called before the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called after the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of a node changes.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnBoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when a node is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when a node is rotated.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when a node is scaled.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Click(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is double clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnDoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse enters a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnMouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse leaves a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnMouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#InsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is inserted into a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnInsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is deleted from a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnDeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Group.OnMoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called before the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called after the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called before a change is made to the collection of child nodes.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.ChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called after a change is made to the collection of child nodes.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.ChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnPropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            before a property changes by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.Parent"/>
            of the property change by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when the position of the node is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.Parent"/>
            of the move by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when the node is rotated.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.Parent"/>
            of the rotation by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when the node is scaled.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.Parent"/>
            of the scaling by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnBoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of the node change.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.Parent"/>
            of the change in bounds by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Click(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnDoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is double clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.DoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnMouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse enters a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.MouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnMouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse leaves a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.MouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnInsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is inserted.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.InsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnMoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.MoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnDeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is deleted.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.DeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called before the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.ConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called after the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.ConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.CreateStyles">
            <summary>
            Creates style objects for this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IBounds2DF"/>
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.name">
            <summary>
            Name of the group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.parent">
            <summary>
            Reference to the parent node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.children">
            <summary>
            Collection of child nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.matrix">
            <summary>
            Local transformation matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.propertyValues">
            <summary>
            Hashtable containing property values belonging to the group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.childPropertyContainer">
            <summary>
            Property container inherited by children.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.editStyle">
            <summary>
            Edit properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.fillStyle">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.lineStyle">
            <summary>
            Line drawing properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Visible">
            <summary>
            Determines if the group is visible or hidden.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.EditStyle">
            <summary>
            Set of properties that determine how the group can be manipulated.
            </summary>
            <remarks>
            <para>
            Edit properties contain a set of flags that indicate what types of
            activities are valid for the group.
            </para>
            <para>
            Edit style properties that are not explicitly set by the group are
            inherited from the parent node.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.EditStyle"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.FillStyle">
            <summary>
            Properties used to fill the interior of regions.
            </summary>
            <remarks>
            <para>
            The fill style is used to create brushes for painting interior regions of
            shapes.
            </para>
            <para>
            Fill style properties that are not explicitly set by the group are
            inherited from the parent node.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.LineStyle">
            <summary>
            Properties used for drawing lines.
            </summary>
            <remarks>
            <para>
            The line style is used to create pens for painting drawing lines.
            </para>
            <para>
            Line style properties that are not explicitly set by the group are
            inherited from the parent node.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Parent">
            <summary>
            Reference to the composite node this node is a child of.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Root">
            <summary>
            The root node in the node hierarchy.
            </summary>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Name">
            <summary>
            Name of the group.
            </summary>
            <remarks>
            Must be unique within the scope of the parent node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.FullName">
            <summary>
            Fully qualified name of the node.
            </summary>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.ChildCount">
            <summary>
            The number of child nodes contained by the group.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Bounds">
            <summary>
            The group's bounding box.
            </summary>
            <remarks>
            <para>
            Always returns the bounds of the group in world coordinates, regardless
            of what is on the matrix stack at the time of the call.
            </para>
            <para>
            The bounding box of a group is the union of the bounds of all of its
            children. This method pushes the group's
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.WorldTransform"/>
            onto the matrix stack and then iterates through each child retrieving
            its local bounds through the ILocalBounds2DF.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.X">
            <summary>
            X-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Y">
            <summary>
            Y-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Width">
            <summary>
            Width of the object.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Height">
            <summary>
            Height of the object.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Bounds">
            <summary>
            Bounding box of the group in local coordinates.
            </summary>
            <remarks>
            The value returned depends on the contents of the matrix stack. If the
            matrix stack is empty, then the value returned is in local coordinates.
            This method is generally used by functions that recursively traverse
            the node hierarchy, pushing and popping the matrix stack as they go.
            <seealso cref="F:Syncfusion.Windows.Forms.Diagram.Global.MatrixStack"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Group.Bounds"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#X">
            <summary>
            X-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Y">
            <summary>
            Y-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Width">
            <summary>
            Width of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Height">
            <summary>
            Height of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.GraphicsPath">
            <summary>
            Encapsulates the points and instructions needed to render the group.
            </summary>
            <remarks>
            The contents of the GraphicsPath is the union of the GraphicsPath
            objects of all its children.
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Group.CreateRegion(System.Single)"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.LocalTransform">
            <summary>
            Matrix containing local transformations for this node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.WorldTransform">
            <summary>
            Returns a matrix containing transformations for this node and all of
            its ancestors.
            </summary>
            <remarks>
            Chains up the node hierarchy and builds a transformation matrix containing
            all transformations that apply to this node in the world coordinate space.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.ParentTransform">
            <summary>
            Returns a matrix containing the transformations of this node's parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.ZOrderDepth">
            <summary>
            Number of items in the Z-order for this container.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ILayerAddNode">
            <summary>
            Interface used to add nodes to a layer without automatically adding them
            to the attached node container.
            </summary>
            <remarks>
            <para>
            This interface is used internally by the node container when adding nodes
            to a layer. It bypasses the step of automatically adding the node to the
            node container, if it is not already there. It assumes that the node already
            exists in the node container.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILayerAddNode.Add(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Add a node to the layer without checking to see that it exists in
            the node container.
            </summary>
            <param name="node">Node to add to the layer.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Layer">
            <summary>
            A layer is a collection of nodes that share a common set of default properties
            and the same Z-order relative to other layers.
            </summary>
            <remarks>
            <para>
            A layer contains zero or more nodes and is responsible for rendering
            those nodes. Since the nodes in a layer are rendered as a group, their
            Z-order is the same relative to other layers in the diagram. For example,
            if layer A has a higher Z-order than layer B, then all nodes in layer B
            will be rendered behind those in layer A. If the Visible flag on a layer
            is set to False, none of the nodes in the layer will be rendered.
            </para>
            <para>
            The nodes in the layer can inherit properties from the layer. If a
            property is not explicitly set in a node, the node inherits the property
            from the layer. If the layer does not have the property set, then the
            layer chains up to the model to get the property. This allows all nodes
            in a layer to share the same defaults.
            </para>
            <para>
            Nodes are added to the layer using the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.Add(Syncfusion.Windows.Forms.Diagram.INode)"/> method and
            removed using the <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.Remove(Syncfusion.Windows.Forms.Diagram.INode)"/>
            method. A node can only belong to one layer at a time. When a node is added
            to a layer, the layer's
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Layer.Container"/> is
            notified so that it can remove it from any other layers that it might
            already belong to.
            </para>
            <para>
            All nodes in the layer can be hidden by setting the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Layer.Visible"/> flag
            to False.
            </para>
            <para>
            The Z-order of nodes within a layer can be changed using the following
            methods: <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.SetZOrder(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.BringForward(Syncfusion.Windows.Forms.Diagram.INode)"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.BringToFront(Syncfusion.Windows.Forms.Diagram.INode)"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.SendBackward(Syncfusion.Windows.Forms.Diagram.INode)"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.SendToBack(Syncfusion.Windows.Forms.Diagram.INode)"/>.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILayerContainer"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IDrawEx">
            <summary>
            Interface to objects that can render a specific area within their bounds
             onto a Graphics context.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDrawEx.Draw(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Renders an area of the object onto a graphics context.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
            <param name="rcArea">Area to render.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.#ctor(Syncfusion.Windows.Forms.Diagram.ILayerContainer)">
            <summary>
            Constructs a Layer and attaches it to the specified layer container.
            </summary>
            <param name="container">Container to attach the layer to.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILayerContainer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.#ctor(Syncfusion.Windows.Forms.Diagram.ILayerContainer,System.String)">
            <summary>
            Constructs a layer with a specified name and attaches it to the
            given layer container.
            </summary>
            <param name="container">Container to attach the layer to.</param>
            <param name="layerName">Name to give the layer.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for layers.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the list or a portion of the list to an array.
            </summary>
            <param name="array">Array in which to copy the items in the list.</param>
            <param name="index">Index at which to start copying in target array.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the nodes
            in the layer.
            </summary>
            <returns>Enumerator for iterating through layer.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.Contains(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Determines if the specified node belongs to the layer.
            </summary>
            <param name="node">Node to search for.</param>
            <returns>
            True if the node belongs to the layer; otherwise False.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.Add(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Adds a node the layer.
            </summary>
            <param name="node">Node to add.</param>
            <remarks>
            <para>
            If the node already belongs to this layer, this method does nothing.
            Before adding the node to this layer, this method queries the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Layer.Container"/>
            object to see if the node already belongs to another layer. If it
            does, then this method removes the node from that layer.
            </para>
            <para>
            The node is then added to this layer and the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnMemberAdded(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)"/>
            method is called.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Layer.Remove(Syncfusion.Windows.Forms.Diagram.INode)"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnMemberAdded(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.Remove(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Removes the specified node from this layer.
            </summary>
            <param name="node">Node to remove.</param>
            <remarks>
            <para>
            If the node does not belong to this layer, this method does nothing.
            If the node is found and removed from this layer, the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnMemberRemoved(Syncfusion.Windows.Forms.Diagram.INode)"/>
            method is called.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Layer.Add(Syncfusion.Windows.Forms.Diagram.INode)"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnMemberRemoved(Syncfusion.Windows.Forms.Diagram.INode)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.RemoveAll">
            <summary>
            Removes all nodes from this layer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.GetZOrder(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the Z-order value of the given node.
            </summary>
            <param name="node">Node to get Z-order for.</param>
            <returns>
            Zero-based index of the node in the layer or -1 if the
            given node does not belong to the layer.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.SetZOrder(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Sets the Z-order of the given node within the layer.
            </summary>
            <param name="node">Node to set Z-order for.</param>
            <param name="zOrder">Zero-based z-order value.</param>
            <remarks>
            <para>
            If the specified node doesn't belong to this layer,
            this method does nothing. If the node is found, it is
            removed and re-inserted at the given index position and
            the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnZOrderChanged(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Int32)"/>
            method is called.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnZOrderChanged(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.BringForward(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Moves the specified node in the layer forward in the Z-order.
            </summary>
            <param name="node">Node to move forward.</param>
            <returns>
            Previous Z-order position.
            </returns>
            <remarks>
            <para>
            If the specified node doesn't belong to this layer,
            this method does nothing. If the node is found, it is
            removed and re-inserted at 1 plus its previous index and
            the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnZOrderChanged(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Int32)"/>
            method is called.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnZOrderChanged(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.SendBackward(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Sends the specified node in the layer back in the Z-order.
            </summary>
            <param name="node">Node to move backward.</param>
            <returns>
            Previous Z-order position.
            </returns>
            <remarks>
            <para>
            If the specified node doesn't belong to this layer,
            this method does nothing. If the node is found, it is
            removed and re-inserted at 1 minus its previous index and
            the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnZOrderChanged(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Int32)"/>
            method is called.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnZOrderChanged(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.BringToFront(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Brings the specified node in the layer to the front of the Z-order.
            </summary>
            <param name="node">Node to bring to the front.</param>
            <returns>
            Previous Z-order position.
            </returns>
            <remarks>
            <para>
            If the specified node doesn't belong to this layer,
            this method does nothing. If the node is found, it is
            removed and re-inserted at the end of the list and the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnZOrderChanged(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Int32)"/>
            method is called.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnZOrderChanged(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.SendToBack(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Sends the specified node in the layer to the back of the Z-order.
            </summary>
            <param name="node">Node to send to the back.</param>
            <returns>
            Previous Z-order position.
            </returns>
            <remarks>
            <para>
            If the specified node doesn't belong to this layer,
            this method does nothing. If the node is found, it is
            removed and re-inserted at index 0 and the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnZOrderChanged(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Int32)"/>
            method is called.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnZOrderChanged(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.GetNodesAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Returns all nodes in the layer that intersect the given point.
            </summary>
            <param name="nodes">Collection to add nodes into.</param>
            <param name="ptWorld">Point to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of nodes that intersect the given point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.GetNodesIntersecting(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Returns all nodes that intersect the given rectangle.
            </summary>
            <param name="nodes">
            Collection in which to add the nodes that intersect the specified rectangle.
            </param>
            <param name="rcWorld">Rectangle to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of nodes that intersect the given rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.GetNodesContainedBy(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Returns all nodes inside the given rectangle.
            </summary>
            <param name="nodes">
            Collection in which to add the nodes inside the specified rectangle.
            </param>
            <param name="rcWorld">Rectangle to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of nodes added to the collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.GetNodesIntersecting(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Gets the nodes that intersect with the given line segment.
            </summary>
            <param name="nodes"></param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.Syncfusion#Windows#Forms#Diagram#ILayerAddNode#Add(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Adds a node to the layer without automatically adding the node to the node
            container.
            </summary>
            <param name="node">Node to add.</param>
            <remarks>
            <para>
            This method works similar to
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Layer.Add(Syncfusion.Windows.Forms.Diagram.INode)"/>,
            except that it does not check to see if the node exists in the node container.
            This is an optimization that allows the node container to add nodes to the layer
            without the overhead of searching the node container for the node.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Layer.OnMemberAdded(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the layer onto a System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Graphics context to draw onto.</param>
            <remarks>
            Iterates through each node belonging to the layer and draws it
            onto the System.Drawing.Graphics object. If the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Layer.Visible"/>
            flag is set to False, this method does nothing.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.Draw(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Renders a portion of the layer onto a graphics context.
            </summary>
            <param name="grfx">Graphics context to draw onto.</param>
            <param name="rcArea">Area to render.</param>
            <remarks>
            Iterates through each node belonging to the layer and draws it
            onto the System.Drawing.Graphics object. If the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Layer.Visible"/>
            flag is set to False, this method does nothing.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the layer.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            layer to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.OnMemberAdded(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Called when a node is added to the layer.
            </summary>
            <param name="node">Node added.</param>
            <param name="index">Zero-based index of the node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.OnMemberRemoved(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Called when a node is removed from the layer.
            </summary>
            <param name="node">Node removed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.OnZOrderChanged(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.Int32)">
            <summary>
            Called when the Z-order of a node changes.
            </summary>
            <param name="node">Node whose Z-order has changed.</param>
            <param name="oldIdx">Previous index.</param>
            <param name="newIdx">New index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property of the layer is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.Compile">
            <summary>
            Compiles the contents of the layer into a form that is optimized for rendering
            and hit testing.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.SortOnZOrder(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Sorts the given collection of nodes based on their Z-order.
            </summary>
            <param name="nodes">Collection of nodes to sort.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.Count">
            <summary>
            The number of nodes in the layer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.IsSynchronized">
            <summary>
            Determines if the collection is thread-safe.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.SyncRoot">
            <summary>
            Object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.Container">
            <summary>
            Object that contains the layer.
            </summary>
            <remarks>
            Each layer has a reference to a container object for the purpose of
            synchronizing changes in layers. This is necesssary because a node
            can only belong to a single layer at a time. When a node is added to
            one layer, it must be removed from any other layer it might already
            belong to.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILayerContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollection"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.Name">
            <summary>
            Name of the layer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.Visible">
            <summary>
            Indicates if the layer is visible.
            </summary>
            <remarks>
            If this flag is set to False, none of the nodes belonging to the layer
            will be rendered.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.Enabled">
            <summary>
            Indicates if the layer is enabled or disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.ZOrderDepth">
            <summary>
            Number of items in the Z-order for this container.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayoutGrid">
            <summary>
            Base class for objects that draw a grid onto a view.
            </summary>
            <remarks>
            <para>
            Derived classes must override the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.Draw(System.Drawing.Graphics)"/>
            method in order to draw the grid.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDraw"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.#ctor(Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Constructs a LayoutGrid.
            </summary>
            <param name="containerView">View in which to draw the grid.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.#ctor(Syncfusion.Windows.Forms.Diagram.View,Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            Constructs a LayoutGrid.
            </summary>
            <param name="containerView">View in which to draw the grid.</param>
            <param name="propContainer"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.GetNearestGridPoint(System.Drawing.Point)">
            <summary>
            Takes a device point and returns the point on the grid that is nearest
            to that point.
            </summary>
            <param name="ptDevIn">Input point.</param>
            <returns>Point on the grid.</returns>
            <remarks>
            <para>
            Points are in device coordinates. This method is used to when the snap
            to grid feature is enabled.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.SnapToGrid"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the grid onto a specified System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Drawing context object.</param>
            <remarks>
            <para>
            This method is overridden in derived classes to render specific types of
            grids.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDraw"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.DrawPointGrid(System.Drawing.Graphics)">
            <summary>
            Renders the grid onto a specified System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Drawing context object.</param>
            <remarks>
            <para>
            Sets pixel values directly on the view's drawing surface.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.DrawingSurface"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.DrawLineGrid(System.Drawing.Graphics)">
            <summary>
            Renders the grid onto a specified System.Drawing.Graphics object as lines.
            </summary>
            <param name="grfx">Drawing context object.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayoutGrid.containerView">
            <summary>
            View this grid renders to.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayoutGrid.propContainer">
            <summary>
            Property container to access for properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.ContainerView">
            <summary>
            The view this grid is attached to.
            </summary>
            <remarks>
            <para>
            This property is a reference to the view that the layout grid renders
            itself onto.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.PropertyContainer">
            <summary>
            Reference to object that contains the grid property values.
            </summary>
            <remarks>
            <para>
            The properties of the grid are stored in a separate property container.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.GridStyle">
            <summary>
            Determines the appearance of the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.Spacing">
            <summary>
            Determines the distance between grid points.
            </summary>
            <remarks>
            Spacing is specified in world units.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.VerticalSpacing">
            <summary>
            Determines the vertical distance between grid points.
            </summary>
            <remarks>
            Spacing is specified in world units.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.HorizontalSpacing">
            <summary>
            Determines the horizontal distance between grid points.
            </summary>
            <remarks>
            Spacing is specified in world units.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.MinPixelSpacing">
            <summary>
            Minimum spacing between grid points in device units.
            </summary>
            <remarks>
            This value specifies the threshold at which the grid will stop
            drawing itself because the spacing between grid points is too
            small.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.Visible">
            <summary>
            Controls whether or not the grid is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.SnapToGrid">
            <summary>
            Determines if the snap to grid feature is enable or disabled.
            </summary>
            <remarks>
            <para>
            This property determines how the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.GetNearestGridPoint(System.Drawing.Point)"/>
            method behaves.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.GetNearestGridPoint(System.Drawing.Point)"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.Color">
            <summary>
            Color to use for drawing the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.DashStyle">
            <summary>
            Style to use for dashed lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.DashOffset">
            <summary>
            Distance from the start of the line to the dash pattern.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Model">
            <summary>
            A model is a collection of nodes that are rendered onto a view and
            manipulated by a controller.
            </summary>
            <remarks>
            <para>
            A model is the data portion of a diagram. It is the root node in a hierarchy
            that is rendered onto a view. This class implements the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode"/> interface,
            provides methods for accessing, adding, and removing child nodes. This
            includes the following methods:
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.ChildCount"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.GetChild(System.Int32)"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.AppendChild(Syncfusion.Windows.Forms.Diagram.INode,Syncfusion.Windows.Forms.Diagram.Layer)"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.InsertChild(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.String)"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.RemoveChild(System.Int32)"/>. Child
            nodes in the model can also be accessed through the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.Nodes"/> property.
            </para>
            <para>
            A model maintains a collection of layers in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.Layers"/>
            property. A <see cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/> is a
            collection of nodes that share a common set of default properties and the
            same Z-order relative to other layers. A model always contains at least one
            layer. Each node in the model belongs to one and only one layer. The model
            renders itself onto the view by iterating through the layers and rendering
            each one. Each layer is responsible for rendering the nodes belonging to
            it. The
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LayerCollection.PropertyContainer"/>
            of the <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.Layers"/>
            collection is a reference back to the model, which allows the layers to
            inherit properties from the model. The
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.DefaultLayer"/>
            property determines which layer a node is assigned to when it is added
            to the model.
            </para>
            <para>
            A model contains document-level settings such as:
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.PageSettings"/>,
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementUnits"/>, and
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementScale"/>.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IBounds2DF"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDrawEx"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPrint"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IPrint">
            <summary>
            This interface is implemented by classes that can print.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPrint.PrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IDispatchControlNodeEvents">
            <summary>
            Provides the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> with a mechanism for 
            obtaining information related to the Windows Forms control hosted in the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchControlNodeEvents.ControlNodeInfo(Syncfusion.Windows.Forms.Diagram.ControlNodeEventArgs)">
            <summary>
            Called to get information about the Control hosted in a ControlNode.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNodeEventArgs"/> event argument.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.#ctor(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source model to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for models.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Dispose(System.Boolean)">
            <summary>
            Called to release resources held by the model.
            </summary>
            <param name="disposing">
            Indicates if this method is being called explicitly by a call to Dispose()
            or by the destructor through the garbage collector.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Clear">
            <summary>
            Removes all nodes from the model and resets its state values.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.AppendChild(Syncfusion.Windows.Forms.Diagram.INode,Syncfusion.Windows.Forms.Diagram.Layer)">
            <summary>
            Appends the given node to the model and assigns it the specified layer.
            </summary>
            <param name="child">Node to append.</param>
            <param name="layer">Layer in which to place the node.</param>
            <returns>
            Zero-based index at which the node was added to the collection or -1 for failure.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.AppendChild(Syncfusion.Windows.Forms.Diagram.INode,System.String)">
            <summary>
            Appends the given node to the model and assigns it the specified layer.
            </summary>
            <param name="child">Node to append.</param>
            <param name="layerName">Name of layer to in which to place the node.</param>
            <returns>
            Zero-based index at which the node was added to the collection or -1 for failure.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.AppendChildren(Syncfusion.Windows.Forms.Diagram.INodeCollection,System.String,System.Int32@)">
            <summary>
            Appends the given collection of nodes as child nodes.
            </summary>
            <param name="children">Nodes to append.</param>
            <param name="layerName">Name of layer in which to place the node.</param>
            <param name="startIdx">
            Zero-based index at which the first node was added to the collection of child nodes.
            </param>
            <returns>Number of child nodes appended.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.InsertChild(Syncfusion.Windows.Forms.Diagram.INode,System.Int32,System.String)">
            <summary>
            Insert the given node into the model at a specific position.
            </summary>
            <param name="child">Node to insert.</param>
            <param name="childIndex">Zero-based index at which to insert the node.</param>
            <param name="layerName">Name of layer to in which to place the node.</param>
            <remarks>
            <para>
            The layerName passed is assigned to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.DefaultLayerName"/>
            property and becomes the new default layer.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetPortAt(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Performs hit testing for ports.
            </summary>
            <param name="ptWorld">Point to hit test in world coordinates.</param>
            <param name="fSlop">Amount to expand hit test point.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>
            Port that intersects the given point; NULL if no port is found at the point.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.UpdateViews">
            <summary>
            Fires the <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.ViewUpdate"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.BeginUpdate">
            <summary>
            Disables any redrawing of the Model.
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.EndUpdate(System.Boolean)"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.InUpdate"/>
            </summary>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.EndUpdate(System.Boolean)">
            <summary>
            Enables the redrawing of the Model.
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.BeginUpdate"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.InUpdate"/>
            </summary>
            <param name="updateviews">True if the attached Views have to be redrawn.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.DrawBackground(System.Drawing.Graphics)">
            <summary>
            Renders the model background using the brush defined by the <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.BackgroundStyle"/> property.
            </summary>
            <param name="grfx">Graphics context object to render onto.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.SortOnZOrder(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Sorts the given collection of nodes based on their Z-order.
            </summary>
            <param name="nodes">Collection of nodes to sort.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.ReverseSortOnZOrder(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Sorts the given collection of nodes based on their Z-order.
            </summary>
            <param name="nodes">Collection of nodes to sort.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IPrint#PrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Prints a page to the specified output device.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.PrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Prints a page to the specified output device.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the model.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            model to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChild(System.Int32)">
            <summary>
            Returns the child node at the given index position.
            </summary>
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
            <returns>Child node at the given position or NULL if the index is out of range.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChildByName(System.String)">
            <summary>
            Returns the child node matching the given name.
            </summary>
            <param name="childName">Name of node to return.</param>
            <returns>Node matching the given name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChildIndex(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the index position of the given child node.
            </summary>
            <param name="child">Child node to query.</param>
            <returns>Zero-based index into the collection of child nodes.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.AppendChild(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Appends the given node to the model.
            </summary>
            <param name="child">Node to append.</param>
            <returns>
            Zero-based index at which the node was added to the collection or -1 for failure.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.AppendChildren(Syncfusion.Windows.Forms.Diagram.INodeCollection,System.Int32@)">
            <summary>
            Appends the given collection of nodes as child nodes.
            </summary>
            <param name="children">Nodes to append.</param>
            <param name="startIdx">
            Zero-based index at which the first node was added to the collection of child nodes.
            </param>
            <returns>Number of child nodes appended.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.InsertChild(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Insert the given node into the model at a specific position.
            </summary>
            <param name="child">Node to insert.</param>
            <param name="childIndex">Zero-based index at which to insert the node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.RemoveChild(System.Int32)">
            <summary>
            Removes the child node at the given position.
            </summary>
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
            <returns>True if the node was successfully removed; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.RemoveAllChildren">
            <summary>
            Removes all child nodes from the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetConstrainingRegion(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the region that the bounds of the given child node is constrained by.
            </summary>
            <param name="child">Child to get constraining region for.</param>
            <returns>Region that constrains the bounds of the given child.</returns>
            <remarks>
            <para>
            This method is used to limit the bounds of a child node to a specified area.
            The node cannot be moved, resized, or rotated beyond the edges of this region.
            </para>
            <para>
            If the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.BoundaryConstraintsEnabled"/>
            property is set to True, this method returns a region that matches the bounds
            of the model. If BoundaryConstraintsEnabled is set to False, then this
            method returns NULL. The child parameter is basically ignored, since the
            implementation is the same for all child nodes. Derived model classes can
            take advantage of the child parameter to set constraints on a node by node
            basis.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.BoundaryConstraintsEnabled"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.CheckConstrainingRegion(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Tests to see if the given node falls within the constraining region
            of the composite node.
            </summary>
            <param name="node">Node to test.</param>
            <returns>
            True if node falls within the constraining region; False if it does
            not.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChildrenAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Returns all children that are intersected by the given point.
            </summary>
            <param name="childNodes">
            Collection in which to add the children hit by the given point.
            </param>
            <param name="ptWorld">Point to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of child nodes that intersect the given point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChildrenIntersecting(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Returns all children that intersect the given rectangle.
            </summary>
            <param name="childNodes">
            Collection in which to add the children hit by the given point.
            </param>
            <param name="rcWorld">Rectangle to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of child nodes that intersect the given rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChildrenIntersecting(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Returns all children that intersect the given line segment.
            </summary>
            <param name="nodes"></param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChildrenContainedBy(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Returns all children inside the given rectangle.
            </summary>
            <param name="childNodes">
            Collection in which to add the children inside the specified rectangle.
            </param>
            <param name="rcWorld">Rectangle to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of child nodes added to the collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetPropertyContainer(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the inherited property container for the given child node.
            </summary>
            <param name="childNode">The child node making the request.</param>
            <returns>Parent property container for the given node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the model onto the given System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Graphics context object to render onto.</param>
            <remarks>
            <para>
            The model initializes the given System.Drawing.Graphics object with
            the its:
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.LocalTransform"/>,
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementUnits"/>, and
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementScale"/>.
            Then it iterates through each layer in its
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.Layers"/>
            collections and draws each one.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDrawEx"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Draw(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Renders the specified area of the model to a graphics context.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
            <param name="rcArea">Area to render.</param>
            <remarks>
            <para>
            Only objects that intersect the specified rectangular area are rendered.
            </para>
            <para>
            The model initializes the given System.Drawing.Graphics object with
            the its:
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.LocalTransform"/>,
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementUnits"/>, and
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementScale"/>.
            Then it iterates through each layer in its
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.Layers"/>
            collections and draws each one.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDrawEx"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Translate(System.Single,System.Single)">
            <summary>
            Moves the model by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
            <remarks>
            Applies a translate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the model a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Rotate(System.Single)">
            <summary>
            Rotates the model a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Scales the model by a given ratio along the X and Y axes.
            </summary>
            <param name="ptAnchor">Fixed point about which to scale.</param>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Scale(System.Single,System.Single)">
            <summary>
            Scales the model about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetZOrder(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the Z-order value of the given node.
            </summary>
            <param name="node">Node to get Z-order for.</param>
            <returns>
            Zero-based Z-order value of the node or -1 if the node
            does not exist.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.SetZOrder(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Sets the Z-order of the given node.
            </summary>
            <param name="node">Node to set Z-order for.</param>
            <param name="zOrder">Zero-based Z-order value.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.BringForward(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Moves the specified node forward in the Z-order.
            </summary>
            <param name="node">Node to move forward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.SendBackward(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Sends the specified node back in the Z-order.
            </summary>
            <param name="node">Node to move backward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.BringToFront(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Brings the specified node to the front of the Z-order.
            </summary>
            <param name="node">Node to bring to the front.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.SendToBack(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Sends the specified node to the back of the Z-order.
            </summary>
            <param name="node">Node to send to the back.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called before a change is made to the collection of child nodes.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.ChildrenChanging"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called after a change is made to the collection of child nodes.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.ChildrenChangeComplete"/>
            event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnPropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.PropertyChanging"/>
            event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.PropertyChanged"/>
            event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnBoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of a node change.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.BoundsChanged"/>
            event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when the position of a node is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.Moved"/>
            event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when a node is rotated.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.Rotated"/>
            event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when a node is scaled.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Fires the
            <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.Scaled"/>
            event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Fires the <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.Click"/> event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnDoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is double clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Fires the <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.DoubleClick"/> event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnMouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse enters a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Fires the <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.MouseEnter"/> event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnMouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse leaves a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Fires the <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.MouseLeave"/> event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnInsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is inserted.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Fires the <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.InsertVertex"/> event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnMoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Fires the <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.MoveVertex"/> event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnDeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is deleted.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Fires the <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.DeleteVertex"/> event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called before a change is made to the list of connections of a symbol.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Fires the <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.ConnectionsChanging"/> event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called after a change is made to the list of connections of a symbol.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Fires the <see cref="E:Syncfusion.Windows.Forms.Diagram.Model.ConnectionsChangeComplete"/> event.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnMeasurementUnitsChanging(Syncfusion.Windows.Forms.Diagram.LogicalUnitsEventArgs)">
            <summary>
            Called before the logical unit of measure is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnMeasurementScaleChanging(Syncfusion.Windows.Forms.Diagram.LogicalScaleEventArgs)">
            <summary>
            Called before the measurement scale is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnControlNodeInfo(Syncfusion.Windows.Forms.Diagram.ControlNodeEventArgs)">
            <summary>
            Called when a <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> requires information for the Windows Forms control.
            </summary>
            <param name="evtArgs">The event argument of type <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNodeEventArgs"/></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnPropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called before the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called after the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of a node changes.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnBoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when a node is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when a node is rotated.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when a node is scaled.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Click(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is double clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnDoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse enters a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnMouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse leaves a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnMouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#InsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is inserted into a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnInsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is deleted from a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnDeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnMoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called before a change is made to the connection list of a symbol.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called after a change is made to the connection list of a symbol.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.OnConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.CreateStyles">
            <summary>
            Creates style objects for this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GenerateUniqueNodeName(Syncfusion.Windows.Forms.Diagram.INode,System.String@)">
            <summary>
            Called to generate a unique name when inserting a new node.
            </summary>
            <param name="obj">Node to generate unique name for.</param>
            <param name="nodeName">Node name generated.</param>
            <returns>
            True if a new name was generated; False if the name is already unique.
            </returns>
            <remarks>
            <para>
            The implementation of this method first checks to see if the name is
            already unique. If it is, then it returns False to the caller and
            the nodeName parameter contains the original name. If the node's name
            is not unique within the model, then this method adds a numeric suffix
            to the name and continues to increment it in a loop until the name
            is unique. If the nodeName output parameter contains a value other
            than the original node name, then this method returns True.
            </para>
            <para>
            This method can be overriden in derived classes in order to customize or
            replace the algorithm for generating unique names.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ILogicalUnitContainer"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.BackgroundStyle"/>
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.name">
            <summary>
            Name of the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.parent">
            <summary>
            Reference to parent node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.bounds">
            <summary>
            Logical bounds of the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.matrix">
            <summary>
            Local transformation matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.children">
            <summary>
            Collection of child nodes belonging to the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.layers">
            <summary>
            Collection of layers in the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.defaultLayer">
            <summary>
            Layer to which new nodes are assigned to.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.nameTable">
            <summary>
            Maps node names to node objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.propertyValues">
            <summary>
            Collection of property name and value pairs.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.fillStyle">
            <summary>
            Properties for filling shapes in the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.lineStyle">
            <summary>
            Properties for drawing lines in the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.shadowStyle">
            <summary>
            Properties for shadows in the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.renderingStyle">
            <summary>
            Properties for rendering the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.backgroundStyle">
            <summary>
            Properties for filling the background of the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.measurementUnits">
            <summary>
            Unit of measure used for world coordinates.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.measurementScale">
            <summary>
            Scaling ratio between world coordinates and view coordinates.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.eventsEnabled">
            <summary>
            Determines if events will be fired or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.isModified">
            <summary>
            Flag to indicate if the model has been modified.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.pageSettings">
            <summary>
            Page settings used for printing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.boundaryConstraintsEnabled">
            <summary>
            Indicates whether or not boundary constraints are enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.rgnConstraint">
            <summary>
            Region that child nodes are constrained to.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.nCurrentPage">
            <summary>
            Keeps track of the current print page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.bInUpdate">
            <summary>
            Temporarily freezes redrawing of the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.disposed">
            <summary>
            Indicates if the Dispose() method has been called.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Nodes">
            <summary>
            Collection of child nodes belonging to model.
            </summary>
            <remarks>
            <para>
            This property returns the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.INodeCollection"/>
            interface to the child nodes, which provides Read-only access to the
            children. In order to add and remove child nodes, use the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.AppendChild(Syncfusion.Windows.Forms.Diagram.INode,Syncfusion.Windows.Forms.Diagram.Layer)"/>
            and
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.RemoveChild(System.Int32)"/>
            methods.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.INodeCollection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.INode"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Layers">
            <summary>
            Collection of layers in the model.
            </summary>
            <remarks>
            <para>
            A layer is a collection of nodes that share a common set of default properties
            and the same Z-order relative to other layers. A model always contains at least
            one layer. Each node in the model belongs to one and only one layer. The model
            renders itself onto the view by iterating through this collection and rendering
            each layer. Each layer is responsible for rendering the nodes belonging to
            it. The
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LayerCollection.PropertyContainer"/>
            of this collection is a reference back to the model which allows the layers to
            inherit properties from the model. The DefaultLayer property determines which
            layer a node is assigned to when it is added to the model.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.DefaultLayer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.DefaultLayer">
            <summary>
            Determines which layer nodes are assigned to when they are added to the model.
            </summary>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.Layers"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.DefaultLayerName">
            <summary>
            Name of the default layer.
            </summary>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.Layers"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.DefaultLayer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Modified">
            <summary>
            Flag indicating if the model has been modified.
            </summary>
            <remarks>
            This flag is set to True when any property of the model changes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementUnits">
            <summary>
            Unit of measure used for world coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementScale">
            <summary>
            Scaling ratio between world coordinates and view coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.BoundaryConstraintsEnabled">
            <summary>
            Indicates if boundary constraints are enabled or not.
            </summary>
            <remarks>
            <para>
            This property is True by default. If this property is True, then all nodes
            in the model are constrained to the bounds of the model. In other words,
            child nodes cannot move, resize, or rotate to a position that leaves the
            bounds of the model.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Model.GetConstrainingRegion(Syncfusion.Windows.Forms.Diagram.INode)"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.EventsEnabled">
            <summary>
            Determines whether the model fires events or not.
            </summary>
            <remarks>
            This property is useful for temporarily disabling events during
            time critical operations.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.FillStyle">
            <summary>
            Properties used to fill the interior of regions.
            </summary>
            <remarks>
            <para>
            The fill style is used to create brushes for painting interior regions of
            shapes.
            </para>
            <para>
            The fill style properties in the model are inherited by child nodes. If a
            child node does not have a value assigned to a given fill style property,
            then the value assigned to the model is used.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.LineStyle"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.BackgroundStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.LineStyle">
            <summary>
            Properties used for drawing lines.
            </summary>
            <remarks>
            <para>
            The line style is used to create pens for painting drawing lines.
            </para>
            <para>
            The line style properties in the model are inherited by child nodes. If a
            child node does not have a value assigned to a given line style property,
            then the value assigned to the model is used.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.FillStyle"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.BackgroundStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.BackgroundStyle">
            <summary>
            Properties for filling the background of the model.
            </summary>
            <remarks>
            <para>
            The background style properties determine how the background of the
            model will be filled. The BackgroundStyle class is identical to the
            FillStyle class, with the exception that the underlying property names
            used in the property container are different in order to avoid
            ambiguity. The FillStyle is used to provide default properties to
            child nodes. The BackgroundStyle is used by the model in its
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.Draw(System.Drawing.Graphics)"/> method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BackgroundStyle"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.FillStyle"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.LineStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.ShadowStyle">
            <summary>
            Properties used to draw shadows of filled shapes.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ShadowStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.RenderingStyle">
            <summary>
            Properties used to control rendering.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RenderingStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.InUpdate">
            <summary>
            Indicates whether the model redrawing is enabled.
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.BeginUpdate"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Model.EndUpdate(System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.PageSettings">
            <summary>
            Page settings to use when creating a print document for the model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Parent">
            <summary>
            Reference to the composite node this node is a child of.
            </summary>
            <remarks>
            If the model is the root node in the hierarchy, this property will
            be NULL. The model may also belong to another composite node, in which
            case the property will reference that composite node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Root">
            <summary>
            The root node in the node hierararchy.
            </summary>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Name">
            <summary>
            Name of the model.
            </summary>
            <remarks>
            Must be unique within the scope of the parent node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.FullName">
            <summary>
            Fully qualified name of the model.
            </summary>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.ChildCount">
            <summary>
            The number of child nodes contained by this model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Bounds">
            <summary>
            The model's bounding box.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.X">
            <summary>
            X-coordinate of the model's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Y">
            <summary>
            Y-coordinate of the model's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Width">
            <summary>
            Width of the model's bounding box.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Height">
            <summary>
            Height of the model's bounding box.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.LocalTransform">
            <summary>
            Matrix containing local transformations for this node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.WorldTransform">
            <summary>
            Returns a matrix containing transformations for this node and all of
            its ancestors.
            </summary>
            <remarks>
            Chains up the node hierarchy and builds a transformation matrix containing
            all transformations that apply to this node in the world coordinate space.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.ParentTransform">
            <summary>
            Returns a matrix containing the transformations of this node's parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.ZOrderDepth">
            <summary>
            Number of items in the Z-order for this container.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.ChildrenChanging">
            <summary>
            Fired before the collection of child nodes is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.ChildrenChangeComplete">
            <summary>
            Fired after the collection of child nodes is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.PropertyChanging">
            <summary>
            Fired before the value of a property in the model or a child node is modified.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.PropertyChanged">
            <summary>
            Fired when a property of the model or a child node is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.BoundsChanged">
            <summary>
            Fired when the bounds of the model or a child node change.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.MeasurementUnitsChanging">
            <summary>
            Fired when the logical unit of measure changes.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.MeasurementScaleChanging">
            <summary>
            Fired when the scale of logical units changes.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.Moved">
            <summary>
            Fired when a child node is moved.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.Rotated">
            <summary>
            Fired when a child node is rotate.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.Scaled">
            <summary>
            Fired when a child node is scaled.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.Click">
            <summary>
            Fired when a child node is single clicked.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.DoubleClick">
            <summary>
            Fired when a child node is double clicked.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.MouseEnter">
            <summary>
            Fired when the mouse enters a child node.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.MouseLeave">
            <summary>
            Fired when the mouse leaves a child node.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.InsertVertex">
            <summary>
            Fired when a vertex is inserted into a child node.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.MoveVertex">
            <summary>
            Fired when a vertex belonging to a child node is moved.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.DeleteVertex">
            <summary>
            Fired when a vertex belonging to a child node is deleted.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.ConnectionsChanging">
            <summary>
            Fired before a change is made to the connection list of a symbol.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.ConnectionsChangeComplete">
            <summary>
            Fired after a change is made to the connection list of a symbol.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.ViewUpdate">
            <summary>
            Fired after one or more changes occur that require attached views
            to redraw.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Model.ControlNodeInfo">
            <summary>
            Fired when a <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> requires information for the 
            Windows Forms Control hosted in it.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeCompare">
            <summary>
            Delegate for comparing two nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeEventArgs">
            <summary>
            Arguments for node events.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.INode"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Constructs node event arguments given a node.
            </summary>
            <param name="node">Node involved in the event.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeEventArgs.Node">
            <summary>
            Node the event applies to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeEventArgs.ContinueOperation">
            <summary>
            Flag indicating if the operation that generated the event should continue
            or be aborted.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeEventHandler">
            <summary>
            Delegate for node events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs">
            <summary>
            Arguments for bounds events.
            </summary>
            <remarks>
            A bounds event notifies event subscribers that the bounding box of a
            node has changed.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.INode,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Construct a BoundsEventArgs object given the node, old bounds, and new bounds.
            </summary>
            <param name="node">Node the event applies to.</param>
            <param name="oldBounds">Bounds before the event occurred.</param>
            <param name="newBounds">Bounds after the event occurred.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs.OldBounds">
            <summary>
            Bounds before the event occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs.NewBounds">
            <summary>
            Bounds after the event occurred.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BoundsEventHandler">
            <summary>
            Delegate for node bounds events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs">
            <summary>
            Arguments for node mouse events.
            </summary>
            <remarks>
            A mouse event notifies event subscribers of mouse events that affect a
            node.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Construct a NodeMouseEventArgs object given a node.
            </summary>
            <param name="node">Node the event applies to.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventHandler">
            <summary>
            Delegate for node mouse events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs">
            <summary>
            Arguments for vertex events.
            </summary>
            <remarks>
            A vertex notifies event subscribers that a vertex in a node has been modified,
            added, or removed.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Constructs a VertexEventArgs object given a node and a vertex index.
            </summary>
            <param name="node">Node the event applies to.</param>
            <param name="vertexIdx">Zero-based index position of the vertex affected.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VertexEventArgs.Vertex">
            <summary>
            Zero-based index position of the vertex affected.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VertexEventHandler">
            <summary>
            Delegate for vertex events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ControlNodeEventInfo">
            <summary>
            Specifies the type of information required by the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> 
            generating the <see cref="!:Syncfusion.Windows.Forms.Diagram.ControlNodeEvent"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNodeEventInfo.ChildControlCreated">
            <summary>
            Specifies that an instance of the child control was created by the sender ControlNode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNodeEventInfo.GetChildControl">
            <summary>
            Specifies that a child control is required by the sender ControlNode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNodeEventInfo.GetParentControl">
            <summary>
            Specifies that a parent control is required for the sender ControlNode's child control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ControlNodeEventArgs">
            <summary>
            Argument for <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> events.
            </summary>
            <remarks>
            ControlNode events provide a mechanism for obtaining information related to the Windows Forms 
            control hosted in a ControlNode.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNodeEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.INode,Syncfusion.Windows.Forms.Diagram.ControlNodeEventInfo)">
            <summary>
            Constructs a ControlNodeEventArgs object given the event information.
            </summary>
            <param name="node">Node the event applies to.</param>
            <param name="info">Information about the event.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNodeEventArgs.EventInfo">
            <summary>
            The event information.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ControlNodeEventHandler">
            <summary>
            Delegate for the <see cref="!:Syncfusion.Windows.Forms.Diagram.ControlNodeInfo"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Ruler">
            <summary>
            Abstract base class for rulers.
            </summary>
            <remarks>
            <para>
            Rulers provide a visual reference for the units of measure in a diagram.
            </para>
            <see cref="T:Syncfusion.Windows.Forms.Diagram.HorizontalRuler"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VerticalRuler"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ruler.#ctor(Syncfusion.Windows.Forms.Diagram.View,Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            Constructs a ruler given a View and a property container.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ruler.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the ruler onto a graphics context.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Ruler.propContainer">
            <summary>
            Property container to access for properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.PropertyContainer">
            <summary>
            Reference to object that contains the grid property values.
            </summary>
            <remarks>
            <para>
            The properties of the grid are stored in a separate property container.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.PropertyPrefix">
            <summary>
            Name prefix for properties belonging to the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.Visible">
            <summary>
            Determines if the ruler is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.Bounds">
            <summary>
            Gets the bounding rectangle of the ruler.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HorizontalRuler">
            <summary>
            Horizontal ruler that draws hash marks left to right.
            </summary>
            <see cref="T:Syncfusion.Windows.Forms.Diagram.HorizontalRuler"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HorizontalRuler.#ctor(Syncfusion.Windows.Forms.Diagram.View,Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            Creates a new instance of the HorizontalRuler.
            </summary>
            <param name="containerView">The <see cref="T:Syncfusion.Windows.Forms.Diagram.View"/> containing the ruler.</param>
            <param name="propContainer">The <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/> for the ruler.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HorizontalRuler.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the ruler onto a graphics context.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HorizontalRuler.PropertyPrefix">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HorizontalRuler.Bounds">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VerticalRuler">
            <summary>
            Vertical ruler that draws hash marks top to bottom.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerticalRuler.#ctor(Syncfusion.Windows.Forms.Diagram.View,Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            Creates a new instance of the VerticalRuler.
            </summary>
            <param name="containerView">The <see cref="T:Syncfusion.Windows.Forms.Diagram.View"/> containing the ruler.</param>
            <param name="propContainer">The <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/> for the ruler.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerticalRuler.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the ruler onto a graphics context.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VerticalRuler.PropertyPrefix">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VerticalRuler.Bounds">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.View">
            <summary>
            A view encapsulates a rectangular area inside of a control and renders
            a <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/> onto it.
            </summary>
            <remarks>
            <para>
            A view is responsible for rendering the diagram onto a control surface
            (i.e. window). It contains a reference to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/> which contains the
            data portion of the diagram. The view renders the model onto a
            System.Drawing.Graphics context object belonging to the control that
            the view is hosted in. The view also renders other visual cues and decorations
            that are not persisted in the model, such as selection handles.
            </para>
            <para>
            The <see cref="P:Syncfusion.Windows.Forms.Diagram.View.ParentControl"/>
            property contains a reference to the control hosting the view.
            </para>
            <para>
            The view is responsible for conversions between world, view, and device
            coordinates. The model belongs to the world coordinate space. The view
            maps world coordinates onto view coordinates by applying its
            <see cref="P:Syncfusion.Windows.Forms.Diagram.View.Magnification"/>
            and
            <see cref="P:Syncfusion.Windows.Forms.Diagram.View.Origin"/>
            settings, which are used to implement zooming and scrolling. In other
            words, world coordinates are mapped to view coordinates by applying
            a transformation that translates to the origin and scales by a
            magnification percentage. Both world and view coordinates are stored
            as floating point numbers. View coordinates are mapped to device
            coordinates based on the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementUnits"/>
            and
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementScale"/>
            settings in the model and the resolution (DPI) of the output device.
            The default PageUnit setting is pixel and the default PageScale setting
            is 1, which results in a 1-1 mapping from view to device coordinates.
            If the PageUnit is set to Inch, the PageScale is 0.5, and the resolution
            is 96 dpi then 1 logical unit in view coordinates will equal
            (1 * 96) * 0.5 = 48 pixels.
            </para>
            <para>
            The view provides methods for performing hit testing nodes, selection
            handles, vertices, and ports. The hit testing methods take points
            in device coordinates and perform the necessary conversion to world
            coordinates.
            </para>
            <para>
            The view also provides methods for drawing tracking objects. A tracking
            object is an outline of a rectangle or shape that is moved or tracked
            across the screen in response to mouse movements. The view has methods
            for drawing tracking outlines of rectangles, lines, polygons, curves,
            and System.Drawing.GraphicsPath objects. These tracking methods are
            typically used by user interface
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/> objects to
            track mouse movements.
            </para>
            <para>
            The view contains public methods that can be called to render and
            repaint onto the host control. The view uses a technique called back
            buffering, which divides rendering into two stages. First, the view
            renders onto a memory-based bitmap image (the back buffer). The back
            buffer is then painted onto the host control. This technique eliminates
            flicker and has the added benefit of leaving the view with an in-memory
            representation of the last frame it rendered. The back buffer can be
            accessed through the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.View.DrawingSurface"/>
            property.
            </para>
            <para>
            The <see cref="M:Syncfusion.Windows.Forms.Diagram.View.Draw"/> method
            renders the back buffer and updates the control. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.View.Refresh(System.Drawing.Rectangle)"/>
            method takes a portion of the back buffer and draws it onto the host
            control without re-rendering the back buffer. This is handy for things
            like tracking, which temporarily clutter up the view and need to
            repaint it without incurring the overhead of rendering.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Controller"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IBounds2D">
            <summary>
            Interface to objects with 2-dimensional, integer bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IBounds2D.Location">
            <summary>
            (X,Y) location of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IBounds2D.Size">
            <summary>
            Width and height of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IBounds2D.X">
            <summary>
            X-coordinate of the object's location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IBounds2D.Y">
            <summary>
            Y-coordinate of the object's location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IBounds2D.Width">
            <summary>
            Width of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IBounds2D.Height">
            <summary>
            Height of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IBounds2D.Bounds">
            <summary>
            Bounds of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.#ctor">
            <summary>
            Default constructor for the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructs a view object for a given parent control.
            </summary>
            <param name="parentControl">Parent control (i.e. window) hosting the view.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.#ctor(System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a view for a given parent control with the given dimensions.
            </summary>
            <param name="parentControl">Parent control (i.e. window) to host the view.</param>
            <param name="top">Top of view bounds.</param>
            <param name="left">Left of view bounds.</param>
            <param name="width">Width of view bounds.</param>
            <param name="height">Height of view bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for views.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Dispose(System.Boolean)">
            <summary>
            Called to release resources held by the view.
            </summary>
            <param name="disposing">
            Indicates if this method is being called explicitly by a call to Dispose()
            or by the destructor through the garbage collector.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Initialize(System.Windows.Forms.Control)">
            <summary>
            Attaches the view to a given parent control.
            </summary>
            <param name="parentControl">Parent control hosting the view.</param>
            <remarks>
            <para>
            Stores a reference to the parent control in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.View.ParentControl"/>
            property and caches the device resolution.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.RefreshPageSettings">
            <summary>
            Refreshes the view's page size with the new bounds obtained from the <see cref="!:Model.PageSettings"/> property.
            </summary>
            <remarks>
            Call this method when the <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>'s page settings have undergone a change.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetViewTransform">
            <summary>
            Returns a transformation matrix that maps world coordinates to view
            coordinates.
            </summary>
            <returns>Transformation matrix.</returns>
            <remarks>
            <para>
            The view transformation maps world coordinates to view coordinates.
            It is calculated by translating by the offset specified in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.View.Origin"/>
            property and scaling by the value in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.View.Magnification"/>
            property.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.Origin"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.Magnification"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ScrollBy(System.Single,System.Single)">
            <summary>
            Scrolls the view origin by a given X and Y offset.
            </summary>
            <param name="dx">X offset.</param>
            <param name="dy">Y offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.SnapPointToGrid(System.Drawing.Point)">
            <summary>
            Takes a device point and returns the nearest grid point.
            </summary>
            <param name="ptDevIn">Point to snap.</param>
            <returns>Point on the grid nearest the input point.</returns>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.Grid"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.SnapPointToGrid(System.Int32,System.Int32)">
            <summary>
            Takes a device point and returns the nearest grid point.
            </summary>
            <param name="x">X coordinate of point to snap.</param>
            <param name="y">Y coordinate of point to snap.</param>
            <returns>Point on the grid nearest the input point.</returns>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.Grid"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetHandleEditMode(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the handle edit mode for a given node.
            </summary>
            <param name="node">Node to check.</param>
            <returns>Edit mode for selection handles of the given node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Update">
            <summary>
            Draws the entire view and refreshes the window if changes have occurred.
            </summary>
            <returns>True if view redrawn; False if no redraw occurs.</returns>
            <remarks>
            <para>
            This method updates the view if changes have occurred that require
            a redraw.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Update(System.Drawing.Graphics)">
            <summary>
            Draws the entire view and refreshes the window if changes have occurred.
            </summary>
            <param name="grfx">Graphics context object to render to.</param>
            <returns>True if view redrawn; False if no redraw occurs.</returns>
            <remarks>
            <para>
            This method updates the view if changes have occurred that require
            a redraw.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Update(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Draws the entire view and refreshes the window if changes have occurred.
            </summary>
            <param name="grfx">Graphics context object to render to.</param>
            <param name="forceRefresh">Causes paint to graphics context even if the view is not re-rendered.</param>
            <returns>True if view redrawn; False if no redraw occurs.</returns>
            <remarks>
            <para>
            This method updates the view if changes have occurred that require
            a redraw.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Update(System.Boolean)">
            <summary>
            Draws the entire view and refreshes the window if changes have occurred.
            </summary>
            <param name="bforceredraw">Setting this to True will force the view to redraw itself even if no changes have occurred.</param>
            <returns>True if view is redrawn; False if no redraw occurs.</returns>
            <remarks>
            <para>
            This method optionally forces the view to redraw itself even if no changes have occurred.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Draw">
            <summary>
            Renders the view to the back buffer.
            </summary>
            <remarks>
            This method creates the back buffer if necessary.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the view onto a System.Drawing.Graphics context object.
            </summary>
            <param name="grfx">Graphics context object to render to.</param>
            <remarks>
            <para>
            This method first renders the view onto the back buffer. It fills
            the buffer with the view's background color, draws the grid and
            page bounds, and then draws the model. Then paints the back
            buffer onto the graphics context.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawMargins(System.Drawing.Graphics)">
            <summary>
            Draw the content of the margins.
            </summary>
            <param name="grfx">Graphics context to render to.</param>
            <remarks>
            <para>
            The default implementation draws the horizontal and vertical rulers,
            if they are visible. This method can be overridden in derived classes.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawMarginIntersection(System.Drawing.Graphics)">
            <summary>
            Draws the upper-left hand corner of the margin where the left and top
            margins intersect.
            </summary>
            <param name="grfx">Graphics context to render to.</param>
            <remarks>
            <para>
            The default implementation fills the rectangular area with the
            ruler fill color.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.RulerFillColor"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Refresh(System.Drawing.Rectangle)">
            <summary>
            Transfers a rectangular area of the back buffer onto the parent
            control.
            </summary>
            <param name="rect">Bounding rectangle of area to refresh.</param>
            <remarks>
            <para>
            This method is used to repaint an area of the parent control without
            rendering the back buffer. It uses the current contents of the back
            buffer and draws it onto a rectangular area of the parent control.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Refresh">
            <summary>
            Transfers the back buffer onto the parent control.
            </summary>
            <remarks>
            <para>
            This method is used to repaint the view onto the parent control without
            rendering the back buffer. It uses the current contents of the back
            buffer and draws it onto the parent control.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Refresh(System.Drawing.Graphics)">
            <summary>
            Transfers the back buffer to the given graphics context.
            </summary>
            <param name="grfx">Graphics context to paint the back buffer onto.</param>
            <remarks>
            <para>
            This method is used to repaint the view onto a graphics context without
            rendering the back buffer. It uses the current contents of the back
            buffer and draws it onto the graphics context.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ExportDiagramAsImage">
            <summary>
            Exports a representation of the diagram as a bitmap image.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ExportDiagramAsWebImage">
            <summary>
            Exports a representation of the diagram as a bitmap image.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawPageBounds(System.Drawing.Graphics)">
            <summary>
            Draws lines on the view that indicate where page boundaries exist.
            </summary>
            <param name="grfx">Graphics context object on which to draw.</param>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.ShowPageBounds"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.PageSettings"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.CalcHandleRect(System.Drawing.Point)">
            <summary>
            Calculates the bounds of a handle from a given point based on the handle size.
            </summary>
            <param name="ptDevice">Point on which to center the handle bounds.</param>
            <returns>Rectangle in view coordinates.</returns>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.HandleSize"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.CalcHandleRect(System.Drawing.Rectangle,Syncfusion.Windows.Forms.Diagram.BoxPosition)">
            <summary>
            Calculates the bounds of a handle given a box position on a rectangle.
            </summary>
            <param name="rect">Bounding rectangle of selected object.</param>
            <param name="pos">Position of handle on the bounding rectangle.</param>
            <returns>Rectangle in view coordinates.</returns>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.HandleSize"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawResizeHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.INode,System.Boolean)">
            <summary>
            Draws resize handles around the given node.
            </summary>
            <param name="grfx">Graphics context on which to draw.</param>
            <param name="node">Node to draw handles for.</param>
            <param name="isAnchor">
            Flag indicating if the node is the anchor for the selection list.
            </param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawVertexHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.INode,System.Boolean)">
            <summary>
            Draws vertex handles for the given node.
            </summary>
            <param name="grfx">Graphics context on which to draw.</param>
            <param name="node">Node to draw handles for.</param>
            <param name="isAnchor">
            Flag indicating if the node is the anchor for the selection list.
            </param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawSelectOutline(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.INode,System.Boolean)">
            <summary>
            Draws an outline around the bounds of the given node to indicate that it is selected.
            </summary>
            <param name="grfx">Graphics context on which to draw.</param>
            <param name="node">Node to draw select outline around.</param>
            <param name="isAnchor">
            Flag indicating if the node is the anchor for the selection list.
            </param>
            <returns>true if successful; otherwise false</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawSelectionHandles(System.Drawing.Graphics)">
            <summary>
            Draws selection handles for the nodes in the selection list.
            </summary>
            <param name="grfx">Graphics context to draw onto.</param>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.SelectionList"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DeviceToView(System.Drawing.Point)">
            <summary>
            Converts the given point from device coordinates to view coordinates.
            </summary>
            <param name="ptDevice">Point to convert.</param>
            <returns>Point in view coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DeviceToView(System.Drawing.Point[],System.Drawing.PointF[]@)">
            <summary>
            Converts the given array of points from device coordinates to
            view coordinates.
            </summary>
            <param name="devicePts">Device points to convert.</param>
            <param name="viewPts">Converted points in view coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DeviceToView(System.Drawing.Rectangle)">
            <summary>
            Converts the given rectangle from device coordinates to view
            coordinates.
            </summary>
            <param name="rcDevice">Rectangle to convert.</param>
            <returns>Converted rectangle in view coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DeviceToView(System.Drawing.Size)">
            <summary>
            Converts the given size from device to view coordinates.
            </summary>
            <param name="szDevice">Size to convert.</param>
            <returns>Converted size in view coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ViewToWorld(System.Drawing.PointF)">
            <summary>
            Converts the given point from view coordinates to world coordinates.
            </summary>
            <param name="ptView">Point to convert.</param>
            <returns>Converted point in world coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ViewToWorld(System.Drawing.RectangleF)">
            <summary>
            Converts the given rectangle from view coordinates to world coordinates.
            </summary>
            <param name="rcView">Rectangle to convert.</param>
            <returns>Converted rectangle in world coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ViewToWorld(System.Drawing.SizeF)">
            <summary>
            Converts the given size from view coordinates to world coordinates.
            </summary>
            <param name="szView">Size to convert.</param>
            <returns>Converted size in world coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ViewToWorld(System.Drawing.PointF[],System.Drawing.PointF[]@)">
            <summary>
            Converts the given array of points from view coordinates to world coordinates.
            </summary>
            <param name="viewPts">Points to convert.</param>
            <param name="worldPts">Converted points in world coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.WorldToView(System.Drawing.RectangleF)">
            <summary>
            Converts the given rectangle from world coordinates to view coordinates.
            </summary>
            <param name="rcWorld">Rectangle to convert.</param>
            <returns>Converted rectangle in view coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.WorldToView(System.Drawing.PointF)">
            <summary>
            Converts the given point from world coordinates to view coordinates.
            </summary>
            <param name="ptWorld">Point to convert.</param>
            <returns>Converted point in view coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.WorldToView(System.Drawing.PointF[],System.Drawing.PointF[]@)">
            <summary>
            Converts the given array of points from world coordinates to view coordinates.
            </summary>
            <param name="worldPts">Points to convert.</param>
            <param name="viewPts">Converted points in view coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.WorldToView(System.Drawing.SizeF)">
            <summary>
            Converts the given size from world coordinates to view coordinates.
            </summary>
            <param name="szWorld">Size to convert.</param>
            <returns>Converted size in view coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ViewToDevice(System.Drawing.PointF)">
            <summary>
            Converts the given point from view coordinates to device coordinates.
            </summary>
            <param name="ptView">Point to convert.</param>
            <returns>Converted point in device coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ViewToDevice(System.Drawing.SizeF)">
            <summary>
            Converts the given size from view coordinates to device coordinates.
            </summary>
            <param name="szView">Size to convert.</param>
            <returns>Converted size in device coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ViewToDeviceF(System.Drawing.PointF)">
            <summary>
            Converts the given point from view coordinates to device coordinates.
            </summary>
            <param name="ptView">Point to convert.</param>
            <returns>Converted point in device coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ViewToDevice(System.Drawing.RectangleF)">
            <summary>
            Converts the given rectangle from view coordinates to device coordinates.
            </summary>
            <param name="rcView">Rectangle to convert.</param>
            <returns>Converted rectangle in device coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ViewToDevice(System.Drawing.PointF[],System.Drawing.Point[]@)">
            <summary>
            Converts the given array of points from view coordinates to device coordinates.
            </summary>
            <param name="viewPts">Array of points to convert.</param>
            <param name="devicePts">Converted points in device coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ViewToDeviceF(System.Drawing.SizeF)">
            <summary>
            Converts the given size from view coordinates to device coordinates.
            </summary>
            <param name="szView">Size to convert.</param>
            <returns>Converted size in device coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ViewToDeviceF(System.Drawing.RectangleF)">
            <summary>
            Converts the given rectangle from view coordinates to device coordinates.
            </summary>
            <param name="rcView">Rectangle to convert.</param>
            <returns>Converted rectangle in device coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetDevicePoints(Syncfusion.Windows.Forms.Diagram.IPoints)">
            <summary>
            Converts the points in the given IPoints object from world coordinates
            to device coordinates.
            </summary>
            <param name="objPts">Object containing points.</param>
            <returns>Array of device points.</returns>
            <remarks>
            <para>
            Retrieves the points from the object using the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IPoints.GetPoints"/>
            method and converts them from world coordinates to device
            coordinates.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetNodesAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.Point)">
            <summary>
            Finds all of the nodes in the model that intersect the given point.
            </summary>
            <param name="nodes">Collection in which to add the children hit.</param>
            <param name="ptScreen">Point to test in device coordinates.</param>
            <returns>Number of nodes hit.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetNodesIntersecting(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.Rectangle)">
            <summary>
            Finds all of the nodes in the model that intersect the given rectangle.
            </summary>
            <param name="nodes">Collection in which to add the children hit.</param>
            <param name="rcScreen">Rectangle to test in device coordinates.</param>
            <returns>Number of nodes hit.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetNodesContainedBy(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.Rectangle)">
            <summary>
            Finds all of the nodes in the model contained by the given rectangle.
            </summary>
            <param name="nodes">Collection in which to add the children hit.</param>
            <param name="rcScreen">Rectangle to test in device coordinates.</param>
            <returns>Number of nodes hit.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetNodesAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.Point)">
            <summary>
            Finds all of the nodes in the given list that intersect the given
            point.
            </summary>
            <param name="nodesHit">Collection in which to add the children hit.</param>
            <param name="nodesIn">Collection of nodes to hit test.</param>
            <param name="ptScreen">Point to test in device coordinates.</param>
            <returns>Number of nodes hit.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetResizeHandleAtPoint(System.Drawing.Point,Syncfusion.Windows.Forms.Diagram.BoxPosition@)">
            <summary>
            Looks for a resize handle at the given point.
            </summary>
            <param name="ptScreen">Point to test in device coordinates.</param>
            <param name="handlePos">Position of the resize handle hit.</param>
            <returns>
            Reference to the node that contains the handle or NULL if no resize
            handle was found at the given point.
            </returns>
            <remarks>
            <para>
            This method returns NULL if a resize handle is not found at the
            specified point. If a resize handle is found, then it returns the
            node that owns the resize handle and the position of the resize
            handle is returned in the handlePos parameter.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetVertexHandleAtPoint(System.Drawing.Point,System.Int32@)">
            <summary>
            Looks for a vertex handle at the given point.
            </summary>
            <param name="ptScreen">Point to test in device coordinates.</param>
            <param name="vertexIdx">Index position of the vertex hit.</param>
            <returns>
            Reference to the node that contains the vertex or NULL if no vertex
            handle was found at the given point.
            </returns>
            <remarks>
            <para>
            This method returns NULL if a vertex handle is not found at the
            specified point. If a vertex handle is found, then it returns the
            node that owns the handle and the index position of the vertex
            is returned in the vertexIdx parameter.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetPortAt(System.Drawing.Point,System.Int32)">
            <summary>
            Looks for a port at the given point.
            </summary>
            <param name="ptScreen">Point to test in device coordinates.</param>
            <param name="nSlop">Fudge factor for hit test.</param>
            <returns>
            The port found at the given point or NULL if no port intersects the
            given point.
            </returns>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetPortAt(Syncfusion.Windows.Forms.Diagram.IPortContainer,System.Drawing.Point,System.Int32)">
            <summary>
            Look for a port at the given point in the specified port container.
            </summary>
            <param name="portContainer">Object containing ports to hit test.</param>
            <param name="ptScreen">Point to test in device coordinates.</param>
            <param name="nSlop">Fudge factor for hit test.</param>
            <returns>
            The port found at the given point or NULL if no port intersects the
            given point.
            </returns>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.HitTestLineSegments(Syncfusion.Windows.Forms.Diagram.ILineSegments,System.Drawing.Point)">
            <summary>
            Hit tests the given collection of line segments.
            </summary>
            <param name="lineSegs">Line segments to hit test.</param>
            <param name="ptScreen">Point to test in device coordinates.</param>
            <returns>
            Zero-based index of the line segment hit or -1 if the hit test fails.
            </returns>
            <remarks>
            <para>
            This method tests to see if the given point hits one
            of the line segments in the object passed in.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawMouseTracker(System.Drawing.Point)">
            <summary>
            Draw hash marks to track the movement of the mouse in the view.
            </summary>
            <param name="loc">Mouse location to track.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.EraseMouseTracker(System.Drawing.Point)">
            <summary>
            Erase the mouse tracking at the specified location.
            </summary>
            <param name="loc">Location to erase.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawMouseTracker(System.Drawing.Rectangle)">
            <summary>
            Draw tracking bars in the margins to track the movement of the mouse.
            </summary>
            <param name="rect">Rectangle to track.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.EraseMouseTracker(System.Drawing.Rectangle)">
            <summary>
            Erases mouse tracking in a given range.
            </summary>
            <param name="rect">Tracking rectangle to erase.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawTrackingRect(System.Drawing.Rectangle)">
            <summary>
            Draws a tracking outline a rectangle.
            </summary>
            <param name="rect">Position of rectangle to draw.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawTrackingRect(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Draws a tracking outline a rectangle.
            </summary>
            <param name="pt1">First point in rectangle.</param>
            <param name="pt2">Second point in rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawTrackingRect(System.Drawing.Rectangle,System.Single)">
            <summary>
            Draws a tracking outline for a rectangle at a given angle of rotation.
            </summary>
            <param name="rect">Rectangle to draw.</param>
            <param name="angle">Angle to rotate the rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawTrackingLine(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Draws a tracking outline for a line.
            </summary>
            <param name="pt1">First point on the line.</param>
            <param name="pt2">Second point on the line.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawTrackingLines(System.Drawing.Point[])">
            <summary>
            Draws a tracking outline for a polyline.
            </summary>
            <param name="trackingPts">Array of points in the polyline.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawTrackingPolygon(System.Drawing.Point[])">
            <summary>
            Draws a tracking outline for a polygon.
            </summary>
            <param name="trackingPts">Array of points that make up the polygon.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawTrackingCurve(System.Drawing.Point[])">
            <summary>
            Draws a tracking outline for a curve.
            </summary>
            <param name="trackingPts">Control points on the curve.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawTrackingArc(System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
            Draws a tracking outline for an arc.
            </summary>
            <param name="rcBounds">Bounds of the ellipse.</param>
            <param name="startAngle">Start angle in the ellipse.</param>
            <param name="sweepAngle">Sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawTrackingPath(System.Drawing.Drawing2D.GraphicsPath,System.Single)">
            <summary>
            Draws a tracking outline for a GraphicsPath at a given angle of rotation.
            </summary>
            <param name="grfxPath">GraphicsPath to draw.</param>
            <param name="angle">Angle to rotate the object.</param>
            <returns>
            Bounding rectangle in which the tracking was drawn, which can be passed to
            the <see cref="M:Syncfusion.Windows.Forms.Diagram.View.Refresh(System.Drawing.Rectangle)"/> method
            to erase the tracking.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawTrackingPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draws a tracking outline for a GraphicsPath.
            </summary>
            <param name="grfxPath">GraphicsPath to draw.</param>
            <returns>
            Bounding rectangle in which the tracking was drawn, which can be passed to
            the <see cref="M:Syncfusion.Windows.Forms.Diagram.View.Refresh(System.Drawing.Rectangle)"/> method
            to erase the tracking.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.AttachModelEventHandlers">
            <summary>
            Subscribes to events in the model.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DetachModelEventHandlers">
            <summary>
            Unsubscribes to events in the model.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnModelChildrenChangeComplete(System.Object,Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called after changes are made to the heirarchy of nodes in the model.
            </summary>
            <param name="sender">The model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnModelPropertyChanged(System.Object,Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property of a node in the model changes.
            </summary>
            <param name="sender">The model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnModelBoundsChanged(System.Object,Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of a node in the model changes.
            </summary>
            <param name="sender">The model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnModelNodeMoved(System.Object,Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when a node in the model is moved.
            </summary>
            <param name="sender">The model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnModelNodeRotated(System.Object,Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when a node in the model is rotated.
            </summary>
            <param name="sender">The model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnModelNodeScaled(System.Object,Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when a node in the model is scaled.
            </summary>
            <param name="sender">The model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnModelVertexEdit(System.Object,Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex in the model is modified.
            </summary>
            <param name="sender">The model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnModelMeasurementUnitsChanging(System.Object,Syncfusion.Windows.Forms.Diagram.LogicalUnitsEventArgs)">
            <summary>
            Called before the logical unit of measure in the model is changed.
            </summary>
            <param name="sender">Model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnModelMeasurementUnitsChanged(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit)">
            <summary>
            Called after the logical unit of measure in the model is changed.
            </summary>
            <param name="fromunits">A <see cref="T:System.Drawing.GraphicsUnit"/> value specifying the old unit of measure.</param>
            <param name="tounits">A <see cref="T:System.Drawing.GraphicsUnit"/> value specifying the new unit of measure.</param>
            <remarks>
            <para>
            Converts the origin and other values stored in world coordinates.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnModelMeasurementScaleChanging(System.Object,Syncfusion.Windows.Forms.Diagram.LogicalScaleEventArgs)">
            <summary>
            Called before the logical measurement scale in the model is changed.
            </summary>
            <param name="sender">Model sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnModelViewUpdate(System.Object,System.EventArgs)">
            <summary>
            Called when changes have been made to the model that require the view to render.
            </summary>
            <param name="sender">Model that fired the event.</param>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property in the view is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Fires the PropertyChanged event.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnOriginChanged(Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs)">
            <summary>
            Called when the origin of the view changes.
            </summary>
            <param name="evtArgs">A <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnSizeChanged(Syncfusion.Windows.Forms.Diagram.ViewSizeEventArgs)">
            <summary>
            Called when the size of the view changes.
            </summary>
            <param name="evtArgs">A <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewSizeEventArgs"/> that contains the event data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnMagnificationChanged(Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs)">
            <summary>
            Called when the magnification value of the view changes.
            </summary>
            <param name="evtArgs">A <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnSelectionChanged(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called when the contents of the selection list change.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.CreateBackBuffer">
            <summary>
            Creates the back buffer.
            </summary>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.DrawingSurface"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the view.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            view to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.CreateGrid">
            <summary>
            Creates the layout grid that is rendered in the view.
            </summary>
            <returns>Layout grid to attach to grid.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.CreateHorizontalRuler">
            <summary>
            Creates the horizontal ruler that is rendered in the view.
            </summary>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Diagram.HorizontalRuler"/> value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.CreateVerticalRuler">
            <summary>
            Creates the vertical ruler that is rendered in the view.
            </summary>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Diagram.VerticalRuler"/> value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.parentControl">
            <summary>
            Reference to the parent control (control hosting the view).
            </summary>		
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.backBuffer">
            <summary>
            Back buffer bitmap (drawing surface).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.isDirty">
            <summary>
            Flag indicating if the view needs to be redrawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.model">
            <summary>
            Reference to the model attached to the view.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.propertyContainer">
            <summary>
            Property container for the view's properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.bounds">
            <summary>
            Bounds of the view.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.backgroundColor">
            <summary>
            Color to clear the background with.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.selectionList">
            <summary>
            List of selected nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.trackingStyle">
            <summary>
            Line style used to draw tracking outlines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.grid">
            <summary>
            Object that renders grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.horizontalRuler">
            <summary>
            Horizontal ruler.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.verticalRuler">
            <summary>
            Vertical ruler.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.topMarginBuffer">
            <summary>
            Back buffer used to elimate flicker during mouse tracking in the top margin.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.leftMarginBuffer">
            <summary>
            Back buffer used to elimate flicker during mouse tracking in the bottom margin.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.origin">
            <summary>
            View origin.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.magnification">
            <summary>
            Magnification value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.cursor">
            <summary>
            Currently active cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.dpiX">
            <summary>
            Horizontal resolution of the device.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.dpiY">
            <summary>
            Vertical resolution of the device.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.handleSize">
            <summary>
            Size to draw selection handles (in device units).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.handleColor">
            <summary>
            Color to draw selection handles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.handleAnchorColor">
            <summary>
            Color to draw selection handles for anchor node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.handleDisabledColor">
            <summary>
            Color to draw selection handles when disabled.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.Diagram.View.pageSize" -->
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.pageSizeKnown">
            <summary>
            Flag indicating if the page size is a known value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.disposed">
            <summary>
            Indicates if the Dispose() method has been called.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Model">
            <summary>
            The model attached to this view.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.ParentControl">
            <summary>
            The parent control (window) hosting this view.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Origin">
            <summary>
            Logical origin of the view in world coordinates.
            </summary>
            <remarks>
            <para>
            This property moves the view relative to the world
            coordinate space. The value specifies a point in the world
            coordinate space that corresponds to the top left corner
            of the view.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.VirtualSize">
            <summary>
            Returns the size of the scrollable area in device coordinates.
            </summary>
            <remarks>
            <para>
            The value returned is the width and height of the model converted to
            device coordinates. If there is no model attached to the view at
            the time of the call, then the size of the view is returned instead.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Magnification">
            <summary>
            Specifies the X and Y magnification (zoom) values on a scale of 1 to n.
            </summary>
            <remarks>
            <para>
            This value is used to zoom the view in and out. The X and Y axes can
            be scaled independently. Normally, the X and Y axes will have the
            same magnification value.
            </para>
            <para>
            The value of this property along with the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.View.Origin"/> are used to
            create the view transform, which is used to map world coordinates onto
            view coordinates.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.View.GetViewTransform"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.Origin"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.LeftMargin">
            <summary>
            Width of left margin in device units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.LeftMarginBounds">
            <summary>
            Bounding rectangle of left margin in device units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.TopMargin">
            <summary>
            Height of top margin in device units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.TopMarginBounds">
            <summary>
            Bounding rectangle of top margin in device units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.WorkArea">
            <summary>
            Bounding rectangle of view excluding the margins.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.SelectionList">
            <summary>
            List of currently selected nodes.
            </summary>
            <remarks>
            Contains a reference to the controller's selection list. This property
            is assigned by the controller it attaches to the view.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.SelectionAnchorNode">
            <summary>
            Node in the selection list that acts as the anchor.
            </summary>
            <remarks>
            <para>
            The anchor node is always the last node in the selection list.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.SelectionList"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.BackgroundColor">
            <summary>
            The color used to clear the view before rendering the diagram.
            </summary>
            <remarks>
            <para>
            The background of the view is the region outside of the visible
            diagram.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HandleSize">
            <summary>
            Size of selection handles specified in device coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HandleColor">
            <summary>
            Color used to draw selection handles.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HandleAnchorColor">
            <summary>
            Color used for handles of anchor node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HandleDisabledColor">
            <summary>
            Color used for handles when disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HandleEditMode">
            <summary>
            Determines whether resized handles or vertex handles will be drawn.
            </summary>
            <remarks>
            This property supports vertex editing mode.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.HandleEditMode"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Grid">
            <summary>
            Grid of evenly spaced points that provide a visual guide to the
            user.
            </summary>
            <remarks>
            <para>
            Draws a matrix of evenly spaced points in the view and provides
            snap to grid calculations.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LayoutGrid"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HorizontalRuler">
            <summary>
            Horizontal ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.VerticalRuler">
            <summary>
            Vertical ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.RulerSize">
            <summary>
            Width of the ruler in device units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.RulerFillColor">
            <summary>
            Background color used to fill rulers.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.RulerLineColor">
            <summary>
            Color used for drawing lines in the rulers.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.RulerUnits">
            <summary>
            Measurement units used for rulers.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HorizontalRulerBounds">
            <summary>
            Returns the bounds of the horizontal ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.VerticalRulerBounds">
            <summary>
            Returns the bounds of the vertical ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.ShowPageBounds">
            <summary>
            Determines if page bounds are displayed in the view or not.
            </summary>
            <remarks>
            <para>
            If this property is set to True, then lines are drawn in the
            view to mark the boundaries of pages. The size of the model
            and settings for the current default printer determine how
            many pages the diagram contains.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.PageSettings"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.MouseTrackingEnabled">
            <summary>
            Flag indicating if mouse movements are tracked in the margins of the view.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Cursor">
            <summary>
            Cursor currently used in the view.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.PasteOffsetX">
            <summary>
            Number of device units to offset nodes in the X direction when they are
            pasted into a diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.PasteOffsetY">
            <summary>
            Number of device units to offset nodes in the Y direction when they are
            pasted into a diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.TrackingStyle">
            <summary>
            Line style for tracking.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.DrawingSurface">
            <summary>
            The back buffer used for rendering.
            </summary>
            <remarks>
            <para>
            The drawing surface is a bitmap on which the view renders itself
            before drawing it to the parent control. It is an in-memory representation
            of the last frame rendered by the view. It can be accessed and drawn to
            directly.
            </para>
            <para>
            NOTE: The terms drawing surface and back buffer are used interchangeably.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Location">
            <summary>
            Location of the view in the parent control specified in device coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Size">
            <summary>
            Size of the view in device coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.X">
            <summary>
            X coordinate of the location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Y">
            <summary>
            Y coordinate of the location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Width">
            <summary>
            Width of the view in device coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Height">
            <summary>
            Height of the view in device coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Bounds">
            <summary>
            Bounds of the view in the parent control specified in device coordinates.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.View.PropertyChanged">
            <summary>
            Fired when a property in the view changes.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.View.OriginChanged">
            <summary>
            Fired when the <see cref="P:Syncfusion.Windows.Forms.Diagram.View.Origin"/> changes.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.View.SizeChanged">
            <summary>
            Fired when the <see cref="P:Syncfusion.Windows.Forms.Diagram.View.Size"/> changes.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.View.MagnificationChanged">
            <summary>
            Fired when the <see cref="P:Syncfusion.Windows.Forms.Diagram.View.Magnification"/> changes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs">
            <summary>
            Encapsulates arguments for the origin change event of a view.
            </summary>
            <remarks>
            <para>
            The origin of a view is the point in world space that maps to the upper-left
            hand corner of the view.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Constructs a ViewOriginEventArgs given the original origin and new
            origin values.
            </summary>
            <param name="originOrig">Original origin.</param>
            <param name="originNew">New origin.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs.OriginalOrigin">
            <summary>
            Origin value before the event occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs.NewOrigin">
            <summary>
            Origin value after the event occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs.Offset">
            <summary>
            Difference between the new origin and the original origin.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewOriginEventHandler">
            <summary>
            Delegate declaration for view origin change events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewSizeEventArgs">
            <summary>
            Encapsulates arguments for the size change event of a view.
            </summary>
            <remarks>	
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewSizeEventArgs.#ctor(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Constructs a ViewSizeEventArgs given the original size and new size values.
            </summary>
            <param name="sizeOrig">Original size.</param>
            <param name="sizeNew">New size.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewSizeEventArgs.OriginalSize">
            <summary>
            Size value before the event occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewSizeEventArgs.NewSize">
            <summary>
            Size value after the event occurred.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewSizeEventHandler">
            <summary>
            Delegate declaration for view size change events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs">
            <summary>
            Encapsulates arguments for the magnification change event of a view.
            </summary>
            <remarks>
            <para>
            The origin of a view is the point in world space that maps to the upper-left
            hand corner of the view.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs.#ctor(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Constructs a ViewMagnificationEventArgs given the original magnification and new
            magnification values.
            </summary>
            <param name="magnificationOrig">Original magnification.</param>
            <param name="magnificationNew">New magnification.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs.OriginalMagnification">
            <summary>
            Magnification value before the event occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs.NewMagnification">
            <summary>
            Magnification value after the event occurred.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventHandler">
            <summary>
            Delegate declaration for view magnification change events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DiagramPrintDocument">
            <summary>
            Print document object for a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramPrintDocument.#ctor(Syncfusion.Windows.Forms.Diagram.IPrint)">
            <summary>
            Creates an new instance of the DiagramPrintDocument.
            </summary>
            <param name="printObj">An object implementing the <see cref="T:Syncfusion.Windows.Forms.Diagram.IPrint"/> interface. This is usually the diagram's model component.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramPrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Drawing.Printing.PrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramPrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Drawing.Printing.PrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramPrintDocument.OnQueryPageSettings(System.Drawing.Printing.QueryPageSettingsEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Drawing.Printing.PrintDocument.OnQueryPageSettings(System.Drawing.Printing.QueryPageSettingsEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramPrintDocument.OnEndPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Drawing.Printing.PrintDocument.OnEndPrint(System.Drawing.Printing.PrintEventArgs)"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PropertyContainer">
            <summary>
            Default implementation of the IPropertyContainer interface.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for property containers.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the property container.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            property container to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Fires the PropertyChanged event.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PropertyContainer.propertyValues">
            <summary>
            Hashtable containing property name / value pairs.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PropertyContainer.eventsEnabled">
            <summary>
            Determines if events will be fired or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyContainer.EventsEnabled">
            <summary>
            Determines whether the model fires events or not.
            </summary>
            <remarks>
            This property is useful for temporarily disabling events during
            time critical operations.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.PropertyContainer.PropertyChanged">
            <summary>
            Fired when a property in the container is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs">
            <summary>
            Arguments for property events.
            </summary>
            <remarks>
            A property event notifies event subscribers of changes to property in
            a node.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer,System.String,System.Object,System.Object)">
            <summary>
            Constructs a PropertyEventArgs object given a container, property name,
            old property value, and new property value.
            </summary>
            <param name="container">Property container the event applies to.</param>
            <param name="propertyName">Name of the property the event applies to.</param>
            <param name="oldVal">Value of the property before the event occurred.</param>
            <param name="newVal">Value of the property after the event occurred.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs.Node">
            <summary>
            The node that caused the event.
            </summary>
            <remarks>
            This property simply casts the container to an INode.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs.Container">
            <summary>
            Property container that caused the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs.PropertyName">
            <summary>
            Name of the property the event applies to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs.OldValue">
            <summary>
            Value of the property before the event occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs.NewValue">
            <summary>
            Value of the property after the event occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs.ContinueOperation">
            <summary>
            Flag indicating if the operation that generated the event should continue
            or be aborted.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PropertyEventHandler">
            <summary>
            Delegate for property events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MatrixStack">
            <summary>
            This class implements a stack collection for matrix objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MatrixStack.#ctor">
            <summary>
            Constructs a matrix stack.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MatrixStack.Push(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Push the given matrix onto the stack.
            </summary>
            <param name="m">Matrix to push onto the stack.</param>
            <returns>Result matrix.</returns>
            <remarks>
            The matrix passed in is combined with the matrix on the
            top of the stack to produce the return value. The matrices are
            combined using matrix multiplication, where the incoming matrix
            is appended to the matrix on the top of the stack. If the
            stack is empty, then the matrix passed in is returned.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MatrixStack.Push(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Push the given matrix onto the stack given a matrix order to
            produce the result.
            </summary>
            <param name="m">Matrix to push onto the stack.</param>
            <param name="order">
            Order in which multiplication will take place when generating
            the result matrix.
            </param>
            <returns>Result matrix.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MatrixStack.Peek">
            <summary>
            Return the matrix on the top of the stack.
            </summary>
            <returns>Matrix on top of the stack.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MatrixStack.Pop">
            <summary>
            Removes the matrix on the top from the stack and returns it.
            </summary>
            <returns>Matrix popped from the stack.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MatrixStack.Clear">
            <summary>
            Remove all matrix objects from the stack.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MeasurementSystem">
            <summary>
            Systems of measurement:
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementSystem.English">
            <summary>
            English system
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementSystem.Metric">
            <summary>
            Metric system
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit">
            <summary>
            Real-world units of measurement:
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit.SixteenthInches">
            <summary>
            Sixteenth Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit.EighthInches">
            <summary>
            Eighth Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit.QuarterInches">
            <summary>
            Quarter Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit.HalfInches">
            <summary>
            Half Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit.Inches">
            <summary>
            Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit.Feet">
            <summary>
            Feet
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit.Yards">
            <summary>
            Yards
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit.Miles">
            <summary>
            Miles
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit.Millimeters">
            <summary>
            Millimeters
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit.Centimeters">
            <summary>
            Centimeters
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit.Meters">
            <summary>
            Meters
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit.Kilometers">
            <summary>
            Kilometers
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasurementsUnit.Points">
            <summary>
            Points
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Measurements">
            <summary>
            Conversions between logical units of measure:
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.InitScreenDPI">
            <summary>
            Gets the screen resolution and saves it for use in conversions.
            </summary>
            <remarks>
            <para>
            Conversions that involve the Graphics.Pixel unit of measure require the
            DPI (dots per inch) to convert to and from real-world units of measure.
            This method gets the screen resolution by creating a System.Drawing.Graphics
            object for the screen and then it stores the X and Y DPI for later
            use in calculations.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.UnitsPerInch(System.Drawing.GraphicsUnit)">
            <summary>
            Calculate the number of units per inch for a given GraphicsUnit.
            </summary>
            <param name="unit">GraphicsUnit to test.</param>
            <returns>Number of logical units per inch for the given GraphicsUnit.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Single,System.Single)">
            <summary>
            Converts the given value from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="dpi">Device resolution (Dots Per Inch).</param>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Single,System.Drawing.GraphicsUnit,System.Single,System.Single,System.Single)">
            <summary>
            Converts the given value from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="fromScale">Scaling factor for units.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="toScale">Scaling factor for units.</param>
            <param name="dpi">Device resolution (dots per inch).</param>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(Syncfusion.Windows.Forms.Diagram.MeasurementsUnit,System.Drawing.GraphicsUnit,System.Single,System.Single,System.Single)">
            <summary>
            Converts the given value from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="toScale">Scaling factor for units.</param>
            <param name="dpi">Device resolution (dots per inch).</param>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Single,Syncfusion.Windows.Forms.Diagram.MeasurementsUnit,System.Single,System.Single)">
            <summary>
            Converts the given value from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="fromScale">Scaling factor for units.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="dpi">Device resolution (dots per inch).</param>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(Syncfusion.Windows.Forms.Diagram.MeasurementsUnit,Syncfusion.Windows.Forms.Diagram.MeasurementsUnit,System.Single,System.Single)">
            <summary>
            Converts the given value from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="dpi">Device resolution (dots per inch).</param>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Single)">
            <summary>
            Converts the given value from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics,System.Single)">
            <summary>
            Converts the given value from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.PointF)">
            <summary>
            Converts the given PointF from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="value">PointF to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics,System.Drawing.PointF)">
            <summary>
            Converts the given PointF from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <param name="value">PointF to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Single,System.Drawing.GraphicsUnit,System.Single,System.Drawing.Graphics,System.Drawing.PointF)">
            <summary>
            Converts the given PointF from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="fromScale">Scaling factor for units.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="toScale">Scaling factor for units.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <param name="value">PointF to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(Syncfusion.Windows.Forms.Diagram.MeasurementsUnit,Syncfusion.Windows.Forms.Diagram.MeasurementsUnit,System.Drawing.Graphics,System.Drawing.PointF)">
            <summary>
            Converts the given PointF from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <param name="value">PointF to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Single,Syncfusion.Windows.Forms.Diagram.MeasurementsUnit,System.Drawing.Graphics,System.Drawing.PointF)">
            <summary>
            Converts the given PointF from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="fromScale">Scaling factor for units.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <param name="value">PointF to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(Syncfusion.Windows.Forms.Diagram.MeasurementsUnit,System.Drawing.GraphicsUnit,System.Single,System.Drawing.Graphics,System.Drawing.PointF)">
            <summary>
            Converts the given PointF from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to</param>
            <param name="toScale">Scaling factor for units.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <param name="value">PointF to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.SizeF)">
            <summary>
            Converts the given SizeF from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="value">SizeF to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics,System.Drawing.SizeF)">
            <summary>
            Converts the given SizeF from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <param name="value">SizeF to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Single,System.Drawing.GraphicsUnit,System.Single,System.Drawing.Graphics,System.Drawing.SizeF)">
            <summary>
            Converts the given SizeF from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="fromScale">Scaling factor for units.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="toScale">Scaling factor for to units.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <param name="value">SizeF to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.RectangleF)">
            <summary>
            Converts the given RectangleF from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="value">RectangleF to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.Convert(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Converts the given RectangleF from one unit of measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <param name="value">RectangleF to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.MeasurementsUnitToGraphicsUnit(Syncfusion.Windows.Forms.Diagram.MeasurementsUnit,System.Drawing.GraphicsUnit@,System.Single@)">
            <summary>
            Converts real-world units of measure to a GraphicsUnit value and scaling factor.
            </summary>
            <param name="unitMeasure">Unit of measure to convert.</param>
            <param name="grfxUnit">Assigned GraphicsUnit value.</param>
            <param name="grfxScale">Assigned scaling value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.GetUnitsSystem(Syncfusion.Windows.Forms.Diagram.MeasurementsUnit)">
            <summary>
            Determines the system of measurement that the specified unit
            of measure belongs to.
            </summary>
            <param name="units">Measurement units check.</param>
            <returns>System of measurement.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.GetLargerUnits(Syncfusion.Windows.Forms.Diagram.MeasurementsUnit,Syncfusion.Windows.Forms.Diagram.MeasurementsUnit@)">
            <summary>
            Returns the unit of measure that is one degree larger than the given
            unit of measure (within the same system of measurement).
            </summary>
            <param name="units">Unit of measure to test.</param>
            <param name="largerUnits">Output parameter to receive the result.</param>
            <returns>True if a larger unit of measure exists within the measurement system; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.GetSmallerUnits(Syncfusion.Windows.Forms.Diagram.MeasurementsUnit,Syncfusion.Windows.Forms.Diagram.MeasurementsUnit@)">
            <summary>
            Returns the unit of measure that is one degree smaller than the given
            unit of measure (within the same system of measurement).
            </summary>
            <param name="units">Unit of measure to test.</param>
            <param name="smallerUnits">Output parameter to receive the result.</param>
            <returns>True if a smaller unit of measure exists within the measurement system; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Measurements.GetSystemUnits(Syncfusion.Windows.Forms.Diagram.MeasurementSystem,System.Int32)">
            <summary>
            Returns a unit measurement based on the system of measurement and an ordinal
            value that corresponds to the size of the units returned.
            </summary>
            <param name="measureSys">System of measurement.</param>
            <param name="unitOrdinal">Ordinal position of units within the system of measurement.</param>
            <returns>MeasurementsUnit for the system of measurement.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LogicalUnitsEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LogicalUnitsEventArgs.#ctor(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit)">
            <summary>
            
            </summary>
            <param name="oldUnits"></param>
            <param name="newUnits"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LogicalUnitsEventArgs.OldUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LogicalUnitsEventArgs.NewUnits">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LogicalUnitsEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LogicalScaleEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LogicalScaleEventArgs.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="oldScale"></param>
            <param name="newScale"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LogicalScaleEventArgs.OldScale">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LogicalScaleEventArgs.NewScale">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LogicalScaleEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs">
            <summary>
            Encapsulates arguments for move events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveEventArgs.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveEventArgs.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.INode,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveEventArgs.Nodes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveEventArgs.OffsetX">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveEventArgs.OffsetY">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MoveEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs">
            <summary>
            Encapsulates arguments for rotate events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotateEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RotateEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs">
            <summary>
            Encapsulates arguments for scale events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ScaleEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources">
            <summary>
            Provides access to Essential Diagram resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Strings">
            <summary>
            Provides access to resource strings.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Strings.Toolnames">
            <summary>
            Provides access to Toolname strings in the resource file.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Resources.Strings.Toolnames.Get(System.String)">
            <summary>
            Returns a toolname based on a resource ID.
            </summary>
            <param name="toolResID">Resource ID of the tool</param>
            <returns>Toolname string</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Strings.ObjectName">
            <summary>
            Provides access to object name strings in the resource file.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Resources.Strings.ObjectName.Get(System.String)">
            <summary>
            Returns an object name string based on a resource ID.
            </summary>
            <param name="objNameResID">Resource ID of the object name</param>
            <returns>Object name string</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Strings.CommandDescriptions">
            <summary>
            Provides access to command description strings in the resource file.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Resources.Strings.CommandDescriptions.Get(System.String)">
            <summary>
            Returns a command description given the name of a command.
            </summary>
            <param name="cmdName">Name of the command to return description for</param>
            <returns>String description of a command</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Strings.Messages">
            <summary>
            Provides access to message strings in the resource file.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Resources.Strings.Messages.Get(System.String)">
            <summary>
            Returns a message given an ID.
            </summary>
            <param name="msgID">ID of the message to return</param>
            <returns>Message string</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Strings.Captions">
            <summary>
            Provides access to caption strings in the resource file.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Resources.Strings.Captions.Get(System.String)">
            <summary>
            Returns a caption given an ID.
            </summary>
            <param name="captionID">ID of the caption to return</param>
            <returns>Message string</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Cursors">
            <summary>
            Provides access to cursors.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.GetCursor(System.String)">
            <summary>
            Returns the cursor matching the name passed in.
            </summary>
            <param name="cursorName">Name of cursor to return</param>
            <returns>Cursor object</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.PanReady">
            <summary>
            Returns the Pan ready cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.Panning">
            <summary>
            Returns the Panning cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.Zoom">
            <summary>
            Returns the Zoom cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.Connect">
            <summary>
            Returns the Connect cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.RotateReady">
            <summary>
            Returns the RotateReady cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.Rotate">
            <summary>
            Returns the Rotate cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.InsertVertex">
            <summary>
            Returns the InsertVertex cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.EditVertex">
            <summary>
            Returns the EditVertex cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.DeleteVertex">
            <summary>
            Returns the DeleteVertex cursor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Textures">
            <summary>
            Provides access to fill textures.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Textures.CheckerBoard">
            <summary>
            Returns the CheckerBoard texture.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DiagramScript">
            <summary>
            Summary description for DiagramScript.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramScript.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DiagramDocument">
            <summary>
            The DiagramDocument class implements a serializable document type that encapsulates the model, view, and 
            diagram script state information for a diagram object. This document class is used by the Essential 
            Diagram <see cref="!:Syncfusion.Windows.Forms.Diagram.Controls.Diagram"/> and 
            <see cref="!:Syncfusion.Web.Forms.Diagram.DiagramWebControl"/> controls for persisting their state information.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramDocument.#ctor(Syncfusion.Windows.Forms.Diagram.Model,Syncfusion.Windows.Forms.Diagram.View,Syncfusion.Windows.Forms.Diagram.DiagramScript)">
            <summary>
            Creates a new instance of the DiagramDocument class.
            </summary>
            <param name="dgmModel">The diagram model.</param>
            <param name="dgmView">The diagram view.</param>
            <param name="script">The diagram script.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramDocument.Model">
            <summary>
            Gets the diagram model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramDocument.View">
            <summary>
            Gets the diagram view.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramDocument.Script">
            <summary>
            Gets the script associated with the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Arc">
            <summary>
            Implements an arc shape.
            </summary>
            <remarks>
            <para>
            An arc consists of a rectangle, start angle, and sweep angle. The rectangle is
            stored in the <see cref="P:Syncfusion.Windows.Forms.Diagram.Arc.LocalBounds"/> property
            and specifies the bounding box of the arc in local coordinates. The
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Arc.StartAngle"/> and
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Arc.SweepAngle"/>
            specify the start and ending angles of the arc within the bounding rectangle. The
            arc can be thought of as part of an ellipse that is drawn within the bounding
            rectangle where the StartAngle and SweepAngle specify the subset of the ellipse.
            </para>
            <para>
            An arc can be created by specifying the rectangle, start angle, or sweep angle, or
            can be created by specifying two points. When two points are supplied to create an arc,
            the bounding rectangle, start angle, and sweep angle are calculated from the two points.
            The order in which the points are given influences the way the bounding rectangle, start
            angle, and sweep angle are calculated for the arc.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Shape">
            <summary>
            A shape is a leaf node that encapsulates a drawing primitive such as
            a rectangle, line, ellipse, or polygon.
            </summary>
            <remarks>
            The Shape class implements the <see cref="T:Syncfusion.Windows.Forms.Diagram.IGraphics"/>
            interface and contains a GDI+ GraphicsPath object. This class is an abstract
            base class from which specific shapes are implemented. The contained GraphicsPath
            object is contains provides rendering and hit testing for the shape.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphics"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IPoints">
            <summary>
            Interface for accessing and modifying the collection of points
            belonging to an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPoints.GetPoints">
            <summary>
            Returns an array containing all of the points in the object.
            </summary>
            <returns>Array of points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPoints.SetPoints(System.Drawing.PointF[])">
            <summary>
            Assigns the given array of points to the object.
            </summary>
            <param name="pts">Array of points to assign.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPoints.GetPoint(System.Int32)">
            <summary>
            Returns the point at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position.</param>
            <returns>Point at the given position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPoints.SetPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Assigns the value of the point at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of point to update.</param>
            <param name="val">Value to assign to point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPoints.AddPoint(System.Drawing.PointF)">
            <summary>
            Adds a point to the object.
            </summary>
            <param name="val">Point to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPoints.InsertPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts a point into the object at a specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position at which to insert the point.</param>
            <param name="val">Point to index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPoints.RemovePoint(System.Int32)">
            <summary>
            Remove the point at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPoints.RemoveAllPoints">
            <summary>
            Remove all points in the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IPoints.PointCount">
            <summary>
            Number of points in the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IPoints.MinPoints">
            <summary>
            Minimum number of points that the object may contain.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IPoints.MaxPoints">
            <summary>
            Maximum number of points that the object may contain.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints">
            <summary>
            Interface for accessing and modifying the collection of points
            belonging to an object.
            </summary>
            <remarks>
            <para>
            This interface is used to access the points of an object using the local
            coordinate system of the object. This means that points passed in and out
            of this interface are always untransformed, local points.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILocalPoints.GetPoints">
            <summary>
            Returns an array containing all of the points in the object.
            </summary>
            <returns>Array of points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILocalPoints.SetPoints(System.Drawing.PointF[])">
            <summary>
            Assigns the given array of points to the object.
            </summary>
            <param name="pts">Array of points to assign.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILocalPoints.GetPoint(System.Int32)">
            <summary>
            Returns the point at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position.</param>
            <returns>Point at the given position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILocalPoints.SetPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Assigns the value of the point at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of point to update.</param>
            <param name="val">Value to assign to point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILocalPoints.AddPoint(System.Drawing.PointF)">
            <summary>
            Adds a point to the object.
            </summary>
            <param name="val">Point to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILocalPoints.InsertPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts a point into the object at a specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position at which to insert the point.</param>
            <param name="val">Point to index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILocalPoints.RemovePoint(System.Int32)">
            <summary>
            Remove the point at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILocalPoints.RemoveAllPoints">
            <summary>
            Remove all points in the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILocalPoints.PointCount">
            <summary>
            Number of points in the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILocalPoints.MinPoints">
            <summary>
            Minimum number of points that the object may contain.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILocalPoints.MaxPoints">
            <summary>
            Maximum number of points that the object may contain.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.#ctor(System.Drawing.PointF[])">
            <summary>
            Create shape from an array of points.
            </summary>
            <param name="pts">Array of points used to create the shape.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.#ctor(Syncfusion.Windows.Forms.Diagram.Shape)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for shapes.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the shape onto a System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.CreateRegion(System.Single)">
            <summary>
            Returns an object that describes the interior of the shape.
            </summary>
            <param name="padding">Amount of padding to add.</param>
            <returns>System.Drawing.Region object.</returns>
            <remarks>
            Region objects are used for hit testing and geometrical calculations.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.GraphicsPath"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Translate(System.Single,System.Single)">
            <summary>
            Moves the shape by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
            <remarks>
            Applies a translate operation to the the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the shape a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Rotate(System.Single)">
            <summary>
            Rotates the shape a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Scales the shape by a given ratio along the X and Y axes.
            </summary>
            <param name="ptAnchor">Fixed point about which to scale.</param>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Scale(System.Single,System.Single)">
            <summary>
            Scales the shape about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.GetPoints">
            <summary>
            Returns an array containing all vertices belonging to this shape.
            </summary>
            <returns>Array of points in world coordinates.</returns>
            <remarks>
            <para>
            The points returned are in world coordinates. The local points are
            retrieved and transformed using the shape's world transform. The
            transformed points are returned to the caller.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.GetLocalPoints"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.WorldTransform"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.SetPoints(System.Drawing.PointF[])">
            <summary>
            Assigns an array of points to the shape.
            </summary>
            <param name="pts">Points to assign to the shape.</param>
            <remarks>
            <para>
            The points passed in must be given in world coordinates. The array
            of points passed are transformed to local coordinates and then
            assigned to the shape.
            </para>
            <para>
            The array passed in cannot be NULL and the number of points it contains
            must be greater than or equal to
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.MinPoints"/>
            and less than or equal to
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.MaxPoints"/>.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.SetLocalPoints(System.Drawing.PointF[])"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.WorldTransform"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.GetPoint(System.Int32)">
            <summary>
            Returns the vertex at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to retrieve.</param>
            <returns>Point at given offset.</returns>
            <remarks>
            <para>
            The point returned is in world coordinates. This method gets the point in
            local coordinates and transforms it to world coordinates using the shape's
            world transform.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.GetLocalPoint(System.Int32)"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.WorldTransform"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.SetPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Assigns the value of the vertex at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to update.</param>
            <param name="val">Value to assign to the vertex.</param>
            <remarks>
            <para>
            The point passed in must be in world coordinates.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.SetLocalPoint(System.Int32,System.Drawing.PointF)"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.WorldTransform"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.AddPoint(System.Drawing.PointF)">
            <summary>
            Adds a vertex to the shape.
            </summary>
            <param name="val">Value of the point to add.</param>
            <remarks>
            <para>
            The point passed in must be in world coordinates.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.AddLocalPoint(System.Drawing.PointF)"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.WorldTransform"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.InsertPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts a vertex into the shape at the given index position.
            </summary>
            <param name="ptIdx">Zero-based index at which to insert the vertex.</param>
            <param name="val">Value of the vertex to insert.</param>
            <remarks>
            <para>
            The point passed in must be in world coordinates.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.InsertLocalPoint(System.Int32,System.Drawing.PointF)"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.WorldTransform"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.RemovePoint(System.Int32)">
            <summary>
            Removes a vertex from the shape.
            </summary>
            <param name="ptIdx">Zero-based index position of the vertex to remove.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.RemoveLocalPoint(System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.RemoveAllPoints">
            <summary>
            Removes all vertices from the shape.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.RemoveAllLocalPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalPoints#GetPoints">
            <summary>
            Returns an array containing all vertices belonging to this shape.
            </summary>
            <returns>Array of points in local coordinates.</returns>
            <remarks>
            <para>
            The points returned are in local coordinates. This means that no
            transformations are applied to the points before they are returned.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.GetLocalPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalPoints#SetPoints(System.Drawing.PointF[])">
            <summary>
            Assigns an array of points to the shape.
            </summary>
            <param name="pts">Points to assign to the shape.</param>
            <remarks>
            <para>
            The points passed in must be specified in local coordinates. This means
            that no transformations are applied to the points before they are
            assigned to the shape.
            </para>
            <para>
            The array passed in cannot be NULL and the number of points it contains
            must be greater than or equal to
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.MinPoints"/>
            and less than or equal to
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.MaxPoints"/>.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.SetLocalPoints(System.Drawing.PointF[])"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalPoints#GetPoint(System.Int32)">
            <summary>
            Returns the vertex at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to retrieve.</param>
            <returns>Point at given offset.</returns>
            <remarks>
            <para>
            The point returned is in local coordinates. This means that no transformations
            are applied to the point before it is returned.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.GetLocalPoint(System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalPoints#SetPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Assigns the value of the vertex at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to update.</param>
            <param name="val">Value to assign to the vertex.</param>
            <remarks>
            <para>
            The point passed in must be in local coordinates.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.SetLocalPoint(System.Int32,System.Drawing.PointF)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalPoints#AddPoint(System.Drawing.PointF)">
            <summary>
            Adds a vertex to the shape.
            </summary>
            <param name="val">Value of the point to add.</param>
            <remarks>
            <para>
            The point passed in must be in local coordinates.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.AddLocalPoint(System.Drawing.PointF)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalPoints#InsertPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts a vertex into the shape at the given index position.
            </summary>
            <param name="ptIdx">Zero-based index at which to insert the vertex.</param>
            <param name="val">Value of the vertex to insert.</param>
            <remarks>
            <para>
            The point passed in must be in local coordinates.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.InsertLocalPoint(System.Int32,System.Drawing.PointF)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalPoints#RemovePoint(System.Int32)">
            <summary>
            Removes a vertex from the shape.
            </summary>
            <param name="ptIdx">Zero-based index position of the vertex to remove.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.RemoveLocalPoint(System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalPoints#RemoveAllPoints">
            <summary>
            Removes all vertices from the shape.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.RemoveAllLocalPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the shapes's bounding box contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the shapes's bounding box intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the shape's bounding box contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the shapes's bounding box intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the shape's region contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the shape's region intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the shape's region contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the shapes's region intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the shape.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            shape to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called before the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called after the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Click(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#InsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called before the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called after the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnPropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            before a property changes by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the property change by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when the position of the node is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the move by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when the node is rotated.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the rotation by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when the node is scaled.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the scaling by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnBoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of the node change.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the change in bounds by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnDoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnMouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnMouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnInsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnMoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.OnDeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.CreateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates a graphics path for the shape given a set of points.
            </summary>
            <param name="pts">Points to use for creating the graphics path.</param>
            <returns>GraphicsPath object</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Diagram.Shape.CreateDefaultGraphicsPath" -->
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.GetLocalPoints">
            <summary>
            Returns an array containing all vertices belonging to this shape.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            The points returned are in local coordinates. This means that the
            points are not transformed using the shape's world transform before
            they are returned.
            </para>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overriden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.SetLocalPoints(System.Drawing.PointF[])">
            <summary>
            Assigns an array of points to the shape.
            </summary>
            <param name="pts">Points to assign to the shape.</param>
            <remarks>
            <para>
            The array passed in cannot be NULL and the number of points it contains
            must be greater than or equal to
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.MinPoints"/>
            and less than or equal to
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.MaxPoints"/>.
            The points are passed into the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.CreateGraphicsPath(System.Drawing.PointF[])"/>
            method in order to create the GraphicsPath for the shape.
            </para>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overridden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.GraphicsPath"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.CreateGraphicsPath(System.Drawing.PointF[])"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.GetLocalPoint(System.Int32)">
            <summary>
            Returns the vertex at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to retrieve.</param>
            <returns>Point at given offset.</returns>
            <remarks>
            <para>
            The point returned is in local coordinates. This means that it is not
            transformed using the shape's world transform before it is returned.
            </para>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overridden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.SetLocalPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Assigns the value of the vertex at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to update.</param>
            <param name="val">Value to assign to the vertex.</param>
            <remarks>
            <para>
            The point passed in must be given in local coordinates.
            </para>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overridden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.AddLocalPoint(System.Drawing.PointF)">
            <summary>
            Adds a vertex to the shape.
            </summary>
            <param name="val">Value of the point to add.</param>
            <remarks>
            <para>
            The point passed in must be given in local coordinates.
            </para>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overridden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.InsertLocalPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts a vertex into the shape at the given index position.
            </summary>
            <param name="ptIdx">Zero-based index at which to insert the vertex.</param>
            <param name="val">Value of the vertex to insert.</param>
            <remarks>
            <para>
            The point passed in must be given in local coordinates.
            </para>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overridden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.RemoveLocalPoint(System.Int32)">
            <summary>
            Removes a vertex from the shape.
            </summary>
            <param name="ptIdx">Zero-based index position of the vertex to remove.</param>
            <remarks>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overridden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.RemoveAllLocalPoints">
            <summary>
            Removes all vertices from the shape.
            </summary>
            <remarks>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overridden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.CheckConstrainingRegion">
            <summary>
            Tests to see if the current position of the shape falls within the
            constraining region specified by the parent node.
            </summary>
            <returns>True if position is valid; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.CreateStyles">
            <summary>
            Creates style objects for this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IBounds2DF"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ITransform"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.EditStyle"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Shape.strName">
            <summary>
            Name of the shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Shape.parentNode">
            <summary>
            Reference to parent node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Shape.matrix">
            <summary>
            Transformation matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Shape.grfxPath">
            <summary>
            GraphicsPath containing points and instructions for rendering the shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Shape.propertyValues">
            <summary>
            Hashtable containing property name / value pairs.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Shape.lnStyle">
            <summary>
            Properties for creating pens to draw lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Shape.edtStyle">
            <summary>
            Properties for determining edit capabilities.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Visible">
            <summary>
            Determines if the shape is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent">
            <summary>
            Reference to the composite node this node is a child of.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Root">
            <summary>
            The root node in the node hieararchy.
            </summary>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Name">
            <summary>
            Name of the node.
            </summary>
            <remarks>
            Must be unique within the scope of the parent node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.FullName">
            <summary>
            Fully qualified name of the node.
            </summary>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Bounds">
            <summary>
            The shape's bounding box.
            </summary>
            <remarks>
            Always returns the bounds of the shape in world coordinates, regardless
            of what is on the matrix stack at the time of the call.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.X">
            <summary>
            X-coordinate of the shape's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Y">
            <summary>
            Y-coordinate of the shape's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Width">
            <summary>
            Width of the shape.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Height">
            <summary>
            Height of the shape.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Bounds">
            <summary>
            Bounding box of the shape in local coordinates.
            </summary>
            <remarks>
            The value returned depends on the contents of the matrix stack. If the
            matrix stack is empty, then the value returned is in local coordinates.
            This method is generally used by functions that recursively traverse
            the node hierarchy, pushing and popping the matrix stack as they go.
            <seealso cref="F:Syncfusion.Windows.Forms.Diagram.Global.MatrixStack"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Bounds"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#X">
            <summary>
            X-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Y">
            <summary>
            Y-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Width">
            <summary>
            Width of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Height">
            <summary>
            Height of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.GraphicsPath">
            <summary>
            Encapsulates the points and instructions needed to render the shape.
            </summary>
            <remarks>
            The contents of the GraphicsPath is determined by derived classes
            and depends on the type of shape.
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.CreateRegion(System.Single)"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalTransform">
            <summary>
            Matrix containing transformations for this node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.WorldTransform">
            <summary>
            Returns a matrix containing transformations for this node and all of
            its ancestors.
            </summary>
            <remarks>
            Chains up the node hierarchy and builds a transformation matrix containing
            all transformations that apply to this node in the world coordinate space.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.ParentTransform">
            <summary>
            Returns a matrix containing the transformations of this node's parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.LineStyle">
            <summary>
            Line drawing properties for this node.
            </summary>
            <remarks>
            The line style determines the configuration of the pen used to
            render lines.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.EditStyle">
            <summary>
            Edit properties for this node.
            </summary>
            <remarks>
            Edit properties determine how this node can be edited.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.EditStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.PointCount">
            <summary>
            Number of vertices contained by the shape.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalPointCount"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.MinPoints">
            <summary>
            Minimum number of vertices this shape may contain.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.MinLocalPoints"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.MaxPoints">
            <summary>
            Maximum number of vertices this shape may contain.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.MaxLocalPoints"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalPoints#PointCount">
            <summary>
            Number of vertices contained by the shape.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalPointCount"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalPoints#MinPoints">
            <summary>
            Minimum number of vertices this shape may contain.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.MinLocalPoints"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.Syncfusion#Windows#Forms#Diagram#ILocalPoints#MaxPoints">
            <summary>
            Maxiumum number of vertices this shape may contain.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.MaxLocalPoints"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalPointCount">
            <summary>
            Number of vertices contained by the shape.
            </summary>
            <remarks>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overridden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.MinLocalPoints">
            <summary>
            Minimum number of vertices this shape may contain.
            </summary>
            <remarks>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overriden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Shape.MaxLocalPoints">
            <summary>
            Maximum number of vertices this shape may contain.
            </summary>
            <remarks>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overridden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IEndPointContainer">
            <summary>
            Interface to objects that contain endpoints.
            </summary>
            <remarks>
            <para>
            Objects that implement this interface contain two endpoints that can have
            decorators attached to each endpoint.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IEndPointContainer.GetEndPointLocation(Syncfusion.Windows.Forms.Diagram.LineEndPoint)">
            <summary>
            Returns the location of the specified endpoint.
            </summary>
            <param name="endPointType">Specifies the endpoint to which the decorator is attached.</param>
            <returns>Point in world coordinates of the specified endpoint.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IEndPointContainer.GetEndPointVector(Syncfusion.Windows.Forms.Diagram.LineEndPoint,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Get the two local points that define the location and direction of the line decorator.
            </summary>
            <param name="endPointType">Specifies the endpoint to which the decorator is attached.</param>
            <param name="ptFrom">The first point in the segment.</param>
            <param name="ptTo">The second point in the segment.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IEndPointContainer.FirstEndPointDecorator">
            <summary>
            Decorator for the first endpoint.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IEndPointContainer.LastEndPointDecorator">
            <summary>
            Decorator for the last endpoint.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct and arc given bounds and angle information.
            </summary>
            <param name="x">X coordinate of bounding box.</param>
            <param name="y">Y coordinate of bounding box.</param>
            <param name="width">Width of bounding box.</param>
            <param name="height">Height of bounding box.</param>
            <param name="startAngle">Angle at which the arc begins.</param>
            <param name="sweepAngle">Angle at which the arc ends.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.#ctor(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Construct and arc given bounds and angle information.
            </summary>
            <param name="rcBounds">Bounding box of arc.</param>
            <param name="startAngle">Angle at which the arc begins.</param>
            <param name="sweepAngle">Angle at which the arc ends.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.#ctor(System.Drawing.PointF[])">
            <summary>
            Create arc from an array of points.
            </summary>
            <param name="pts">Array of points used to create the shape.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.#ctor(Syncfusion.Windows.Forms.Diagram.Arc)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for arcs.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the arc to a graphics context object.
            </summary>
            <param name="grfx">Graphics context object to render onto.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.GetLocalPoints">
            <summary>
            Returns an array containing all vertices belonging to this shape.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            The points returned are in local coordinates. This means that the
            points are not transformed using the shape's world transform before
            they are returned.
            </para>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overriden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.SetLocalPoints(System.Drawing.PointF[])">
            <summary>
            Assigns an array of points to the shape.
            </summary>
            <param name="pts">Points to assign to the shape.</param>
            <remarks>
            <para>
            The array passed in cannot be NULL and the number of points it contains
            must be greater than or equal to
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.MinPoints"/>
            and less than or equal to
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.MaxPoints"/>.
            The points are passed into the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.CreateGraphicsPath(System.Drawing.PointF[])"/>
            method in order to create the GraphicsPath for the shape.
            </para>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overridden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.GraphicsPath"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.CreateGraphicsPath(System.Drawing.PointF[])"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.GetLocalPoint(System.Int32)">
            <summary>
            Returns the vertex at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to retrieve.</param>
            <returns>Point at given offset.</returns>
            <remarks>
            <para>
            The point returned is in local coordinates. This means that it is not
            transformed using the shape's world transform before it is returned.
            </para>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overridden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.SetLocalPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Assigns the value of the vertex at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to update.</param>
            <param name="val">Value to assign to the vertex.</param>
            <remarks>
            <para>
            The point passed in must be in local coordinates.
            </para>
            <para>
            This method overrides the base class implementation. Only the
            first and last point in an arc can be modified since the other
            two points are automatically generated.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.AddLocalPoint(System.Drawing.PointF)">
            <summary>
            Adds a vertex to the shape.
            </summary>
            <param name="val">Value of the point to add.</param>
            <remarks>
            <para>
            The point passed in must be given in local coordinates.
            </para>
            <para>
            Always throws EInvalidOperation exception since points cannot be added
            to an arc.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.InsertLocalPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts a vertex into the shape at the given index position.
            </summary>
            <param name="ptIdx">Zero-based index at which to insert the vertex.</param>
            <param name="val">Value of the vertex to insert.</param>
            <remarks>
            <para>
            The point passed in must be given in local coordinates.
            </para>
            <para>
            Always throws EInvalidOperation exception since points cannot be inserted
            into an arc.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.RemoveLocalPoint(System.Int32)">
            <summary>
            Removes a vertex from the shape.
            </summary>
            <param name="ptIdx">Zero-based index position of the vertex to remove.</param>
            <remarks>
            <para>
            Always throws EInvalidOperation exception since points cannot be removed
            from an arc.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.CreateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates a GraphicsPath containing an arc based on the points passed in.
            </summary>
            <param name="pts">Points to create arc from.</param>
            <returns>GraphicsPath containing an arc.</returns>
            <remarks>
            <para>
            The first two points in the array passed in are used to generate the arc.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.CreateGraphicsPath">
            <summary>
            Creates a GraphicsPath containing an arc based on the rectangle, start angle, and
            sweep angle properties.
            </summary>
            <returns>GraphicsPath containing an arc.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.GetEndPointLocation(Syncfusion.Windows.Forms.Diagram.LineEndPoint)">
            <summary>
            Returns the location of the specified endpoint.
            </summary>
            <param name="endPointType">Specifies the endpoint to which the decorator is attached.</param>
            <returns>Point in world coordinates of the specified endpoint.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.GetEndPointVector(Syncfusion.Windows.Forms.Diagram.LineEndPoint,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Get the two local points that define the location and direction of the line decorator.
            </summary>
            <param name="endPointType">Specifies the endpoint to which the decorator is attached.</param>
            <param name="ptFrom">The first point in the segment.</param>
            <param name="ptTo">The second point in the segment.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the arc.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            arc to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Arc.rect">
            <summary>
            Bounding rectangle of the arc in local coordinates.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Arc.startAngle">
            <summary>
            Angle at which the arc starts within the ellipse.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Arc.sweepAngle">
            <summary>
            Angle at which the arc ends within the ellipse.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Arc.firstEndPointDecorator">
            <summary>
            EndPointDecorator attached to first point in arc.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Arc.lastEndPointDecorator">
            <summary>
            EndPointDecorator attached to last point in arc.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Arc.LocalBounds">
            <summary>
            Bounding box for the arc in local coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Arc.StartAngle">
            <summary>
            Starting angle of the arc within the rectangle specified by the LocalBounds property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Arc.SweepAngle">
            <summary>
            Angle at which the arc ends within the rectangle specified by the LocalBounds property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Arc.FirstEndPointDecorator">
            <summary>
            Line decorator object for the first endpoint.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Arc.LastEndPointDecorator">
            <summary>
            Line decorator object for the last endpoint.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Arc.LocalPointCount">
            <summary>
            Number of vertices contained by the shape.
            </summary>
            <remarks>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overriden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Arc.MinLocalPoints">
            <summary>
            Minimum number of vertices this shape may contain.
            </summary>
            <remarks>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overriden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Arc.MaxLocalPoints">
            <summary>
            Maximum number of vertices this shape may contain.
            </summary>
            <remarks>
            <para>
            This method is called by the implementation of both the IPoints and
            ILocalPoints interfaces. It provides access to the points belonging
            to the shape in local coordinates. This method can be overriden by
            derived classes to provide an implementation for a specific type of
            shape.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ClosedCurve">
            <summary>
            Implements a closed curve shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FilledShape">
            <summary>
            Base class for filled shapes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledShape.#ctor(System.Drawing.PointF[])">
            <summary>
            Create a filled shape from an array of points.
            </summary>
            <param name="pts">Array of points to create shape with.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledShape.#ctor(Syncfusion.Windows.Forms.Diagram.FilledShape)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for filled shapes.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledShape.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledShape.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the shape onto a System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledShape.CreateStyles">
            <summary>
            Creates style objects for this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledShape.ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledShape.ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FilledShape.FillStyle">
            <summary>
            Properties used to fill the interior of regions.
            </summary>
            <remarks>
            <para>
            The fill style is used to create brushes for painting interior regions of
            the shape.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FilledShape.ShadowStyle">
            <summary>
            Properties of the shadow applied to the shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FilledShape.Bounds">
            <summary>
            The shape's bounding box.
            </summary>
            <remarks>
            Always returns the bounds of the shape in world coordinates, regardless
            of what is on the matrix stack at the time of the call.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.#ctor(System.Drawing.PointF[])">
            <summary>
            Create closed curve from an array of points.
            </summary>
            <param name="pts">Array of points to create closed curve with.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.#ctor(Syncfusion.Windows.Forms.Diagram.ClosedCurve)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for closed curves.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the polygon.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            polygon to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.GetLocalPoints">
            <summary>
            Returns an array containing all vertices belonging to this shape.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            The points returned are in local coordinates.
            </para>
            <para>
            This method overrides the base class implementation. Only the control
            points of the closed curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.SetLocalPoints(System.Drawing.PointF[])">
            <summary>
            Assigns an array of points to the shape.
            </summary>
            <param name="pts">Points to assign to the shape.</param>
            <remarks>
            <para>
            This method overrides the base class implementation. Only the control
            points of the closed curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.GetLocalPoint(System.Int32)">
            <summary>
            Returns the vertex at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to retrieve.</param>
            <returns>Point at given offset.</returns>
            <remarks>
            <para>
            This method overrides the base class implementation. Only the control
            points of the closed curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.SetLocalPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Assigns the value of the vertex at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to update.</param>
            <param name="val">Value to assign to the vertex.</param>
            <remarks>
            <para>
            This method overrides the base class implementation. Only the control
            points of the closed curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.AddLocalPoint(System.Drawing.PointF)">
            <summary>
            Adds a vertex to the shape.
            </summary>
            <param name="val">Value of the point to add.</param>
            <remarks>
            <para>
            This method overrides the base class implementation. Only the control
            points of the closed curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.InsertLocalPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts a vertex into the shape at the given index position.
            </summary>
            <param name="ptIdx">Zero-based index at which to insert the vertex.</param>
            <param name="val">Value of the vertex to insert.</param>
            <remarks>
            <para>
            This method overrides the base class implementation. Only the control
            points of the closed curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.RemoveLocalPoint(System.Int32)">
            <summary>
            Removes a vertex from the shape.
            </summary>
            <param name="ptIdx">Zero-based index position of the vertex to remove.</param>
            <remarks>
            <para>
            This method overrides the base class implementation. Only the control
            points of the closed curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurve.CreateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates a closed curve from an array of points.
            </summary>
            <param name="pts">Points used to create the closed curve.</param>
            <returns>GraphicsPath object containing closed curve.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ClosedCurve.LocalPointCount">
            <summary>
            Number of vertices contained by the shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ClosedCurve.MinLocalPoints">
            <summary>
            Minimum number of vertices this shape may contain.
            </summary>
            <remarks>
            <para>
            This method overrides the base class implementation. It always
            returns 2.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ClosedCurve.MaxLocalPoints">
            <summary>
            Maxiumum number of vertices this shape may contain.
            </summary>
            <remarks>
            <para>
            This method overrides the base class implementation. It always
            returns ((System.Int32.MaxValue - 1) / 3).
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Curve">
            <summary>
            Implements an open curve shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.#ctor(System.Drawing.PointF[])">
            <summary>
            Construct a curve from a set of control points.
            </summary>
            <param name="pts">Control points used to create the curve.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.#ctor(Syncfusion.Windows.Forms.Diagram.Curve)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for curves.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.CreateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates a GraphicsPath containing a curve.
            </summary>
            <param name="pts">Array of control points to create the curve from.</param>
            <returns>GraphicsPath containg a curve.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the curve.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            curve to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.GetLocalPoints">
            <summary>
            Returns an array containing all vertices belonging to this curve.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            The points returned are in local coordinates.
            </para>
            <para>
            This method overrides the base class implementation. Only the control
            points of the curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.SetLocalPoints(System.Drawing.PointF[])">
            <summary>
            Assigns an array of points to the curve.
            </summary>
            <param name="pts">Points to assign to the curve.</param>
            <remarks>
            <para>
            This method overrides the base class implementation. Only the control
            points of the curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.GetLocalPoint(System.Int32)">
            <summary>
            Returns the vertex at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to retrieve.</param>
            <returns>Point at given offset.</returns>
            <remarks>
            <para>
            This method overrides the base class implementation. Only the control
            points of the curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.SetLocalPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Assigns the value of the vertex at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to update.</param>
            <param name="val">Value to assign to the vertex.</param>
            <remarks>
            <para>
            This method overrides the base class implementation. Only the control
            points of the curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.AddLocalPoint(System.Drawing.PointF)">
            <summary>
            Adds a vertex to the curve.
            </summary>
            <param name="val">Value of the point to add.</param>
            <remarks>
            <para>
            This method overrides the base class implementation. Only the control
            points of the curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.InsertLocalPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts a vertex into the curve at the given index position.
            </summary>
            <param name="ptIdx">Zero-based index at which to insert the vertex.</param>
            <param name="val">Value of the vertex to insert.</param>
            <remarks>
            <para>
            This method overrides the base class implementation. Only the control
            points of the curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Curve.RemoveLocalPoint(System.Int32)">
            <summary>
            Removes a vertex from the curve.
            </summary>
            <param name="ptIdx">Zero-based index position of the vertex to remove.</param>
            <remarks>
            <para>
            This method overrides the base class implementation. Only the control
            points of the curve are affected by this method.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Curve.LocalPointCount">
            <summary>
            Number of vertices contained by the curve.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Curve.MinLocalPoints">
            <summary>
            Minimum number of vertices this curve may contain.
            </summary>
            <remarks>
            <para>
            This method overrides the base class implementation. It always
            returns 2.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Curve.MaxLocalPoints">
            <summary>
            Maxiumum number of vertices this curve may contain.
            </summary>
            <remarks>
            <para>
            This method overrides the base class implementation. It always
            returns ((System.Int32.MaxValue) / 3).
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Ellipse">
            <summary>
            Implements an ellipse shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create an ellipse with the specified rectangular bounds.
            </summary>
            <param name="x">X-coordinate of bounding rectangle.</param>
            <param name="y">Y-coordinate of bounding rectangle.</param>
            <param name="width">Width of bounding rectangle.</param>
            <param name="height">Height of bounding rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor(System.Drawing.RectangleF)">
            <summary>
            Create an ellipse with the specified rectangular bounds.
            </summary>
            <param name="rcBounds">Bounds of ellipse to create.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor(System.Drawing.PointF[])">
            <summary>
            Construct an ellipse from a set of control points.
            </summary>
            <param name="pts">Control points used to create the ellipse.</param>
            <remarks>
            <para>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor(Syncfusion.Windows.Forms.Diagram.Ellipse)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for ellipses.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.CreateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates a graphics path containing an ellipse.
            </summary>
            <param name="pts">Array of points to create GraphicsPath from.</param>
            <returns>GraphicsPath object.</returns>
            <remarks>
            <para>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointDecorator">
            <summary>
            Base class for line decorators.
            </summary>
            <remarks>
            <para>
            A line decorator is an object that adorns an endpoint of a line or other shape.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Construct a line decorator given a graphics path for the visual.
            </summary>
            <param name="grfxPath">Visual representation of the decorator.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.#ctor(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Constructs a line decorator and attaches it to the given node.
            </summary>
            <param name="line">Node to attach to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.#ctor(Syncfusion.Windows.Forms.Diagram.INode,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Construct a line decorator given a graphics path for the visual.
            </summary>
            <param name="line">Line node to attach decorator to.</param>
            <param name="grfxPath">Visual representation of the decorator.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.#ctor(Syncfusion.Windows.Forms.Diagram.EndPointDecorator)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for line decorators.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Load(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Load the endpoint decorator with a GraphicsPath.
            </summary>
            <param name="grfxPath">GraphicsPath to load.</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the line decorator onto a System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.CreateRegion(System.Single)">
            <summary>
            Returns an object that describes the interior of the line decorator.
            </summary>
            <param name="padding">Amount of padding to add.</param>
            <returns>System.Drawing.Region object</returns>
            <remarks>
            Region objects are used for hit testing and geometrical calculations.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.GraphicsPath"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests the region of the line decorator to determine if the given point is
            contained by the region.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Amount of padding to add for hit test.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if the point is within the region; otherwise False.</returns>
            <remarks>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.CreateRegion(System.Single)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests the region of the line decorator to determine if the given rectangle
            touches the region.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if the rectangle touches the region; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests the region of the line decorator to determine if the region is
            entirely contained by the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if the rectangle contains the region; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the line decorator's bounding box intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the line decorator.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            line decorator to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.CreateStyles">
            <summary>
            Creates style objects for this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IDraw"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IGraphics"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IHitTestRegion"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.ModelName">
            <summary>
            Name of the line decorator model this line decorator is based on.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Container">
            <summary>
            Reference to the container node the decorator is attached to.
            </summary>
            <remarks>
            <para>
            This can be any type of node that supports the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IEndPointContainer"/> interface.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IEndPointContainer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.EndPointType">
            <summary>
            Determines which endpoint of the attached node to decorate.
            </summary>
            <remarks>
            <para>
            Determines if the decorator is attached to the first or last point in
            the owner node.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Container"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.EndPointLocation">
            <summary>
            Returns the current location of the owner's endpoint.
            </summary>
            <remarks>
            <para>
            Retrieves either the first or last point from the attached
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Container"/>
            adorned by this decorator. The
            <see cref="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.EndPointType"/>
            property determines if the first or last point is returned.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Container"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.LineStyle">
            <summary>
            Line drawing properties for this node.
            </summary>
            <remarks>
            The line style determines the configuration of the pen used to
            render lines.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.FillStyle">
            <summary>
            Properties for creating a brush to fill the line decorator with.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.Size">
            <summary>
            Width and height of the decorator.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.GraphicsPath">
            <summary>
            Encapsulates the points and instructions needed to render the line decorator.
            </summary>
            <remarks>
            The get method for this property is overridden by derived classes.
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.CreateRegion(System.Single)"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecorator.EndPointTransform">
            <summary>
            This matrix transformation positions the decorator over the
            appropriate endpoint of the line.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorModel">
            <summary>
            Encapsulates the data needed to create a line decorator.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorModel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorModel.#ctor(System.String)">
            <summary>
            Construct an EndPointDecoratorModel given a name.
            </summary>
            <param name="modelName">Name to give decorator.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorModel.#ctor(System.String,System.Type)">
            <summary>
            Construct an EndPointDecoratorModel given a name and type.
            </summary>
            <param name="modelName">Name to give decorator.</param>
            <param name="decoratorType">Type to instantiate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorModel.#ctor(System.String,System.Type,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Construct an EndPointDecoratorModel given a name, type, and graphics path.
            </summary>
            <param name="modelName">Name to give decorator.</param>
            <param name="decoratorType">Type to instantiate.</param>
            <param name="grfxPath">Graphics path for visual.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorModel.#ctor(System.String,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Construct an EndPointDecoratorModel given a name, type, and graphics path.
            </summary>
            <param name="modelName">Name to give decorator.</param>
            <param name="grfxPath">Graphics path for visual.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorModel.ToString">
            <summary>
            Returns the name of the line decorator model.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorModel.CreateInstance">
            <summary>
            Creates an instance of the line decorator described by the model.
            </summary>
            <returns>New instance of a EndPointDecorator.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorModel.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the line decorator model.
            </summary>
            <remarks>
            <para>
            This method can be called at any time to reset the properties of the
            line decorator model to their default values.
            </para>
            <para>
            This method sets the LineJoin property to Miter.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorModel.ModelName">
            <summary>
            Name of the line decorator model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorModel.DecoratorType">
            <summary>
            Line decorator type.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorModel.GraphicsPath">
            <summary>
            Visual representation of line decorator.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorPalette">
            <summary>
            Palette of available line decorators.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorPalette.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorPalette.Contains(System.String)">
            <summary>
            Determines if the palette contains a line decorator model with the given name.
            </summary>
            <param name="modelName">Name of decorator model to search for.</param>
            <returns>True if found; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorPalette.Add(Syncfusion.Windows.Forms.Diagram.EndPointDecoratorModel)">
            <summary>
            Adds a line decorator model to the palette.
            </summary>
            <param name="decoratorMdl">Decorator model to add.</param>
            <returns>Zero-based collection index or -1 if duplicate name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorPalette.Add(System.String,System.Type,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Adds a line decorator model to the palette.
            </summary>
            <param name="modelName">Name of model.</param>
            <param name="decoratorType">Type to instantiate.</param>
            <param name="grfxPath">Visual representation of the decorator.</param>
            <returns>Zero-based collection index or -1 if duplicate name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorPalette.Add(System.String,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Adds a line decorator model to the palette.
            </summary>
            <param name="modelName">Name of model.</param>
            <param name="grfxPath">Visual representation of the decorator.</param>
            <returns>Zero-based collection index or -1 if duplicate name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorPalette.LoadDefaults">
            <summary>
            Loads the default set of line decorators into the palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorPalette.Item(System.Int32)">
            <summary>
            Returns line decorator model given a zero-based collection index.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorPalette.Item(System.String)">
            <summary>
            Returns line decorator model given a name.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointVisuals">
            <summary>
            Contains static GraphicsPath objects that can be used for the
            visual representation of ports.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointVisuals.OpenArrow">
            <summary>
            Open arrow visual.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointVisuals.ClosedArrow">
            <summary>
            Closed arrow visual.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointVisuals.Circle">
            <summary>
            Circle visual.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointVisuals.Diamond">
            <summary>
            Diamond visual.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Figure">
            <summary>
            A figure is a leaf node that encapsulates a GDI+ GraphicsPath containing a
            collection of drawing primitives.
            </summary>
            <remarks>
            The figure class implements the <see cref="T:Syncfusion.Windows.Forms.Diagram.IGraphics"/>
            interface and contains a GDI+ GraphicsPath object. The contained GraphicsPath
            object provides rendering and hit testing for the figure. Shapes
            can be added to the figure to create a composite shape.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphics"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.#ctor(Syncfusion.Windows.Forms.Diagram.Figure)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for figures.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.AddPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Adds a graphics path to the figure.
            </summary>
            <param name="grfxPath">Graphics path to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the figure onto a System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.CreateRegion(System.Single)">
            <summary>
            Returns an object that describes the interior of the figure.
            </summary>
            <param name="padding">Amount of padding to add.</param>
            <returns>System.Drawing.Region object.</returns>
            <remarks>
            Region objects are used for hit testing and geometrical calculations.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.GraphicsPath"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Translate(System.Single,System.Single)">
            <summary>
            Moves the figure by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
            <remarks>
            Applies a translate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the figure a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Rotate(System.Single)">
            <summary>
            Rotates the figure a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Scales the figure by a given ratio along the X and Y axes.
            </summary>
            <param name="ptAnchor">Fixed point about which to scale.</param>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Scale(System.Single,System.Single)">
            <summary>
            Scales the figure about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Group.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the figure's bounding box contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the figure's bounding box intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the figure's bounding box contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the figure's bounding box intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the figure's region contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the figure's region intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the figure's region contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the figure's region intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the figure.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            figure to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called before the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called after the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Click(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#InsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called before the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called after the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnPropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            before a property changes by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the property change by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when the position of the node is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the move by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when the node is rotated.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the rotation by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when the node is scaled.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the scaling by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnBoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of the node change.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the change in bounds by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnDoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnMouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnMouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnInsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnMoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.OnDeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.CheckConstrainingRegion">
            <summary>
            Tests to see if the current position of the figure falls within the
            constraining region specified by the parent node.
            </summary>
            <returns>True if position is valid; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.CreateStyles">
            <summary>
            Creates style objects for this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Figure.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IBounds2DF"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ITransform"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.EditStyle"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Figure.name">
            <summary>
            Name of the figure.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Figure.parent">
            <summary>
            Reference to parent node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Figure.matrix">
            <summary>
            Transformation matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Figure.grfxPath">
            <summary>
            GraphicsPath containing points and instructions for rendering the figure.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Figure.propertyValues">
            <summary>
            Hashtable containing property name / value pairs.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Figure.lineStyle">
            <summary>
            Properties for creating pens to draw lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Figure.fillStyle">
            <summary>
            Properties for creating brush to fill interior of figure.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Figure.editStyle">
            <summary>
            Properties for determining edit capabilities.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.Visible">
            <summary>
            Determines if the figure is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.Parent">
            <summary>
            Reference to the composite node this node is a child of.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.Root">
            <summary>
            The root node in the node hierarchy.
            </summary>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.Name">
            <summary>
            Name of the node.
            </summary>
            <remarks>
            Must be unique within the scope of the parent node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.FullName">
            <summary>
            Fully qualified name of the node.
            </summary>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.Bounds">
            <summary>
            The figure's bounding box.
            </summary>
            <remarks>
            Always returns the bounds of the figure in world coordinates, regardless
            of what is on the matrix stack at the time of the call.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.X">
            <summary>
            X-coordinate of the figure's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.Y">
            <summary>
            Y-coordinate of the figure's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.Width">
            <summary>
            Width of the figure.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.Height">
            <summary>
            Height of the figure.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Bounds">
            <summary>
            Bounding box of the figure in local coordinates.
            </summary>
            <remarks>
            The value returned depends on the contents of the matrix stack. If the
            matrix stack is empty, then the value returned is in local coordinates.
            This method is generally used by functions that recursively traverse
            the node hierarchy, pushing and popping the matrix stack as they go.
            <seealso cref="F:Syncfusion.Windows.Forms.Diagram.Global.MatrixStack"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Bounds"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#X">
            <summary>
            X-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Y">
            <summary>
            Y-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Width">
            <summary>
            Width of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Height">
            <summary>
            Height of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.GraphicsPath">
            <summary>
            Encapsulates the points and instructions needed to render the figure.
            </summary>
            <remarks>
            The contents of the GraphicsPath is determined by derived classes,
            and depends on the type of figure.
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Shape.CreateRegion(System.Single)"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.LocalTransform">
            <summary>
            Matrix containing transformations for this node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.WorldTransform">
            <summary>
            Returns a matrix containing transformations for this node and all of
            its ancestors.
            </summary>
            <remarks>
            Chains up the node hierarchy and builds a transformation matrix containing
            all transformations that apply to this node in the world coordinate space.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.ParentTransform">
            <summary>
            Returns a matrix containing the transformations of this node's parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.LineStyle">
            <summary>
            Line drawing properties for this node.
            </summary>
            <remarks>
            The line style determines the configuration of the pen used to
            render lines.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.FillStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Figure.EditStyle">
            <summary>
            Edit properties for this node.
            </summary>
            <remarks>
            Edit properties determine how this node can be edited.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.EditStyle"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Line">
            <summary>
            Implements a simple line containing two points.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ILineSegments">
            <summary>
            Interface for accessing and modifying the collection of line
            segments to an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILineSegments.GetLineSegment(System.Int32)">
            <summary>
            Returns the line segment at the given index position.
            </summary>
            <param name="segIdx">Index of line segment to return</param>
            <returns>Line segment at the given index offset.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILineSegments.GetLineSegmentAt(System.Drawing.PointF)">
            <summary>
            Hit tests the object to determine which line segment (if any) intersects
            the given point.
            </summary>
            <param name="pt">Point to test.</param>
            <returns>
            Zero-based index of line segment hit or -1 if the hit test fails.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILineSegments.LineSegmentCount">
            <summary>
            Number of line segments in the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Constructs a line given two points.
            </summary>
            <param name="pt1">First point.</param>
            <param name="pt2">Second point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.#ctor(System.Drawing.PointF[])">
            <summary>
            Constructs a line given an array of points.
            </summary>
            <param name="pts">Array of points to construct line from.</param>
            <remarks>
            <para>
            The array must contain at least two points. Only the first two are
            used to construct the line.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.#ctor(Syncfusion.Windows.Forms.Diagram.Line)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for lines.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ILineSegments"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.GetService(System.Type)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.CreateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates the graphics path for the shape given an array of points.
            </summary>
            <param name="pts">Array of points used to construct the graphics path.</param>
            <returns>Graphics path containing a line.</returns>
            <remarks>
            <para>
            The array must contain at least two points. Only the first two points are
            used to create the graphics path.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the line to a graphics context object.
            </summary>
            <param name="grfx">Graphics context object to render onto.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the line.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            line to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's region contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's region intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's region contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.Syncfusion#Windows#Forms#Diagram#ILineSegments#GetLineSegment(System.Int32)">
            <summary>
            Returns the line segment at the given index position.
            </summary>
            <returns>Array of points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.Syncfusion#Windows#Forms#Diagram#ILineSegments#GetLineSegmentAt(System.Drawing.PointF)">
            <summary>
            Hit tests the object to determine which line segment (if any) intersects
            the given point.
            </summary>
            <param name="pt">Point to test.</param>
            <returns>
            Zero-based index of line segment hit or -1 if the hit test fails.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.GetEndPointLocation(Syncfusion.Windows.Forms.Diagram.LineEndPoint)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.GetEndPointVector(Syncfusion.Windows.Forms.Diagram.LineEndPoint,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            
            </summary>
            <param name="endPointType"></param>
            <param name="ptFrom"></param>
            <param name="ptTo"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Line.firstEndPointDecorator">
            <summary>
            EndPointDecorator attached to first point in line.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Line.lastEndPointDecorator">
            <summary>
            EndPointDecorator attached to last point in line.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.FirstEndPointDecorator">
            <summary>
            Line decorator object for the first endpoint.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.LastEndPointDecorator">
            <summary>
            Line decorator object for the last endpoint.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.Bounds">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Bounds"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.LineHitTestPadding">
            <summary>
            Padding around the line used for hit testing.
            </summary>
            <remarks>
            <para>
            Specified in logical units.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.MaxLocalPoints">
            <summary>
            Maximum number of points this shape can have.
            </summary>
            <remarks>
            <para>Always returns two.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.MinLocalPoints">
            <summary>
            Minimum number of points this shape must have.
            </summary>
            <remarks>
            <para>Always returns two.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.Syncfusion#Windows#Forms#Diagram#ILineSegments#LineSegmentCount">
            <summary>
            Number of line segments in the line.
            </summary>
            <remarks>
            Always returns 1.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineSegment">
            <summary>
            Encapsulates two points that comprise a line segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineSegment.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Constructs a line segment given two points.
            </summary>
            <param name="pt1">First point in line segment.</param>
            <param name="pt2">Second point in line segment.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineSegment.HitTest(System.Drawing.PointF,System.Single)">
            <summary>
            Determines if the given point intersects the line segment.
            </summary>
            <param name="pt">Point to test.</param>
            <param name="slop">Accuracy factor.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineSegment.GetOrthogonalIntersect(Syncfusion.Windows.Forms.Diagram.LineSegment,System.Drawing.PointF@)">
            <summary>
            
            </summary>
            <param name="lineSeg"></param>
            <param name="ptIntersect"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineSegment.Point1">
            <summary>
            First point in the line segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineSegment.Point2">
            <summary>
            Second point in the line segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineSegment.IsHorizontal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineSegment.IsVertical">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IMoveableLineSegments">
            <summary>
            Summary description for MoveableSegments.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IMoveableLineSegments.MoveLineSegment(System.Int32,System.Single,System.Single)">
            <summary>
            Moves the line segment by the specified X and Y offsets.
            </summary>
            <param name="segIdx">Index of line segment to move</param>
            <param name="dx">Distance to move the line segment along the X axis</param>
            <param name="dy">Distance to move the line segment along the Y axis</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IMoveableLineSegments.BridgeLineSegment(System.Int32,System.Single,System.Single)">
            <summary>
            Adds a bridge to the specified line segment.
            </summary>
            <param name="segIdx">Zero-based index of line segment to add the bridge to</param>
            <param name="offset">Offset from the beginning of the segment at which to add the bridge</param>
            <param name="size">Size of the bridge to add</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.OrthogonalLine">
            <summary>
            Implements orthogonal lines.
            </summary>
            <remarks>
            <para>
            An orthogonal line is a series of line segments that are
            joined together with right (90 degree) angles. All of the
            line segments in an orthogonal line are parallel to either
            the X or Y axis of the world coordinate space.
            </para>
            <para>
            When a vertex is changed, added, or removed from the orthogonal
            line, the remaining vertices are recalculated to keep the line
            orthogonal.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PolyLine">
            <summary>
            Implementation of polyline shapes.
            </summary>
            <remarks>
            <para>
            A polyline is a collection of points that form a series of connected
            line segments.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.#ctor(System.Drawing.PointF[])">
            <summary>
            Constructs a polyline given an array of points.
            </summary>
            <param name="pts">Points to add to polyline.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.#ctor(Syncfusion.Windows.Forms.Diagram.PolyLine)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for lines.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ILineSegments"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.GetService(System.Type)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.MakeOrthogonal">
            <summary>
            Rearranges the points in the polyline to form an orthogonal line.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.MakeOrthogonal(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Rearranges the points in the polyline to form an orthogonal line.
            </summary>
            <param name="padLeft"></param>
            <param name="padRight"></param>
            <param name="padTop"></param>
            <param name="padBottom"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.MakeOrthogonal(Syncfusion.Windows.Forms.Diagram.CompassHeading,Syncfusion.Windows.Forms.Diagram.CompassHeading,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Rearranges the points in the polyline to form an orthogonal line.
            </summary>
            <param name="endPt1Heading"></param>
            <param name="endPt2Heading"></param>
            <param name="padLeft"></param>
            <param name="padRight"></param>
            <param name="padTop"></param>
            <param name="padBottom"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.CreateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates the graphics path for the shape given an array of points.
            </summary>
            <param name="pts">Array of points used to construct the graphics path.</param>
            <returns>Graphics path containing a line.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the line to a graphics context object.
            </summary>
            <param name="grfx">Graphics context object to render onto.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the polyline.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            polyline to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the line's region contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the line's region intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the line's region contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.Syncfusion#Windows#Forms#Diagram#ILineSegments#GetLineSegment(System.Int32)">
            <summary>
            Returns the line segment at the given index position.
            </summary>
            <returns>Array of points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.Syncfusion#Windows#Forms#Diagram#ILineSegments#GetLineSegmentAt(System.Drawing.PointF)">
            <summary>
            Hit tests the object to determine which line segment (if any) intersects
            the given point.
            </summary>
            <param name="pt">Point to test.</param>
            <returns>
            Zero-based index of line segment hit or -1 if the hit test fails.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.GetEndPointLocation(Syncfusion.Windows.Forms.Diagram.LineEndPoint)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.GetEndPointVector(Syncfusion.Windows.Forms.Diagram.LineEndPoint,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            
            </summary>
            <param name="endPointType"></param>
            <param name="ptFrom"></param>
            <param name="ptTo"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLine.ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PolyLine.firstEndPointDecorator">
            <summary>
            EndPointDecorator attached to first point in line.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PolyLine.lastEndPointDecorator">
            <summary>
            EndPointDecorator attached to last point in line.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PolyLine.FirstEndPointDecorator">
            <summary>
            Line decorator object for the first endpoint.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PolyLine.LastEndPointDecorator">
            <summary>
            Line decorator object for the last endpoint.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PolyLine.IsOrthogonal">
            <summary>
            Determines if the polyline is orthogonal or not.
            </summary>
            <remarks>
            <para>
            This property tests the points in the polyline each time it is
            accessed and checks to see if they form an orthogonal line.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PolyLine.LineHitTestPadding">
            <summary>
            Padding around the line used for hit testing.
            </summary>
            <remarks>
            <para>
            Specified in logical units.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PolyLine.Syncfusion#Windows#Forms#Diagram#ILineSegments#LineSegmentCount">
            <summary>
            Number of line segments in the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Constructs an orthogonal line given two points.
            </summary>
            <param name="pt1">First point.</param>
            <param name="pt2">Second point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.#ctor(System.Drawing.PointF[])">
            <summary>
            Create an orthogonal line from an array of points.
            </summary>
            <param name="pts">Points in line.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.#ctor(Syncfusion.Windows.Forms.Diagram.OrthogonalLine)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for orthogonal lines.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the line to a graphics context object.
            </summary>
            <param name="grfx">Graphics context object to render onto.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the line.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            line to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.MoveLineSegment(System.Int32,System.Single,System.Single)">
            <summary>
            Moves the line segment by the specified X and Y offsets.
            </summary>
            <param name="segIdx">Index of line segment to move</param>
            <param name="dx">Distance to move the line segment along the X axis</param>
            <param name="dy">Distance to move the line segment along the Y axis</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.BridgeLineSegment(System.Int32,System.Single,System.Single)">
            <summary>
            Adds a bridge to the specified line segment.
            </summary>
            <param name="segIdx">Zero-based index of line segment to add the bridge to</param>
            <param name="offset">Offset from the beginning of the segment at which to add the bridge</param>
            <param name="size">Size of the bridge to add</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.SetLocalPoints(System.Drawing.PointF[])">
            <summary>
            Assigns an array of points to the shape.
            </summary>
            <param name="pts">Points to assign to the shape.</param>
            <remarks>
            The points passed in must be specified in world coordinates.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.SetLocalPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Assigns the value of the vertex at the specified index position.
            </summary>
            <param name="ptIdx">Zero-based index position of the point to update.</param>
            <param name="val">Value to assign to the vertex.</param>
            <remarks>
            The point passed in must be in world coordinates.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.AddLocalPoint(System.Drawing.PointF)">
            <summary>
            Adds a vertex to the shape.
            </summary>
            <param name="val">Value of the point to add.</param>
            <remarks>
            The point passed in must be in world coordinates.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.InsertLocalPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts a vertex into the shape at the given index position.
            </summary>
            <param name="ptIdx">Zero-based index at which to insert the vertex.</param>
            <param name="val">Value of the vertex to insert.</param>
            <remarks>
            The point passed in must be in world coordinates.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.RemoveLocalPoint(System.Int32)">
            <summary>
            Removes a vertex from the shape.
            </summary>
            <param name="ptIdx">Zero-based index position of the vertex to remove.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the property change by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            </para>
            <para>
            This method also recalculates the points in the orthogonal line if one of
            the following properties was changed:
            <see cref="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.HeadingEndPoint1"/>,
            <see cref="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.HeadingEndPoint2"/>,
            <see cref="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.PaddingLeft"/>,
            <see cref="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.PaddingTop"/>,
            <see cref="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.PaddingRight"/>,
            <see cref="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.PaddingBottom"/>.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.MakeOrthogonal(System.Drawing.PointF[])">
            <summary>
            Takes an array of points and makes them orthogonal.
            </summary>
            <param name="pts">Array of points to make orthogonal.</param>
            <returns>Array of points that are orthogonal.</returns>
            <remarks>
            <para>
            This method generates an orthogonal line based on the endpoint headings
            contained by this object. If AutomaticHeadings is turned on, then the first
            and last point in the array passed in are used to calculate the endpoint
            headings. Once the headings are determined, the orthogonal line is
            calculated based on the endpoint headings and the first and last points
            in the incoming array.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.GetSegmentBridgeCount(System.Int32)">
            <summary>
            
            </summary>
            <param name="segIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.CreateVisualGraphicsPath">
            <summary>
            Creates a GraphicsPath that is the visual representation of the
            orthogonal line.
            </summary>
            <returns>GraphicsPath object used to draw the orthogonal line</returns>
            <remarks>
            <para>
            This method creates the GraphicsPath object used to draw the
            orthogonal line. It will add bridges into the line at the
            specified locations.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.RemoveAllBridges">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.AutomaticHeadings">
            <summary>
            Determines if the compass headings of the endpoints are automatically
            calculated.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.HeadingEndPoint1">
            <summary>
            Compass heading of the first endpoint.
            </summary>
            <remarks>
            <para>
            The compass heading can be North, South, East, or West. The compass
            headings of the first and last endpoints determine how many segments
            are needed to join the two endpoints using orthogonal lines.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.HeadingEndPoint2">
            <summary>
            Compass heading of the second endpoint.
            </summary>
            <remarks>
            <para>
            The compass heading can be North, South, East, or West. The compass
            headings of the first and last endpoints determine how many segments
            are needed to join the two endpoints using orthogonal lines.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.PaddingLeft">
            <summary>
            Length of line segments heading west from the left side of the
            line's bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.PaddingTop">
            <summary>
            Length of line segments heading north from the top side of the
            line's bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.PaddingRight">
            <summary>
            Length of line segments heading east from the right side of the
            line's bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.PaddingBottom">
            <summary>
            Length of line segments heading south from the bottom side of the
            line's bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.BridgeSize">
            <summary>
            Determines the size of bridges added to the line to jump over
            other lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.MinLocalPoints">
            <summary>
            Minimum number of points this shape can have.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Polygon">
            <summary>
            Implementation of polygon shapes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.#ctor(System.Drawing.PointF[])">
            <summary>
            Create a polygon from an array of points.
            </summary>
            <param name="pts">Points to add to polygon.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.#ctor(Syncfusion.Windows.Forms.Diagram.Polygon)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for polygons.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ILineSegments"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Shape.GetService(System.Type)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.CreateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates the graphics path for the polygon given an array of points.
            </summary>
            <param name="pts">Array of points used to construct the graphics path.</param>
            <returns>Graphics path containing a line.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the polygon.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            polygon to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.Syncfusion#Windows#Forms#Diagram#ILineSegments#GetLineSegment(System.Int32)">
            <summary>
            Returns the line segment at the given index position.
            </summary>
            <returns>Array of points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.Syncfusion#Windows#Forms#Diagram#ILineSegments#GetLineSegmentAt(System.Drawing.PointF)">
            <summary>
            Hit tests the object to determine which line segment (if any) intersects
            the given point.
            </summary>
            <param name="pt">Point to test.</param>
            <returns>
            Zero-based index of line segment hit or -1 if the hit test fails.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Polygon.MinLocalPoints">
            <summary>
            Minimum number points a polygon may contain.
            </summary>
            <remarks>
            <para>Always returns three.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Polygon.LineHitTestPadding">
            <summary>
            Padding around the line used for hit testing.
            </summary>
            <remarks>
            <para>
            Specified in logical units.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Polygon.Syncfusion#Windows#Forms#Diagram#ILineSegments#LineSegmentCount">
            <summary>
            Number of line segments in the object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Rectangle">
            <summary>
            Implementation of rectangle shapes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a rectangle given X, Y, width, and height.
            </summary>
            <param name="x">X-coordinate of rectangle.</param>
            <param name="y">Y-coordinate of rectangle.</param>
            <param name="width">Width of rectangle.</param>
            <param name="height">Height of rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor(System.Drawing.RectangleF)">
            <summary>
            Construct a rectangle given position and size.
            </summary>
            <param name="rcBounds">Rectangle containing position and size.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor(System.Drawing.PointF[])">
            <summary>
            Create a rectangle from an array of points.
            </summary>
            <param name="pts">Points to add to rectangle.</param>
            <remarks>
            <para>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor(Syncfusion.Windows.Forms.Diagram.Rectangle)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for rectangles.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.CreateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates a graphics path containing a rectangle.
            </summary>
            <param name="pts">Array of points to create rectangle from.</param>
            <returns>GraphicsPath object.</returns>
            <remarks>
            <para>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Rectangle.MaxLocalPoints">
            <summary>
            Maximum number of points a rectangle can contain.
            </summary>
            <remarks>
            <para>Always returns four.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Rectangle.MinLocalPoints">
            <summary>
            Minimum number points a rectangle may contain.
            </summary>
            <remarks>
            <para>Always returns four.</para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RoundRect">
            <summary>
            Implementation of rounded rectangle shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a rounded rectangle given X, Y, width, and height.
            </summary>
            <param name="x">X-coordinate of rectangle.</param>
            <param name="y">Y-coordinate of rectangle.</param>
            <param name="width">Width of rectangle.</param>
            <param name="height">Height of rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Drawing.RectangleF)">
            <summary>
            Construct a rounded rectangle given position and size.
            </summary>
            <param name="rcBounds">Rectangle containing position and size.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Drawing.PointF[])">
            <summary>
            Create a rounded rectangle from an array of points.
            </summary>
            <param name="pts">Points specifying rectangle.</param>
            <remarks>
            <para>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(Syncfusion.Windows.Forms.Diagram.RoundRect)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for rounded rectangles.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.CreateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates a graphics path containing a rounded rectangle.
            </summary>
            <param name="pts">Array of points to create rectangle from.</param>
            <returns>GraphicsPath object.</returns>
            <remarks>
            <para>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.CreateGraphicsPath(System.Drawing.RectangleF)">
            <summary>
            Creates a graphics path containing a rounded rectangle.
            </summary>
            <param name="rcBounds">Bounds of rectangle.</param>
            <returns>GraphicsPath object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the rounded rectangle.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            shape to their default values.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RoundRect.rcBounds">
            <summary>
            Bounds of rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RoundRect.curvePct">
            <summary>
            Curve percent.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RoundRect.CurvePercent">
            <summary>
            Percentage of the width and height of the rectangle that is included in the curves.
            </summary>
            <remarks>
            <para>
            Default value is 15%.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ShapeFactory">
            <summary>
            Delegate used to create shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DuplicateNodeNameException">
            <summary>
            Thrown when trying to add a node with a duplicate name into the model.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DuplicateNodeNameException.#ctor(System.String)">
            <summary>
            Construct a	DuplicateNodeNameException exception given a node name.
            </summary>
            <remarks>
            <para>
            A node's name must be unique within	the	scope of its parent. This
            exception is thrown	by the model only if it	cannot auto-generate
            a unique name by appending numeric suffixes	to the name.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DuplicateNodeNameException.NodeName">
            <summary>
            Node name that is duplicate.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DuplicateNodeNameException.Message">
            <summary>
            Returns	the	error message for this exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DuplicateLayerNameException">
            <summary>
            Thrown when trying to add a layer with a duplicate name into the model.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DuplicateLayerNameException.#ctor(System.String)">
            <summary>
            Construct a	DuplicateLayerNameException	exception given	a node name.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DuplicateLayerNameException.LayerName">
            <summary>
            Layer name that	is duplicate.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DuplicateLayerNameException.Message">
            <summary>
            Returns	the	error message for this exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.InvalidConnectionException">
            <summary>
            Thrown when a connection is attempted between two incompatible ports.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InvalidConnectionException.#ctor(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Construct an InvalidConnectionException	given two ports.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InvalidConnectionException.SourcePort">
            <summary>
            Source port	involved in	the	connection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InvalidConnectionException.TargetPort">
            <summary>
            Target port	involved in	the	connection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InvalidConnectionException.Message">
            <summary>
            Returns	the	error message for this exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SlopeUndefinedException">
            <summary>
            Indicates that the X vector in a slope calculation is 0.
            </summary>
            <remarks>
            <para>
            Slope is undefined for vertical lines. This exception is thrown when attempting
            to calculate the slope of a vertical line.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SlopeUndefinedException.#ctor">
            <summary>
            Construct a	SlopeUndefinedException.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayerNotFoundException">
            <summary>
            Thrown when an invalid layer name is referenced.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a LayerNotFoundException exception.
            </summary>
            <param name="layerName">Layer name that	is invalid.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerNotFoundException.Message">
            <summary>
            Returns	a message describing the exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayerDisabledException">
            <summary>
            Thrown when attempting to perform an operation on a disabled layer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerDisabledException.#ctor(Syncfusion.Windows.Forms.Diagram.Layer)">
            <summary>
            Constructs a LayerDisabledException exception.
            </summary>
            <param name="layer">Layer that is disabled.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerDisabledException.Layer">
            <summary>
            Disabled layer involved	in the attempted operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerDisabledException.Message">
            <summary>
            Returns	a message describing the exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LabelNotFoundException">
            <summary>
            Thrown when an invalid label name is referenced.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a LabelNotFoundException exception.
            </summary>
            <param name="labelName">Label name that	is invalid.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LabelNotFoundException.Message">
            <summary>
            Returns	a message describing the exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BoundaryConstraintException">
            <summary>
            Thrown when a node is moved or sized to a location that violates its
            boundary constraints.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundaryConstraintException.#ctor(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Construct a	BoundaryConstraintException	given a	node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BoundaryConstraintException.Node">
            <summary>
            Node that violated its boundary	constraints.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BoundaryConstraintException.Message">
            <summary>
            Returns	a message describing the exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DefaultExceptionHandler">
            <summary>
            Provides a default handler for ThreadExceptions.
            </summary>
            <remarks>
            <para>
            A thread exception is generated when unhandled exceptions occur on a thread.
            This is a last resort exception handler that allows your application to
            gracefully deal with unhandled exceptions.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DefaultExceptionHandler.Singleton">
            <summary>
            Singleton instance of the DefaultExceptionHandler.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DefaultExceptionHandler.OnThreadException(System.Object,System.Threading.ThreadExceptionEventArgs)">
            <summary>
            Called when	a thread exception occurs.
            </summary>
            <param name="sender">Object	sending	the	event.</param>
            <param name="evtArgs">Event	arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DefaultExceptionHandler.ShowUserErrorDialog(System.Exception)">
            <summary>
            Shows a	model dialog that displays a user error	message.
            </summary>
            <param name="ex">Exception thrown by the error.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException">
            <summary>
            Summary description for ScriptFileNotFoundException.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException.DEF_MESSAGE">
            <summary>
            Default	message.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException.#ctor">
            <summary>
            Default	constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException.#ctor(System.Exception)">
            <summary>
            
            </summary>
            <param name="innerExc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerExc"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineEndPoint">
            <summary>
            Used to specify a logical end point of a line.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineEndPoint.First">
            <summary>
            First endpoint.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineEndPoint.Last">
            <summary>
            Last endpoint.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BoxPosition">
            <summary>
            Specifies one of nine relative positions on a box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.TopLeft">
            <summary>
            Top left point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.TopCenter">
            <summary>
            Top center point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.TopRight">
            <summary>
            Top right point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.MiddleLeft">
            <summary>
            Middle left point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.Center">
            <summary>
            Center of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.MiddleRight">
            <summary>
            Middle left point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.BottomLeft">
            <summary>
            Bottom left point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.BottomCenter">
            <summary>
            Bottom center point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.BottomRight">
            <summary>
            Bottom right point of the box.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BoxOrientation">
            <summary>
            The BoxOrientation specifies a vertical or horizontal line passing
            through one of the four edges or through the center of a box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxOrientation.Left">
            <summary>
            Left edge of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxOrientation.Top">
            <summary>
            Top edge of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxOrientation.Right">
            <summary>
            Right edge of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxOrientation.Bottom">
            <summary>
            Bottom edge of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxOrientation.HCenter">
            <summary>
            Horizontal center.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxOrientation.VCenter">
            <summary>
            Vertical center.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CompassHeading">
            <summary>
            Specifies a compass heading.
            </summary>
            <remarks>
            This enumeration is used to specify the direction of a vector. A vector
            can be generated given one point and a CompassHeading.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.North">
            <summary>
            North (up).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.South">
            <summary>
            South (down).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.East">
            <summary>
            East (right).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.West">
            <summary>
            West (left).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.Northwest">
            <summary>
            Northwest (up and left).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.Northeast">
            <summary>
            Northeast (up and right).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.Southwest">
            <summary>
            Southwest (down and left).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.Southeast">
            <summary>
            Southeast (down and right).
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Geometry">
            <summary>
            Contains static declarations for functions and constants used for
            performing calculations on points, lines, and rectangles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Geometry.RadiansQuadrant1">
            <summary>
            Angle of quadrant 1 for a unit circle in radians.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Geometry.RadiansQuadrant2">
            <summary>
            Angle of quadrant 2 for a unit circle in radians.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Geometry.RadiansQuadrant3">
            <summary>
            Angle of quadrant 3 for a unit circle in radians.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Geometry.RadiansQuadrant4">
            <summary>
            Angle of quadrant 4 for a unit circle in radians.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CreateRect(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Create a rectangle from two points.
            </summary>
            <param name="pt1">First point.</param>
            <param name="pt2">Second point.</param>
            <returns>Rectangle</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CreateRect(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CenterPoint(System.Drawing.RectangleF)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CenterPoint(System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetAnchorPoint(System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.BoxPosition)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <param name="anchor"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CreateRect(System.Drawing.PointF[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.ArcFromPoints(System.Drawing.Point,System.Drawing.Point,System.Drawing.Rectangle@,System.Single@,System.Single@)">
            <summary>
            Creates an arc given two points.
            </summary>
            <param name="pt1">First point.</param>
            <param name="pt2">Second point.</param>
            <param name="rcBounds">Output parameter to receive the bounds of the arc created.</param>
            <param name="startAngle">Output parameter to receive the start angle of the arc created.</param>
            <param name="sweepAngle">Output parameter to receive the end angle of the arc created.</param>
            <remarks>
            <para>
            The two points passed in are used to calculate the bounds of the arc and the
            start and end angle.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.ArcFromPoints(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.RectangleF@,System.Single@,System.Single@)">
            <summary>
            
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="rcBounds"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.PointDistance(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LineSlope(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LineSlope(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.HitTestLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="ptTest"></param>
            <param name="slop"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetLineIntersect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.PointF[]@)">
            <summary>
            
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="rect"></param>
            <param name="ptsIntersect"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CounterClockwise(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="pt0"></param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LinesIntersect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="pt0"></param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcLineSegmentIntersect(Syncfusion.Windows.Forms.Diagram.LineSegment,Syncfusion.Windows.Forms.Diagram.LineSegment,System.Drawing.PointF@)">
            <summary>
            
            </summary>
            <param name="seg1"></param>
            <param name="seg2"></param>
            <param name="ptIntersect"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcLineSegmentIntersect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            
            </summary>
            <param name="x0"></param>
            <param name="y0"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <param name="xi"></param>
            <param name="yi"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcVerticalIntercept(System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single@)">
            <summary>
            
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcHorizontalIntercept(System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single@)">
            <summary>
            
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="y"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetOrthogonalIntersect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Get the intersecting point of two orthogonal line segments.
            </summary>
            <param name="pt1">First point in first line segment</param>
            <param name="pt2">Second point in first line segment</param>
            <param name="pt3">First point in second line segment</param>
            <param name="pt4">Second point in second line segment</param>
            <param name="ptIntersect">Point at which the orthogonal line segments intersect</param>
            <returns>true if an intersection exists; otherwise false</returns>
            <remarks>
            <para>
            This method only returns an intersection point if one of the line
            segments is horizontal and the other is vertical. It does not
            calculate the intersection of lines that are not orthogonal to
            each other and parallel with the X and Y axes.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.TestOrthogonalIntersect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Test two orthogonal line segments to determine if they intersect.
            </summary>
            <param name="pt1">First point in first line segment</param>
            <param name="pt2">Second point in first line segment</param>
            <param name="pt3">First point in second line segment</param>
            <param name="pt4">Second point in second line segment</param>
            <returns>true if an intersection exists; otherwise false</returns>
            <remarks>
            <para>
            This method only returns true if one of the line
            segments is horizontal and the other is vertical and
            the two line segments cross.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.TestOrthogonalIntersect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.RectangleF)">
            <summary>
            Tests the given orthogonal line segment to see if it intersects the given
            rectangle.
            </summary>
            <param name="pt1">First point on the line segment</param>
            <param name="pt2">Second point on the line segment</param>
            <param name="rect">Rectangle to test</param>
            <returns>true if they intersect, otherwise false</returns>
            <remarks>
            <para>
            This method only works if the line segment is either horizontal
            or vertical. In other words, the line segment must be parallel to
            either the X or Y axis.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.RectIntersectsWithLineSegment(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LineAngle(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LineAngle(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LineAngle(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="ptA"></param>
            <param name="ptO"></param>
            <param name="ptB"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.AngleQuadrant(System.Double)">
            <summary>
            
            </summary>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetBoundaryIntercept(System.Drawing.Region,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            
            </summary>
            <param name="rgn"></param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="ptIntercept"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.Union(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            
            </summary>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.Union(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetAggregateBounds(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcLineLength(Syncfusion.Windows.Forms.Diagram.IPoints)">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcPercentageAlong(Syncfusion.Windows.Forms.Diagram.IPoints,System.Int32,System.Drawing.PointF@,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <param name="percent"></param>
            <param name="ptReturn"></param>
            <param name="vertexIdx1"></param>
            <param name="vertexIdx2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CompassHeadingToVector(Syncfusion.Windows.Forms.Diagram.CompassHeading)">
            <summary>
            
            </summary>
            <param name="heading"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.IsOrthogonalLine(System.Drawing.PointF[])">
            <summary>
            
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetOrthogonalPoint(System.Drawing.PointF,System.Drawing.PointF,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a point orthogonal to the two endpoints of the line.
            </summary>
            <param name="ptBegin"></param>
            <param name="ptEnd"></param>
            <param name="row">Row number of point to calculate.</param>
            <param name="col">Column number of point to calculate.</param>
            <param name="padLeft"></param>
            <param name="padRight"></param>
            <param name="padTop"></param>
            <param name="padBottom"></param>
            <returns>A logical point that is orthogonal to the two line endpoints.</returns>
            <remarks>
            The row and column are used to index a 5x5 matrix of points that
            surround the two endpoints. All of the points in the matrix are orthogonal
            to the endpoints. The matrix can be thought of as two rectangles and a
            point in the center. The outer rectangle contains 16 points and the inner
            rectangle contains 8 points (16+8+1=25). The endpoints always lie in
            either the 2nd or 4th column and the 2nd or 4th row. In other words, the
            endpoints are always two of the four corners of the inner rectangle. The
            outer rectangle is calculated by inflating the inner rectangle using the
            padding value passed in.		
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcOrthogonalPoints(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.CompassHeading,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.CompassHeading,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="ptEnd1"></param>
            <param name="endPt1Heading"></param>
            <param name="ptEnd2"></param>
            <param name="endPt2Heading"></param>
            <param name="padLeft"></param>
            <param name="padRight"></param>
            <param name="padTop"></param>
            <param name="padBottom"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcEndpointDirections(System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.CompassHeading@,Syncfusion.Windows.Forms.Diagram.CompassHeading@)">
            <summary>
            Calculate the optimal directions for the two specified points.
            </summary>
            <param name="pt1">First point in the line.</param>
            <param name="pt2">Second point in the line.</param>
            <param name="pt1Heading">Heading calculated for the first point.</param>
            <param name="pt2Heading">Heading calculated for the second point.</param>
            <remarks>
            This method is used for orthogonal lines. Given two points, this method
            determines the compass headings for the two points. The compass heading
            for each point determines which direction the line will attach to the
            point.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Global">
            <summary>
            This class contains static methods and data that are used globally.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Global.InitDone">
            <summary>
            Flag indicating if initialization of the library is complete.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Global.MatrixStack">
            <summary>
            Current matrix stack.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Global.NumMatrixStacks">
            <summary>
            Total number of available matrix stacks.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Global.MatrixStacks">
            <summary>
            Array of matrix stacks.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Global.RenderingStack">
            <summary>
            Index used to select the rendering stack.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Global.TemporaryStack">
            <summary>
            Index used to select the temporary stack.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Global.HitTestingStack">
            <summary>
            Index used to select the hit testing stack.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Global.CurrentStack">
            <summary>
            Index of the currently selected stack.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Global.ViewMatrix">
            <summary>
            The view matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Global.IdentityMatrix">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Global.EndPointDecoratorPalette">
            <summary>
            Palette of available line decorators.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Global.Initialize">
            <summary>
            Initializes the library.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Global.SelectMatrixStack(System.Int32)">
            <summary>
            Selects a specific matrix to be the current stack.
            </summary>
            <param name="stackID">Index of stack to select.</param>
            <returns>Previous stack index.</returns>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.CallBack">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.BrowserFolderCallback">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.HIWORD(System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.LOWORD(System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.LOWORD(System.IntPtr)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.HIWORD(System.IntPtr)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.MAKELONG(System.Int32,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.MAKELPARAM(System.Int32,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.RGBToCOLORREF(System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.COLORREFToRGB(System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.GetRValue(System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.GetGValue(System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.GetBValue(System.Int32)">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.Window.HookProc">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.Window.DrawStateProc">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BackgroundStyleType">
            <summary>
            Types of brushes that can be created by a BackgroundStyle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BackgroundStyleType.Solid">
            <summary>
            Solid brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BackgroundStyleType.Texture">
            <summary>
            Text brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BackgroundStyleType.LinearGradient">
            <summary>
            Linear gradient brush.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BackgroundStyle">
            <summary>
            A BackgroundStyle is a collection of properties that define a brush used for
            background operations during rendering.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Style">
            <summary>
            A style is an object that encapsulates one or more properties
            in a property container.
            </summary>
            <remarks>
            Style objects provide a wrapper for a collection of properties in
            a property container. Getting and setting properties through a style
            object is easier than doing it through the IPropertyContainer interface
            because the style object provides type-safe wrappers for each property.
            The properties exposed through a style object are also browsable in
            the property grid.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Style.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            
            </summary>
            <param name="propContainer"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Style.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            Constructs a BackgroundStyle object.
            </summary>
            <param name="propContainer">Property container to bind to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.CreateBrush">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.CreateBrush(System.Drawing.RectangleF)">
            <summary>
            Creates a new brush based on the properties contained by
            the BackgroundStyle object.
            </summary>
            <param name="BackgroundBounds">
            Bounds of the object to be Backgrounded (needed for gradient
            brushes only).
            </param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.Color">
            <summary>
            Color to use for the brush.
            </summary>
            <remarks>
            NOTE: If <see cref="P:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.Type"/> is
            set to BackgroundType.LinearGradient, then this is the ending color for the
            gradient.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.GradientStartColor">
            <summary>
            Color to use at the beginning of a gradient, if
            <see cref="P:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.Type"/> is set to
            BackgroundType.LinearGradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.TextureWrapMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.GradientBounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.GradientAngle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.BackgroundType">
            <summary>
            Types of brushes that can be created by a BackgroundStyle.
            </summary>
            <remarks>
            This enumeration is now obsolete. Please use the <see cref="T:Syncfusion.Windows.Forms.Diagram.BackgroundStyleType"/> 
            enumeration instead.
            </remarks>		
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.BackgroundType.Solid">
            <summary>
            Solid brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.BackgroundType.Texture">
            <summary>
            Text brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.BackgroundType.LinearGradient">
            <summary>
            Linear gradient brush.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BorderStyle">
            <summary>
            Encapsulates the border properties of an object.
            </summary>
            <remarks>
            <para>
            Contains properties needed to create a pen for drawing the border
            of an object. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.BorderStyle.CreatePen"/>
            method returns a pen to draw the border.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Style"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BorderStyle.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            Construct a BorderStyle object given a property container.
            </summary>
            <param name="propContainer">Container that owns this style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BorderStyle.CreatePen">
            <summary>
            Creates a pen to draw the border.
            </summary>
            <returns>System.Drawing.Pen object matching the border style.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BorderStyle.ShowBorder">
            <summary>
            Flag indicating if the border is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BorderStyle.BorderColor">
            <summary>
            Color of the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BorderStyle.BorderWidth">
            <summary>
            Width of the border.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EditStyle">
            <summary>
            Encapsulates the edit properties of an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            
            </summary>
            <param name="propContainer"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.IsNodeEnabled(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Determines if the given node is enabled or disabled.
            </summary>
            <param name="node">Node to test.</param>
            <returns>True if enabled; False if disabled.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.CanSelect(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Determines if the given node can be selected or not.
            </summary>
            <param name="node">Node to test.</param>
            <returns>True if node can be selected; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowSelect">
            <summary>
            Boolean flag indicating if the object can be selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowVertexEdit">
            <summary>
            Boolean flag indicating if the object's vertices can be edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowMove">
            <summary>
            Boolean flag indicating if the object can be moved.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowRotate">
            <summary>
            Boolean flag indicating if the object can be rotated.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowResize">
            <summary>
            Boolean flag indicating if the object can be resized.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.DefaultHandleEditMode">
            <summary>
            Default mode for editing the object using selection handles.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.Enabled">
            <summary>
            Boolean flag indicating if the object is enabled or disabled.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FillStyleType">
            <summary>
            Types of brushes that can be created by a FillStyle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FillStyleType.Solid">
            <summary>
            Solid brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FillStyleType.Texture">
            <summary>
            Text brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FillStyleType.LinearGradient">
            <summary>
            Linear gradient brush.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FillStyle">
            <summary>
            A FillStyle is a collection of properties that define a brush used for
            fill operations during rendering.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            Constructs a FillStyle object.
            </summary>
            <param name="propContainer">Property container to bind to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.CreateBrush">
            <summary>
            Creates a brush based on the properties of the fill style.
            </summary>
            <returns>A GDI+ brush object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.CreateBrush(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Creates a new brush based on the properties contained by
            the FillStyle object.
            </summary>
            <param name="fillBounds">
            Bounds of the object to be filled (needed for gradient
            brushes only).
            </param>
            <param name="grfx">
            Graphics context the brush will be used in.
            </param>
            <returns>A GDI+ brush object.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Color">
            <summary>
            Color to use for the brush.
            </summary>
            <remarks>
            NOTE: If <see cref="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Type"/> is
            set to FillType.LinearGradient, then this is the ending color for the
            gradient.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.AlphaFactor">
            <summary>
            Alpha blending factor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.GradientStartColor">
            <summary>
            Color to use at the beginning of a gradient, if
            <see cref="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Type"/> is set to
            FillType.LinearGradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Texture">
            <summary>
            Image to use for texture fill.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.TextureWrapMode">
            <summary>
            Determines how the texture is wrapped if fill type is set to texture.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.GradientBounds">
            <summary>
            Bounds used for gradient fill.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.GradientAngle">
            <summary>
            Angle used for gradient fill.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Type">
            <summary>
            Type of brush to create for filled regions.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FillStyle.FillType">
            <summary>
            Types of brushes that can be created by a FillStyle.
            </summary>
            <remarks>
            This enumeration is now obsolete. Please use the <see cref="T:Syncfusion.Windows.Forms.Diagram.FillStyleType"/> 
            enumeration instead.
            </remarks>		
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FillStyle.FillType.Solid">
            <summary>
            Solid brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FillStyle.FillType.Texture">
            <summary>
            Text brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FillStyle.FillType.LinearGradient">
            <summary>
            Linear gradient brush.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FontStyle">
            <summary>
            Encapsulates the font properties of an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyle.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            Construct a FontStyle for the given property container.
            </summary>
            <param name="propContainer">Property container to attach to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyle.CreateFont">
            <summary>
            Creates a font object matching the properties of this FontStyle.
            </summary>
            <returns>Font object.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Family">
            <summary>
            Font family name.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Name">
            <summary>
            Name of the font.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Style">
            <summary>
            Style of the font.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Size">
            <summary>
            Size of font in logical units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.PointSize">
            <summary>
            Size of font in points.
            </summary>
            <remarks>
            <para>
            Performs conversion if FontStyle.Unit is not point.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Unit">
            <summary>
            Unit of measure for font size (default is points).
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Bold">
            <summary>
            Flag indicating if the font has the Bold style set.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Italic">
            <summary>
            Flag indicating if the font has the Italic style set.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Underline">
            <summary>
            Flag indicating if the font has the Underline style set.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Strikeout">
            <summary>
            Flag indicating if the font has the Strikeout style set.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineStyle">
            <summary>
            Encapsulates the line properties of an object.
            </summary>
            <remarks>
            <para>
            This style is used to create pens for drawing lines. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.LineStyle.CreatePen"/>
            creates a pen from the properties contained in the line style object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyle.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            Constructs a line style.
            </summary>
            <param name="propContainer"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyle.CreatePen">
            <summary>
            Creates a Pen object using the properties contained by the line style.
            </summary>
            <returns>System.Drawing.Pen object.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.LineColor">
            <summary>
            Color used to draw lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.LineWidth">
            <summary>
            Width of the pen in logical units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.EndCap">
            <summary>
            Type of end cap used to draw lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.LineJoin">
            <summary>
            Determines how lines are joined at corners.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.MiterLimit">
            <summary>
            Miter limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.DashStyle">
            <summary>
            Style to use for dashed lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.DashCap">
            <summary>
            Type of cap to use for dashed lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.DashOffset">
            <summary>
            Offset of dashes in dashed lines in logical units.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RenderingStyle">
            <summary>
            Encapsulates the rendering properties of an object.
            </summary>
            <remarks>
            <para>
            This style is used to set rendering properties for System.Drawing.Graphics
            during rendering.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyle.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            Constructs a rendering style.
            </summary>
            <param name="propContainer"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyle.ApplySettings(System.Drawing.Graphics)">
            <summary>
            Applies the rendering style to a Graphics context object.
            </summary>
            <param name="grfx">Graphics context object to apply rendering style to.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RenderingStyle.SmoothingMode">
            <summary>
            Specifies whether smoothing (antialiasing) is applied to lines and curves
            and the edges of filled areas.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ShadowStyle">
            <summary>
            A ShadowStyle is a collection of properties that define how shadows
            are displayed for a filled shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            Constructs a ShadowStyle object.
            </summary>
            <param name="propContainer">Property container to bind to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.CreateBrush">
            <summary>
            Creates a brush for filling the shadow.
            </summary>
            <returns>Brush matching the Shadow style.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.Visible">
            <summary>
            Determines if the shadow is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.Color">
            <summary>
            Color to use for the shadow.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.AlphaFactor">
            <summary>
            Alpha blending factor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.OffsetX">
            <summary>
            Determines the distance the shadow is offset from the shape along
            the X axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.OffsetY">
            <summary>
            Determines the distance the shadow is offset from the shape along
            the Y axis.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TrackingStyle">
            <summary>
            Encapsulates the tracking properties of an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TrackingStyle.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer)">
            <summary>
            Construct a tracking style object given a property container.
            </summary>
            <param name="propContainer">Property container to attach to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TrackingStyle.CreatePen">
            <summary>
            Creates a pen that matches the properties of this style.
            </summary>
            <returns>Pen object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TrackingStyle.CreatePen(System.Drawing.Graphics)">
            <summary>
            Creates a pen that matches the properties of this style.
            </summary>
            <param name="grfx">Graphics context to create pen for.</param>
            <returns>Pen object.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TrackingStyle.LineColor">
            <summary>
            Color used to draw tracking lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TrackingStyle.LineWidth">
            <summary>
            Width of tracking lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TrackingStyle.DashStyle">
            <summary>
            Style used for dashed lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TrackingStyle.DashCap">
            <summary>
            Type of cap for dashed lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TrackingStyle.DashOffset">
            <summary>
            Offset to first dash.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.AnchoredPort">
            <summary>
            Implements a port that is anchored to a box position on the bounds
            of the container symbol.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Port">
            <summary>
            A port is a point on a symbol on which connections can be established.
            </summary>
            <remarks>
            <para>
            Each port is owned by a port container and may have zero or more connections
            hooked up to it. A port container is an object that implements
            the <see cref="T:Syncfusion.Windows.Forms.Diagram.IPortContainer"/>
            interface. The port container is typically either a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Symbol"/> or a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Link"/>.
            </para>
            <para>
            This is an abstract base class from which different implementations are
            derived. Positioning and visual representation of a port is determined by
            classes derived from this one.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPortContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Connection"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Construct a port given a graphics path.
            </summary>
            <param name="grfxPath">Visual representation of the port.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.#ctor(Syncfusion.Windows.Forms.Diagram.IPortContainer)">
            <summary>
            Constructs a port given a port container.
            </summary>
            <param name="container">Port container that owns the port.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.#ctor(Syncfusion.Windows.Forms.Diagram.IPortContainer,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Constructs a port given a port container.
            </summary>
            <param name="container">Port container that owns the port.</param>
            <param name="grfxPath">Visual representation of the port.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.#ctor(Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for ports.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.AcceptConnection(Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Tests to see if a connection to the given port is allowed.
            </summary>
            <param name="port">Port to test.</param>
            <returns>
            True if a connection is allowed between this port and the specified port;
            otherwise False.
            </returns>
            <remarks>
            <para>
            This method calls the port container's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IPortContainer.AcceptConnection(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)"/>
            method, passing as parameters this port and the parameter to this
            method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Load(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Load the port with a GraphicsPath.
            </summary>
            <param name="grfxPath">GraphicsPath to load.</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the port's bounding box intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the port onto a System.Drawing.Graphics device context.
            </summary>
            <param name="grfx">Graphics context to draw onto.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.CreateRegion(System.Single)">
            <summary>
            
            </summary>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Translate(System.Single,System.Single)">
            <summary>
            Moves the node by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the node a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="degrees">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Rotate(System.Single)">
            <summary>
            Rotates the node a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Scales the node about a specified anchor point by a given ratio.
            </summary>
            <param name="ptAnchor">Fixed point about which to scale.</param>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Scale(System.Single,System.Single)">
            <summary>
            Scales the node about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the port.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            port to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when the position of the port is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Port.Parent"/>
            of the move by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.CreateStyles">
            <summary>
            Creates style objects for this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Port.GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IBounds2DF"/>
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Port.name">
            <summary>
            Name of the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Port.parent">
            <summary>
            Parent node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Port.propertyValues">
            <summary>
            Hash table containing property name / value pairs.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Port.editStyle">
            <summary>
            Properties for determining edit capabilities.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Port.lineStyle">
            <summary>
            Properties for creating pens to draw lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Port.grfxPath">
            <summary>
            Visual representation of the port.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.Container">
            <summary>
            Container that owns this port.
            </summary>
            <remarks>
            <para>
            The parent node of a port must support the IPortContainer interface.
            The get method returns the port's parent node downcast to the
            IPortContainer interface. The set method upcasts the value passed in
            to the ICompositeNode interface and assigns it to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Port.Parent"/>
            property.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Port.Parent"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPortContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.Location">
            <summary>
            Location of the port in world coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.CenterPoint">
            <summary>
            Location of port in local coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.Size">
            <summary>
            Size of the port.
            </summary>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Port.Bounds"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.Radius">
            <summary>
            Radius of the port.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.Visible">
            <summary>
            Determines if the port is visible.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.Enabled">
            <summary>
            Determines if the port is enabled or disabled.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.AttachAtPerimeter">
            <summary>
            Determines if ports connecting to this port must remain at the
            perimeter of the port container.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.EditStyle">
            <summary>
            Edit properties for this port.
            </summary>
            <remarks>
            Edit properties determine how this port can be edited.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.EditStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.LineStyle">
            <summary>
            Properties of the pen used for drawing lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.Parent">
            <summary>
            Reference to the composite node this node is a child of.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.Root">
            <summary>
            The root node in the node hieararchy.
            </summary>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.Name">
            <summary>
            Name of the port.
            </summary>
            <remarks>
            Must be unique within the scope of the parent node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.FullName">
            <summary>
            Fully qualified name of the port.
            </summary>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.Bounds">
            <summary>
            The port's bounding box.
            </summary>
            <remarks>
            Always returns the bounds of the port in world coordinates, regardless
            of what is on the matrix stack at the time of the call.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.X">
            <summary>
            X-coordinate of the port's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.Y">
            <summary>
            Y-coordinate of the port's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.Width">
            <summary>
            Width of the port.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.Height">
            <summary>
            Height of the port.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.GraphicsPath">
            <summary>
            Visual representation of the object as a GraphicsPath.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.LocalTransform">
            <summary>
            Matrix containing local transformations for this node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.WorldTransform">
            <summary>
            Returns a matrix containing transformations for this node and all of
            its ancestors.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Port.ParentTransform">
            <summary>
            Returns a matrix containing the transformations of this node's parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoredPort.#ctor(Syncfusion.Windows.Forms.Diagram.BoxPosition)">
            <summary>
            
            </summary>
            <param name="anchor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoredPort.#ctor(Syncfusion.Windows.Forms.Diagram.IPortContainer,Syncfusion.Windows.Forms.Diagram.BoxPosition)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="anchor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoredPort.#ctor(Syncfusion.Windows.Forms.Diagram.AnchoredPort)">
            <summary>
            
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoredPort.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for center ports.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoredPort.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoredPort.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoredPort.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoredPort.Translate(System.Single,System.Single)">
            <summary>
            Moves the node by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoredPort.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the node a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="degrees">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoredPort.Rotate(System.Single)">
            <summary>
            Rotates the node a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoredPort.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Scales the node about a specified anchor point by a given ratio.
            </summary>
            <param name="ptAnchor">Fixed point about which to scale.</param>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoredPort.Scale(System.Single,System.Single)">
            <summary>
            Scales the node about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoredPort.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the port.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            port to their default values.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.AnchoredPort.Anchor">
            <summary>
            Position on the container's bounding box to which the port is anchored.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.AnchoredPort.LocalTransform">
            <summary>
            Matrix containing local transformations for this node.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CirclePort">
            <summary>
            Implements a movable port that is rendered as a circle and crosshairs.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MoveablePort">
            <summary>
            Implements a port that can be placed anywhere on a symbol (i.e. not anchored).
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Constructs a MoveablePort given a graphics path.
            </summary>
            <param name="grfxPath">Graphics path the renders the port.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.#ctor(System.Drawing.PointF)">
            <summary>
            Constructs a MoveablePort given a location in world coordinates.
            </summary>
            <param name="location">Location of port in world coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.#ctor(System.Drawing.PointF,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            
            </summary>
            <param name="location"></param>
            <param name="grfxPath"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.#ctor(Syncfusion.Windows.Forms.Diagram.Symbol)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.#ctor(Syncfusion.Windows.Forms.Diagram.Symbol,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.#ctor(Syncfusion.Windows.Forms.Diagram.MoveablePort)">
            <summary>
            
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for moveable ports.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.CreateRegion(System.Single)">
            <summary>
            
            </summary>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.Translate(System.Single,System.Single)">
            <summary>
            Moves the node by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the node a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="degrees">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.Rotate(System.Single)">
            <summary>
            Rotates the node a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Scales the node about a specified anchor point by a given ratio.
            </summary>
            <param name="ptAnchor">Fixed point about which to scale.</param>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.Scale(System.Single,System.Single)">
            <summary>
            Scales the node about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveablePort.ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MoveablePort.offset">
            <summary>
            X and Y value to position the port relative to its container.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveablePort.LocalTransform">
            <summary>
            Matrix containing local transformations for this node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CirclePort.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CirclePort.#ctor(System.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CirclePort.#ctor(Syncfusion.Windows.Forms.Diagram.Symbol)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CirclePort.#ctor(Syncfusion.Windows.Forms.Diagram.CirclePort)">
            <summary>
            
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CirclePort.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for circle ports.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CirclePort.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CirclePort.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Connection">
            <summary>
            A connection is an object that binds two ports together.
            </summary>
            <remarks>
            <para>
            A connection consists of two ports: a source port and a target port.
            The distinction between the source port and target port is not
            really signficant, because a connection doesn't have a direction.
            The source and target names could easily be Port1 and
            Port2. The two ports involved in the connection can be accessed
            through the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Connection.SourcePort"/>
            and
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Connection.TargetPort"/>
            properties.
            </para>
            <para>
            Each port is owned by an object that implements the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPortContainer"/>
            interface, which will typically be either a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Symbol"/>
            or a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Link"/>. A port
            container has methods for accessing the ports and connections
            it contains, and it has methods that are called by connections
            in order to notify the port container of events that affect
            the connection. For example, the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IPortContainer.OnConnectionMove(Syncfusion.Windows.Forms.Diagram.Connection)"/>
            method is called by a connection to notify a port container that
            the other port container it is connected to has moved.
            </para>
            <para>
            This class contains methods to help navigate from one port container
            to another. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Connection.GetLocalPort(Syncfusion.Windows.Forms.Diagram.IPortContainer)"/>
            method takes a port container as a parameter and returns either
            the <see cref="P:Syncfusion.Windows.Forms.Diagram.Connection.SourcePort"/>
            or the <see cref="P:Syncfusion.Windows.Forms.Diagram.Connection.TargetPort"/>
            depending on which one belongs to the given container. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Connection.GetForeignPort(Syncfusion.Windows.Forms.Diagram.IPortContainer)"/>
            method does the reverse. It returns the port that does not belong to the
            given port container.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPortContainer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Connection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Connection.#ctor(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Constructs a connection from two ports.
            </summary>
            <param name="sourcePort">Source port.</param>
            <param name="targetPort">Target port.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Connection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for connections.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Connection.GetLocalPort(Syncfusion.Windows.Forms.Diagram.IPortContainer)">
            <summary>
            Takes a port container as a parameter and returns either
            the SourcePort or TargetPort depending on which one belongs to the
            given container.
            </summary>
            <param name="container">Port container to test.</param>
            <returns>Port belonging to the given port container.</returns>
            <remarks>
            <para>
            If the SourcePort belongs to the given port container, then it is
            the port returned to the caller. If the TargetPort belongs to the
            given port container, then it is the port returned to the caller.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Connection.SourcePort"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Connection.TargetPort"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Connection.GetForeignPort(Syncfusion.Windows.Forms.Diagram.IPortContainer)">
            <summary>
            Takes a port container as a parameter and returns either
            the SourcePort or TargetPort depending on which one does
            not belong to the given container.
            </summary>
            <param name="container">Port container to test.</param>
            <returns>Port not belonging to the given port container.</returns>
            <remarks>
            <para>
            If the SourcePort belongs to the given port container, then the
            TargetPort is returned. If the TargetPort belongs to the
            given port container, then the SourcePort is returned.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Connection.SourcePort"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Connection.TargetPort"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Connection.SymbolMoved(Syncfusion.Windows.Forms.Diagram.IPortContainer)">
            <summary>
            Notifies the connection that one of the port containers has moved.
            </summary>
            <param name="container">Container that moved.</param>
            <remarks>
            This method calls the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IPortContainer.OnConnectionMove(Syncfusion.Windows.Forms.Diagram.Connection)"/>
            method on the foreign port container. The foreign port container is the
            port container that is not the one passed in as a parameter.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Connection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Connection.sourcePort">
            <summary>
            First port in the connection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Connection.targetPort">
            <summary>
            Second port in the connection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Connection.SourcePort">
            <summary>
            Source port involved in the connection.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Connection.TargetPort">
            <summary>
            Target port involved in the connection.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LabelPropertyBinding">
            <summary>
            Specifies the property the label value is bound to.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LabelPropertyBinding.Text">
            <summary>
            Text property of the label.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LabelPropertyBinding.ContainerName">
            <summary>
            Name property in the container.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Label">
            <summary>
            A label is a text object that is attached to a container and
            is positioned relative to some control point on the container.
            </summary>
            <remarks>
            <para>
            Typically, the container is an instance of a class derived from
            <see cref="T:Syncfusion.Windows.Forms.Diagram.SymbolBase"/>, which
            implements the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ILabelContainer"/>
            interface. The
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Symbol"/> and
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Link"/>
            classes are both derived from SymbolBase and therefore are
            label containers.
            </para>
            <para>
            The position of a label is calculated by its container. The label
            calls the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.ILabelContainer.CalcLabelPosition(Syncfusion.Windows.Forms.Diagram.Label)"/>
            method to request its position.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextBase"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILabelContainer"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TextBase">
            <summary>
            Base class for text nodes and labels.
            </summary>
            <remarks>
            <para>
            This is an abstract base class that implements a text node.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextEdit"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextNode"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.#ctor(Syncfusion.Windows.Forms.Diagram.TextBase)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for text objects.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.GetTextBox">
            <summary>
            Returns the bounding box of the text object in local coordinates.
            </summary>
            <returns>Bounding box for text.</returns>
            <remarks>
            <para>
            This method returns the raw, untransformed bounding box for the
            text in local coordinates. No matrix transformations are applied
            by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.GetStringFormat">
            <summary>
            Creates a StringFormat object that encapsulates the properties of
            the text object.
            </summary>
            <returns>System.Drawing.StringFormat object.</returns>
            <remarks>
            <para>
            The System.Drawing.StringFormat object returned by this method is
            used to draw the text using the System.Drawing.Graphics.DrawString
            method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.SizeToText(System.Drawing.Graphics,System.Drawing.SizeF)">
            <summary>
            Adjusts the size of the bounding box to fit the text.
            </summary>
            <param name="grfx">Graphics context used to measure the text.</param>
            <param name="layoutArea">Maximum layout size of the string.</param>
            <returns>New size of the bounding box.</returns>
            <remarks>
            <para>
            Uses the System.Drawing.Graphics.MeasureString method to calculate the
            size of the bounding box based on the font and text value.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.SizeToText(System.Drawing.SizeF)">
            <summary>
            Adjusts the size of the bounding box to fit the text.
            </summary>
            <param name="layoutArea">Maximum layout size of the string.</param>
            <returns>New size of the bounding box.</returns>
            <remarks>
            <para>
            Uses the System.Drawing.Graphics.MeasureString method to calculate the
            size of the bounding box based on the font and text value.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the text object to a graphics context.
            </summary>
            <param name="grfx">Graphics context object to render to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Translate(System.Single,System.Single)">
            <summary>
            Moves the text object by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
            <remarks>
            Applies a translate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the text object a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Rotate(System.Single)">
            <summary>
            Rotates the text object a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Scales the text object by a given ratio along the X and Y axes.
            </summary>
            <param name="ptAnchor">Fixed point about which to scale.</param>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Scale(System.Single,System.Single)">
            <summary>
            Scales the text object about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.LocalTransform"/>
            matrix. The OnScale method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the text object.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            text object to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called before the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called after the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Click(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#InsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called before the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called after the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnPropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            before a property changes by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the property change by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when the position of the node is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the move by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when the node is rotated.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the rotation by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when the node is scaled.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the scaling by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnBoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of the node change.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the change in bounds by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnDoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is double clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnMouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse enters a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnMouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse leaves a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnInsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is inserted into a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnMoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnDeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is deleted from a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.GetText">
            <summary>
            Method for getting the stored text.
            </summary>
            <returns>Text contained by this node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.SetText(System.String)">
            <summary>
            Method for setting the stored text.
            </summary>
            <param name="value">Text value to store.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.CreateStyles">
            <summary>
            Creates style objects for this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextBase.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IBounds2DF"/>
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextBase.name">
            <summary>
            Name of the text object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextBase.parent">
            <summary>
            Reference to the parent node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextBase.matrix">
            <summary>
            Local transformation matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextBase.propertyValues">
            <summary>
            Hashtable containing property name / value pairs.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextBase.borderStyle">
            <summary>
            Border properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextBase.backgroundStyle">
            <summary>
            Background properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextBase.fillStyle">
            <summary>
            Fill (brush) properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextBase.editStyle">
            <summary>
            Edit properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextBase.fontStyle">
            <summary>
            Font properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.Parent">
            <summary>
            Reference to the composite node this node is a child of.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.Root">
            <summary>
            The root node in the node hieararchy.
            </summary>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.Name">
            <summary>
            Name of the text node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.FullName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.Bounds">
            <summary>
            The text object's bounding box.
            </summary>
            <remarks>
            Always returns the bounds of the text object in world coordinates,
            regardless of what is on the matrix stack at the time of the call.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.X">
            <summary>
            X-coordinate of the text object's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.Y">
            <summary>
            Y-coordinate of the text object's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.Width">
            <summary>
            Width of the text object.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.Height">
            <summary>
            Height of the text object.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.HorizontalAlignment">
            <summary>
            Determines the horizontal alignment of the text.
            </summary>
            <remarks>
            <para>
            This property is used by the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.TextBase.GetStringFormat"/>
            method to generate a System.Drawing.StringFormat object. This property
            corresponds to the Alignment property in the System.Drawing.StringFormat
            class.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.TextBase.GetStringFormat"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.VerticalAlignment">
            <summary>
            Determines the vertical alignment of the text.
            </summary>
            <remarks>
            <para>
            This property is used by the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.TextBase.GetStringFormat"/>
            method to generate a System.Drawing.StringFormat object.  This property
            corresponds to the LineAlignment property in the System.Drawing.StringFormat
            class.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.TextBase.GetStringFormat"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.WrapText">
            <summary>
            Indicates if text should be wrapped when it exceeds the width of
            the bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.DirectionRightToLeft">
            <summary>
            Specifies that text is right to left.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.DirectionVertical">
            <summary>
            Specifies that text is vertical.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.FitBlackBox">
            <summary>
            Specifies that no part of any glyph overhangs the bounding rectangle.
            </summary>
            <remarks>
            <para>
            By default some glyphs overhang the rectangle slightly where necessary to
            appear at the edge visually. For example when an italic lowercase letter
            f in a font such as Garamond is aligned at the far left of a rectangle,
            the lower part of the f will reach slightly further left than the left
            edge of the rectangle. Setting this flag will ensure no painting outside
            the rectangle but will cause the aligned edges of adjacent lines of text
            to appear uneven.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.LineLimit">
            <summary>
            Only entire lines are laid out in the formatting rectangle.
            </summary>
            <remarks>
            <para>
            By default, layout continues until the end of the text, or until no
            more lines are visible as a result of clipping, whichever comes first.
            Note that the default settings allow the last line to be partially
            obscured by a formatting rectangle that is not a whole multiple of
            the line height. To ensure that only whole lines are seen, specify
            this value and be careful to provide a formatting rectangle at least
            as tall as the height of one line.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.MeasureTrailingSpaces">
            <summary>
            Include space at the end of each line in calculations that measure
            the size of the text.
            </summary>
            <remarks>
            <para>
            By default, the boundary rectangle returned by the MeasureString
            method excludes the space at the end of each line. Set this flag
            to include that space in measurement.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.NoClip">
            <summary>
            Overhanging parts of glyphs and unwrapped text reaching outside the
            formatting rectangle are allowed to show.
            </summary>
            <remarks>
            <para>
            By default, all text and glyph parts reaching outside the formatting
            rectangle are clipped.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.FormatFlags">
            <summary>
            Flags used to format the text.
            </summary>
            <remarks>
            <para>
            See System.Drawing.StringFormatFlags for more details.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.Text">
            <summary>
            The value contained by the text object.
            </summary>
            <remarks>
            <para>
            Derived classes override this property in order to supply the
            text value in an implementation-specific way.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.Visible">
            <summary>
            Flag indicating if the text object is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.ReadOnly">
            <summary>
            Flag indicating if the text object is Read-only or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.Location">
            <summary>
            Upper-left hand corner of the bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.Size">
            <summary>
            Size of the bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.BorderStyle">
            <summary>
            Properties for drawing the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.BackgroundStyle">
            <summary>
            Properties for filling the background.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.FillStyle">
            <summary>
            Properties for filling the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.EditStyle">
            <summary>
            Properties for determining how the text object can be edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.FontStyle">
            <summary>
            Determines the font used to draw the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.LocalTransform">
            <summary>
            Matrix containing transformations for this node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.WorldTransform">
            <summary>
            Returns a matrix containing transformations for this node and all of
            its ancestors.
            </summary>
            <remarks>
            Chains up the node hierarchy and builds a transformation matrix containing
            all transformations that apply to this node in the world coordinate space.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextBase.ParentTransform">
            <summary>
            Returns a matrix containing the transformations of this node's parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.#ctor(Syncfusion.Windows.Forms.Diagram.ILabelContainer)">
            <summary>
            Construct a label and bind it to a container.
            </summary>
            <param name="container">Container to bind the label to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.#ctor(Syncfusion.Windows.Forms.Diagram.ILabelContainer,System.String)">
            <summary>
            Construct a label with the specified text value and bind it to a container.
            </summary>
            <param name="container">Container to bind the label to.</param>
            <param name="txtVal">Text value to assign to the label.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.#ctor(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Label to copy values from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for labels.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.GetTextBox">
            <summary>
            Returns the raw bounding box for the text in local coordinates.
            </summary>
            <returns>Bounding box for text.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.SizeToText">
            <summary>
            Adjusts the size of the bounding box to fit the text.
            </summary>
            <returns>New size of the bounding box.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.Draw(System.Drawing.Graphics)">
            <summary>
            
            </summary>
            <param name="grfx"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.GetText">
            <summary>
            Method for getting the stored text.
            </summary>
            <returns>Text contained by this node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.SetText(System.String)">
            <summary>
            Method for setting the stored text.
            </summary>
            <param name="value">Text value to store.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the label.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            label to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Label.container">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Label.text">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Label.width">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Label.height">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Label.offsetX">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Label.offsetY">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.Parent">
            <summary>
            Reference to the composite node this node is a child of.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.Container">
            <summary>
            Container that the label is bound to.
            </summary>
            <remarks>
            <para>
            The container determines where the label is positioned.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILabelContainer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.X">
            <summary>
            X-coordinate of the bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.Y">
            <summary>
            Y-coordinate of the bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.OffsetX">
            <summary>
            Number of logical units to offset the label from the control point.
            </summary>
            <remarks>
            <para>
            The offset value is added to the position calculated by the container.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.OffsetY">
            <summary>
            Number of logical units to offset the label from the control point.
            </summary>
            <remarks>
            <para>
            The offset value is added to the position calculated by the container.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.Bounds">
            <summary>
            Bounding box of the label.
            </summary>
            <remarks>
            <para>
            Attempting to set the bounds of a label throws an exception, because
            the bounds of a label are determined by the anchor point.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.Size">
            <summary>
            Width and height of the label.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.PropertyBinding">
            <summary>
            Binds the text value of the label to a property.
            </summary>
            <remarks>
            <para>
            This property allows the label to be attached to any property of the
            label. The default binding is to the "Text" property, which is a
            string property maintained by the label. Setting this property to
            "ContainerName" will cause the label to display the name of the
            container (i.e. symbol) that is hosting it.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.Text"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ILabelContainer">
            <summary>
            Interface to objects that contain labels.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Label"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.SymbolBase"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILabelContainer.AddLabel(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Adds a label to the symbol.
            </summary>
            <param name="lbl">Label to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILabelContainer.CalcLabelPosition(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Calculates the position of the given label.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILabelContainer.GetLabelMaxSize(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Returns the maximum size the given label can grow to.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ILabelContainer.GetLabelTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Calculates a world transformation matrix for a label.
            </summary>
            <param name="labelTransform">The label's own local transformation matrix.</param>
            <returns>Matrix for transforming the label's local coordinates into world coordinates.</returns>
            <remarks>
            This method is generally used to exclude the label container's
            transformation matrix from the label's world transformation, because
            scaling and rotating the label container should not affect the label.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILabelContainer.Labels">
            <summary>
            Collection of labels belonging to the label container.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILabelContainer.DefaultLabel">
            <summary>
            Default label.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Link">
            <summary>
            A link is a composite node that supports labels and connections to other
            symbols.
            </summary>
            <remarks>
            <para>
            A link is a special type of symbol that has two built-in ports: a
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Link.HeadPort"/>
            and a
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Link.TailPort"/>.
            The head and tail port define the direction of the link.
            </para>
            <para>
            The head and tail ports are anchored to the first child node belonging
            to the link (at index position 0), which is referred to as the link
            shape. The link shape can be any type of node, the only requirement
            being that it must support the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/> interface.
            The tail port is anchored to the first vertex in the link shape and the
            head port is anchored to the last point in the link shape.
            </para>
            <para>
            The link shape is created by the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Link.CreateLinkShape(Syncfusion.Windows.Forms.Diagram.Link.Shapes,System.Drawing.PointF[])"/>
            method, which is virtual and can be overridden by derived classes. The
            CreateLinkShape method is passed a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Link.Shapes"/> enumeration,
            which defines a set of built-in link shapes to choose from. The
            CreateLinkShape method is also passed an array of points to load into
            the link shape. The default implementation of the CreateLinkShape method
            maps the <see cref="T:Syncfusion.Windows.Forms.Diagram.Link.Shapes"/>
            enumeration onto a specified type of shape node, and then creates an
            instance of that type and loads it with the array of points. Derived
            classes can override CreateLinkShape and interpret the parameters
            however they like, as long as it returns a valid object that supports
            the IPoints interface.
            </para>
            <para>
            Like symbols, links may contain labels. Labels are accessible through the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Link.Labels"/> collection.
            The <see cref="T:Syncfusion.Windows.Forms.Diagram.LinkLabel"/> class
            implements a special type of label that can orient itself along a
            line or curve by specifying a percentage value along the link.
            Setting the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LinkLabel.PercentAlongLine"/>
            property of a LinkLabel to 0 will position the label at the tail of the link.
            Setting it to 100 will position the label at the head of the link. Values
            in between position the label somewhere between the head and tail.
            </para>
            <para>
            The link class implements the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IGraphEdge"/> interface, which
            is used in conjunction with the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IGraphNode"/> interface
             to navigate the node hierarchy as a graph of interconnected nodes and edges.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.SymbolBase"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphEdge"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SymbolBase">
            <summary>
            Base class for symbols and links.
            </summary>
            <remarks>
            <para>
            This class provides the base implementation for both symbols and links.
            Symbols and links are similar in they are both composite nodes that
            contain ports and labels. Both implement the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPortContainer"/> interface,
            which exposes a collection of ports and supports connections to other
            port containers. When discussing ports and connections, symbols and links
            are frequently referred to as "port containers".
            </para>
            <para>
            One key difference between symbols and links is that links have two
            built-in ports: a head port and a tail port. A link
            has a direction and a symbol does not.
            </para>
            <para>
            Another difference between symbols and links is the way in which they
            behave during graph navigation. Symbols implement the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IGraphNode"/> interface
            and links implement the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IGraphEdge"/> interface.
            This means that when the node hierarchy is navigated as a graph,
            symbols are nodes and links are edges.
            </para>
            <para>
            The documentation in this class uses the term "symbol" to mean both
            symbols and links. Refer to the documentation for the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Symbol"/>
            class and the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Link"/>
            class for more details.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IBounds2DF"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILocalBounds2DF"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphics"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ITransform"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IHitTestBounds"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IHitTestRegion"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPortContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILabelContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Symbol"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Link"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IPortContainer">
            <summary>
            Interface to objects that contain ports and connections.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.SymbolBase"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPortContainer.AcceptConnection(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Tests to see if a connection between the two given ports is allowed.
            </summary>
            <param name="sourcePort">Source port to test.</param>
            <param name="targetPort">Target port to test.</param>
            <returns>
            True if a connection is allowed between the two ports; otherwise False.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPortContainer.Connect(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Create a new connection between the given ports.
            </summary>
            <param name="sourcePort">First port to connect.</param>
            <param name="targetPort">Second port to connect.</param>
            <returns>New connection object or NULL on failure.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPortContainer.Disconnect(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Removes the connection containing the specified ports from the symbol.
            </summary>
            <param name="sourcePort">Source port of connection.</param>
            <param name="targetPort">Target port of connection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPortContainer.GetConnectionsOnPort(Syncfusion.Windows.Forms.Diagram.ConnectionCollection,Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Returns all connections to a specified port.
            </summary>
            <param name="connections">Collection to add the connections to.</param>
            <param name="port">Port to search.</param>
            <returns>Number of connections found to the port.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPortContainer.GetLocalPortOnConnection(Syncfusion.Windows.Forms.Diagram.Connection)">
            <summary>
            Returns the port referenced by the given connection that belongs to
            this symbol.
            </summary>
            <param name="connection">Connection to search.</param>
            <returns>Port belonging to this symbol.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPortContainer.GetForeignPortOnConnection(Syncfusion.Windows.Forms.Diagram.Connection)">
            <summary>
            Returns the port referenced by the given connection that belongs to
            the foreign symbol.
            </summary>
            <param name="connection">Connection to search.</param>
            <returns>Port belonging to the foreign symbol.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPortContainer.GetPortAt(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Hit test for ports.
            </summary>
            <param name="ptWorld">Point to test.</param>
            <param name="fSlop">Size of area around the point to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>
            The port object at the given point or NULL if there is no port
            at the given point.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPortContainer.OnConnectionMove(Syncfusion.Windows.Forms.Diagram.Connection)">
            <summary>
            This method is called by connections when the foreign port container
            moves.
            </summary>
            <param name="connection">Connection that has moved.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IPortContainer.Ports">
            <summary>
            Collection of ports belonging to the port container.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IPortContainer.Connections">
            <summary>
            Connections to ports belonging to the container.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IPortContainer.AutoHidePorts">
            <summary>
            Determines if ports are visible only when the user is interactively
            creating a connection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.#cctor">
            <summary>
            Static constructor for initializing the default propertyvalues hashtable
            </summary>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.#ctor">
            <summary>
            Construct a symbol.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.#ctor(Syncfusion.Windows.Forms.Diagram.SymbolBase)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for symbols.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetPortAt(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Hit test for ports.
            </summary>
            <param name="ptWorld">Point to test.</param>
            <param name="fSlop">Size of area around the point to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>
            The port object at the given point or NULL if there is no port
            at the given point
            </returns>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnPortsChanging(Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs)">
            <summary>
            Called before a port is inserted into the symbol.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>This method can be overridden in derived classes.</para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnPortsChangeComplete(Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs)">
            <summary>
            Called after a port is inserted into the symbol.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>This method can be overridden in derived classes.</para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.AcceptConnection(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Tests to see if a connection between the two given ports is allowed.
            </summary>
            <param name="sourcePort">Source port to test.</param>
            <param name="targetPort">Target port to test.</param>
            <returns>
            True if a connection is allowed between the two ports; otherwise False.
            </returns>
            <remarks>
            <para>
            This method gives the symbol an opportunity to reject a connection
            between two ports. Both port containers being connected are asked
            for permission to create the connection.
            </para>
            <para>
            The default implementation always returns True. This method can be
            overridden in derived classes.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPortContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Connect(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Create a new connection between the given ports.
            </summary>
            <param name="sourcePort">First port to connect.</param>
            <param name="targetPort">Second port to connect.</param>
            <returns>New connection object or NULL on failure.</returns>
            <remarks>
            <para>
            This method first calls the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Port.AcceptConnection(Syncfusion.Windows.Forms.Diagram.Port)"/>
            method on each port in order to ask permission to create the
            connection. If both ports consent to the connection, a new
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Connection"/> object
            is created to bind the two ports together. Then the connection is
            added to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Connections"/>
            collection of both port containers.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Disconnect(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Connections"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Connection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPortContainer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Disconnect(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Removes the connection containing the specified ports from the symbol.
            </summary>
            <param name="sourcePort">Source port of connection.</param>
            <param name="targetPort">Target port of connection.</param>
            <remarks>
            If no connection is found between the two ports, then this method
            does nothing.
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Connect(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.DisconnectAll(Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Remove all connections on the given port.
            </summary>
            <param name="port">Port to disconnect.</param>
            <returns>The number of connections removed.</returns>
            <remarks>
            This method finds all of the connections on the specified port and
            removes each one from the symbol.
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetConnectionsOnPort(Syncfusion.Windows.Forms.Diagram.ConnectionCollection,Syncfusion.Windows.Forms.Diagram.Port)"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Connections"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetConnectionsOnPort(Syncfusion.Windows.Forms.Diagram.ConnectionCollection,Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Returns all connections to a specified port.
            </summary>
            <param name="connections">Collection to add the connections to.</param>
            <param name="port">Port to search.</param>
            <returns>Number of connections found to the port.</returns>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetLocalPortOnConnection(Syncfusion.Windows.Forms.Diagram.Connection)">
            <summary>
            Returns the port referenced by the given connection that belongs to
            this symbol.
            </summary>
            <param name="connection">Connection to search.</param>
            <returns>Port belonging to this symbol.</returns>
            <remarks>
            <para>
            A connection consists of two ports. The local port on a connection is
            the one that belongs to this symbol. The foreign port is the one that
            belongs to the other symbol.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Connection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetForeignPortOnConnection(Syncfusion.Windows.Forms.Diagram.Connection)">
            <summary>
            Returns the port referenced by the given connection that belongs to
            the foreign symbol.
            </summary>
            <param name="connection">Connection to search.</param>
            <returns>Port belonging to the foreign symbol.</returns>
            <remarks>
            <para>
            A connection consists of two ports. The local port on a connection is
            the one that belongs to this symbol. The foreign port is the one that
            belongs to the other symbol.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Connection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.ForeignContainerAdd(Syncfusion.Windows.Forms.Diagram.Connection)">
            <summary>
            Adds the specified connection to the foreign port container.
            </summary>
            <param name="connection">Connection to add.</param>
            <remarks>
            <para>
            A connection binds together two ports on two separate
            port containers (symbol, link, etc). The local port container
            is the one that owns this collection. The foreign port container
            is the other one involved in the connection. Both port containers
            maintain a list of the connections and must be kept synchronized.
            This method ensures that the given connection is added to the
            foreign port container, if it is not already there.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.ForeignContainerRemove(Syncfusion.Windows.Forms.Diagram.Connection)">
            <summary>
            Removes the specified connection from the foreign port container.
            </summary>
            <param name="connection">Connection to remove.</param>
            <remarks>
            <para>
            A connection binds together two ports on two separate
            port containers (symbol, link, etc). The local port container
            is the one that owns this collection. The foreign port container
            is the other one involved in the connection. Both port containers
            maintain a list of the connections and must be kept synchronized.
            This method ensures that the given connection is removed from the
            foreign port container, if it is there.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called before a change is made to the set of connections belonging to
            the symbol.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>This method can be overridden in derived classes.</para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called after a change is made to the set of connections belonging to
            the symbol.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>This method can be overridden in derived classes.</para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnConnectionMove(Syncfusion.Windows.Forms.Diagram.Connection)">
            <summary>
            This method is called by connections when the foreign port container
            moves.
            </summary>
            <param name="connection">Connection that has moved.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Connection"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.AddLabel(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Adds a label to the symbol.
            </summary>
            <param name="lbl">Label to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.CalcLabelPosition(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Calculates the point at which the given label should be positioned.
            </summary>
            <remarks>
            This method is called by the label itself in order to find out where
            it should be positioned.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Label"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILabelContainer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetLabelMaxSize(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Returns the maximum size the given label can grow to.
            </summary>
            <returns>Maximum size for label.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetLabelTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Builds a world transformation matrix for a label.
            </summary>
            <param name="labelTransform">Local transformation matrix of a label.</param>
            <returns>World transformation matrix.</returns>
            <remarks>
            This method adds the symbol's parent transformation to the incoming
            matrix and returns the result. The purpose of doing this is to avoid
            including the symbol's local transformation matrix in the label's world
            transformation matrix. This prevents labels from being scaled and rotated
            when the symbol to which they are attached is scaled or rotated.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Label"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILabelContainer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnLabelsChanging(Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs)">
            <summary>
            Called before a change is made to the collection of labels belonging
            to the symbol.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>This method can be overridden in derived classes.</para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnLabelsChangeComplete(Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs)">
            <summary>
            Called after a change is made to the collection of labels belonging
            to the symbol.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>This method can be overridden in derived classes.</para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called before the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called after the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of a node changes.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnBoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when a node is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when a node is rotated.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when a node is scaled.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Click(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is double clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnDoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse enters a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnMouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse leaves a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnMouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#InsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is inserted into a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnInsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is deleted from a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnDeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnMoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called before the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called after the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            Calls <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called before a change is made to the collection of child nodes.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.ChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called after a change is made to the collection of child nodes.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.ChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnPropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            before a property changes by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Parent"/>
            of the property change by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when the position of the node is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Parent"/>
            of the move by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when the node is rotated.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the rotation by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when the node is scaled.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the scaling by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnBoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of the node change.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Parent"/>
            of the change in bounds by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Click(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnDoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is double clicked.
            </summary>
            <param name="evtArgs">Event arguments</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.DoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnMouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse enters a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.MouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnMouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse leaves a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.MouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnInsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is inserted.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.InsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnMoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.MoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnDeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is deleted.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.DeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetChild(System.Int32)">
            <summary>
            Returns the child node at the given index position.
            </summary>
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
            <returns>Child node at the given position or NULL if the index is out of range.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetChildByName(System.String)">
            <summary>
            Returns the child node matching the given name.
            </summary>
            <param name="childName">Name of node to return.</param>
            <returns>Node matching the given name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetChildIndex(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the index position of the given child node.
            </summary>
            <param name="child">Child node to query.</param>
            <returns>Zero-based index into the collection of child nodes.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.AppendChild(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Appends the given node to the collection of child nodes.
            </summary>
            <param name="child">Node to append.</param>
            <returns>
            Zero-based index at which the node was added to the collection or -1 for failure.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.AppendChildren(Syncfusion.Windows.Forms.Diagram.INodeCollection,System.Int32@)">
            <summary>
            Appends the given collection of nodes as child nodes.
            </summary>
            <param name="children">Nodes to append.</param>
            <param name="startIdx">
            Zero-based index at which the first node was added to the collection of child nodes.
            </param>
            <returns>Number of child nodes appended.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.InsertChild(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Insert the given node into the collection of child nodes at a
            specific position.
            </summary>
            <param name="child">Node to insert.</param>
            <param name="childIndex">Zero-based index at which to insert the node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.RemoveChild(System.Int32)">
            <summary>
            Removes the child node at the given position.
            </summary>	
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
            <returns>True if the node was successfully removed; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.RemoveAllChildren">
            <summary>
            Removes all child nodes from the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetConstrainingRegion(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the region that the bounds of the given child node is constrained by.
            </summary>
            <param name="child">Child to get constraining region for.</param>
            <returns>Region that constrains the bounds of the given child.</returns>
            <remarks>
            <para>
            This method is used to limit the bounds of a child node to a specified area.
            The node cannot be moved, resized, or rotated beyond the edges of this region.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.CheckConstrainingRegion(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Tests to see if the given node falls within the constraining region
            of the composite node.
            </summary>
            <param name="node">Node to test.</param>
            <returns>
            True if node falls within the constraining region; False if it does
            not.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetChildrenAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Returns all children that are intersected by the given point.
            </summary>
            <param name="childNodes">
            Collection in which to add the children hit by the given point.
            </param>
            <param name="ptWorld">Point to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of child nodes that intersect the given point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetChildrenIntersecting(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Returns all children that intersect the given rectangle.
            </summary>
            <param name="childNodes">
            Collection in which to add the children hit by the given point.
            </param>
            <param name="rcWorld">Rectangle to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of child nodes that intersect the given rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetChildrenContainedBy(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Returns all children inside the given rectangle.
            </summary>
            <param name="childNodes">
            Collection in which to add the children inside the specified rectangle.
            </param>
            <param name="rcWorld">Rectangle to test.</param>
            <param name="grfx">Graphics context used for hit testing.</param>
            <returns>The number of child nodes added to the collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetPropertyContainer(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the inherited property container for the given child node.
            </summary>
            <param name="childNode">The child node making the request.</param>
            <returns>Parent property container for the given node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the symbol onto a System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
            <remarks>
            Iterates through all child nodes and renders them.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.CreateRegion(System.Single)">
            <summary>
            Returns an object that describes the interior of the shape.
            </summary>
            <param name="padding">Amount of padding to add.</param>
            <returns>System.Drawing.Region object.</returns>
            <remarks>
            Region objects are used for hit testing and geometrical calculations.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.GraphicsPath"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Translate(System.Single,System.Single)">
            <summary>
            Moves the symbol by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
            <remarks>
            Applies a translate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the symbol a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Rotate(System.Single)">
            <summary>
            Rotates the symbol a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Scales the symbol by a given ratio along the X and Y axes.
            </summary>
            <param name="ptAnchor">Fixed point about which to scale.</param>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Scale(System.Single,System.Single)">
            <summary>
            Scales the symbol about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetZOrder(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the Z-order value of the given node.
            </summary>
            <param name="node">Node to get Z-order for.</param>
            <returns>
            Zero-based Z-order value of the node or -1 if the node
            does not exist.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.SetZOrder(Syncfusion.Windows.Forms.Diagram.INode,System.Int32)">
            <summary>
            Sets the Z-order of the given node.
            </summary>
            <param name="node">Node to set Z-order for.</param>
            <param name="zOrder">Zero-based Z-order value.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.BringForward(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Moves the specified node forward in the Z-order.
            </summary>
            <param name="node">Node to move forward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.SendBackward(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Sends the specified node back in the Z-order.
            </summary>
            <param name="node">Node to move backward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.BringToFront(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Brings the specified node to the front of the Z-order.
            </summary>
            <param name="node">Node to bring to the front.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.SendToBack(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Sends the specified node to the back of the Z-order.
            </summary>
            <param name="node">Node to send to the back.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the symbol's bounding box intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's region contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Graphics context used to hit test region.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's region intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's region contains the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the rectangle is contained by the object; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#IHitTestRegion#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the shapes's region intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.CreateCenterPort">
            <summary>
            Creates the center port for the symbol.
            </summary>
            <returns>Port object.</returns>
            <remarks>
            Called by the constructor.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.AnchoredPort"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.CreateStyles">
            <summary>
            Creates style objects for this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.NotifyConnectionsOnMove">
            <summary>
            Sends notification to each connection that the symbol has moved.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.CheckConstrainingRegion">
            <summary>
            Tests to see if the current position of the shape falls within the
            constraining region specified by the parent node.
            </summary>
            <returns>True if position is valid; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IBounds2DF"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.EditStyle"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the object.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            object to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetDefaultPropertyValue(System.String)">
            <summary>
            Gets the default value for the property. Returns NULL if the property does not exist.
            </summary>
            <param name="propertyname">The property name.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.name">
            <summary>
            Name of the symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.parent">
            <summary>
            Parent node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.children">
            <summary>
            Collection of child nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.matrix">
            <summary>
            Local transformation matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.connections">
            <summary>
            Set of connections to other symbols.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.ports">
            <summary>
            Collection of ports belonging to this symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.labels">
            <summary>
            Collection of labels belonging to this symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.defaultLabel">
            <summary>
            Default label.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.centerPort">
            <summary>
            Built-in center port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.childPropertyContainer">
            <summary>
            Property container inherited by children.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.editStyle">
            <summary>
            Edit properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.fillStyle">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.lineStyle">
            <summary>
            Line drawing properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.propertyValues">
            <summary>
            Hashtable containing property name/value pairs.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolBase.defPropertyValues">
            <summary>
            Static Hashtable containing the default property name/value pairs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Visible">
            <summary>
            Determines if the symbol is visible or hidden.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Nodes">
            <summary>
            Collection of child nodes belonging to the symbol.
            </summary>
            <remarks>
            Changes made to this collection will cause one or more of the following
            methods to be called:
            <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)"/>,
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.INode"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Location">
            <summary>
            Upper-left hand corner of the bounding box.
            </summary>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Bounds"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Size">
            <summary>
            Size of the bounding box.
            </summary>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Bounds"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.EditStyle">
            <summary>
            Set of properties that determine how the symbol can be manipulated.
            </summary>
            <remarks>
            <para>
            Edit properties contain a set of flags that indicate what types of
            activities are valid for the symbol.
            </para>
            <para>
            Edit style properties that are not explicitly set by the symbol are
            inherited from the parent node.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.EditStyle"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.FillStyle"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.LineStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.FillStyle">
            <summary>
            Properties used to fill the interior of regions.
            </summary>
            <remarks>
            <para>
            The fill style is used to create brushes for painting interior regions of
            shapes.
            </para>
            <para>
            Fill style properties that are not explicitly set by the symbol are
            inherited from the parent node.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.EditStyle"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.LineStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.LineStyle">
            <summary>
            Properties used for drawing lines.
            </summary>
            <remarks>
            <para>
            The line style is used to create pens for painting drawing lines.
            </para>
            <para>
            Line style properties that are not explicitly set by the symbol are
            inherited from the parent node.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.FillStyle"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.EditStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Ports">
            <summary>
            Collection of ports belonging to the symbol.
            </summary>
            <remarks>
            Changes made to this collection will cause one or more of the following
            methods to be called:
            <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnPortsChanging(Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs)"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnPortsChangeComplete(Syncfusion.Windows.Forms.Diagram.PortCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPortContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PortCollection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.CenterPort">
            <summary>
            Built-in port at the center of the symbol.
            </summary>
            <remarks>
            <para>
            All symbols have a built-in port located at the center of the
            symbol.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.AutoHidePorts">
            <summary>
            Determines if ports belonging to this symbol are only visible when
            a user interface <see cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            is creating a connection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Connections">
            <summary>
            Set of connections this symbol has to other symbols.
            </summary>
            <remarks>
            <para>
            Connections can be created and added to this collection by calling the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Connect(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)"/>
            method. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Disconnect(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)"/>
            method will remove a connection from this collection.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Connect(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Disconnect(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPortContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Connection"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Labels">
            <summary>
            Collection of labels belonging to this symbol.
            </summary>
            <remarks>
            Changes made to this collection will cause one or more of the following
            methods to be called:
            <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnLabelsChanging(Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs)"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.OnLabelsChangeComplete(Syncfusion.Windows.Forms.Diagram.LabelCollectionEventArgs)"/>.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LabelCollection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Label"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.DefaultLabelName">
            <summary>
            Name of the default label.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.DefaultLabel">
            <summary>
            Default label.
            </summary>
            <remarks>
            <para>
            Label that is edited when the symbol is double clicked.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Parent">
            <summary>
            Reference to the composite node this node is a child of.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Root">
            <summary>
            The root node in the node hierarchy.
            </summary>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Name">
            <summary>
            Name of the symbol.
            </summary>
            <remarks>
            Must be unique within the scope of the parent node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.FullName">
            <summary>
            Fully qualified name of the node.
            </summary>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.ChildCount">
            <summary>
            The number of child nodes contained by this symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Bounds">
            <summary>
            The symbol's bounding box.
            </summary>
            <remarks>
            <para>
            Always returns the bounds of the symbol in world coordinates, regardless
            of what is on the matrix stack at the time of the call.
            </para>
            <para>
            The bounding box of a symbol is the union of the bounds of all of its
            children. This method pushes the symbol's
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.WorldTransform"/>
            onto the matrix stack and then iterates through each child retrieving
            its local bounds through the ILocalBounds2DF.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.X">
            <summary>
            X-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Y">
            <summary>
            Y-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Width">
            <summary>
            Width of the object.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Height">
            <summary>
            Height of the object.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Bounds">
            <summary>
            Bounding box of the symbol in local coordinates.
            </summary>
            <remarks>
            The value returned depends on the contents of the matrix stack. If the
            matrix stack is empty, then the value returned is in local coordinates.
            This method is generally used by functions that recursively traverse
            the node hierarchy, pushing and popping the matrix stack as they go.
            <seealso cref="F:Syncfusion.Windows.Forms.Diagram.Global.MatrixStack"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Bounds"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#X">
            <summary>
            X-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Y">
            <summary>
            Y-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Width">
            <summary>
            Width of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Height">
            <summary>
            Height of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.GraphicsPath">
            <summary>
            Encapsulates the points and instructions needed to render the symbol.
            </summary>
            <remarks>
            The contents of the GraphicsPath is the union of the GraphicsPath
            objects of all its children.
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.CreateRegion(System.Single)"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.LocalTransform">
            <summary>
            Matrix containing local transformations for this symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.WorldTransform">
            <summary>
            Returns a matrix containing transformations for this symbol and all of
            its ancestors.
            </summary>
            <remarks>
            Chains up the node hierarchy and builds a transformation matrix containing
            all transformations that apply to this node in the world coordinate space.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.ParentTransform">
            <summary>
            Returns a matrix containing the transformations of this symbol's parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolBase.ZOrderDepth">
            <summary>
            Number of items in the Z-order for this container.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            <para>
            Calls the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Link.CreateLinkShape(Syncfusion.Windows.Forms.Diagram.Link.Shapes,System.Drawing.PointF[])"/>
            method passing it
            <see cref="F:Syncfusion.Windows.Forms.Diagram.Link.Shapes.Default"/>
            for the shape type and two points that are initialized to (0,0). An
            object supporting the IPoints interface is returned by the
            CreateLinkShape method, which is then added as the first child node
            in the link.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Link.CreateLinkShape(Syncfusion.Windows.Forms.Diagram.Link.Shapes,System.Drawing.PointF[])"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.#ctor(System.Drawing.PointF[])">
            <summary>
            Constructs a link object from a given set of points.
            </summary>
            <param name="pts">Points to load the shape with.</param>
            <remarks>
            <para>
            Calls the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Link.CreateLinkShape(Syncfusion.Windows.Forms.Diagram.Link.Shapes,System.Drawing.PointF[])"/>
            method passing it
            <see cref="F:Syncfusion.Windows.Forms.Diagram.Link.Shapes.Default"/>
            for the shape type and the array of points. An object supporting the
            IPoints interface is returned by the CreateLinkShape method, which
            is then added as the first child node in the link.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Link.CreateLinkShape(Syncfusion.Windows.Forms.Diagram.Link.Shapes,System.Drawing.PointF[])"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.#ctor(Syncfusion.Windows.Forms.Diagram.Link.Shapes)">
            <summary>
            Creates a link with a given type of shape.
            </summary>
            <param name="shapeType">Type of shape to create.</param>
            <remarks>
            <para>
            Calls the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Link.CreateLinkShape(Syncfusion.Windows.Forms.Diagram.Link.Shapes,System.Drawing.PointF[])"/>
            method, passing it the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Link.Shapes"/>
            parameter and two default points. An object supporting the IPoints
            interface is returned by the CreateLinkShape method, which is
            then added as the first child node in the link.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Link.CreateLinkShape(Syncfusion.Windows.Forms.Diagram.Link.Shapes,System.Drawing.PointF[])"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.#ctor(Syncfusion.Windows.Forms.Diagram.Link.Shapes,System.Drawing.PointF[])">
            <summary>
            Creates a link with a given type of shape and an array of points.
            </summary>
            <param name="shapeType">Type of shape to create.</param>
            <param name="pts">Array of points to load the shape with.</param>
            <remarks>
            <para>
            Calls the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Link.CreateLinkShape(Syncfusion.Windows.Forms.Diagram.Link.Shapes,System.Drawing.PointF[])"/>
            method, passing it the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Link.Shapes"/>
            parameter and the array of points. An object supporting the IPoints
            interface is returned by the CreateLinkShape method, which is
            then added as the first child node in the link.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Link.CreateLinkShape(Syncfusion.Windows.Forms.Diagram.Link.Shapes,System.Drawing.PointF[])"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.#ctor(Syncfusion.Windows.Forms.Diagram.IPoints)">
            <summary>
            Constructs a link given a link shape object.
            </summary>
            <param name="linkPoints">Link shape object to attach.</param>
            <remarks>
            <para>
            Instead of calling the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Link.CreateLinkShape(Syncfusion.Windows.Forms.Diagram.Link.Shapes,System.Drawing.PointF[])"/>
            method to create the link shape, this constructor takes the link shape
            object as a parameter and attaches it to the link. A link shape is
            any object that supports the IPoints interface.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.#ctor(Syncfusion.Windows.Forms.Diagram.Link)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for symbols.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.ConnectHead(Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Creates a new connection between the specified port and the link's
            head port.
            </summary>
            <param name="port">Port to connect to.</param>
            <returns>The connection created or NULL if failed.</returns>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Link.HeadPort"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.ConnectTail(Syncfusion.Windows.Forms.Diagram.Port)">
            <summary>
            Creates a new connection between the specified port and the link's
            tail port.
            </summary>
            <param name="port">Port to connect to.</param>
            <returns>The connection created or NULL if failed.</returns>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Link.HeadPort"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.OnConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called before any changes to the set of connections belonging to this link.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.OnConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called after a change is made to the set of connections belonging to
            the link.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Docks the connection.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.OnConnectionMove(Syncfusion.Windows.Forms.Diagram.Connection)">
            <summary>
            This method is called by connections when the foreign port container
            moves.
            </summary>
            <param name="connection">Connection that has moved.</param>
            <remarks>
            Docs the connection.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Connection"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.DockConnections">
            <summary>
            Adjusts the endpoints of the link so that they are docked with the
            foreign ports they are connected to.
            </summary>
            <remarks>
            <para>
            This method iterates through every connection in the link. For each
            connection, the location of the local port is updated to match
            the location of the foreign port. If the foreign port has its
            AttachAtPerimeter flag set to True, then some additional calculations
            are made in order to move the local port to the perimeter of the
            foreign port's container.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Port.AttachAtPerimeter"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.CreateLinkShape(Syncfusion.Windows.Forms.Diagram.Link.Shapes,System.Drawing.PointF[])">
            <summary>
            Creates a link shape matching the type specified by the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Link.Shapes"/>
            enumeration and loads it with the given array of points.
            </summary>
            <param name="shapeType">Type of shape to create.</param>
            <param name="pts">Points to initialize shape with.</param>
            <returns>IPoints interface to the link shape object created.</returns>
            <remarks>
            <para>
            A link shape can be any type of node that supports the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            interface. This method supports creating one of the following
            types of link shapes:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Line"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalLine"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.PolyLine"/>, and
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Arc"/>. If
            <see cref="F:Syncfusion.Windows.Forms.Diagram.Link.Shapes.Default"/>
            is specified, then a polyline is created.
            </para>
            <para>
            This method can be overridden in derived classes to support the
            creation of other types of link shapes.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Link.Shapes"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.CreateHeadPort">
            <summary>
            Called to create the link's head port.
            </summary>
            <returns>Port to be used as the head port.</returns>
            <remarks>
            <para>
            Creates and returns a new LinkHeadPort object. This method can be
            overridden in derived classes in order to customize the creation
            of the head port.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LinkHeadPort"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.CreateTailPort">
            <summary>
            Called to create the link's tail port.
            </summary>
            <returns>Port to be used as the tail port.</returns>
            <remarks>
            <para>
            Creates and returns a new LinkTailPort object. This method can be
            overridden in derived classes in order to customize the creation
            of the head port.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LinkTailPort"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.CreateCenterPort">
            <summary>
            Creates the center port for the symbol.
            </summary>
            <returns>Port object.</returns>
            <remarks>
            Called by the constructor.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.AnchoredPort"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.OnMoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            Forwards the event notification to the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.MoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.IsNodeLeaving(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Determines if this link is leaving the given node.
            </summary>
            <param name="graphNode">Node to test.</param>
            <returns>True if edge is leaving the given node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.IsNodeEntering(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Determines if this link is entering the given node.
            </summary>
            <param name="graphNode">Node to test.</param>
            <returns>True if edge is entering the given node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the link.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            link to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.AddLabel(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Adds a label to a link.
            </summary>
            <param name="lbl">Label to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.AddLabel(System.String,System.Int32)">
            <summary>
            Creates a new link label and adds it to the link.
            </summary>
            <param name="txtVal">Value to assign to the label.</param>
            <param name="pctAlongLine">Orientation value.</param>
            <returns>The new label created.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.AddLabel(Syncfusion.Windows.Forms.Diagram.LinkLabel)">
            <summary>
            Adds a link label to the link.
            </summary>
            <param name="label">Label to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.CalcLabelPosition(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Calculates the point at which the given label should be positioned.
            </summary>
            <remarks>
            This method is called by the label itself in order to find out where
            it should be positioned.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Label"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILabelContainer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.GetLabelMaxSize(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Returns the maximum size the given label can grow to.
            </summary>
            <returns>Maximum size for label.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.GetLineSegment(System.Int32)">
            <summary>
            Returns the line segment at the given index position.
            </summary>
            <returns>Array of points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.GetLineSegmentAt(System.Drawing.PointF)">
            <summary>
            Hit tests the object to determine which line segment (if any) intersects
            the given point.
            </summary>
            <param name="pt">Point to test.</param>
            <returns>
            Zero-based index of line segment hit or -1 if the hit test fails.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.MoveLineSegment(System.Int32,System.Single,System.Single)">
            <summary>
            Moves the line segment by the specified X and Y offsets.
            </summary>
            <param name="segIdx">Index of line segment to move</param>
            <param name="dx">Distance to move the line segment along the X axis</param>
            <param name="dy">Distance to move the line segment along the Y axis</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.BridgeLineSegment(System.Int32,System.Single,System.Single)">
            <summary>
            Adds a bridge to the specified line segment.
            </summary>
            <param name="segIdx">Zero-based index of line segment to add the bridge to</param>
            <param name="offset">Offset from the beginning of the segment at which to add the bridge</param>
            <param name="size">Size of the bridge to add</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.Syncfusion#Windows#Forms#Diagram#IRoutableLine#GetLineSegment(System.Int32)">
            <summary>
            Returns the line segment at the given index position.
            </summary>
            <param name="segIdx">Index of line segment to return</param>
            <returns>Line segment at the given index offset.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.Syncfusion#Windows#Forms#Diagram#IRoutableLine#GetLineSegmentAt(System.Drawing.PointF)">
            <summary>
            Hit tests the object to determine which line segment (if any) intersects
            the given point.
            </summary>
            <param name="pt">Point to test.</param>
            <returns>
            Zero-based index of line segment hit or -1 if the hit test fails.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.Syncfusion#Windows#Forms#Diagram#IRoutableLine#MoveLineSegment(System.Int32,System.Single,System.Single)">
            <summary>
            Moves the line segment by the specified X and Y offsets.
            </summary>
            <param name="segIdx">Index of line segment to move</param>
            <param name="dx">Distance to move the line segment along the X axis</param>
            <param name="dy">Distance to move the line segment along the Y axis</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.Syncfusion#Windows#Forms#Diagram#IRoutableLine#BridgeLineSegment(System.Int32,System.Single,System.Single)">
            <summary>
            Adds a bridge to the specified line segment.
            </summary>
            <param name="segIdx">Zero-based index of line segment to add the bridge to</param>
            <param name="offset">Offset from the beginning of the segment at which to add the bridge</param>
            <param name="size">Size of the bridge to add</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.Syncfusion#Windows#Forms#Diagram#IRoutableLine#IsNodeObstacle(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Tells the line router whether or not the given node should be treated
            as an obstacle.
            </summary>
            <param name="node">Node to test</param>
            <returns>true if the node should be treated as an obstacle; otherwise false</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Link.HeadPort">
            <summary>
            The port anchored to the entry point of the link.
            </summary>
            <remarks>
            <para>
            The head port is always anchored to the last vertex in the link
            shape. The link shape is the first child node in the link and it
            must support the <see cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            interface.
            </para>
            <para>
            The head and tail ports of a link define the direction of the link.
            The head port is the exit point for a link.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Link.CreateHeadPort"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LinkPort"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Link.TailPort"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Link.TailPort">
            <summary>
            The port anchored to the exit point of the link.
            </summary>
            <remarks>
            <para>
            The tail port is always anchored to the first vertex in the link
            shape. The link shape is the first child node in the link and it
            must support the <see cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            interface.
            </para>
            <para>
            The head and tail ports of a link define the direction of the link.
            The tail port is the entry point for a link.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Link.CreateTailPort"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LinkPort"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Link.HeadPort"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Link.Points">
            <summary>
            Interface to local points belonging to the link.
            </summary>
            <remarks>
            <para>
            Gets the first child node belonging to the link and returns its
            IPoints interface. By definition, the first child node in a link
            must support the IPoints interface.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Link.LocalPoints">
            <summary>
            Interface to local points belonging to the link.
            </summary>
            <remarks>
            <para>
            Gets the first child node belonging to the link and returns its
            ILocalPoints interface.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILocalPoints"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Link.LineSegments">
            <summary>
            Interface to line segments belonging to the link.
            </summary>
            <remarks>
            <para>
            Gets the first child node belonging to the link and returns its
            ILineSegments interface.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILineSegments"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Link.EndPoints">
            <summary>
            Returns the endpoints of the link shape.
            </summary>
            <remarks>
            <para>
            The link shape is the first child node belonging to the link. This
            property returns the link shape's IEndPointContainer interface.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IEndPointContainer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Link.FromNode">
            <summary>
            Node connected to the tail port of the link.
            </summary>
            <remarks>
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Link.TailPort"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Link.ToNode">
            <summary>
            Node connected to the head port of the link.
            </summary>
            <remarks>
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Link.HeadPort"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Link.EdgeWeight">
            <summary>
            Weight value associated with the edge.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Link.Labels">
            <summary>
            Collection of labels that belong to the link.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Link.LineSegmentCount">
            <summary>
            Number of line segments in the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Link.Syncfusion#Windows#Forms#Diagram#IRoutableLine#LineSegmentCount">
            <summary>
            Number of line segments in the object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Link.Shapes">
            <summary>
            Defines a set of built-in shapes that can be assigned to links:
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Link.Shapes.Line">
            <summary>
            Line shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Link.Shapes.Polyline">
            <summary>
            Polyline shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Link.Shapes.OrthogonalLine">
            <summary>
            Orthogonal line shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Link.Shapes.Arc">
            <summary>
            Arc shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Link.Shapes.Default">
            <summary>
            Default shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LinkFactory">
            <summary>
            Delegate used to create links.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LinkLabel">
            <summary>
            Specialized label for links.
            </summary>
            <remarks>
            <para>
            The position of a link label is calculated from a certain
            percentage along the line contained by the link. The
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LinkLabel.PercentAlongLine"/>
            property contains the percentage value used to orient the label
            with respect to the link.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Label"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Link"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkLabel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkLabel.#ctor(Syncfusion.Windows.Forms.Diagram.ILabelContainer)">
            <summary>
            Construct a LinkLabel object given a label container.
            </summary>
            <param name="container">Container that owns the label.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkLabel.#ctor(Syncfusion.Windows.Forms.Diagram.ILabelContainer,System.String)">
            <summary>
            Construct a LinkLabel object given a label container and text value
            for the label.
            </summary>
            <param name="container">Container that owns the label.</param>
            <param name="txtVal">Value to assign to the label.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkLabel.#ctor(Syncfusion.Windows.Forms.Diagram.ILabelContainer,System.String,System.Int32)">
            <summary>
            Construct a LinkLabel object given a label container, a text value,
            and an orientation value.
            </summary>
            <param name="container">Container that owns the label.</param>
            <param name="txtVal">Value to assign to the label.</param>
            <param name="pctAlongLine">Where along the line to orient the label.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkLabel.#ctor(Syncfusion.Windows.Forms.Diagram.LinkLabel)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkLabel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for link labels.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkLabel.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkLabel.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the label.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            label to their default values.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkLabel.PercentAlongLine">
            <summary>
            Determines where the label is oriented with respect to the link.
            </summary>
            <remarks>
            The value of this property is a percentage that can range from 0
            to 100. The position of the label is calculated as this percentage
            value along the line contained by the link.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LinkPort">
            <summary>
            Base class for head and tail ports of a link.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkPort.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkPort.#ctor(Syncfusion.Windows.Forms.Diagram.Link)">
            <summary>
            Construct a link port for the specified link.
            </summary>
            <param name="link">Link to anchor the port to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkPort.#ctor(Syncfusion.Windows.Forms.Diagram.LinkPort)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkPort.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for link ports.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkPort.Translate(System.Single,System.Single)">
            <summary>
            Moves the node by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkPort.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the node a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="degrees">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkPort.Rotate(System.Single)">
            <summary>
            Rotates the node a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkPort.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Scales the node about a specified anchor point by a given ratio.
            </summary>
            <param name="ptAnchor">Fixed point about which to scale.</param>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkPort.Scale(System.Single,System.Single)">
            <summary>
            Scales the node about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkPort.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkPort.PointIndex">
            <summary>
            Zero-based index of point in the link that this port is anchored to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkPort.Location">
            <summary>
            Location of the port in world coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkPort.LocalTransform">
            <summary>
            Matrix containing local transformations for this node.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LinkHeadPort">
            <summary>
            A port anchored to the head (last) endpoint of a link.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkHeadPort.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkHeadPort.#ctor(Syncfusion.Windows.Forms.Diagram.Link)">
            <summary>
            Construct a link head port for the specified link.
            </summary>
            <param name="link">Link to anchor the port to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkHeadPort.#ctor(Syncfusion.Windows.Forms.Diagram.LinkHeadPort)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkHeadPort.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for link ports.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkHeadPort.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkHeadPort.PointIndex">
            <summary>
            Zero-based index of point in the link that this port is anchored to.
            </summary>
            <remarks>
            <para>
            Always returns the number of points in the link minus 1; or returns
            -1 if the link contains no points.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LinkTailPort">
            <summary>
            A port anchored to the tail (first) endpoint of a link.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTailPort.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTailPort.#ctor(Syncfusion.Windows.Forms.Diagram.Link)">
            <summary>
            Construct a link tail port for the specified link.
            </summary>
            <param name="link">Link to anchor the port to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTailPort.#ctor(Syncfusion.Windows.Forms.Diagram.LinkTailPort)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTailPort.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for link ports.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTailPort.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkTailPort.PointIndex">
            <summary>
            Zero-based index of point in the link that this port is anchored to.
            </summary>
            <remarks>
            <para>
            Always returns 0 when the port is attached to a link containing
            at least 1 point; otherwise returns -1.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PortVisuals">
            <summary>
            Contains static GraphicsPath objects that can be used for the
            visual representation of ports.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PortVisuals.CirclePort">
            <summary>
            Circle with a crosshair in the middle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PortVisuals.XPort">
            <summary>
            X marks the spot.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Symbol">
            <summary>
            A symbol is a composite node that supports labels and connections to other
            symbols and links.
            </summary>
            <remarks>
            <para>
            Shapes, text, images, and other types of nodes can be aggregated together
            in a symbol. A symbol draws itself by drawing all of its child nodes,
            so its appearance is determined by union of all its children. The bounds
            of a symbol are also determined by the union of all its child nodes. The
            position and size of child nodes is always relative to the symbol.
            </para>
            <para>
            Symbol may contain one or more ports positioned anywhere within its bounds.
            A port is a point at which connections to other symbols and links can be
            established. NOTE: A link is a special type of symbol that contains a shape
            (typically a line or polyline) and two ports on each end. Much of the
            information about symbols is also applicable to links. A
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Connection"/> is an object that
            binds two ports together and establishes a connection between two symbols.
            Symbols that are connected cooperate by sending messages to each other when
            certain events occur, such as movement or resizing.
            </para>
            <para>
            All symbols contain a center port, which is a port that is anchored
            at the center of the symbol's bounds.
            </para>
            <para>
            Symbols can be connected to other symbols and links using the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Connect(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)"/>
            method, which creates a new
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Connection"/> object and
            wires it up to the ports provided. The port belonging to the symbol
            object the Connect method was invoked on is referred to as the
            local port, and the port belonging to the symbol to which the
            connection is being made is referred to as the foreign port. In
            other words, the foreign port belongs to "this" symbol and the
            foreign port belongs to "the other" symbol. When a new connection
            is created, it is added to both the local symbol and the foreign
            symbol so that they both know about the connection. This is done
            automatically by the Connect method.
            </para>
            <para>
            Connections can be destroyed by calling the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolBase.Disconnect(Syncfusion.Windows.Forms.Diagram.Port,Syncfusion.Windows.Forms.Diagram.Port)"/>
            method.
            </para>
            <para>
            A symbol may contain one or more labels. A
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Label"/>
            is a type of text object that is anchored to a symbol. A label is positioned by
            specifying a <see cref="T:Syncfusion.Windows.Forms.Diagram.BoxPosition"/>
            that corresponds to the bounding box of the symbol the label belongs to. The
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.Text"/> property
            of a label can either be bound to an independent value maintained by the
            label or it can be bound to any property in the symbol it belongs to. This
            is very useful for creating a label that displays the symbol name or some
            property of the symbol.
            </para>
            <para>
            Labels can be added to a symbol using the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Symbol.AddLabel(Syncfusion.Windows.Forms.Diagram.Label)"/> method.
            Labels call back to the symbol through the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ILabelContainer"/> interface
            in order to position themselves relative to the symbol.
            </para>
            <para>
            The symbol class implements the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IGraphNode"/> interface, which
            is used in conjunction with the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IGraphEdge"/> interface
             to navigate the node hierarchy as a graph of interconnected nodes and edges.
            </para>
            <para>
            A symbol can be created from a <see cref="T:Syncfusion.Windows.Forms.Diagram.SymbolModel"/>,
            which is a model containing nodes and properties to be applied the symbol. The
            Symbol Designer application creates symbol models and stores them inside of a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.SymbolPalette"/>. A symbol palette
            is a collection of related symbol models.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.SymbolBase"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Link"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Connection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Label"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.SymbolModel"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphNode"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILabelContainer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Symbol.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Symbol.#ctor(Syncfusion.Windows.Forms.Diagram.Symbol)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Symbol.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for symbols.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Symbol.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Symbol.AddLabel(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Adds a label to the symbol.
            </summary>
            <param name="lbl">Label to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Symbol.AddLabel(System.String,Syncfusion.Windows.Forms.Diagram.BoxPosition)">
            <summary>
            Creates a new label and adds it to the symbol.
            </summary>
            <param name="anchor">Anchor point for the label.</param>
            <param name="txtVal">Text value to assign to the label.</param>
            <returns>The new label that was created.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Symbol.AddLabel(Syncfusion.Windows.Forms.Diagram.SymbolLabel)">
            <summary>
            Adds a label to the symbol.
            </summary>
            <param name="lbl">Label to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Symbol.GetLabelMaxSize(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Returns the maximum size the given label can grow to.
            </summary>
            <returns>Maximum size for label.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Symbol.OnConnectionMove(Syncfusion.Windows.Forms.Diagram.Connection)">
            <summary>
            This method is called by connections when the foreign port container
            moves.
            </summary>
            <param name="connection">Connection that has moved.</param>
            <remarks>
            <para>
            This method can be overridden in derived classes.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Symbol.Labels">
            <summary>
            Collection of labels that belong to the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Symbol.Edges">
            <summary>
            Collection of all edges entering or leaving the symbol.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphNode"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphEdge"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Symbol.EdgesEntering">
            <summary>
            Collection of edges entering the symbol.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphNode"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphEdge"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Symbol.EdgesLeaving">
            <summary>
            Collection of edges leaving the symbol.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphNode"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphEdge"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SymbolLabel">
            <summary>
            Text label for a symbol.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolLabel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolLabel.#ctor(Syncfusion.Windows.Forms.Diagram.ILabelContainer)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolLabel.#ctor(Syncfusion.Windows.Forms.Diagram.ILabelContainer,System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="txtVal"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolLabel.#ctor(Syncfusion.Windows.Forms.Diagram.ILabelContainer,System.String,Syncfusion.Windows.Forms.Diagram.BoxPosition)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="txtVal"></param>
            <param name="anchor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolLabel.#ctor(Syncfusion.Windows.Forms.Diagram.SymbolLabel)">
            <summary>
            
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolLabel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for symbol labels.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolLabel.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolLabel.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the label.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            label to their default values.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolLabel.Anchor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SymbolModel">
            <summary>
            Design-time representation of a symbol.
            </summary>
            <remarks>
            <para>
            This class encapsulates the data used to create a symbol. It is a model
            that contains nodes and properties that are used to create and initialize
            symbols. A symbol model can contain shapes, text, images, and other types
            of nodes which are copied into new symbols created from it.
            </para>
            <para>
            The <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolModel.CreateSymbol"/>
            method is called to create instances of symbols from the symbol model. The
            run-time type created by CreateSymbol is determined by the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInAssemblyName"/>
            and
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInClass"/>
            properties, which are set by default to create
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Symbol"/>
            objects. The PlugInAssemblyName and PlugInClass properties allow developers to
            plugin their own derived implementations of the Symbol class.
            </para>
            <para>
            After the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.SymbolModel.CreateSymbol"/>
            method instantiates the symbol specified by the PlugInAssemblyName and
            PlugInClass properties, it populates it with the nodes and properties
            contained by the symbol model.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Symbol"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolModel.#ctor">
            <summary>
            Constructs a symbol model.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolModel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for symbol models.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolModel.CreateSymbol">
            <summary>
            Creates a new instance of the symbol described by the symbol model.
            </summary>
            <returns>Instance of a symbol.</returns>
            <remarks>
            <para>
            Creates an instance of the class specified by the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInAssemblyName"/>
            and
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInClass"/>
            properties. By default, the PlugInAssemblyName and PlugInClass properties are
            set to create objects such as
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Symbol"/>.
            </para>
            <para>
            Once the symbol object is created, this method loads it with the child
            nodes, labels, and properties contained by the symbol model.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Symbol"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInAssemblyName"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInClass"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolModel.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the model.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            model to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolModel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolModel.symbolType">
            <summary>
            Reference to the symbol class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolModel.pluginAssemblyName">
            <summary>
            Name of assembly containing the implementation of the symbol class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolModel.pluginAssemblyPublicKeyToken">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolModel.pluginAssemblyVersion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolModel.pluginClass">
            <summary>
            Name of class that implements the symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolModel.smallIcon">
            <summary>
            16x16 icon image.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolModel.largeIcon">
            <summary>
            32x32 icon image.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolModel.labels">
            <summary>
            Collection of labels contained by the symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolModel.centerPortEnabled">
            <summary>
            Flag indicating if center port of symbol is enabled or disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.BackgroundStyle">
            <summary>
            Background style of the symbol model.
            </summary>
            <remarks>
            <para>
            Inherited from the base class and overridden here in order to hide it
            during design-time.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInAssemblyName">
            <summary>
            Name of the assembly containing the implementation of the class used
            to create run-time instances of the symbol.
            </summary>
            <remarks>
            <para>
            Set to Syncfusion.Diagram by default. Used in conjunction with the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInClass"/>
            property to create symbol objects.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInClass"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.SymbolModel.CreateSymbol"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInAssembly">
            <summary>
            Name of the assembly containing the implementation of the class used
            to create run-time instances of the symbol.
            </summary>
            <remarks>
            <para>
            Set to Syncfusion.Diagram by default. Used in conjunction with the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInClass"/>
            property to create symbol objects.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInClass"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.SymbolModel.CreateSymbol"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PluginAssemblyPublicKeyToken">
            <summary>
            Public key token of the assembly containing the class instantiated at run-time for this symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PluginAssemblyVersion">
            <summary>
            Version of the assembly containing the class instantiated at run-time for this symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInClass">
            <summary>
            Name of the class used to create run-time instances of the symbol.
            </summary>
            <remarks>
            <para>
            Set to <see cref="T:Syncfusion.Windows.Forms.Diagram.Symbol"/> by default.
            Used in conjunction with the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInAssemblyName"/>
            property to create symbol objects.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.PlugInAssemblyName"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.SymbolModel.CreateSymbol"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.Labels">
            <summary>
            Labels to add to symbols.
            </summary>
            <remarks>
            <para>
            The collection of labels that will be added to symbols created by
            this symbol model.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Label"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.SmallIcon">
            <summary>
            A 16x16 image used to represent the symbol as an icon.
            </summary>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.LargeIcon"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.LargeIcon">
            <summary>
            A 32x32 image used to represent the symbol as an icon.
            </summary>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.SmallIcon"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.AutoHidePorts">
            <summary>
            Boolean flag that determines if ports are shown only when a user-interface
            tool creating connections is active.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LinkTool"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.CenterPortEnabled">
            <summary>
            Boolean flag that determines if the center port of the symbol will be
            enabled or disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.Layers">
            <summary>
            Collection of layers in the model.
            </summary>
            <remarks>
            <para>
            This property is inherited from the base class and is overriden in this
            class in order to hide it at design-time.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolModel.DefaultLayerName">
            <summary>
            Name of the default layer.
            </summary>
            <remarks>
            <para>
            This property is inherited from the base class and is overriden in this
            class in order to hide it at design-time.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SymbolPalette">
            <summary>
            A symbol palette is a collection of related SymbolModel objects used
            to add symbols to a diagram.
            </summary>
            <remarks>
            This class is a special type of model object that contains only
            SymbolModel objects. SymbolPalettes are serializable and can be
            saved to a file and reloaded. This class is used in conjuction
            with the PaletteGroupBar control, which displays the contents
            a SymbolPalette and allows the user to drag-and-drop symbols
            onto a diagram.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.SymbolModel"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for symbol palettes.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.AddSymbol(System.String)">
            <summary>
            
            </summary>
            <param name="symbolName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.RemoveSymbol(Syncfusion.Windows.Forms.Diagram.SymbolModel)">
            <summary>
            
            </summary>
            <param name="symbolMdl"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.GetConstrainingRegion(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Returns the region that the bounds of the given child node is constrained by.
            </summary>
            <param name="child">Child to get constraining region for.</param>
            <returns>Region that constrains the bounds of the given child.</returns>
            <remarks>
            <para>
            Overrides the base class implementation and always returns NULL, since
            SymbolPalettes do not constrain children.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.BoundaryConstraintsEnabled"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.CheckConstrainingRegion(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Tests to see if the given node falls within the constraining region
            of the composite node.
            </summary>
            <param name="node">Node to test.</param>
            <returns>
            True if node falls within the constraining region; False if it does
            not.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IFormatText">
            <summary>
            Interface to objects that format text.
            </summary>
            <remarks>
            <para>
            This interface is implemented by objects that provide text formatting
            services. The properties exposed by this interface map to text properties
            such as font family, bold, underline, and italic. The value returned by
            these properties corresponds to the currently selected text. Setting these
            properties changes the properties of the selected text.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.TextFormatter"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IFormatText.Bold">
            <summary>
            Indicates if the selected text is bold.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IFormatText.Italic">
            <summary>
            Indicates if the selected text is in italics.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IFormatText.Underline">
            <summary>
            Indicates if the selected text is underlined.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IFormatText.Strikeout">
            <summary>
            Indicates if the selected text has strikeout property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IFormatText.FontFamily">
            <summary>
            Name of font family.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IFormatText.PointSize">
            <summary>
            Size of font in points.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IFormatText.HorizontalAlignment">
            <summary>
            Horizontal alignment of text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IFormatText.TextColor">
            <summary>
            Color of text.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RichTextEdit">
            <summary>
            RichTextBox control for editing text objects.
            </summary>
            <remarks>
            <para>
            This class implements a text box control that is used for editing
            text nodes derived from
            <see cref="T:Syncfusion.Windows.Forms.Diagram.RichTextNode"/>.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RichTextNode"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ITextEditor">
            <summary>
            Interface to text editing components.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ITextEditor.BeginEdit(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Starts editing the specified node.
            </summary>
            <param name="node">Node to edit.</param>
            <returns>True if editing started; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ITextEditor.EndEdit(System.Boolean)">
            <summary>
            Called to exit the editor.
            </summary>
            <param name="saveChanges">Flag indicating if changes should be saved.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ITextEditor.Focus">
            <summary>
            Gives the text edit box keyboard focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ITextEditor.IsEditing">
            <summary>
            Indicates if the editor is active.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ITextEditor.AcceptsReturn">
            <summary>
            Flag indicating if the control accepts return character.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ITextEditor.CurrentText">
            <summary>
            Gets or sets the current text.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextEdit.#ctor(Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Constructs a RichTextEdit given a parent control and rich text node.
            </summary>
            <param name="view">View that is hosting the text edit control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#ITextEditor#BeginEdit(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Loads and positions the text edit control and goes into edit mode.
            </summary>
            <param name="node">Node to edit.</param>
            <returns>True if editing started; otherwise False.</returns>
            <remarks>
            <para>
            This method loads the control with the text value and properties of the
            attached text node. It also positions the control to correspond to
            bounds of the text node. Then it hides the text node and makes the
            control visible.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#ITextEditor#EndEdit(System.Boolean)">
            <summary>
            Saves the changes made in the control to the attached text node and
            ends edit mode.
            </summary>
            <param name="saveChanges">Flag indicating if changes should be saved.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#ITextEditor#Focus">
            <summary>
            Gives the text editor keyboard focus.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextEdit.OnTextChanged(System.EventArgs)">
            <summary>
            Called when the text in the control changes.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextEdit.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#ITextEditor#IsEditing">
            <summary>
            Indicates if the editor is active.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#ITextEditor#AcceptsReturn">
            <summary>
            Flag indicating if the control accepts return character.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#ITextEditor#CurrentText">
            <summary>
            Returns the current contents of the text editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#Bold">
            <summary>
            Indicates if text is bold.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#Italic">
            <summary>
            Indicates if text is in italics.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#Underline">
            <summary>
            Indicates if text is underlined.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#Strikeout">
            <summary>
            Indicates if the selected text has strikeout property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#FontFamily">
            <summary>
            Name of font family.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#PointSize">
            <summary>
            Size of font in points.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#HorizontalAlignment">
            <summary>
            Horizontal alignment of text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#TextColor">
            <summary>
            Color of text.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RichTextNode">
            <summary>
            Node that renders rich text.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.#ctor(System.String)">
            <summary>
            Construct a RichTextNode given a string of rich text.
            </summary>
            <param name="richText">Text value including RTF codes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.#ctor(Syncfusion.Windows.Forms.Diagram.RichTextNode)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for text objects.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the rich text object to a graphics context.
            </summary>
            <param name="grfx">Graphics context object to render to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Translate(System.Single,System.Single)">
            <summary>
            Moves the text object by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
            <remarks>
            Applies a translate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Rotate(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the text object a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Rotate(System.Single)">
            <summary>
            Rotates the text object a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
            <remarks>
            Applies a rotate operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Scale(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Scales the text object by a given ratio along the X and Y axes.
            </summary>
            <param name="ptAnchor">Fixed point about which to scale.</param>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.LocalTransform"/>
            matrix. The <see cref="M:Syncfusion.Windows.Forms.Diagram.TextBase.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Scale(System.Single,System.Single)">
            <summary>
            Scales the text object about its center point by a given ratio.
            </summary>
            <param name="sx">Scaling ratio for X axis.</param>
            <param name="sy">Scaling ratio for Y axis.</param>
            <remarks>
            Applies a scale operation to the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.LocalTransform"/>
            matrix. The OnScale method is called after the change is made.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainsPoint(System.Drawing.PointF,System.Single,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box contains the given point.
            </summary>
            <param name="ptTest">Point to test.</param>
            <param name="fSlop">Expands the area to be tested.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if the object contains the given point; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#ContainedByRect(System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box intersects the given rectangle.
            </summary>
            <param name="rcTest">Rectangle to test.</param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IHitTestBounds#IntersectsLineSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Tests to see if the object's bounding box intersects the given line segment.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="grfx">Not used by this implementation.</param>
            <returns>True if an intersection occurs; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.SetDefaultPropertyValues">
            <summary>
            Sets the default property values for the text object.
            </summary>
            <remarks>
            This method can be called at any time to reset the properties of the
            text object to their default values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.GetPropertyValue(System.String)">
            <summary>
            Retrieve the value of a property given its name.
            </summary>
            <param name="propertyName">Name of property to retrieve.</param>
            <returns>Value of the named property or NULL if it doesn't exist.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.SetPropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to set.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method will add the property to the container if it doesn't
            already exist.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.ChangePropertyValue(System.String,System.Object)">
            <summary>
            Assign a value to a property given its name.
            </summary>
            <param name="propertyName">Name of property to change.</param>
            <param name="val">Value to assign to property.</param>
            <remarks>
            This method only modifies property values that already exist
            in the container. If the property does not exist, this method fails.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.RemoveProperty(System.String)">
            <summary>
            Removes the specified property.
            </summary>
            <param name="propertyName">Name of property to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.GetPropertyNames">
            <summary>
            Returns an array containing the names of all properties in the container.
            </summary>
            <returns>String array containing property names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChanging(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called before the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ChildrenChangeComplete(Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs)">
            <summary>
            Called after the collection of child nodes is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollectionEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#Click(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#InsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#MoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#DeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="evtArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChanging(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called before the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#IDispatchNodeEvents#ConnectionsChangeComplete(Syncfusion.Windows.Forms.Diagram.ConnectionCollectionEventArgs)">
            <summary>
            Called after the connection list of a symbol is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnPropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called before a property value is modified.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            before a property changes by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)">
            <summary>
            Called when a property is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the property change by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyEventArgs)"/>
            method.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PropertyEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnMove(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)">
            <summary>
            Called when the position of the node is changed.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the move by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Move(Syncfusion.Windows.Forms.Diagram.MoveEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnRotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)">
            <summary>
            Called when the node is rotated.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the rotation by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Rotate(Syncfusion.Windows.Forms.Diagram.RotateEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnScale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)">
            <summary>
            Called when the node is scaled.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the scaling by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Scale(Syncfusion.Windows.Forms.Diagram.ScaleEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ScaleEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnBoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)">
            <summary>
            Called when the bounds of the node change.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <para>
            This method notifies the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Shape.Parent"/>
            of the change in bounds by calling the parent node's
            <see cref="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.BoundsChanged(Syncfusion.Windows.Forms.Diagram.BoundsEventArgs)"/>
            method.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoundsEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnDoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when a node is double clicked.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnMouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse enters a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnMouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Called when the mouse leaves a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnInsertVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is inserted into a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnMoveVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is moved.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnDeleteVertex(Syncfusion.Windows.Forms.Diagram.VertexEventArgs)">
            <summary>
            Called when a vertex is deleted from a node.
            </summary>
            <param name="evtArgs">Event arguments.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.VertexEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#ILogicalUnitContainer#ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.CreateStyles">
            <summary>
            Creates style objects for this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IBounds2DF"/>
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextNode.name">
            <summary>
            Name of the text object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextNode.parent">
            <summary>
            Reference to the parent node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextNode.matrix">
            <summary>
            Local transformation matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextNode.propertyValues">
            <summary>
            Hashtable containing property name / value pairs.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextNode.bounds">
            <summary>
            Text bounding box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextNode.borderStyle">
            <summary>
            Border properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextNode.editStyle">
            <summary>
            Edit properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextNode.richTextCtl">
            <summary>
            RichTextBox control used to render the rich text data.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Parent">
            <summary>
            Reference to the composite node this node is a child of.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Root">
            <summary>
            The root node in the node hierarchy.
            </summary>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Name">
            <summary>
            Name of the text node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.FullName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Bounds">
            <summary>
            The text object's bounding box.
            </summary>
            <remarks>
            Always returns the bounds of the text object in world coordinates,
            regardless of what is on the matrix stack at the time of the call.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.X">
            <summary>
            X-coordinate of the text object's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Y">
            <summary>
            Y-coordinate of the text object's location.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Width">
            <summary>
            Width of the text object.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Height">
            <summary>
            Height of the text object.
            </summary>
            <remarks>
            Specified in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Bounds">
            <summary>
            Bounding box of the rich text node in local coordinates.
            </summary>
            <remarks>
            The value returned depends on the contents of the matrix stack. If the
            matrix stack is empty, then the value returned is in local coordinates.
            This method is generally used by functions that recursively traverse
            the node hierarchy, pushing and popping the matrix stack as they go.
            <seealso cref="F:Syncfusion.Windows.Forms.Diagram.Global.MatrixStack"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Bounds"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#X">
            <summary>
            X-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Y">
            <summary>
            Y-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Width">
            <summary>
            Width of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Height">
            <summary>
            Height of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Text">
            <summary>
            The value contained by the text object.
            </summary>
            <remarks>
            <para>
            Derived classes override this property in order to supply the
            text value in an implementation specific way.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.RichText">
            <summary>
            Contains rich text include all RTF codes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Visible">
            <summary>
            Flag indicating if the text object is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.ReadOnly">
            <summary>
            Flag indicating if the text object is Read-only or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Location">
            <summary>
            Upper-left hand corner of the bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Size">
            <summary>
            Size of the bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.BorderStyle">
            <summary>
            Properties for drawing the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.BackgroundColor">
            <summary>
            Color used to fill the background.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.EditStyle">
            <summary>
            Properties for determining how the text object can be edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.LocalTransform">
            <summary>
            Matrix containing transformations for this node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.WorldTransform">
            <summary>
            Returns a matrix containing transformations for this node and all of
            its ancestors.
            </summary>
            <remarks>
            Chains up the node hierarchy and builds a transformation matrix containing
            all transformations that apply to this node in the world coordinate space.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.ParentTransform">
            <summary>
            Returns a matrix containing the transformations of this node's parent.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RichTextFactory">
            <summary>
            Delegate used to create rich text nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TextFactory">
            <summary>
            Delegate used to create text nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TextEdit">
            <summary>
            Text Box control for editing text objects.
            </summary>
            <remarks>
            <para>
            This class implements a text box control that is used for editing
            text nodes derived from the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.TextBase"/>.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextBase"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextEdit.#ctor(Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Constructs a TextEdit given a parent control and text node.
            </summary>
            <param name="view">View that is hosting the text edit control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextEdit.#ctor(Syncfusion.Windows.Forms.Diagram.View,System.Boolean)">
            <summary>
            Constructs a TextEdit given a parent control and text node.
            </summary>
            <param name="view">View that is hosting the text edit control.</param>
            <param name="autoResize">Flag indicating if text box should be automatically resized.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextEdit.#ctor(Syncfusion.Windows.Forms.Diagram.View,System.Drawing.SizeF,System.Boolean)">
            <summary>
            Constructs a TextEdit given a parent control and text node.
            </summary>
            <param name="view">View that is hosting the text edit control.</param>
            <param name="maxSize">Maximum size the text can grow to.</param>
            <param name="autoResize">Flag indicating if text box should be automatically resized.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#ITextEditor#BeginEdit(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Loads and positions the text edit control and goes into edit mode.
            </summary>
            <param name="node">Node to edit.</param>
            <returns>True if editing started; otherwise False.</returns>
            <remarks>
            <para>
            This method loads the control with the text value and properties of the
            attached text node. It also positions the control to correspond to
            bounds of the text node. Then it hides the text node and makes the
            control visible.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#ITextEditor#EndEdit(System.Boolean)">
            <summary>
            Saves the changes made in the control to the attached text node and
            ends edit mode.
            </summary>
            <param name="saveChanges">Flag indicating if changes should be saved.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#ITextEditor#Focus">
            <summary>
            Gives the text editor keyboard focus.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextEdit.OnTextChanged(System.EventArgs)">
            <summary>
            Called when the text in the control changes.
            </summary>
            <param name="e">Event arguments.</param>
            <remarks>
            <para>
            If the auto-resize option is turned on, this method resizes the control
            so that the text fits.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextEdit.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.AutoResize">
            <summary>
            Flag indicating if text box should be automatically resized.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.MinSize">
            <summary>
            The minimum size the text box can be.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.MaxSize">
            <summary>
            The maximum size that the text box can grow to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#ITextEditor#IsEditing">
            <summary>
            Indicates if the editor is active.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#ITextEditor#AcceptsReturn">
            <summary>
            Flag indicating if the control accepts return character.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#ITextEditor#CurrentText">
            <summary>
            Gets or sets the current contents of the text editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#Bold">
            <summary>
            Indicates if text is bold.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#Italic">
            <summary>
            Indicates if text is in italics.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#Underline">
            <summary>
            Indicates if text is underlined.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#Strikeout">
            <summary>
            Indicates if the selected text has strikeout property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#FontFamily">
            <summary>
            Name of font family.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#PointSize">
            <summary>
            Size of font in points.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#HorizontalAlignment">
            <summary>
            Horizontal alignment of text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextEdit.Syncfusion#Windows#Forms#Diagram#IFormatText#TextColor">
            <summary>
            Color of text.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TextFormatter">
            <summary>
            This class implements a TextFormatter object that is attached to the controller.
            </summary>
            <remarks>
            <para>
            A TextFormatter is an object that implements the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IFormatText"/> and is
            used by a <see cref="T:Syncfusion.Windows.Forms.Diagram.Controller"/>
            object to format text objects in a diagram. The TextFormatter class
            is basically a helper object for the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Controller"/>
            that implements its text formatting capabilities.
            </para>
            <para>
            The text formatting properties that are inherited from the IFormatText
            interface and implemented in this class interact with the nodes in the
            controller's selection list and with text editors. A text editor is
            a control that implements the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ITextEditor"/>
            interface and that is used to edit the contents of text objects on
            the diagram.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.TextFormatter"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IFormatText"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ITextEditor"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextFormatter.#ctor(Syncfusion.Windows.Forms.Diagram.Controller)">
            <summary>
            Construct a TextFormatter and attach it to the specified controller.
            </summary>
            <param name="controller">Controller to attach to.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextFormatter.Bold">
            <summary>
            Indicates if bolding is enabled or disabled.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BoldTextCmd"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextFormatter.Italic">
            <summary>
            Turns italic on or off.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ItalicTextCmd"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextFormatter.Underline">
            <summary>
            Turns underlining on or off.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.UnderlineTextCmd"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextFormatter.Strikeout">
            <summary>
            Indicates if the selected text has strikeout property.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.StrikeoutTextCmd"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextFormatter.FontFamily">
            <summary>
            Name of font family.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FontFamilyCmd"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextFormatter.PointSize">
            <summary>
            Size of font in points.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PointSizeCmd"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextFormatter.HorizontalAlignment">
            <summary>
            Horizontal alignment of text.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.HorizontalTextAlignCmd"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextFormatter.TextColor">
            <summary>
            Color of text.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextColorCmd"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TextNode">
            <summary>
            Implements a node containing text.
            </summary>
            <remarks>
            <para>
            This class implements a basic text node.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextBase"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.#ctor(System.String)">
            <summary>
            Construct a text node with a given text value.
            </summary>
            <param name="txtval">Value to assign to the Text property.</param>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.TextBase.Text"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.#ctor(Syncfusion.Windows.Forms.Diagram.TextNode)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for text nodes.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.GetTextBox">
            <summary>
            Returns the bounding box of the text object in local coordinates.
            </summary>
            <returns>Bounding box for text.</returns>
            <remarks>
            <para>
            This method returns the raw, untransformed bounding box for the
            text in local coordinates. No matrix transformations are applied
            by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.GetText">
            <summary>
            Method for getting the stored text.
            </summary>
            <returns>Text contained by this node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.SetText(System.String)">
            <summary>
            Method for setting the stored text.
            </summary>
            <param name="value">Text value to store.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.ConvertLogicalUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <param name="grfx">Graphics context object for converting device units.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.ConvertLogicalScale(System.Single,System.Single)">
            <summary>
            Converts the logical values contained by the object from one scale to
            another.
            </summary>
            <param name="fromScale">Scale to convert from.</param>
            <param name="toScale">Scale to convert to.</param>
            <remarks>
            <para>
            This method scales all logical unit values contained by the object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextNode.text">
            <summary>
            Text value of the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextNode.bounds">
            <summary>
            Text bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.Bounds">
            <summary>
            The text object's bounding box.
            </summary>
            <remarks>
            This property returns the bounds of the text object in world coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Bounds">
            <summary>
            Bounding box of the text node in local coordinates.
            </summary>
            <remarks>
            The value returned depends on the contents of the matrix stack. If the
            matrix stack is empty, then the value returned is in local coordinates.
            This method is generally used by functions that recursively traverse
            the node hierarchy, pushing and popping the matrix stack as they go.
            <seealso cref="F:Syncfusion.Windows.Forms.Diagram.Global.MatrixStack"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.TextNode.Bounds"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#X">
            <summary>
            X-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Y">
            <summary>
            Y-coordinate of the object's location.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Width">
            <summary>
            Width of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.Syncfusion#Windows#Forms#Diagram#ILocalBounds2DF#Height">
            <summary>
            Height of the object.
            </summary>
            <remarks>
            Specified in local coordinates.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ArcTool">
            <summary>
            Interactive tool for drawing arcs.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Arc"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Tool">
            <summary>
            Base class for user interface tools.
            </summary>
            <remarks>
            <para>
            A tool is an object that receives input from a controller and
            implements a piece of functionality or feature. Tools are helper
            objects that plug into a controller. Tools are attached to a
            controller using the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.RegisterTool(Syncfusion.Windows.Forms.Diagram.Tool)"/>
            method. Each tool has a
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Tool.Name"/> which
            must be unique within a controller. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.GetTool(System.String)"/>
            method in the controller can be used to look up a tool by
            name.
            </para>
            <para>
            Activation and deactivation of tools is coordinated by the controller.
            The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Controller.ActivateTool(System.String)"/>
            method activates a given tool. The controller notifies all other
            tools about the activation. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Tool.ToolActivating(Syncfusion.Windows.Forms.Diagram.Tool)"/>
            method is called by the controller when another tool is being
            activated, which gives the tool the opportunity to either suspend or
            cancel what it is doing. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Tool.ToolDeactivating(Syncfusion.Windows.Forms.Diagram.Tool)"/>
            method is called by the controller when another tool is being
            deactivated, which gives the tool the opportunity to resume what
            it was doing prior to being suspended.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Controller"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.#ctor(System.String)">
            <summary>
            Construct a tool with a given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.Activate">
            <summary>
            Activates the tool.
            </summary>
            <returns>True if tool is active.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.Deactivate">
            <summary>
            Deactivates the tool.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.Suspend">
            <summary>
            Puts the tool into a suspended state.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.Resume">
            <summary>
            Removes the tool from a suspended state.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.UserAbort">
            <summary>
            Called when the user presses the ESC key.
            </summary>
            <remarks>
            <para>
            This method is virtual and can be overridden in derived classes. The default
            implementation provided by this class deactivates the tool if it is active
            and in exclusive mode.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.ToolActivating(Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            Called when another tool is activating.
            </summary>
            <param name="tool">The tool that is being activated.</param>
            <remarks>
            Gives the tool the opportunity to suspend or deactivate itself.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.ToolDeactivating(Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            Called when another tool is in the process of being deactivated.
            </summary>
            <param name="tool">The tool that is being deactivated.</param>
            <remarks>
            Gives the tool the opportunity to resume after being suspended.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.OnControllerChange">
            <summary>
            Called when a controller is attached to the tool.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.SaveCursor">
            <summary>
            Saves the current cursor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.ChangeCursor(System.Windows.Forms.Cursor)">
            <summary>
            Changes the current cursor.
            </summary>
            <param name="newCursor">Cursor to use.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.RestoreCursor">
            <summary>
            Restores the saved cursor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.OnActivate">
            <summary>
            Called when the tool is activated.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.OnDeactivate">
            <summary>
            Called when the tool is deactivated.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Tool.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Tool.name">
            <summary>
            Name of the tool.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Tool.controller">
            <summary>
            Controller the tool is plugged into.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Tool.enabled">
            <summary>
            Flag indicating if the tool is enabled or disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Tool.active">
            <summary>
            Flag indicating if the tool is active or inactive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Tool.suspended">
            <summary>
            Flag indicating if the tool is in a suspended state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Tool.prevCursor">
            <summary>
            Cursor that is saved and restored.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Tool.Name">
            <summary>
            Name of the tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Tool.Controller">
            <summary>
            Controller that the tool is plugged into.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Tool.View">
            <summary>
            View attached to the controller that the tool is plugged into.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Tool.Enabled">
            <summary>
            Enables and disables the tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Tool.Active">
            <summary>
            Indicates if the tool is active.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Tool.Suspended">
            <summary>
            Indicates if the tool is currently suspended.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Tool.Exclusive">
            <summary>
            Indicates if the tool runs in exclusive mode when activated.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Tool.CanActivate">
            <summary>
            Indicates if the tool can activate.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Tool.CursorChanged">
            <summary>
            Indicates if the tool has changed the cursor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver">
            <summary>
            Interface implemented by tools that want to receive mouse events.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver.MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse down event occurs.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver.MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse move event occurs.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver.MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse up event occurs.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ArcTool.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ArcTool.#ctor(System.String)">
            <summary>
            Construct an ArcTool with the specified name.
            </summary>
            <param name="name">Name associated with the ArcTool.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ArcTool.OnActivate">
            <summary>
            Called when the ArcTool is activated.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ArcTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse down event is received.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ArcTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse move event is received.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ArcTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse up event is received.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ArcTool.OnArcComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ArcTool.DefaultFactory(System.Drawing.PointF[])">
            <summary>
            Default factory method for creating shapes for this tool.
            </summary>
            <param name="pts">Array of points to add to the new shape.</param>
            <returns>
            A <see cref="T:Syncfusion.Windows.Forms.Diagram.Arc"/> object
            consisting of the specified points.
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ArcTool.startingPt">
            <summary>
            First point clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ArcTool.endingPt">
            <summary>
            Last point clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ArcTool.drawing">
            <summary>
            Flag indicating if the tool is currently tracking the mouse.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ArcTool.shapeFactory">
            <summary>
            Factory method used to create shape objects drawn by this tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ArcTool.ShapeFactory">
            <summary>
            Factory method used to create shape objects inserted into
            the model by this tool.
            </summary>
            <remarks>
            <para>
            The default ShapeFactory creates a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Arc"/>
            object. An alternate factory method can be assigned to this property
            in order to create derived shapes and to configure the properties
            of the shape created.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ShapeFactory"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BitmapTool">
            <summary>
            Interactive tool for inserting bitmaps into a diagram.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.BitmapNode"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapTool.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BitmapTool.startingPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BitmapTool.drawing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BitmapTool.dragSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BitmapTool.bitmap">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BitmapTool.trackingRect">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BitmapTool.eraseTracking">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BitmapTool.pageUnit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BitmapTool.Bitmap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BitmapTool.DragSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IClickEventReceiver">
            <summary>
            This interface is implemented by tools that want to receive
            click and double-click events from the controller.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IClickEventReceiver.Click">
            <summary>
            Called when a click event occurs.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IClickEventReceiver.DoubleClick">
            <summary>
            Called when a double-click event occurs.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool">
            <summary>
            Interactive tool for drawing closed curves.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IClickEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ClosedCurve"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#Click">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#DoubleClick">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.OnClosedCurveComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.DefaultFactory(System.Drawing.PointF[])">
            <summary>
            Default factory method for creating shapes for this tool.
            </summary>
            <param name="pts">Array of points to add to the new shape.</param>
            <returns>
            A <see cref="T:Syncfusion.Windows.Forms.Diagram.ClosedCurve"/> object
            consisting of the specified points.
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.points">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.drawing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.tracking">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.shapeFactory">
            <summary>
            Factory method used to create shape objects drawn by this tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ClosedCurveTool.ShapeFactory">
            <summary>
            Factory method used to create shape objects inserted into
            the model by this tool.
            </summary>
            <remarks>
            <para>
            The default ShapeFactory creates a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ClosedCurve"/>
            object. An alternate factory method can be assigned to this property
            in order to create derived shapes and to configure the properties
            of the shape created.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ShapeFactory"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ControlNodeTool">
            <summary>
            Interactive tool for creating new <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> instances 
            and activating the Windows Forms Control hosted within existing nodes.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RectangleToolBase"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IClickEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IScrollEventReceiver"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RectangleToolBase">
            <summary>
            Base class for tools that draw tracking rectangles.
            </summary>
            <remarks>
            <para>
            This class provides a base implementation for tools that require the
            user to draw a rectangle. When a mouse down event is received, the
            point at which the event occurred becomes the first point in the
            rectangle. As the mouse moves, the rectangle is tracked. When a
            mouse up event is received, this class calls the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.OnRectangleComplete"/>
            method which is implemented by derived classes.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.OnRectangleComplete">
            <summary>
            Called when the tool is finished tracking the rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.startingPoint">
            <summary>
            Location of mouse down.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.drawing">
            <summary>
            Indicates if the tool is drawing a tracking rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.rect">
            <summary>
            Rectangle drawn by user.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RectangleToolBase.ReadyToDraw">
            <summary>
            Flag indicating if the tool is ready to start drawing the rectangle.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IScrollEventReceiver">
            <summary>
            Interface implemented by tools that want to receive scroll events.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IScrollEventReceiver.VerticalScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Called when a vertical scroll event occurs.
            </summary>
            <param name="e">Scroll event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IScrollEventReceiver.HorizontalScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Called when a horizontal scroll event occurs.
            </summary>
            <param name="e">Scroll event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNodeTool.#ctor">
            <summary>
            Creates a new instance of the ControlNodeTool.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNodeTool.#ctor(System.String)">
            <summary>
            Creates a new instance of the ControlNodeTool with the given name.
            </summary>
            <param name="name">The name of the tool.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNodeTool.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <override/>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNodeTool.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <override/>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNodeTool.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <override/>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNodeTool.OnRectangleComplete">
            <override/>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNodeTool.CreateControlNode(System.Drawing.RectangleF)">
            <summary>
            Creates a new ControlNode and inserts it into the diagram	
            </summary>
            <param name="bounds">The node bounds.</param>
            <returns>An instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> type.</returns> 		
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNodeTool.Node">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> to insert.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CurveTool">
            <summary>
            Interactive tool for drawing curves.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IClickEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Curve"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveTool.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#Click">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#DoubleClick">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveTool.OnCurveComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveTool.DefaultFactory(System.Drawing.PointF[])">
            <summary>
            Default factory method for creating shapes for this tool.
            </summary>
            <param name="pts">Array of points to add to the new shape.</param>
            <returns>
            A <see cref="T:Syncfusion.Windows.Forms.Diagram.Curve"/> object
            consisting of the specified points
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CurveTool.points">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CurveTool.drawing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CurveTool.tracking">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CurveTool.shapeFactory">
            <summary>
            Factory method used to create shape objects drawn by this tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CurveTool.ShapeFactory">
            <summary>
            Factory method used to create shape objects inserted into
            the model by this tool.
            </summary>
            <remarks>
            <para>
            The default ShapeFactory creates a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Curve"/>
            object. An alternate factory method can be assigned to this property
            in order to create derived shapes and to configure the properties
            of the shape created.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ShapeFactory"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EllipseTool">
            <summary>
            Interactive tool for drawing ellipses.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RectangleToolBase"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Ellipse"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EllipseTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EllipseTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EllipseTool.OnRectangleComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EllipseTool.DefaultFactory(System.Drawing.PointF[])">
            <summary>
            Default factory method for creating shapes for this tool.
            </summary>
            <param name="pts">Array of points to add to the new shape.</param>
            <returns>
            A <see cref="T:Syncfusion.Windows.Forms.Diagram.Ellipse"/> object
            consisting of the specified points
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EllipseTool.shapeFactory">
            <summary>
            Factory method used to create shape objects drawn by this tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EllipseTool.ShapeFactory">
            <summary>
            Factory method used to create shape objects inserted into
            the model by this tool.
            </summary>
            <remarks>
            <para>
            The default ShapeFactory creates a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Ellipse"/>
            object. An alternate factory method can be assigned to this property
            in order to create derived shapes and to configure the properties
            of the shape created.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ShapeFactory"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.GroupTool">
            <summary>
            Interactive tool for grouping the currently selected nodes in a diagram.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.GroupCmd"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GroupTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GroupTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GroupTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GroupTool.Exclusive">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.InsertNodeTool">
            <summary>
            Interactive tool for adding a node to the diagram.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertNodeTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertNodeTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertNodeTool.#ctor(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="nodeType"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertNodeTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertNodeTool.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertNodeTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertNodeTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertNodeTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertNodeTool.CalculateOffset(System.Drawing.Point)">
            <summary>
            Calculates the offset of the given point from the starting point of the move
            and performs snap to grid if necessary.
            </summary>
            <returns>X and Y offset of point from starting point.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertNodeTool.Exclusive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertNodeTool.Node">
            <summary>
            Node to insert.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertNodeTool.NodeType">
            <summary>
            Type of node to insert.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.InsertSymbolTool">
            <summary>
            Interactive tool for adding a symbol to the diagram.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertSymbolTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertSymbolTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertSymbolTool.#ctor(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="symbolType"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertSymbolTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertSymbolTool.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertSymbolTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertSymbolTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertSymbolTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InsertSymbolTool.CalculateOffset(System.Drawing.Point)">
            <summary>
            Calculates the offset of the given point from the starting point of the move
            and performs snap to grid if necessary.
            </summary>
            <returns>X and Y offset of point from starting point.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertSymbolTool.Exclusive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertSymbolTool.Symbol">
            <summary>
            Symbol to insert.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InsertSymbolTool.SymbolType">
            <summary>
            Type of symbol to insert.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IKeyboardEventReceiver">
            <summary>
            Interface implemented by tools that want to receive keyboard events.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IKeyboardEventReceiver.KeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key down event occurs.
            </summary>
            <param name="e">Key event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IKeyboardEventReceiver.KeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key up event occurs.
            </summary>
            <param name="e">Key event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IKeyboardEventReceiver.KeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called when a key is pressed.
            </summary>
            <param name="e">Key press event arguments.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineTool">
            <summary>
            Interactive tool for drawing lines.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Line"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineTool.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineTool.#ctor(System.String)">
            <summary>
            Construct a line tool with a given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineTool.OnActivate">
            <summary>
            Called when the LineTool is activated.
            </summary>
            <remarks>
            <para>
            Changes the cursor to a cross.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineTool.OnDeactivate">
            <summary>
            Called when the LineTool is deactived.
            </summary>
            <remarks>
            <para>
            Restores the cursor.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse down event is received.
            </summary>
            <param name="e">Mouse event arguments.</param>
            <remarks>
            <para>
            If the tool is active, this method saves the location of the mouse
            click as the first point in the line and begins the process of
            tracking mouse movements and drawing the line.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse move event is received.
            </summary>
            <param name="e">Mouse event arguments.</param>
            <remarks>
            <para>
            If the tool is active, this method draws a tracking line between the
            starting point (first point clicked) and the current mouse location.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse up event is received.
            </summary>
            <param name="e">Mouse event arguments.</param>
            <remarks>
            <para>
            If the tool is active, this method takes the starting point (first
            point clicked) and the location of the mouse up event and creates
            a line shape using the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LineTool.ShapeFactory"/>.
            Then it executes an insert command to add the new line shape to the
            diagram.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.LineTool.ShapeFactory"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineTool.OnLineComplete">
            <summary>
            Called after the user draws the line with the mouse.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineTool.DefaultFactory(System.Drawing.PointF[])">
            <summary>
            Default factory method for creating shapes for this tool.
            </summary>
            <param name="pts">Array of points to add to the new shape.</param>
            <returns>
            A <see cref="T:Syncfusion.Windows.Forms.Diagram.Line"/> object
            consisting of the specified points.
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineTool.startingPoint">
            <summary>
            First point clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineTool.endingPoint">
            <summary>
            Last point clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineTool.drawing">
            <summary>
            Flag indicating if the tool is currently drawing a line.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineTool.shapeFactory">
            <summary>
            Factory method used to create shape objects drawn by this tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineTool.ShapeFactory">
            <summary>
            Factory method used to create shape objects inserted into
            the model by this tool.
            </summary>
            <remarks>
            <para>
            The default ShapeFactory creates a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Line"/>
            object. An alternate factory method can be assigned to this property
            in order to create derived shapes and to configure the properties
            of the shape created.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ShapeFactory"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LinkTool">
            <summary>
            Interactive tool for linking symbols together.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LinkCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveLinkCmd"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTool.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTool.InitTrackingPoints">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTool.InitTrackingPoints(System.Drawing.Point)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTool.UpdateTrackingPoints(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkTool.HitTestLinkPorts(Syncfusion.Windows.Forms.Diagram.Link,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="ptScreen"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkTool.LinkFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkTool.HitTestSlop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkTool.SelectedLink">
            <summary>
            Returns the first node in the controller's selection list as a link.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MetafileTool">
            <summary>
            Interactive tool for inserting metafiles into a diagram.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MetafileNode"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileTool.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileTool.startingPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileTool.drawing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileTool.dragSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileTool.metafile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileTool.trackingRect">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileTool.eraseTracking">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileTool.metafileUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetafileTool.Metafile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetafileTool.DragSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MoveTool">
            <summary>
            Interactive tool for moving nodes on a diagram.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveCmd"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveTool.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveTool.#ctor(System.String)">
            <summary>
            Construct a MoveTool with a given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveTool.OnActivate">
            <summary>
            Called when the tool is activated.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveTool.OnDeactivate">
            <summary>
            Called when the tool is deactivated.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse down event is received.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse move event is received.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse up event is received.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveTool.GetAllowedNodes(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Returns a collection of nodes that are allowed to move.
            </summary>
            <param name="nodesIn">Nodes to test.</param>
            <returns>Collection of nodes that can move.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveTool.CalculateOffset(System.Drawing.Point)">
            <summary>
            Calculates the offset of the given point from the starting point of the move
            and performs snap to grid if necessary.
            </summary>
            <returns>X and Y offset of point from starting point.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MoveTool.moving">
            <summary>
            Flag indicating if the user is current dragging with the mouse.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MoveTool.ready">
            <summary>
            Indicates if tool is ready to start dragging nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MoveTool.startingPoint">
            <summary>
            Point at which mouse down occurred.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MoveTool.currentOffset">
            <summary>
            Offset of current mouse position from the original mouse position.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MoveTool.upperLeft">
            <summary>
            Upper-left hand corner of aggregate bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MoveTool.tracker">
            <summary>
            Object that tracks movement of the nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool">
            <summary>
            Interactive tool for drawing orthogonal lines.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalLine"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.OnOrthogonalLineComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.DefaultFactory(System.Drawing.PointF[])">
            <summary>
            Default factory method for creating shapes for this tool.
            </summary>
            <param name="pts">Array of points to add to the new shape.</param>
            <returns>
            A <see cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalLine"/> object
            consisting of the specified points
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.startingPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.endingPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.drawing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.shapeFactory">
            <summary>
            Factory method used to create shape objects drawn by this tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLineTool.ShapeFactory">
            <summary>
            Factory method used to create shape objects inserted into
            the model by this tool.
            </summary>
            <remarks>
            <para>
            The default ShapeFactory creates a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalLine"/>
            object. An alternate factory method can be assigned to this property
            in order to create derived shapes and to configure the properties
            of the shape created.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ShapeFactory"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PanTool">
            <summary>
            Interactive tool for panning (scrolling) the view of a diagram.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.Origin"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PanTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PanTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PanTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PanTool.ToolActivating(Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            
            </summary>
            <param name="tool"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PanTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PanTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PanTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PanTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#Click">
            <summary>
            Called when a click event occurs.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PanTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#DoubleClick">
            <summary>
            Called when a double-click event occurs.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PanTool.panning">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PanTool.startingPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PanTool.originStart">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PolygonTool">
            <summary>
            Interactive tool for drawing polygons.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IClickEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Polygon"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolygonTool.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolygonTool.#ctor(System.String)">
            <summary>
            Construct a PolygonTool with the specified name.
            </summary>
            <param name="name">Name to assign to polygon tool.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolygonTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolygonTool.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolygonTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolygonTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolygonTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolygonTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#Click">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolygonTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#DoubleClick">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolygonTool.OnPolygonComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolygonTool.DefaultFactory(System.Drawing.PointF[])">
            <summary>
            Default factory method for creating shapes for this tool.
            </summary>
            <param name="pts">Array of points to add to the new shape.</param>
            <returns>
            A <see cref="T:Syncfusion.Windows.Forms.Diagram.Polygon"/> object
            consisting of the specified points
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PolygonTool.points">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PolygonTool.drawing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PolygonTool.tracking">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PolygonTool.shapeFactory">
            <summary>
            Factory method used to create shape objects drawn by this tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PolygonTool.ShapeFactory">
            <summary>
            Factory method used to create shape objects inserted into
            the model by this tool.
            </summary>
            <remarks>
            <para>
            The default ShapeFactory creates a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Polygon"/>
            object. An alternate factory method can be assigned to this property
            in order to create derived shapes and to configure the properties
            of the shape created.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ShapeFactory"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PolyLineTool">
            <summary>
            Interactive tool for drawing polylines.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IClickEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PolyLine"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineTool.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#Click">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#DoubleClick">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineTool.OnPolyLineComplete">
            <summary>
            Called to insert the polyline into the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineTool.DefaultFactory(System.Drawing.PointF[])">
            <summary>
            Default factory method for creating shapes for this tool.
            </summary>
            <param name="pts">Array of points to add to the new shape.</param>
            <returns>
            A <see cref="T:Syncfusion.Windows.Forms.Diagram.PolyLine"/> object
            consisting of the specified points
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PolyLineTool.points">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PolyLineTool.trackingPts">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PolyLineTool.drawing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PolyLineTool.tracking">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PolyLineTool.shapeFactory">
            <summary>
            Factory method used to create shape objects drawn by this tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PolyLineTool.ShapeFactory">
            <summary>
            Factory method used to create shape objects inserted into
            the model by this tool.
            </summary>
            <remarks>
            <para>
            The default ShapeFactory creates a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.PolyLine"/>
            object. An alternate factory method can be assigned to this property
            in order to create derived shapes and to configure the properties
            of the shape created.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ShapeFactory"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PortTool">
            <summary>
            Interactive tool for inserting ports into a diagram.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Port"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortTool.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PortTool.drawing">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RectangleTool">
            <summary>
            Interactive tool for drawing rectangles.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RectangleToolBase"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Rectangle"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleTool.OnRectangleComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RectangleTool.DefaultFactory(System.Drawing.PointF[])">
            <summary>
            Default factory method for creating shapes for this tool.
            </summary>
            <param name="pts">Array of points to add to the new shape.</param>
            <returns>
            A <see cref="T:Syncfusion.Windows.Forms.Diagram.Rectangle"/> object
            consisting of the specified points
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RectangleTool.shapeFactory">
            <summary>
            Factory method used to create shape objects drawn by this tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RectangleTool.ShapeFactory">
            <summary>
            Factory method used to create shape objects inserted into
            the model by this tool.
            </summary>
            <remarks>
            <para>
            The default ShapeFactory creates a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Rectangle"/>
            object. An alternate factory method can be assigned to this property
            in order to create derived shapes and to configure the properties
            of the shape created.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ShapeFactory"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ResizeTool">
            <summary>
            Interactive tool for resizing nodes.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ResizeCmd"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ResizeTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ResizeTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ResizeTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ResizeTool.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ResizeTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ResizeTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ResizeTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ResizeTool.SetCursor(Syncfusion.Windows.Forms.Diagram.BoxPosition)">
            <summary>
            
            </summary>
            <param name="handlePos"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ResizeTool.nodeHit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ResizeTool.handleHit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ResizeTool.startBounds">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ResizeTool.curBounds">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RichTextTool">
            <summary>
            Interactive tool for inserting and editing rich text objects.
            </summary>
            <remarks>
            <para>
            This tool manages the insertion of new rich text nodes into a diagram
            and editing of existing rich text nodes. Activating this tool causes it
            to track mouse down, mouse move, and mouse up events and draw a
            tracking rectangle. The rectangle drawn is used as the bounds of
            a new rich text node, which is inserted into the diagram using an
            InsertNodesCmd.
            </para>
            <para>
            This tool also listens for double-click events. If the user double
            clicks on a rich text node, this tool opens a text editor allowing the
            user to edit the text.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RectangleToolBase"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IClickEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RichTextNode"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.#ctor(System.String)">
            <summary>
            Construct a RichTextTool with the specified name.
            </summary>
            <param name="name">Name to associate with the RichTextTool object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#Click">
            <summary>
            Called when a mouse click event occurs.
            </summary>
            <remarks>
            <para>
            Currently not used.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#DoubleClick">
            <summary>
            Called when a mouse double-click event occurs.
            </summary>
            <remarks>
            <para>
            When a text node or label is double clicked, this method calls
            the <see cref="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.EditText(Syncfusion.Windows.Forms.Diagram.RichTextNode)"/>
            method to open a text editor.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.EditText(Syncfusion.Windows.Forms.Diagram.RichTextNode)"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RichTextEdit"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse down event is received.
            </summary>
            <param name="e">Mouse event arguments.</param>
            <remarks>
            <para>
            Mouse down events end text editing.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.EditText(Syncfusion.Windows.Forms.Diagram.RichTextNode)">
            <summary>
            Creates a rich text edit control for editing the given rich text node.
            </summary>
            <param name="rtfNode">Rich text node to edit.</param>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RichTextEdit"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.EndEdit(System.Boolean)">
            <summary>
            Called to exit the editor.
            </summary>
            <param name="saveChanges">Flag indicating if changes should be saved.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.InsertText(System.Drawing.RectangleF)">
            <summary>
            Creates a new rich text node and inserts it into the diagram.
            </summary>
            <param name="bounds">Bounds of the new rich text node.</param>
            <remarks>
            <para>
            This method uses the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.RichTextTool.RichTextFactory"/>
            to create a new rich text node. Then it inserts the new rich text node into
            the diagram and opens a text editor to edit the text.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.OnRectangleComplete">
            <summary>
            Called when the tool is finished tracking the rectangle.
            </summary>
            <remarks>
            <para>
            When the tool is finished tracking the rectangle, this method
            is called. It inserts a new rich text node that has the same bounds
            as the rectangle drawn.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.OnDeactivate">
            <summary>
            Called when the tool is deactivated.
            </summary>
            <remarks>
            <para>
            If the TextTool has a text editor open, this method closes
            it by calling <see cref="M:Syncfusion.Windows.Forms.Diagram.TextTool.EndEdit(System.Boolean)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.DefaultFactory(System.Drawing.RectangleF,System.String)">
            <summary>
            Default factory method for creating rich text nodes for this tool.
            </summary>
            <param name="bounds">Bounding box for new text node.</param>
            <param name="text">Text value to assign to node.</param>
            <returns>
            A <see cref="T:Syncfusion.Windows.Forms.Diagram.RichTextNode"/> object
            with the specified bounds
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextTool.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ITextEditor"/>,
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextTool.defaultText">
            <summary>
            Default text value assigned to new rich text nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextTool.textEditor">
            <summary>
            Currently active text editor component.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextTool.richTextFactory">
            <summary>
            Factory method for creating new rich text nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextTool.DefaultText">
            <summary>
            Default text value assigned to new text nodes created by this tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextTool.RichTextFactory">
            <summary>
            Factory method used to create rich text objects inserted into
            the model by this tool.
            </summary>
            <remarks>
            <para>
            The default RichTextFactory creates a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.RichTextNode"/>
            object. An alternate factory method can be assigned to this property
            in order to create derived text objects and to configure the properties
            of the object created.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RichTextFactory"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextTool.IsEditingText">
            <summary>
            Flag indicating if the tool currently has a text editor open.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextTool.ReadyToDraw">
            <summary>
            Flag indicating if the tool is ready to start drawing the rectangle.
            </summary>
            <remarks>
            <para>
            True if the tool is not currently in text edit mode; False if it is.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RotateTool">
            <summary>
            Interactive tool for rotating nodes.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RotateCmd"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotateTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotateTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotateTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotateTool.OnDeactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotateTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotateTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotateTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotateTool.HitTest(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotateTool.IsNodeAllowed(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RotateTool.tracking">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RotateTool.nodeHit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RotateTool.posHandle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RotateTool.origin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RotateTool.startPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RotateTool.trackingRect">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RotateTool.currentPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RotateTool.grfxPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RotateTool.CurrentAngle">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RoundRectTool">
            <summary>
            Summary description for RoundRectTool.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRectTool.#ctor">
            <summary>
            Interactive tool for drawing rounded rectangles.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RectangleToolBase"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRectTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRectTool.OnRectangleComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRectTool.DefaultFactory(System.Drawing.PointF[])">
            <summary>
            Default factory method for creating shapes for this tool.
            </summary>
            <param name="pts">Array of points to add to the new shape.</param>
            <returns>
            A <see cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/> object
            consisting of the specified points.
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RoundRectTool.shapeFactory">
            <summary>
            Factory method used to create shape objects drawn by this tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RoundRectTool.ShapeFactory">
            <summary>
            Factory method used to create shape objects inserted into
            the model by this tool.
            </summary>
            <remarks>
            <para>
            The default ShapeFactory creates a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/>
            object. An alternate factory method can be assigned to this property
            in order to create derived shapes and to configure the properties
            of the shape created.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ShapeFactory"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SelectMode">
            <summary>
            Specifies the selection mode used by the <see cref="T:Syncfusion.Windows.Forms.Diagram.SelectTool"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SelectMode.Intersecting">
            <summary>
            Specfies that objects intersecting the tracking rectangle will be selected by the tool.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SelectMode.Containing">
            <summary>
            Specifies that objects fully enveloped by the tracking rectangle will be selected by the tool.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SelectTool">
            <summary>
            Interactive tool for changing the current selected nodes in a diagram.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SelectTool.#ctor">
            <summary>
            Creates a new instance of the SelectTool.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SelectTool.#ctor(System.String)">
            <summary>
            Creates a new instance of the SelectTool with the given name.
            </summary>
            <param name="name">The name of the tool.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SelectTool.Resume">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SelectTool.OnActivate">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SelectTool.OnDeactivate">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SelectTool.Exclusive">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SelectTool.SelectMode">
            <summary>
            Gets or sets the selection mode for the tool.		
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Diagram.SelectMode"/> value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TextTool">
            <summary>
            Interactive tool for inserting text nodes into a diagram and editing
            existing text nodes.
            </summary>
            <remarks>
            <para>
            This tool manages the insertion of new text nodes into a diagram
            and editing of existing text nodes. Activating this tool causes it
            to track mouse down, mouse move, and mouse up events and draw a
            tracking rectangle. The rectangle drawn is used as the bounds of
            a new text node, which is inserted into the diagram using an
            InsertNodesCmd.
            </para>
            <para>
            This tool also listens for double-click events. If the user double
            clicks on a text node, this tool opens a text editor allowing the
            user to edit the text.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertNodesCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextNode"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.#ctor(System.String)">
            <summary>
            Construct a TextTool with the specified name.
            </summary>
            <param name="name">Name to associate with the TextTool object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#Click">
            <summary>
            Called when a mouse click event occurs.
            </summary>
            <remarks>
            <para>
            Currently not used.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.Syncfusion#Windows#Forms#Diagram#IClickEventReceiver#DoubleClick">
            <summary>
            Called when a mouse double-click event occurs.
            </summary>
            <remarks>
            <para>
            When a text node or label is double clicked, this method calls
            the <see cref="M:Syncfusion.Windows.Forms.Diagram.TextTool.EditText(Syncfusion.Windows.Forms.Diagram.TextBase,System.Boolean)"/>
            method to open a text editor.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.TextTool.EditText(Syncfusion.Windows.Forms.Diagram.TextBase,System.Boolean)"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextEdit"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse down event is received.
            </summary>
            <param name="e">Mouse event arguments.</param>
            <remarks>
            <para>
            Mouse down events end text editing.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.EditText(Syncfusion.Windows.Forms.Diagram.TextBase,System.Boolean)">
            <summary>
            Creates a text edit control for editing the given text object.
            </summary>
            <param name="textObj">Text object to edit.</param>
            <param name="autoResize">Indicates if text box should be automatically resized.</param>
            <remarks>
            A TextEdit control is created and attached to the given TextBase
            object. The TextEdit control updates the value of the TextBase
            object with changes made by the user. The controller can have
            only one TextEdit control open at a time.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextBase"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextEdit"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.EditText(Syncfusion.Windows.Forms.Diagram.TextBase,System.Drawing.SizeF,System.Boolean)">
            <summary>
            Creates an text edit control for editing the given text object.
            </summary>
            <param name="textObj">Text object to edit.</param>
            <param name="maxSize">Maximum size the text object can grow to.</param>
            <param name="autoResize">Indicates if text box should be automatically resized.</param>
            <remarks>
            A TextEdit control is created and attached to the given TextBase
            object. The TextEdit control updates the value of the TextBase
            object with changes made by the user. The controller can have
            only one TextEdit control open at a time.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextBase"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextEdit"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.EndEdit(System.Boolean)">
            <summary>
            Called to close the text editor.
            </summary>
            <param name="saveChanges">Flag indicating if changes should be saved.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.InsertText(System.Drawing.RectangleF)">
            <summary>
            Creates a new text node and inserts it into the diagram.
            </summary>
            <param name="bounds">Bounds of the new text node.</param>
            <remarks>
            <para>
            This method uses the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.TextTool.TextFactory"/>
            to create a new text node. Then it inserts the new text node into
            the diagram and opens a text editor to edit the new text node.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.OnRectangleComplete">
            <summary>
            Called when the tool is finished tracking the rectangle.
            </summary>
            <remarks>
            <para>
            When the tool is finished tracking the rectangle, this method
            is called. It inserts a new text node that has the same bounds
            as the rectangle drawn.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.OnDeactivate">
            <summary>
            Called when the tool is deactivated.
            </summary>
            <remarks>
            <para>
            If the TextTool has a text editor open, this method closes
            it by calling <see cref="M:Syncfusion.Windows.Forms.Diagram.TextTool.EndEdit(System.Boolean)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.TextEdit_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key up event is received from the text editor.
            </summary>
            <param name="sender">TextEdit object sending the event.</param>
            <param name="e">Event arguments.</param>
            <remarks>
            <para>Closes the editor when the enter key is pressed.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.DefaultFactory(System.Drawing.RectangleF,System.String)">
            <summary>
            Default factory method for creating text nodes for this tool.
            </summary>
            <param name="bounds">Bounding box for new text node.</param>
            <param name="text">Text value to assign to node.</param>
            <returns>
            A <see cref="T:Syncfusion.Windows.Forms.Diagram.TextNode"/> object
            with the specified bounds.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextTool.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ITextEditor"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextTool.defaultText">
            <summary>
            Default text value assigned to new text nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextTool.textEditor">
            <summary>
            Currently active text editor component.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextTool.textFactory">
            <summary>
            Factory method for creating new text nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextTool.DefaultText">
            <summary>
            Default text value assigned to new text nodes created by this tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextTool.TextFactory">
            <summary>
            Factory method used to create text objects inserted into
            the model by this tool.
            </summary>
            <remarks>
            <para>
            The default TextFactory creates a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.TextNode"/>
            object. An alternate factory method can be assigned to this property
            in order to create derived text objects and to configure the properties
            of the object created.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.TextFactory"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextTool.IsEditingText">
            <summary>
            Flag indicating if the tool currently has a text editor open.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextTool.ReadyToDraw">
            <summary>
            Flag indicating if the tool is ready to start drawing the rectangle.
            </summary>
            <remarks>
            <para>
            True if the tool is not currently in text edit mode; False if it is.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.UngroupTool">
            <summary>
            Interactive tool for ungrouping the currently selected group in a diagram.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.UngroupCmd"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UngroupTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UngroupTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UngroupTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.UngroupTool.Exclusive">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VertexEditTool">
            <summary>
            Interactive tool for editing the vertices of a shape.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveVertexCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.DeleteVertexCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPoints"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexEditTool.#ctor">
            <summary>
            Construct a vertex edit tool.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexEditTool.#ctor(System.String)">
            <summary>
            Construct a vertex edit tool with the specified name.
            </summary>
            <param name="name">Name to assign to the tool.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexEditTool.OnActivate">
            <summary>
            Called when the tool is activated.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexEditTool.OnDeactivate">
            <summary>
            Called when the tool is deactivated.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexEditTool.ToolActivating(Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            Called when another tool is being activated.
            </summary>
            <param name="tool">Tool that is being activated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexEditTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse down event is received.
            </summary>
            <param name="e">Event arguments.</param>
            <remarks>
            <para>
            Left mouse click on a vertex starts the process of moving the vertex. If
            the tool is not yet active and the vertex hit belongs to a node whose
            default handle edit mode is vertex, then the tool is activated.
            </para>
            <para>
            When the tool is active, a left mouse click on a line segment belonging
            to the selected node causes a new vertex to be inserted.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexEditTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse move event is received.
            </summary>
            <param name="e">Event arguments.</param>
            <remarks>
            <para>
            If the tool is active and in the process of moving a vertex, the change
            in cursor position is tracked.
            </para>
            <para>
            If the tool is active and the control key is pressed, then rolling over
            a vertex in the selected node causes the cursor to change to an X to
            indicate that the delete option is available.
            </para>
            <para>
            If the tool is activate and the mouse rolls over a line segment, the mouse
            changes to indicate that a vertex can be inserted.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexEditTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse up event is received.
            </summary>
            <param name="e">Event arguments.</param>
            <remarks>
            <para>
            If the tool is active, mouse up causes the appropriate command to be
            executed.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.MoveVertexCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.DeleteVertexCmd"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.InsertVertexCmd"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VertexEditTool.CanActivate">
            <summary>
            Flag indicating if the tool can be activated.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ZoomTool">
            <summary>
            Interactive tool for zooming in and out of a diagram's view.
            </summary>
            <remarks>
            <para>
            Left click increases magnification by 25%. Right click decreases
            magnification by 25%.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Tool"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IMouseEventReceiver"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.Magnification"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZoomTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZoomTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZoomTool.OnActivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZoomTool.ToolActivating(Syncfusion.Windows.Forms.Diagram.Tool)">
            <summary>
            
            </summary>
            <param name="tool"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZoomTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZoomTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZoomTool.Syncfusion#Windows#Forms#Diagram#IMouseEventReceiver#MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ZoomTool.ZoomIncrement">
            <summary>
            Amount to zoom each time the mouse is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ZoomTool.MinimumMagnification">
            <summary>
            Minimum magnication value the tool will zoom to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ZoomTool.MaximumMagnification">
            <summary>
            Maximum magnification value the tool will zoom to.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeTracker">
            <summary>
            Base class for node tracker classes.
            </summary>
            <remarks>
            <para>
            This class defines an abstract interface for tracking one or more
            nodes as they are being dragged. Node trackers typically draw the
            outline of the nodes using dashed lines.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeBoundsTracker"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodePathTracker"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeTracker.#ctor(Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Construct a node tracker and attach it to the given view.
            </summary>
            <param name="view">View to attach to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeTracker.Move(System.Int32,System.Int32)">
            <summary>
            Moves the nodes by a given X and Y offset.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeTracker.Erase">
            <summary>
            Erases the current tracking outline from the view.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodeTracker.view">
            <summary>
            View to draw on.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodeTracker.ptUpperLeft">
            <summary>
            Upper-left hand corner of the tracking position.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodeTracker.validPosition">
            <summary>
            Indicates if the current position is valid.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeTracker.UpperLeft">
            <summary>
            Returns the most recent tracking position of the nodes.
            </summary>
            <remarks>
            This point represents the upper-left hand corner of a
            bounding rectangle that is the union of the nodes being
            tracked.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeTracker.IsValidPosition">
            <summary>
            Indicates if the current position is valid within the constraining region.
            </summary>
            <remarks>
            <para>
            This flag is True if all nodes are in a valid position. It is False if
            any node violates its constraining region.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeBoundsTracker">
            <summary>
            Tracks the rectangular bounds of a collection of nodes.
            </summary>
            <remarks>
            <para>
            This class implements a node tracker the draws the outline of the
            rectangular bounds of a collection of nodes.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeTracker"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeBoundsTracker.#ctor(Syncfusion.Windows.Forms.Diagram.View,Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Constructs NodeTracker from a given view and node collection.
            </summary>
            <param name="view">View to render onto.</param>
            <param name="nodes">Collection of nodes to track.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeBoundsTracker.#ctor(Syncfusion.Windows.Forms.Diagram.View,Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Constructs NodeTracker from a given view and node collection.
            </summary>
            <param name="view">View to render onto.</param>
            <param name="node">Node to track.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeBoundsTracker.Move(System.Int32,System.Int32)">
            <summary>
            Moves the nodes by a given X and Y offset.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeBoundsTracker.Erase">
            <summary>
            Erases the current tracking outline from the view.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodeBoundsTracker.nodeBounds">
            <summary>
            Bounding rectangles of the nodes being tracked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodeBoundsTracker.trackingRects">
            <summary>
            Rectangles that need to be erased.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodePathTracker">
            <summary>
            Tracks the graphic paths of a collection of nodes.
            </summary>
            <remarks>
            <para>
            This class implements a node tracker that draws the outline of the
            regions of a collection of nodes. In other words, this class tracks
            the actual outline of the object, not just the bounding boxes.
            A System.Drawing.Drawing2D.GraphicsPath object is created for each
            node by calling the node's
            <see cref="P:Syncfusion.Windows.Forms.Diagram.IGraphics.GraphicsPath"/>
            method. Nodes that do not support the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IGraphics"/>
            interface are tracked using their bounding boxes.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.NodeTracker"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodePathTracker.#ctor(Syncfusion.Windows.Forms.Diagram.View,Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Construct a NodePathTracker given a view and a node.
            </summary>
            <param name="view">View to attach to.</param>
            <param name="node">Node to track.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodePathTracker.#ctor(Syncfusion.Windows.Forms.Diagram.View,Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Constructs a NodePathTracker object given a view and a collection
            of nodes to track.
            </summary>
            <param name="view">View to attach to.</param>
            <param name="nodes">Collection of nodes to track.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodePathTracker.Move(System.Int32,System.Int32)">
            <summary>
            Moves the nodes by a given X and Y offset.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodePathTracker.Erase">
            <summary>
            Erases the current tracking outline from the view.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodePathTracker.trackingPath">
            <summary>
            GraphicsPath to draw onto the view.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodePathTracker.rgnConstraint">
            <summary>
            Region that the nodes are constrained to.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodePathTracker.trackingXform">
            <summary>
            Matrix used to transform the tracking path.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodePathTracker.rectErase">
            <summary>
            Rectangle to erase.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodePathTracker.rectCurrent">
            <summary>
            Bounds of current tracking path.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodePathTracker.prevCursor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BackgroundStyleConverter">
            <summary>
            Summary description for BackgroundStyleConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BorderStyleConverter">
            <summary>
            Summary description for BorderStyleConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BorderStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BorderStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BorderStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ControllerConverter">
            <summary>
            Summary description for ControllerConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControllerConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControllerConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControllerConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EditStyleConverter">
            <summary>
            Summary description for EditStyleConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FillStyleConverter">
            <summary>
            Summary description for FillStyleConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FontStyleConverter">
            <summary>
            Summary description for FontStyleConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LabelStyleConverter">
            <summary>
            Summary description for LabelStyleConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayoutGridConverter">
            <summary>
            Summary description for LayoutGridConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGridConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGridConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGridConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorConverter">
            <summary>
            Summary description for EndPointDecoratorConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineStyleConverter">
            <summary>
            Summary description for LineStyleConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ModelConverter">
            <summary>
            Summary description for ModelConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ModelConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ModelConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ModelConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PointFConverter">
            <summary>
            Summary description for PointFConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PointFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PointFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PointFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PointFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RenderingStyleConverter">
            <summary>
            Summary description for RenderingStyleConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RulerConverter">
            <summary>
            Summary description for RulerConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RulerConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RulerConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RulerConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ScriptConverter">
            <summary>
            Summary description for ScriptConverter.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ShadowStyleConverter">
            <summary>
            Summary description for ShadowStyleConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SizeFConverter">
            <summary>
            Summary description for SizeFConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TrackingStyleConverter">
            <summary>
            Summary description for TrackingStyleConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TrackingStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TrackingStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TrackingStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewConverter">
            <summary>
            Summary description for ViewConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SetBounds">
            <summary>
            Sets the bounds of a node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetBounds.#ctor(Syncfusion.Windows.Forms.Diagram.IBounds2DF,System.Drawing.RectangleF)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetBounds.Do(System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SetBounds.boundsObj">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SetBounds.boundingRect">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TranslateNode">
            <summary>
            Translates a node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TranslateNode.#ctor(Syncfusion.Windows.Forms.Diagram.ITransform,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TranslateNode.Do(System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TranslateNode.nodeXform">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TranslateNode.dx">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TranslateNode.dy">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.DiagramBaseAssembly">
            <summary>
            This class holds the name of the grid assembly and provides a helper
            routine that helps with resolving types when loading a serialization stream.
            </summary>
        </member>
        <member name="F:Syncfusion.DiagramBaseAssembly.Name">
            <summary>
            The full name of this assembly without version information, e.g. "Syncfusion.Grid".
            </summary>
        </member>
        <member name="F:Syncfusion.DiagramBaseAssembly.Assembly">
            <summary>
            A reference to the <see cref="T:System.Reflection.Assembly"/> for the Diagram assembly.
            </summary>
        </member>
        <member name="M:Syncfusion.DiagramBaseAssembly.AssemblyResolver(System.Object,System.ResolveEventArgs)">
            <summary>
            This delegate helps with resolving types and can be used as an event handler
            for a <see cref="E:System.AppDomain.AssemblyResolve"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data with information about the type.</param>
            <returns>A reference to the assembly where the type is located.</returns>
            <remarks>
            Use this handler when reading back types from a serialization stream
            saved with an earlier version of this assembly.
            </remarks>
        </member>
        <member name="T:Syncfusion.DiagramBaseAssembly.Binder">
            The Binder class helps with the resolution of Diagram types between different versions of
            the Syncfusion assemblies.
            <internalonly/>
        </member>
    </members>
</doc>
