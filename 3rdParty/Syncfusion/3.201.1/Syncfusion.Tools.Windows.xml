<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Tools.Windows</name>
    </assembly>
    <members>
        <member name="M:Syncfusion.Windows.Forms.MdiWindowDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MdiWindowDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethods.GetUserDefaultLCID">
            <summary>
            Interop call to get the LCID of the current culture.
            </summary>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethods.GetStringTypeEx(System.UInt32,Syncfusion.Runtime.InteropServices.NativeMethods.StringInfoType,System.String,System.Int32,System.UInt16[])">
            <summary>
            Retrieves character-type information for the characters in the specified source string.
            </summary>
            <param name="Locale">Value that specifies the locale identifier.</param>
            <param name="dwInfoType">Value that specifies the type of character information the user wants to retrieve.</param>
            <param name="lpSrcStr">Pointer to the string for which character types are requested.</param>
            <param name="cchSrc">Size, in characters, of the string pointed to by the lpSrcStr parameter.</param>
            <param name="lpCharType">Pointer to an array of 16-bit values.</param>
            <returns>Boolean result, indicates success of WinAPI call</returns>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethods.SetRedrawWindow(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn
            or to prevent changes in that window from being redrawn.
            </summary>
            <param name="hWnd">handle to the native window.</param>
            <param name="bRedraw">Specifies the redraw state.
            If this parameter is true, the content can be redrawn after a change.
            If this parameter is false, the content cannot be redrawn after a change.</param>
            <param name="bForceRedraw">Forces redraw of the window via <see cref="M:Syncfusion.Runtime.InteropServices.NativeMethods.RedrawWindow(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32)"/>.
            Works only if <c>bRedraw</c> is <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethods.SetRedrawWindow(System.IntPtr,System.Boolean)">
            <summary>
            Overload of <see cref="!:Syncfusion.InteropServices.NativeMethods.SetRedrawWindow"/>
            Forcefully redraws window if redraw is enabled.
            </summary>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethods.Util.GetPInvokeStringLength(System.String)">
            <summary>
            omputes the string size that should be passed to a typical Win32 call.
            his will be the character count under NT, and the ubyte count for Win95.
            </summary>
            <param EntryPoint="s">
            he string to get the size of.
            </param>
            <returns>
            he count of characters or bytes, depending on what the pinvoke
            all wants
            </returns>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.NativeMethods.StringInfoType">
            <summary>
            Specifies the type of character information the user wants to retrieve.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.NativeMethods.StringInfoType.CT_TYPE1">
            <summary>
            Retrieves character type info
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.NativeMethods.StringInfoType.CT_TYPE2">
            <summary>
            Retrieves bi-directional layout info
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.NativeMethods.StringInfoType.CT_TYPE3">
            <summary>
            Retrieves text processing info
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.NativeMethods.StringInfoCtype1">
            <summary>
            These types support ANSI C and POSIX (LC_CTYPE) character-typing functions.
            A combination of these values is returned in the array pointed to by the lpCharType parameter
            when the dwInfoType parameter is set to CT_CTYPE1.
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.NativeMethods.StringInfoCtype2">
            <summary>
            These types support proper layout of Unicode text. The direction attributes are assigned
            so that the bidirectional layout algorithm standardized by Unicode produces accurate results.
            These types are mutually exclusive.
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.NativeMethods.StringInfoCtype3">
            <summary>
            These types are intended to be placeholders for extensions to the POSIX types required for general text processing
            or for the standard C library functions. A combination of these values is returned when dwInfoType is set to CT_CTYPE3.
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.NativeMethods.DialogCodes">
            <summary>
            Values, indicating which type of input the application processes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoComplete">
             <summary>
             The AutoComplete class provides auto completion capabilities for
             edit controls (<see cref="T:System.Windows.Forms.TextBox"/>
             ,<see cref="T:System.Windows.Forms.ComboBox"/>
              and <see cref="T:Syncfusion.Windows.Forms.IEditControlsEmbed"/> based controls).
             </summary>
             <remarks>
             <para>
             AutoCompletion is the process in which a program prompts the user with
             helpful completion suggestions when the user is inputting some text through
             a edit control (TextBox or ComboBox controls). The address bar in Microsoft
             Internet Explorer provides this feature when users type in part of a
             web address.
             </para>
             <para>
             The AutoComplete control is implemented as a extender control that provides a
             "AutoComplete" extender property to edit control type controls.
             </para>
             <para>
             The AutoComplete control can operate in <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.AutoSuggest"/>
             or <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.AutoAppend"/> Mode.
             In AutoSuggest mode a drop down list of possible matches for the current
             text will be displayed and the user can select the appropriate entry they
             want. In AutoAppend mode the edit control with the focus will be filled
             with the possible match and the user can continue typing to change the
             current suggestion or accept the text as it is.
             </para>
             <para>
             The AutoComplete control can use a internal list of 'history
             items' to provide the auto completion to its target controls or it can take
             a external data source as the source for the auto completion items.
             </para>
             <para>
             The <seealso cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.Columns"/> property can be used to customize the appearance of the drop down list of items.
             </para>
             </remarks>
             <example>
            		<coderef file="tools\samples\editors package\autocompleteDemo\cs\MainForm.cs" name="AutoComplete Initialization" lang="C#">
            		<code lang="C#">
                         // This code shows how the AutoComplete control
                         // is initialized and used
             
                         this.autoComplete1 = new AutoComplete();
                         this.textBox1 = new TextBox();
             
                         // Set buttonEdit1 properties
                         this.autoComplete1.AdjustHeightToItemCount = true;
             
                         // The AutoComplete control will add contents of the target control to
                         // its history list automatically (when the enter key is hit)
                         this.autoComplete1.AutoAddItem = true;
             
                         // The AutoComplete control will maintain its history items
                         this.autoComplete1.AutoSerialize = true;
             
                         // The category under which the history list will be persisted
                         this.autoComplete1.CategoryName = "websites";
             
                         // Specifies if any of the columns in the data source are to be treated as
                         // image index
                         this.autoComplete1.ImageColumnIndex = -1;
             
                         // The image list to be used as the image source
                         this.autoComplete1.ImageList = null;
             
                         // The preferred height for the drop down window
                         this.autoComplete1.PreferredHeight = 200;
             
                         // Add a event to customize data added to history
                         this.autoComplete1.BeforeAddItem += new AutoCompleteAddItemCancelEventHandler(this.autoComplete1_BeforeAddItem);
             
                         // Set Auto Complete
                         // properties for target TextBox
                         this.autoComplete1.SetAutoComplete(this.textBox1, AutoCompleteMode.Both);
             
                         // Added by designer - Add the TextBox to the Form
                         this.Controls.Add(textBox1);
            		</code></coderef>
            		<coderef file="tools\samples\editors package\autocompleteDemo\vb\MainForm.vb" name="AutoComplete Initialization" lang="VB">
            		<code lang="VB">
                        ' This code shows how the AutoComplete control
                        ' is initialized and used
                        Me.AutoComplete1 = New AutoComplete()
                        Me.textBox1 = New TextBox()
                        ' Set AutoComplete1 properties
                        ' Set the ParentForm property of the AutoComplete control
                        Me.AutoComplete1.ParentForm = Me
                        Me.AutoComplete1.AdjustHeightToItemCount = True
                        ' The AutoComplete control will add contents of the target control to
                        ' its history list automatically (when the enter key is hit)
                        Me.AutoComplete1.AutoAddItem = True
                        ' The AutoComplete control will maintain its history items
                        Me.AutoComplete1.AutoSerialize = True
                        ' The category under which the history list will be persisted
                        Me.autoComplete1.CategoryName = "websites"
                        ' Specifies if any of the columns in the data source are to be treated as
                        ' image index
                        Me.AutoComplete1.ImageColumnIndex = -(1)
                        ' The image list to be used as the image source
                        Me.AutoComplete1.ImageList = Nothing
                        ' The preferred height for the drop down window
                        Me.AutoComplete1.PreferredHeight = 200
                        ' Add a event to customize data added to history
                        AddHandler Me.autoComplete1.BeforeAddItem, New AutoCompleteAddItemCancelEventHandler(AddressOf AutoComplete1_BeforeAddItem)
                        ' Set Auto Complete
                        ' properties for target TextBox
                        Me.AutoComplete1.SetAutoComplete(Me.textBox1, AutoCompleteMode.Both)
                        ' Added by designer - Add the TextBox to the Form
                        Me.Controls.Add(textBox1)
            		</code>
            		</coderef>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.IDataListViewOwner">
            <summary>
            This interface should be implemented by classes that want to
            act as the owner for the <see cref="T:Syncfusion.Windows.Forms.Tools.DataListView"/> class. 
            </summary>
            <remarks>
            The DataListView class will query its owner for special formatting
            conditions such as column width and any images that need to be 
            displayed. The need for this class is to abstract the formatting
            information from the DataListView class. The DataListView class can
            display a DataSource even if the <see cref="P:Syncfusion.Windows.Forms.Tools.DataListView.ListOwner"/>
            property is not set using default formatting values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IDataListViewOwner.GetImageColumnIndex">
            <summary>
            Get the index of the column that has information about the
            images (if any).
            </summary>
            <returns>The index of the Image column.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IDataListViewOwner.GetColumnWidth(System.Int32)">
            <summary>
            Gets the width of the specified column.
            </summary>
            <param name="columnIndex">The index of the column for which the 
            minimum width is required.</param>
            <returns>The width of the column.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.components">
            <summary>
            The event args for the AutoCompleteAddItemCancelEventHandler. This event handler is used
            as the event data for the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.BeforeAddItem"/> event raised by the
            <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.targetEnabledMap">
            <summary>
            Holds information about what the AutoComplete extender
            property is set on the target controls. The control
            is the key and the AutoComplete is the value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.targetComboUpDownMap">
            <summary>
            Holds information for each control if ComboUpDown behavior is
            to be shown.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.activeControlObject">
            <summary>
            The control that has the current focus.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.preChangeText">
            <summary>
            The text of the target control before the change
            suggested by the AutoComplete control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.ignoreChangeMessage">
            <summary>
            Specifies whether the TextChanged event should be ignored.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.ignoreCase">
            <summary>
            The case sensitivity for matching will be based on this.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.dropDownContainer">
            <summary>
            The PopupControlContainer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.contentChanged">
            <summary>
            Specifies if the content has changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.dropDownList">
            <summary>
            The list used for displaying the matches.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.autoSerializeValue">
            <summary>
            Specifies whether the internal data will be persisted
            by the control itself. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.internalOverrideIgnoreCompletion">
            <summary>
            Overrides the IgnoreCompletion check when set. This
            is needed when the ProcessAutoComplete method is
            called when the Text property of the target control is empty.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.columnInfoList">
            <summary>
            The collection of Columns specifying the attributes of the columns of
            the List displayed with the matches.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.imageListValue">
            <summary>
            The image list that will be used by the AutoComplete object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.showColumnHeaderValue">
            <summary>
            Specifies whether the drop down list will have a column header.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.borderType">
            <summary>
            Specifies the kind of border for the popup control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.categoryName">
            <summary>
            Specifies the user defined category under which the
            data held by this AutoComplete needs to persist historical
            data.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.minColumnWidth">
            <summary>
            The minimum column width when a new column is added.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.autoAddItemOnValidate">
            <summary>
            Specifies if the current content should be added to the history
            during validation (when the target control loses focus).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.tableData">
            <summary>
            The internal DataTale that will hold the history items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.dataSource">
            <summary>
            The external data source.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.InvalidDataType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.controlsInitialized">
            <summary>
            Specifies if the controls have been inistialized for the drop down.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.preferredHeight">
            <summary>
            The preferred height.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.preferredWidth">
            <summary>
            The preferred width.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.adjustHeightToItemCount">
            <summary>
            Specifies if the height of the drop down is to be adjusted based on the number
            of items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.selectionChangeCommitted">
            <summary>
            Specifies if a SelesctionChangeCommitted event has been raised by a target
            combobox. This is tracked so that the following TextChanged event will be 
            ignored by the AutoCompletion logic.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.matchMode">
            <summary>
            The mode for the matching routine.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.overrideComboValue">
            <summary>
            The internal field that specifies if the AutoComplete control 
            should supress or override the ComboBox control's own dropdown.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.allowListDelete">
            <summary>
            Allow user to delete entries from list.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.autoSortList">
            <summary>
            Specifies if the list is to be sorted automatically
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoComplete.targetRightToLeft">
            <summary>
            The RightToLeft state of the target control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.#cctor">
            <summary>
            Initialize the static fields.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.#ctor">
            <summary>
            Initializes a new instance of the AutoComplete class.
            </summary>
            <remarks>The AutoComplete class can be created through the 
            designer and also prorammatically through code.The AutoComplete
            class uses the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.CategoryName"/> proprty to provide 
            support for differentiate between auto complete histor lists. The CategoryName
            property is not set by default.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.BeginInit">
            <summary>
            Implementation of the <see cref="T:System.ComponentModel.ISupportInitialize"/> interface.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.EndInit">
            <summary>
            Implementation of the <see cref="T:System.ComponentModel.ISupportInitialize"/> interface.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SetActiveEditControl(Syncfusion.Windows.Forms.IEditControlsEmbed,System.Windows.Forms.Control)">
            <summary>
            This is a implementation for the IEditControlsEmbedListener.
            </summary>
            <param name="parentControl">The parent control that makes the call.</param>
            <param name="editControl">The edit control that has the focus.</param>
            <remarks>
            This used when there is a composite control that has more than one edit control
            embedded is being provided auto completion. The parent composite will inform
            the auto complete control through this method when there is a change in focus
            between its multiple edit controls.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.ShouldSerializeParentForm">
            <summary>
            Specifies if the ParentForm property is to be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.OnBeforeAddItem(Syncfusion.Windows.Forms.Tools.AutoCompleteAddItemCancelEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.BeforeAddItem"/> event.
            </summary>
            <param name="args">A CancelEventArgs that contains the event data.</param>
            <remarks>
            The OnBeforeAddItem method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            <para>
            Notes to Inheritors:  When overriding OnBeforeAddItem in a derived
            class, be sure to call the base class's OnBeforeAddItem method so that
            registered delegates receive the event.
            </para>
            </remarks>
            <example>
            	<coderef file="tools\samples\editors package\autocompletedemo\VB\MainForm.cs" name="AutoComplete BeforeAddItem event" lang="C#">
            	<code lang="C#">
                        // Add a event to customize data added to history
                        this.autoComplete1.BeforeAddItem += new AutoCompleteAddItemCancelEventHandler(this.autoComplete1_BeforeAddItem);
            
                        // autoComplete1_BeforeAddItem
                        int columnCount = args.RowItem.Table.Columns.Count;
                        object [] itemarray = args.RowItem.ItemArray;
            
                        string itemText = (string)itemarray[0];// the url field
                        string nameText = (string)itemarray[1];// The name field
            
                        if(itemText.Substring(0,4) == "http")
                        {
                            if(nameText == null || nameText == String.Empty)
                                nameText = "Website";
                        }
                        else if(itemText.Substring(0,3) == "ftp")
                        {
                            if(nameText == null || nameText == String.Empty)
                                nameText = "FTP site";
                        }
                        else
                            args.Cancel = true;
            
                        itemarray[0] = itemText;
                        itemarray[1] = nameText;
                        args.RowItem.ItemArray = itemarray;
            	</code>
            	</coderef>
            	<coderef file="tools\samples\editors package\autocompletedemo\VB\MainForm.vb" name="AutoComplete BeforeAddItem event" lang="VB">
            	<code lang="VB">
                       ' Add a event to customize data added to history
                       AddHandler Me.autoComplete1.BeforeAddItem, New AutoCompleteAddItemCancelEventHandler(AddressOf autoComplete1_BeforeAddItem)
                       ' autoComplete1_BeforeAddItem
                       Dim columnCount As Integer
                       columnCount = args.RowItem.Table.Columns.Count
                       Dim itemarray() As Object
                       itemarray = args.RowItem.ItemArray
                       Dim itemText As String
                       itemText = CType(itemarray(0), String)
                       ' the url field
                       Dim nameText As String
                       nameText = CType(itemarray(1), String)
                       ' The name field
                       If (itemText.Substring(0, 4) Is "http") Then
                           If ((nameText Is Nothing) _
                                       OrElse (nameText Is String.Empty)) Then
                               nameText = "Website"
                           End If
                       Else
                           If (itemText.Substring(0, 3) Is "ftp") Then
                               If ((nameText Is Nothing) _
                                           OrElse (nameText Is String.Empty)) Then
                                   nameText = "FTP site"
                               End If
                           Else
                               args.Cancel = True
                           End If
                       End If
                       itemarray(0) = itemText
                       itemarray(1) = nameText
                       args.RowItem.ItemArray = itemarray
            	</code>
            	</coderef>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.RaiseBeforeAddItemEvent(System.Data.DataRow)">
            <summary>
            Raise the BeforeAddItem event
            </summary>
            <remarks>Calls the <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.OnBeforeAddItem(Syncfusion.Windows.Forms.Tools.AutoCompleteAddItemCancelEventArgs)"/>method to 
            raise the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.BeforeAddItem"/> event.</remarks>
            <returns>true if the item is not to be added to the history.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.GetImageColumnIndex">
            <summary>
            This method implements IDataViewListOwner.GetImageColumnIndex.
            </summary>
            <returns>The index of the column in the data source that provides the
            index of images in the assigned image list.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.GetColumnWidth(System.Int32)">
            <summary>
            This method implements IDataViewListOwner.GetColumnWidth.
            </summary>
            <param name="columnIndex">The index of the column for which to 
            return the width.
            </param>
            <returns>The width of the column.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.GetActualIndex(System.Int32)">
            <summary>
            There will be a difference between the number of columns that
            is passed to the DataListView and the number of columns in the
            <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.Columns"/> property. This method gets the actual index
            of a column in the DataListView with the Columns property.
            </summary>
            <param name="visibleIndex">The index of the visible column.</param>
            <returns>The actual index of the visible column</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.OnAutoCompleteItemSelected(Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs)">
            <summary>
            Invoke the AutoCompleteItemSelected Event.
            <param name="args">An AutoCompleteSelectedEventArgs that contains the event data.</param>
            <remarks>
            The OnAutoCompleteSelected method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors:  When overriding OnAutoCompleteItemSelected in a derived
            class, be sure to call the base class's OnAutoCompleteSelected method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.RaiseAutoCompleteItemSelectedEvent(System.Object[],System.Int32,System.String,System.String@)">
            <summary>
            Create the AutoCompleteItemSelectedEventArgs and Invoke OnAutoCompleteItemSelected.
            </summary>
            <param name="itemArray">The itemArray object</param>
            <param name="matchColumnIndex">The column index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.MatchString(System.String,System.String)">
            <summary>
            Does the match between the current text and a possible match.
            This can be overriden to provide an implementation that does
            something more specific. The default implementation only checks 
            if the current text is a substring of the possible match.
            </summary>
            <param name="currentText">The text to be completed.</param>
            <param name="possibleMatch">The possible match string.</param>
            <returns>true if the possible match string is an acceptable match; false, otherwise</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.RaiseMatchItemEvent(System.String,System.String)">
            <summary>
            Raise the MatchItem event <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.MatchItem"/>.
            </summary>
            <param name="currentText">The current text of the edit control</param>
            <param name="possibleMatch">The possible match to be displayed</param>
            <returns>true if the possible match string is an acceptable match; false, otherwise</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.OnMatchItem(Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs)">
            <summary>
            Invoke the OnMatchItem Event.
            <param name="arg">The AutoCompleteMatchItem event data</param>
            <remarks>
            The OnMatchItem method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors:  When overriding OnMatchItem in a derived
            class, be sure to call the base class's OnMatchItem method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.OnAutoCompleteItemBrowsed(Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs)">
            <summary>
            Invoke the AutoCompleteItemBrowsed event.
            <param name="args">An AutoCompleteSelectedEventArgs that contains the event data.</param>
            <remarks>
            The OnAutoCompleteItemBrowsed method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors:  When overriding OnAutoCompleteItemBrowsed in a derived
            class, be sure to call the base class's OnAutoCompleteItemBrowsed method so that
            registered delegates receive the event.</note>
            </remarks>
            </summary>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.RaiseAutoCompleteItemBrowsedEvent(System.Object[],System.Int32)">
            <summary>
            Create the AutoCompleteSelectedEventArgs and invoke OnAutoCompleteItemBrowsed.
            </summary>
            <param name="itemArray">The item array contains the item and the sub items 
            (columns) of the entry selected.</param>
            <param name="matchColumnIndex">The column index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SetTableData">
            <summary>
            Set the internal table data based on the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.DataSource"/> property.
            </summary>
            <remarks>
            This method is invoked by the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.DataSource"/> property when
            an external data source is specified. Override this method if you want to provide
            your own implenmentation for custom data sources. The <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.TableData"/>
            property needs to be set with the appropriate data in this method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.GetDataManager(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.RefreshColumns">
            <summary>
            This should only be invoked when there is a DataSource
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.InitializeComponent">
            <summary>
               Required method for Designer support - do not modify
               the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.System#ComponentModel#IExtenderProvider#CanExtend(System.Object)">
            <summary>
            Extender property target.
            </summary>
            <param name="target">The target control to be considered for extending.</param>
            <returns>return true if the target control can be extended; false, otherwise</returns>
            <remarks>The AutoComplete control provides auto completion for edit
            contols (the TextBox and ComboBox controls in Windows Forms) and classes
            that implement the <see cref="T:Syncfusion.Windows.Forms.IEditControlsEmbed"/> interface. The method will
            return true if any of these cases are met.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SetAutoComplete(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.AutoCompleteModes)">
            <summary>
            This is the extended property for the AutoComplete property. 
            Will be called by the framework when the AutoComplete property 
            is set on any control.
            </summary>
            <param name="control">The control that the property is applied to.</param>
            <param name="enableAutoComplete">Specifies whether the control is to be provided 
            auto completion. Auto complete will be provided if this param is true</param>
            <remarks>When using the designer, the AutoComplete control adds a extender 
            property to the target controls. When using the AutoComplete control
            programatically through the code, you need to use this metod to add and remove
            auto completion for a target control.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.GetAutoComplete(System.Windows.Forms.Control)">
            <summary>
            Check if a control has AutoComplete Enabled.
            </summary>
            <remarks>
            The AutoComplete control mainatins a list of controls that it needs
            to provide auto completion for. This method looks up the AutoCompletion mode
            for the control being considered.
            </remarks>
            <example>
            	<coderef file="tools\samples\editors package\autocompletedemo\VB\MainForm.cs" name="AutoComplete GetAutoComplete" lang="C#">
            	<code lang="C#">
                        AutoCompleteMode mode = this.autoComplete1.GetAutoComplete(this.comboBox1);
                        if(mode == AutoCompleteMode.Disabled)
                            this.autoComplete1.SetAutoComplete(this.comboBox1, Syncfusion.Windows.Forms.Tools.AutoCompleteMode.AutoSuggest);
                        else
                            this.autoComplete1.SetAutoComplete(this.comboBox1, AutoCompleteMode.Disabled);
            	</code>
            	</coderef>
                <coderef file="tools\samples\editors package\autocompletedemo\VB\MainForm.vb" name="AutoComplete GetAutoComplete" lang="VB">
                <code lang="VB">
                       Dim mode As AutoCompleteMode
                       mode = Me.autoComplete1.GetAutoComplete(Me.comboBox1)
                       If (mode = AutoCompleteMode.Disabled) Then
                           Me.autoComplete1.SetAutoComplete(Me.comboBox1, Syncfusion.Windows.Forms.Tools.AutoCompleteMode.AutoSuggest)
                       Else
                           Me.autoComplete1.SetAutoComplete(Me.comboBox1, AutoCompleteMode.Disabled)
                       End If
            	</code>
            	</coderef>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.AddHistoryItem(System.String)">
            <summary>
            Call this method to add a item to the internal history
            of the AutoComplete control. This method will create a new
            entry for this string in the internal list.
            <para>
            This call will be ignored if a item already exists with
            the same string value.
            </para>
            This method is overloaded.
            </summary>
            <param name="newItem">The string to be added to the history list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.AddHistoryItem(System.String,System.Int32)">
            <summary>
            The AutoComplete control has the ability to display an icon next
            to a possible match item when displaying the drop down list
            in <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.AutoSuggest"/> mode. This overloaded
            version of AddHistoryItem adds an item to history and also 
            sets the image index for that item.
            </summary>
            <param name="newItemText">The string to be added to the history list.</param>
            <param name="imageIndexValue">The image index of the icon to be set for this
            item in the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.ImageList"/> assigned to this control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SetHistoryItem(System.String,System.Int32)">
            <summary>
            The AutoComplete control can display sub items with columns and also
            an icon for possible matches when in <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.AutoSuggest"/>
            mode.
            <para>
            This method sets the associated icon for any item aleady in 
            history.Overloaded.
            </para>
            </summary>
            <param name="itemKey">The item key identifier string.</param>
            <param name="imageIndexValue">The Image Index</param>
            <returns>The function returns true if the item is added to the histor list; false, otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SetHistoryItem(System.String,System.Int32,System.String)">
            <summary>
            The AutoComplete control can display sub items with columns and also
            an icon for possible matches when in <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.AutoSuggest"/>
            mode.
            <para>
            This method sets the associated icon for any item aleady in
            history.Overloaded.
            </para>
            </summary>
            <param name="itemKey">The item key identifier string</param>
            <param name="subindex">The sub item index - starts at 0</param>
            <param name="subItemValue">The sub item value</param>
            <returns>true if the sub item was set successfully;false, otherwise</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The sub item index was out of range</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SerializeList">
            <summary>
            Serialize the internal list to the isolated storage. This methos is only invoked when
            the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.AutoSerialize"/> property is set to true.
            </summary>
            <remarks>
            This method invokes the <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SaveCurrentState"/> methos to persist the 
            history items. Items are not persisted when an external data source is provided.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SaveCurrentState">
            <summary>
            Saves the current state of the control to the windows registry.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SaveCurrentState(Syncfusion.Runtime.Serialization.SerializeMode,System.Object)">
            <summary>
            Saves the current internal list information to the specified persistence medium.
            </summary>
            <param name="mode"> A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value.</param>
            <param name="persistpath"> Specifies the name of an IsolatedStorage/INI/XML file or a registry key to
            which the persistence information will be written.</param>
            <remarks>
            <para>
            Writes the internal history information to the persistence medium specified by the
            <paramref name="mode"/> parameter and at the path specified by the <paramref name="persistpath"/> object.
            This method has been provided only to allow a higher degree of control over the
            serialization process. For normal state storage and retrieval it is advisable to
            use the <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SaveCurrentState"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.LoadCurrentState"/>
            methods.
            </para>
            <para>
            This method will be removed in a future version. Please use the more flexible LoadCurrentState(AppStateSerializer) variant, instead.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SaveCurrentState(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Saves the current internal list information to the specified persistence medium.
            </summary>
            <param name="serializer">A reference to the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <remarks>
            Writes the internal history information to the persistence medium specified by the
            <paramref name="mode"/> parameter and at the path specified by the <paramref name="persistpath"/> object.
            This method has been provided only to allow a higher degree of control over the
            serialization process. For normal state storage and retrieval it is advisable to
            use the <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SaveCurrentState"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.LoadCurrentState"/>
            methods.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.LoadCurrentState">
            <summary>
            Reads the persisted state from the windows registry.
            </summary>
            <returns>true if the read is successful;false, otherwise</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.LoadCurrentState(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Reads a previously serialized internal history list.
            </summary>
            <param name="serializer">A reference to the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <returns>true if the load is successful; false, otherwise</returns>
            <remarks>
            Reads the internal history information from the specified persistent store and applies the new state.
            This method has been provided only to allow a higher degree of control over the
            serialization process. For normal state storage and retrieval it is advisable to
            use the <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SaveCurrentState"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.LoadCurrentState"/>
            methods.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.LoadCurrentState(Syncfusion.Runtime.Serialization.SerializeMode,System.Object)">
            <summary>
            Reads a previously serialized internal history list.
            </summary>
            <param name="mode"> A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value.</param>
            <param name="persistPath">The name of the IsolatedStorage/INI/XML file or the
            registry key containing the  persisted dockstate information.</param>
            <returns>true if the load is successful; false, otherwise</returns>
            <remarks>
            Reads the internal history information from the specified persistent store and applies the new state.
            This method has been provided only to allow a higher degree of control over the
            serialization process. For normal state storage and retrieval it is advisable to
            use the <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SaveCurrentState"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.LoadCurrentState"/>
            methods.
            <para>
            This method will be removed in a future version. Please use the more flexible LoadCurrentState(AppStateSerializer) variant, instead.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.DeSerializeList">
            <summary>
            Deserialize the internal history list. Used by the default serialization
            method.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandleControlEnter(System.Object,System.EventArgs)">
            <summary>
            This is an event handler that responds to the ControlEnter
            event.  We attach this to each control we are providing AutoComplete
            text for.
            </summary>
            <param name="sender">The control with the current focus.</param>
            <param name="e">The event data.</param>
            <remarks>This method is the handler for the Enter event of the target
            control. All controls that are provided with auto completion get their
            Enter event handled to provide a way for the AutoComplete control
            to hook into the other events for the edit control.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandleControlLeave(System.Object,System.EventArgs)">
            <summary>
            This is an event handler that responds to the ControlLeave
            event of the current control.  
            </summary>
            <param name="sender">The control with the current focus</param>
            <param name="e">The event data.</param>
            <remarks>Handles the ControlLeave event and unwire the events 
            that we hooked into in the <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandleControlEnter(System.Object,System.EventArgs)"/> event.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandleControlTextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the TextChanged event of the current control. The ProcessAutoComplete
            method is invoked if there is a change in the control's text content.
            </summary>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.ProcessAutoComplete(System.String)"/>
            
            <param name="sender">The control being provided with AutoComplete</param>
            <param name="e">The Event Args</param>
            <remarks>This is the core of the auto completion process where the TextChanged
            event from the edit control is handled and the auto complete tries to
            provide auto completion.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandleControlSelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectionChangeCommitted event of the current control.
            </summary>
            
            <param name="sender">The control being provided with AutoComplete.</param>
            <param name="e">The Event Args.</param>
            <remarks>This event is handled to prevent a problem that appears when
            auto completion is applied to a ComboBox. When the user selects a 
            item in the drop down list of the ComboBox the TextChanged event
            is raised and the auto completion process starts in response to this.
            This should be avoided and the work around is to handle the SelectionChanged
            event that's raised by the ComboBox when the selection changes and supress
            the TextChanged event that is raised right after.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandleControlDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Display the popup control when the user DoubleClicks in the target
            control.
            </summary>
            <param name="sender">The control with the focus.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandleControlClick(System.Object,System.EventArgs)">
            <summary>
            Display the popup control when the user Clicks in the target
            control.
            </summary>
            <param name="sender">The control with the focus.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.IsDropDownShowing">
            <summary>
            Rturns true if the popup control is current being displayed.
            </summary>
            <returns>true if the drop down list is being displayed; false, otherwise</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandleControlKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handle the KeyDown event of the target control.
            </summary>
            <param name="sender">The control with the focus</param>
            <param name="e">The key event data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.CloseDropDown">
            <summary>
            Closes the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> drop down window.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandleListControlKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handle the KeyDown event of the list view control.
            </summary>
            <param name="sender">The list control.</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.GetControlAutoMode">
            <summary>
            Get the AutoCompleteMode for the current control.
            </summary>
            <returns>Returns the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteModes"/> type value
            for the control with the focus.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.OnInvalidDataType(Syncfusion.Windows.Forms.Tools.AutoCompleteErrorArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.GetMatchesCount(System.String)">
            <summary>
            This method returns the number of probable matches for a particular
            string in the AutoComplete control's current history list/data source.
            </summary>
            <param name="currentText">The text to use for the matching.</param>
            <returns>the count of items that match.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.ProcessAutoComplete(System.String)">
            <summary>
            Call this method to initiate the AutoComplete process. This is
            called automatically when the AutoCompleteMode is not set to
            Disabled.
            <para>This method invokes the <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.PopulateListWithMatches(System.String,System.Data.DataView@)"/>
            method to get a list of matches for the current text. Override the
            <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.PopulateListWithMatches(System.String,System.Data.DataView@)"/> method
            if you are providing your own history source.</para>
            </summary>
            <param name="currentText">The current text content of the edit control</param>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.PopulateListWithMatches(System.String,System.Data.DataView@)"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.GetItemArray(System.String)">
            <summary>
            Get the ItemArray for the matching entry.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.ProcessAutoComplete(System.String,System.String,System.Drawing.Point)">
            <summary>
            Call this method to initiate the AutoComplete process. This is
            called automatically when the AutoCompleteMode is not set to
            Disabled.
            <para>This method invokes the <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.PopulateListWithMatches(System.String,System.Data.DataView@)"/>
            method to get a list of matches for the current text. Override the
            <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.PopulateListWithMatches(System.String,System.Data.DataView@)"/> method
            if you are providing your own history source.</para>
            </summary>
            <param name="currentText">The current text content of the edit control</param>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.PopulateListWithMatches(System.String,System.Data.DataView@)"/>
            <param name="selectedEntry">Specifies the entry that should be shown as selected.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.RaisePreMatchItemEvent(System.String)">
            <summary>
            
            </summary>
            <param name="currentText"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.OnPreMatchItemEvent(Syncfusion.Windows.Forms.Tools.AutoCompletePreMatchItemEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.OnTargetChanging(Syncfusion.Windows.Forms.Tools.AutoCompleteTargetChangingEventArgs)">
            <summary>
            Raises the TargetChanging event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.OnAutoCompleteCustomize(Syncfusion.Windows.Forms.Tools.AutoCompleteCustomizeEventArgs)">
            <summary>
            Raises the AutoCompleteCustomize event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.PopulateListWithMatches(System.String,System.Data.DataView@)">
            <summary>
            Filter the complete list of items to be considered for matches to form a 
            set of probable matches.
            </summary>
            <param name="currentText">The text to the matched.</param>
            <param name="listDataView">The matching items will be added to this ListView.</param>
            <returns>The count of the matches.</returns>
            <remarks>
            Override this function if you want to use a different matchhing routine
            from the internal built in matching routine.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.GetActiveEditControl(System.Windows.Forms.Control)">
            <summary>
            Get the active edit control. The edit control is not the
            same as the active control. The control that we hold as the
            active control could embed a edit control and may not be 
            the actual edit control that needs to be provided with the
            AutoComplete services.
            </summary>
            <param name="activeControl">The control with the focus</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.CreateDisplayDataView(System.Data.DataView,Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection)">
            <summary>
            
            </summary>
            <param name="listDataView"></param>
            <param name="columnsInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.InitializeDropDown">
            <summary>
            Initialize the drop down list control with the list of matches.
            </summary>
            <returns>returns true if the drop down was properly initialized; false, otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.FillDropDownList(System.Data.DataView,System.String,System.Int32)">
            <summary>
            Internal helper function to fill the drop down list with the
            possible matches.
            </summary>
            <param name="listDataView">The DataView object that has the list of matches.</param>
            <remarks>
            This function sets the ListView control with the DataView
            object that is to be used as its data source. The ListView control used here
            is a ListView derived class that can take a DataSource and populate
            its columns and rows.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.IgnoreCompletion(System.String)">
            <summary>
            Call this method to determine if the control does not need AutoCompletion 
            at this time.
            </summary>
            <param name="currentText">The curent text.</param>
            <returns>Returns true if the current state of the control does not
            require completion.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.SetSelectedValue(System.String)">
            <summary>
            Set the text of the edit control target to the selected text.
            </summary>
            <param name="selectedValue">The selected text.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandleAutoListDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Handles the DoubleClick event of the drop down list.
            </summary>
            <param name="sender">The drop down list</param>
            <param name="e">The EventArgs object with event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandleAutoListClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the drop down list.
            </summary>
            <param name="sender">The drop down list</param>
            <param name="e">The EventArgs object with event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandleAutoListSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectionChanged event of the drop down list.
            </summary>
            <param name="sender">The drop down list</param>
            <param name="e">The EventArgs object with event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandleControlValidated(System.Object,System.EventArgs)">
            <summary>
            The handler for the Validated event of the edit control.
            The current text of the edit control will be added to the history
            list if the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.AutoAddItem"/> property is set.
            </summary>
            <param name="sender">The edit control with the focus</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.AddItemOnValidate(System.Windows.Forms.Control)">
            <summary>
            Adds an item to the history list when invoked.
            </summary>
            <param name="editControl">The target edit control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.ResetHistory">
            <summary>
            Reset the internal history list. Override this if you
            are providing your own history source in your derived
            class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoComplete.HandlePopupClosed(System.Object,Syncfusion.Windows.Forms.PopupClosedEventArgs)">
            <summary>
            Handle the PopupClosed event of the drop down control.
            </summary>
            <param name="sender">The drop down container.</param>
            <param name="e">The EventArgs object with event data.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.AutoComplete.PreMatchItem">
            <summary>
            The event that will be raised before the AutoComplete control
            performs a matching operation for the current text content of the
            active edit control.
            </summary>
            <remarks>
            This event can be handled to change the text that will be used
            for the auto completion. 
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.AutoComplete.TargetChanging">
            <summary>
            This event is raised when the target control of the AutoComplete
            control changes.
            </summary>
            <remarks>
            This event can be handled to change the constraints for displaying
            matching items differently for different controls.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.AutoComplete.AutoCompleteCustomize">
            <summary>
            Handle this event to customize the AutoCompletion. The position of the
            drop down can be changed. The Text to be used for auto completion can also 
            be changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.AutoComplete.DropDownDisplayed">
            <summary>
            Occurs after the dropdown has beed dropped down and made visible.
            </summary>
            <remarks>Custom processing can be done when the drop down is displayed.</remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.AutoComplete.DropDownClosed">
            <summary>
            Occurs when the AutoComplete dropdown is closed.
            </summary>
            <remarks>
            Handling this event will tell you whether the dropdown was
            closed or canceled by the user.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.MinColumnWidth">
            <summary>
            The AutoComplete class supports multiple columns in the drop down
            window of the possible matches. This static member is set to the minimum
            width of such columns when displayed in the drop down.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.ChangeDataManagerPosition">
            <summary>
            Specifies if the DataManager position is to be changed when entries
            in the ListControl are selected (when the DataSource property is set to a 
            data source).
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.CaseSensitive">
            <summary>
            Specifies if the replacement of the matching entry is to be case
            sensitive. If the user enters 'A' and there is a matching entry
            'abcd', the AutoComplete will set the target edit control's Text
            to 'abcd' is this property is set to false and 'Abcd' if this
            property is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.Initializing">
            <summary>
            Implementation of the <see cref="T:System.ComponentModel.ISupportInitialize"/> interface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.PreChangeText">
            <summary>
            Specifies text, which was before next ProcessAutoComplete method is called.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.ParentForm">
            <summary>
            The ParentForm for databinding purposes
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.OverrideCombo">
            <summary>
            Specifies if the AutoComplete control should supress or override the ComboBox 
            control's own dropdown.
            </summary>
            <remarks>
            Set this property to true if the target <see cref="T:System.Windows.Forms.ComboBox"/>'s drop down
            list is replaced by the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control's drop down list.
            If the value is set to false the AutoComplete control's drop down will not be
            displayed when the <see cref="T:System.Windows.Forms.ComboBox"/>'s drop down list is visible.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.AutoComplete.BeforeAddItem">
            <summary>
            The BeforeAddItem even is raised when a new item is about to be added. New items can be 
            added explicitly by calling the <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.AddHistoryItem(System.String)"/> method.
            </summary>
            <remarks>
            You may choose to cancel adding this item in this handler. 
            </remarks>
            <example>This example shows how you can handle this event and 
            selectively choose to add an item to the history list.</example>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.AutoComplete.MatchItem">
            <summary>
            This event enables you to provide a custom matching routine for
            the current value in the edit control.
            You can consume this event and set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs"/> argument.
            </summary>
            <remarks>
            Returning true will add the entry and false will ignore the entry.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.AutoComplete.AutoCompleteItemSelected">
            <summary>
            This event is raised when a new item has been selected by the user
            when the AutoComplete drop down list is displayed when the AutoComplete
            mode is set to <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.AutoSuggest"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.MatchColumnName">
            <summary>
            The column that is to be used for matching during AutoCompletion.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.AutoComplete.AutoCompleteItemBrowsed">
            <summary>
            Occus when the user selects a item from the list of possible matches
            when the AutoCompletMode is set to AutoSuggest.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.ImageColumnIndex">
            <summary>
            The column index that will serve as the image index.
            </summary>
            <remarks>
            The AutoComplete control supports displaying an icon in the 
            drop down list for each matching item. This icon is specified
            to the AutoComplete control by specifying the data for one of its
            <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.Columns"/> as the image index into the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.ImageList"/>
            provided in the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.ImageList"/> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.TableData">
            <summary>
            This is a read only property that provides the internal <see cref="T:System.Data.DataTable"/>
            object that is used to manipulate the list of history items.
            </summary>
            <remarks>
            The AutoComplete control uses a <see cref="T:System.Data.DataTable"/> object
            internally to manipluate the matching data that is to be used for its 
            matching operations. This property is populated from an internal history list that the
            AutoComplete class maintains or from the external data source that is
            specified through the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.DataSource"/> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.AdjustHeightToItemCount">
            <summary>
            Specifies if the height of the drop down should be adjusted based on the
            number of items.
            </summary>
            <remarks>The AutoComplete control displays a list of matching items when
            operating in <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.AutoSuggest"/> mode. This property specifies if the 
            height of the drop down should be adjusted to make the maximum number
            of items visible.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.PreferredHeight">
            <summary>
            The preferred height for the drop down list displayed by the AutoComplete control.
            </summary>
            <remarks>The preferred height is used by the AutoComplete control to
            fix the initial height of the drop down window that is displayed
            when in <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.AutoSuggest"/> mode.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.PreferredWidth">
            <summary>
            The preferred width for the drop down list displayed by the AutoComplete control.
            </summary>
            <remarks>The preferred width is used by the AutoComplete control to
            fix the initial width of the drop down window that is displayed
            when in <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.AutoSuggest"/> mode.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.DataSource">
            <summary>
            The external data source that will be used as the history item list.
            </summary>
            <remarks>The AutoComplete control can take an external data source
            (any data source that implements IList or IListSource) for its history
            list. When this property is set, the AutoComplete control will
            initialize itself with the data source and use that as the basis for 
            its matching routines. For example, if you have a DataSet with the
            list of names of the States in the US and specify that as the 
            DataSource, the AutoComplete control will display all matches
            from within these names when the user types in the target edit control.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.AutoAddItem">
            <summary>
            Specifies if the current item in the target control is to be automatically
            added during validation and when the Enter key is pressed, to the history list.
            </summary>
            <remarks>The AutoComplete control has two distinct functions. One is to 
            provide AutoCompletion to partial strings typed into edit controls that are 
            atrgeted by the AutoComplete control. The second function is to maintain the
            history or item list against which the partial string will be compared for
            possible matches.
            The AutoAddItem property specifies automatic addition to the history list or 
            item list that the AutoComplete control is referring to.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.CategoryName">
            <summary>
            The user defined under which the internal data is serialized.
            </summary>
            <remarks>The CategoryName is a important property that is useful
            in properly using the AutoComplete control. You can specify a 
            common CategoryName for AutoComplete controls in use in various
            forms. For example, if you have a form based application that 
            collects the First Name of users in more than one
            form, you can set the CategoryName to be "FirstName" and set the
            edit controls used for collecting the First Name under the 
            operation of the AutoComplete controls. This CategoryName will help share
            the First Names across forms.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.BorderType">
            <summary>
            Specify what kind of border the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control should use for 
            the popup control displayed when in <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.AutoSuggest"/> Mode.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteBorderTypes"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteModes"/>
            <remarks>
            The drop down window's appearance can be controlled by setting this property.
            The default value is <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteBorderTypes.Sizable"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.MatchMode">
            <summary>
            Specify the matching mode for the matching routine.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchModes"/>
            <remarks>
            The matching mode that is specified will have a marked impact
            on the nature and speed of the auto completion process. The Matching mode can
            be set to <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchModes.Automatic"/> or 
            <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchModes.Manual"/>.
            <para>
            The default mode is <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchModes.Automatic"/>
            In the automatic mode, the current text of the target edit control is matched
            with the internal history list or external data source using a <see cref="T:System.Data.DataTable"/>
            filter and the results are displayed in the drop down list when in 
            AutoSuggest mode and used to fill the edit control when in AutoAppend mode.
            </para>
            <para>
            Setting the MatchMode to Manual brings in a lot of change in the functionality
            of the AutoComplete control.Instead of getting the list of items matching the
            current text, the AutoComplete control will loop through all of the items in the
            history list and raise a <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.MatchItem"/> event for each of 
            these entries.
            </para>
            <para>
            The user can handle the event and do their own comparison and let the AutoComplete
            control whether to include an item in the matching list.
            However, the Manual setting will tend to slow down the process and the desired
            method for providing your own custom matching would be to override the 
            <see cref="M:Syncfusion.Windows.Forms.Tools.AutoComplete.PopulateListWithMatches(System.String,System.Data.DataView@)"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.Columns">
            <summary>
            The columns that will be displayed in the popup control when the AutoCompleteMode is
            set to AutoSuggest. The Columns property is a collection of <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo"/> objects
            that specify the attributes of a column.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo"/>
            <remarks>You can specify a list of columns and their width and column heading
            for each column in the drop down list of the matching items. In the event that a
            external data source is specified through the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.DataSource"/> property
            the columns in the data source will automatically be represented in the
            Columns collection (except for the columns set to be invisible).
            <para>
            At design time there will be a Refresh Columns verb available that can be
            invoked to synchronize a <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.DataSource"/> with the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.Columns"/> collection.
            Any changes made to the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.Columns"/> collection after invoking this
            verb will be retained. Do not invoke the Refresh Columns verb after making
            changes to the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.Columns"/> collection as the changes made will be lost and the
            column data will be refreshed from the data source.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.ShowColumnHeader">
            <summary>
            Specify whether the popup control displayed suring AutoSuggest
            mode has headers. This property will apply to all the columns.
            </summary>
            <remarks>You can specify headings for the columns that are displayed
            through the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.Columns"/> collection through the property
            grid.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.ImageList">
            <summary>
            The ImageList that will specify the images that will be used
            by the popup control when in AutoSuggest Mode.
            </summary>
            <remarks>You can specify an ImageList object as the source of 
            images/icons for the matching items. 
            First drag and drop (or create through code) a <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.ImageList"/> object.
            Then add the icons you want to use to the ImageList.
            Set the AutoComplete.ImageList property to point to the ImageList you created.
            You also need to set the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.ImageColumnIndex"/> property to indicate
            in which column of the data the index (of the image in the ImageList) is
            specified.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.AutoSerialize">
            <summary>
            Specifies whether the AutoComplete control persists its data.
            </summary>
            <remarks>The AutoComplete control can maintain its own internal
            history data and persist it to IsolatedStorage and read it back.
            The default value for this property is true.
            If you leave the default values as is for the AutoComplete control
            and set the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.CategoryName"/> property, the new entries
            that are added will also be persisted and read back.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.IgnoreCase">
            <summary>
            Specifies the case sensitivity for string comparison.
            </summary>
            <remarks>This setting specifies if the default matching routine is case
            sensitive.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.ActiveFocusControl">
            <summary>
            The target control with the current focus.
            </summary>
            <remarks>This property is used internally to get to the 
            active edit control that is being provided auto completion by
            this AutoComplete control.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.IgnoreChangeMessage">
            <summary>
            Specifies if the auto completion should be performed for this text change.
            </summary>
            <remarks>Use internally as a counter to calculate if the current
            change in the target control's text requires auto completion or is to be 
            ignored.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.SingleClick">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.AllowListDelete">
            <summary>
            Allows deleting items in the list when user pressed Delete Key.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoComplete.AutoSortList">
            <summary>
            Specifies if default sorting is to be performed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompletePreMatchItemEventArgs">
            <summary>
            Event data for pre matching modifications.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompletePreMatchItemEventArgs.currentTextValue">
            <summary>
            The item to be matched
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompletePreMatchItemEventArgs.#ctor(System.String)">
            <summary>
            Create a object of type AutoCompleteSelectedEventArgs and set the internal
            oject array with the information about the currently selected item.
            </summary>
            <param name="currentText">The array that holds the information about the currently
            selected item.</param>
            <remarks>The array value set through this constructor can be accessed
            through the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompletePreMatchItemEventArgs.CurrentText"/> property.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompletePreMatchItemEventArgs.CurrentText">
            <summary>
            This property holds the information about the currently selected item.
            The first item in the array is the first column of the matching item and
            so on for all the sub items.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteBorderTypes">
            <summary>
            Enumerates the border types that can be assigned to the 
            <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> popup control.
            </summary>
            <remarks>You can set this value through the designer for the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.BorderType"/> property.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteBorderTypes.Fixed">
            <summary>
            The popup control's border will be fixed and the user will not
            be able to resize it.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteBorderTypes.Sizable">
            <summary>
            The popup control's border will be sizable and the user will
            be able to resize it by grabbing its bottom right corner.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchModes">
            <summary>
            Enumerates the modes in which the AutoComplete control will 
            filter the history list for the current text in the target
            edit control.
            </summary>
            <remarks>The <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.MatchMode"/> property uses this
            type to fix the type of matching to be performed.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchModes.Automatic">
            <summary>
            The matching will be automatic. This means that the default
            matching routine built  into the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control
            will be used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchModes.Manual">
            <summary>
            The matching will be manual and the user will be able to specify a 
            custom event handler to approve a match.
            <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.MatchItem"/> event is invoked for each item 
            that is in the history list.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteModes">
            <summary>
            This enumerates the modes of auto completion that can be applied
            to a edit control (text box, combo box and controls implementing
            IEditControlsEmbed). The <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control provides a AutoComplete
            extended property to these types of edit controls. 
            
            <seealso cref="T:Syncfusion.Windows.Forms.IEditControlsEmbed"/>
            
            </summary>
            <remarks>This type is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control to set the
            extended property on the target constrols. The default AutoCompleteMode.Disabled.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.Disabled">
            <summary>
            AutoComplete will be disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.AutoSuggest">
            <summary>
            Possible matches for the current content of the
            active edit control will be presented in the form
            of a popup window with a selectable list of matches.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.AutoAppend">
            <summary>
            The most appropriate match for the current content of
            the edit control will be automatically appended to the
            edit control and the user can choose to type further or
            accept the appended word.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteModes.Both">
            <summary>
            Activates both AutoAppend and AutoSuggest modes of auto completion
            for the target control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs">
            <summary>
            Event data for the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.MatchItem"/> event .
            </summary>
            <remarks><see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventHandler"/> for the delegate
            that uses this event handler.
            This event handler is used to package the information that is sent
            by the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> class when in <see cref="F:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchModes.Manual"/>
            
            <para>This is set to false when the event is raised. The event handler
            can set this value to true if it wants the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> class to
            accept the current <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.PossibleMatch"/> item as a possible match
            for the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.CurrentText"/>. Setting this value to false with tell the
            <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> class to ignore this entry.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.currentTextValue">
            <summary>
            The current text value to be matched
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.possibleMatchValue">
            <summary>
            The possible match value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.#ctor(System.String,System.String)">
            <summary>
            Create a new object of type AutoCompleteMatchItemEventArgs.
            </summary>
            <param name="currentText">The current text to be matched.</param>
            <param name="possibleMatch">The possible match string.</param>
            <remarks>This constructor for the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs"/>
            class takes the current text of the target control that is to be matched and
            the possible match string that it is to be compared against as arguments.
            The values set through this constructor can overriden through the
            <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.CurrentText"/> and <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.PossibleMatch"/> properties.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.CurrentText">
            <summary>
            The current text value to be matched.
            </summary>
            <remarks>The current text that is to be compared against for possible
            matches. This is done one at a time using this event argument. The possible match
            for this is accessed through the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.PossibleMatch"/> property.
            You can set the CurrentText and <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.PossibleMatch"/> properties using
            the appropriate constructor.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.PossibleMatch">
            <summary>
            The possible match value that needs to be compared against the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.CurrentText"/>
            property by the event handler.
            </summary>
            <remarks>The current text that this  possible match will be checked against is 
            accessed through the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.CurrentText"/> property.
            You can set the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs.CurrentText"/> and PossibleMatch properties using
            the appropriate constructor.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo">
            <summary>
            The information needed for setting the attributes of a column in the drop down 
            list of the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            </summary>
            <remarks> 
            The <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control supports displaying multiple columns
            of data for probable matching items. This class specifies the appearance
            and behavior of each column that should be visible.
            <para>
            In the case that the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.DataSource"/> is a external 
            <see cref="T:System.Data.DataTable"/> the <see cref="T:System.Data.DataColumn"/> objects in the DataTable
            will be mirrored in the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.Columns"/> property which
            is a collection of these objects.
            </para>
            <para>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnHeaderText"/> , <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.MinColumnWidth"/>, 
            <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnName"/> and <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.Visible"/>
            properties specify the appearance of the column at runtime.
            </para>
            <para>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.MatchingColumn"/> and <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ImageColumn"/> properties
            specify how the column is to be treated at runtime. If a Column is set to
            be the MatchingColumn (the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.MatchingColumn"/> property is set to true)
            that column will be used for matching against the current text of the target
            edit control of the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.columnHeaderTextValue">
            <summary>
            The text of the column header.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.minColumnWidthValue">
            <summary>
            The minimum width for the column header.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.visible">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.matchingColumn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.imageColumn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.columnName">
            <summary>
            Used internally even if the column display text is changed
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.columnsCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.#ctor">
            <summary>
            Initializes a object of type AutoCompleteDataColumnInfo. Overloaded.
            </summary>
            <remarks>
            The AutoCompleteDataColumnInfo class holds the information needed to intialize one
            column in the drop down list view of the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            The initial values for the column name and the default header width
            are set.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a object of type AutoCompleteDataColumnInfo.
            </summary>
            <param name="headerText">The text for the column header.</param>
            <param name="width">The width of the column.</param>
            <param name="visible">Specifies if the column is to be visible.</param>
            <remarks>
            This constructor takes the header text, the minimum width and the visible value of the
            column as parameters to the constructor. You can also use the default constructor and 
            then set the column header using the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnHeaderText"/>
            property and the minimum width by setting <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.MinColumnWidth"/> property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ShouldSerializeMinColumnWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ResetMinColumnWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.SetColumnName(System.String)">
            <summary>
            Set the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnName"/> property.
            </summary>
            <param name="columnName">The name of the column.</param>
            <remarks>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnName"/> property is kept as a 
            read only property and the initial value of the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnName"/>
            property is set to be the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnHeaderText"/> property.
            <para>
            This method is provided in case there is a need for changing
            the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnName"/> after being set from a data source
            or through the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnHeaderText"/> property.
            </para>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.PropertyChanged">
            <summary>
            PropertyChanged event handler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.MinColumnWidth">
            <summary>
            The minimum column width for the column to be inserted 
            in the ListView of the drop down list in a <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            </summary>
            <remarks>The MinColumnWidth value will be used when inserting 
            columns into the drop down list view of the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnHeaderText">
            <summary>
            The column header text for the column to be inserted in 
            the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> class.
            </summary>
            <remarks>
            The default value is set to a empty string. The <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnName"/>
            property is a read only property and its initial value is set to be the
            same as the ColumnHeaderText.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
            <remarks>
            This is a read only property and the initial value is
            either set from the column name of a <see cref="T:System.Data.DataColumn"/>
            that this column represents or the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnHeaderText"/>
            that is set initially for this column.
            <para>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ColumnHeaderText"/> and ColumnName properties
            can have different values.
            </para>
            <para>
            The ColumnName is important in the matching process when the
            data source is a external <see cref="T:System.Data.DataTable"/> as the 
            filtering for the probable match list is performed based on
            ColumnName.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.Visible">
            <summary>
            Specifies if this column is to be visible.
            </summary>
            <remarks>
            This property affects the visibility of this column at runtime.
            Any column that is set to be the matching column cannot be set to
            be invisible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.MatchingColumn">
            <summary>
            Specifies if the column that this item represents is to be treated
            as the matching column.
            </summary>
            <remarks>
            When the value is set to true and this <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo"/>
            item belongs to a collection all other items are set to non matching columns.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.ImageColumn">
            <summary>
            Specifies if the column that this item represents is to be treated
            as the image column.
            </summary>
            <remarks>
            When the value is set to true and this <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo"/>
            item belongs to a collection all other items are set to non image columns.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection">
            <summary>
            Collection of <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo"/>objects. Used in the
            <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.Columns"/> property of the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/>
            control.
            </summary>
            <remarks>The AutoCompleteDataColumnInfoCollection is a set of of objects 
            each of which hold information required to create a column in a 
            <see cref="T:System.Windows.Forms.ListView"/>.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection.collectionOwner">
            <summary>
            The owner of the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo)">
            <summary>
            Inserts the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo"/> into the collection 
            at the specfied index.
            </summary>
            <param name="index">The 0-based index at which the item is to be inserted.</param>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo"/> to be inserted.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Overrides OnInsert.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Overrides OnInsertComplete.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection.#ctor(Syncfusion.Windows.Forms.Tools.AutoComplete)">
            <summary>
            Creates an instance of the AutoCompleteDataColumnInfoCollection class.
            </summary>
            <param name="autoComplete">The <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control that
            contains this collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection.Add(Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo)">
            <summary>
            This function will add one object to the collection.
            </summary>
            <param name="column">The <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo"/> object to be added.</param>
            <returns>returns the count of the list items</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection.Remove(Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo)">
            <summary>
            This function will remove <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo"/> objects from the
            collection. 
            </summary>
            <param name="column">The AutoCompleteDataColumnInfo object to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection.GetMatchingColumnIndex">
            <summary>
            Gets the index of the column that is used for matching.
            </summary>
            <returns>Index of the matching column.</returns>
            <remarks>
            Iterates through the collection and returns the index of the 
            element that has the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo.MatchingColumn"/>
            to be true.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection.Contains(Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo)">
            <summary>
            Determines whether the collection contains a specific AutoCompleteDataColumnInfo entry.
            </summary>
            <param name="column">The AutoCompleteDataColumnInfo to locate in the access control list.</param>
            <returns>true if the AutoCompleteDataColumnInfo entry is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection.CopyTo(Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo[],System.Int32)">
            <summary>
            Copies all the elements of the current one-dimensional Array to the specified one-dimensional Array 
            starting at the specified destination Array index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection.Item(System.Int32)">
            <summary>
            Indexer property for the AutoCompleteDataColumnInfoCollection class.
            </summary>
            <remarks>Get the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo"/> object based on the index
            in the collection.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventHandler">
            <summary>
            Delegate for the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.AutoCompleteItemSelected"/> event.
            </summary>
            <remarks>The AutoCompleteSelectedEventHandler uses the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs"/>
            class as the event data.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventHandler">
            <summary>
            The event handler signature for the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.MatchItem"/> event.
            </summary>
            <remarks>The AutoCompleteMatchItemEventHandler takes a <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteMatchItemEventArgs"/>
            object as the event data argument.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompletePreMatchItemEventHandler">
            <summary>
            The event handler signature for the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.MatchItem"/> event.
            </summary>
            <remarks>The AutoCompletePreMatchItemEventHandler takes a <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompletePreMatchItemEventArgs"/>
            object as the event data argument.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteAddItemCancelEventHandler">
            <summary>
            The delegate for the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.BeforeAddItem"/> event
            of the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            </summary>
            <remarks>The AddItemCancelEventHandler uses the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteAddItemCancelEventArgs"/>
            as the event data.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteAddItemCancelEventArgs">
            <summary>
            The event argument for the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteAddItemCancelEventHandler"/> delegate. 
            </summary>
            <remarks>
            This event handler is used
            as the event data for the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.BeforeAddItem"/> event raised by the
            <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteAddItemCancelEventArgs.#ctor">
            <summary>
            The constructor creates and intializes the AutoCompleteAddItemCancelEventArgs object.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteAddItemCancelEventArgs.ImageColumnIndex"/> property is initialized to 
            -1 and the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteAddItemCancelEventArgs.RowItem"/>  property is set to null.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteAddItemCancelEventArgs.RowItem">
            <summary>
            The <see cref="T:System.Data.DataRow"/> object that contains the value that is to be added to the
            history list.
            </summary>
            <remarks>The <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> class uses a <see cref="T:System.Data.DataTable"/>
            and this value is one of the rows for the internal history list of the
            <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> class.
            You can also set the values of sub items or change their values when
            it is handled in the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.BeforeAddItem"/> event raised by
            the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteAddItemCancelEventArgs.ImageColumnIndex">
            <summary>
            The column index into the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.ImageList"/> property.
            </summary>
            <remarks>
            The <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.BeforeAddItem"/> event uses the
            <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteAddItemCancelEventArgs"/> type for the event data. 
            This value can be set in the event hander to be a different value. 
            Changing the index will change the image that will be displayed.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs">
            <summary>
            The event data for AutoCompleteSelected event. This event is raised by
            the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> class when the user selects an item in the
            list off possible matches for the current text being displayed in the
            target edit control.
            </summary>
            <remarks><see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventHandler"/> is the event handler delegate that
            uses this class as the event data.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs.itemarray">
            <summary>
            The list of subitems.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs.matchColumnIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs.selectedValue">
            <summary>
            Specifies if the selected value is to be set to the Target control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs.#ctor(System.Object[],System.Int32)">
            <summary>
            Create a object of type AutoCompleteSelectedEventArgs and set the internal
            oject array with the information about the currently selected item.
            </summary>
            <param name="array">The array that holds the information about the currently
            selected item.</param>
            <param name="matchColumnIndex">The column index to be used for matching.</param>
            <remarks>The array value set through this constructor can be accessed
            through the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs.ItemArray"/> property.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs.ItemArray">
            <summary>
            Gets the Auto Complete item as a object array.
            </summary>
            <remarks>
            This property holds the information about the currently selected item.
            The first item in the array is the first column of the matching item and
            so on for all the sub items.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs.MatchColumnIndex">
            <summary>
            Gets the index of the item that was used for the matching.
            </summary>
            <remarks>
            This index could be different from the matching index of the
            <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control. The <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs.ItemArray"/>
            returned will only have items/columns that are displayed in the
            drop down list of the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs.Handled">
            <summary>
            Specifies if the SelectedValue should be applied to the target control. This only applies
            when used in the AutoCompleteItemSelected event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteInfo">
            <summary>
            The AutoCompleteInfo class provides an encapsulation for
            the data to be serialized for persisting the current state
            of the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> class.
            </summary>
            <remarks>The AutoCompleteInfo class provides a wrapper around the
            DataTable used by the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> class to hold the
            history items when in <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.AutoSerialize"/> mode.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteInfo.completeListValue">
            <summary>
            The internal sorted list object used to save the
            history items
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteInfo.#ctor">
            <summary>
            Create an object of type AutoCompleteInfo and initialize
            the member objects.
            </summary>
            <remarks>The DataTable that is used by the AutoCompleteInfo
            class to hold information about the history items of the 
            AutoComplete class is initialized with a new <see cref="T:System.Data.DataTable"/>.
            The <see cref="P:Syncfusion.Windows.Forms.Tools.AutoCompleteInfo.CompleteList"/> property needs to be set with
            the appropriate DataTable.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteInfo.CompleteList">
            <summary>
            The complete list of items in the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> 
            object.
            </summary>
            <remarks>This value needs to be set to the DataTable being used
            by the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> class that this <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteInfo"/>
            object is providing services for.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteErrorArgs">
            <summary>
            This class wraps a exception that is thrown by the system as event
            data.
            </summary>
            <remarks>
            The event data can be used to track the problem with the exception
            that was raised by the system during the auto completion of the
            <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteErrorArgs.error">
            <summary>
            The exception thrown by the system.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteErrorArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the class with a exception.
            </summary>
            <param name="error">The exception that resulted in this event data 
            being created.</param>
            <remarks>The exception that is set through the constructor can be 
            accessed through the <see cref="M:Syncfusion.Windows.Forms.Tools.AutoCompleteErrorArgs.GetException"/> method.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteErrorArgs.GetException">
            <summary>
            Gets the original exception that was thrown by the system.
            </summary>
            <remarks>
            The <see cref="T:System.Exception"/> that is returned can be used to 
            track down any issues that occur in the auto completion process
            of the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            </remarks>
            <returns>The exception that was thrown by the system.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteErrorEventHandler">
            <summary>
            Delegate for the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.AutoCompleteItemSelected"/> event.
            </summary>
            <remarks>The AutoCompleteSelectedEventHandler uses the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteItemEventArgs"/>
            class as the event data.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetChangingEventArgs">
            <summary>
            The event data for <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.TargetChanging"/> event.
            </summary>
            <remarks>
            The event data provides information that can be used to tailor the
            behavior of the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control for different
            edit controls.
            <para>
            <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetChangingEventHandler"/> is the event handler
            delegate that uses this class as the event data.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetChangingEventArgs.editControl">
            <summary>
            The editControl that is getting the focus or losing 
            the focus.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetChangingEventArgs.isLeaving">
            <summary>
            Specifies if the control is losing the focus.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetChangingEventArgs.#ctor(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetChangingEventArgs"/>
            class using a <see cref="T:System.Windows.Forms.Control"/> and a boolean.
            </summary>
            <param name="editControl">The edit control that is losing the focus or gaining focus.</param>
            <param name="isLeaving">Specifies if the edit control is gaining focus or losing it.</param>
            <remarks>
            The <paramref name="editControl"></paramref> parameter is the edit control that is gaining
            focus or losing it. The <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control's behavior can be changed
            based on which edit control it is providing auto completion for.
            <para>
            The <paramref name="isLeaving"></paramref> parameter specifies if the edit
            control is losing or gaining focus. The value will be false if the edit
            control is gaining focus.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetChangingEventArgs.EditControl">
            <summary>
            Gets the edit control that is gaining or losing focus.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control's behavior can be tailored
            to be different for each control that it is providing auto completion
            for. When handling the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.TargetChanging"/> event
            this property provides information about the currently active edit
            control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetChangingEventArgs.IsLeaving">
            <summary>
            Gets information on whether the event has been raised in response to a 
            control gaining focus or losing focus.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetChangingEventHandler">
            <summary>
            Delegate for the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.TargetChanging"/> event.
            </summary>
            <remarks>The AutoCompleteTargetChangingEventHandler uses the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetChangingEventArgs"/>
            class as the event data.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteTarget">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteTarget.editControl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteTarget.autoCompleteMode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteTarget.#ctor(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.AutoCompleteModes)">
            <summary>
            
            </summary>
            <param name="editControl"></param>
            <param name="autoCompleteMode"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteTarget.EditControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteTarget.AutoCompleteMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetCollection">
            <summary>
            Collection of <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo"/>objects. Used in the
            <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.Columns"/> property of the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/>
            control.
            </summary>
            <remarks>The AutoCompleteDataColumnInfoCollection is a set of of objects 
            each of which hold information required to create a column in a 
            <see cref="T:System.Windows.Forms.ListView"/>.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetCollection.Add(Syncfusion.Windows.Forms.Tools.AutoCompleteTarget)">
            <summary>
            This function will add one person to the collection.
            </summary>
            <param name="column">The AutoCompleteDataColumnInfo object to be added.</param>
            <returns>returns the count of the list items</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetCollection.Remove(Syncfusion.Windows.Forms.Tools.AutoCompleteTarget)">
            <summary>
            This function will remove DataColomnInfo objrects from the
            collectoion. 
            </summary>
            <param name="column">The AutoCompleteDataColumnInfo object to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetCollection.Contains(Syncfusion.Windows.Forms.Tools.AutoCompleteTarget)">
            <summary>
            Determines whether the collection contains a specific 
            AutoCompleteDataColumnInfo entry.
            </summary>
            <param name="column">The AutoCompleteDataColumnInfo to locate 
            in the access control list.</param>
            <returns>true if the AutoCompleteDataColumnInfo entry is 
            found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetCollection.CopyTo(Syncfusion.Windows.Forms.Tools.AutoCompleteTarget[],System.Int32)">
            <summary>
            Copies all the elements of the current one-dimensional 
            Array to the specified one-dimensional Array 
            starting at the specified destination Array index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoCompleteTargetCollection.Item(System.Int32)">
            <summary>
            Indexer property for the AutoCompleteDataColumnInfoCollection class.
            </summary>
            <remarks>Get the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo"/> object based 
            on the index in the collection.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteCustomizeEventArgs">
            <summary>
            This class wraps a exception that is thrown by the system as event
            data.
            </summary>
            <remarks>
            The event data can be used to track the problem with the exception
            that was raised by the system during the auto completion of the
            <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteCustomizeEventArgs.autoSuggestLocation">
            <summary>
            The location of the top left corner of the AutoSuggest window.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoCompleteCustomizeEventArgs.textForAutoCompletion">
            
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoCompleteCustomizeEventHandler">
            <summary>
            Delegate for the <see cref="E:Syncfusion.Windows.Forms.Tools.AutoComplete.AutoCompleteCustomize"/> event.
            </summary>
            <remarks>The AutoCompleteCustomizeEventHandler uses the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteCustomizeEventArgs"/>
            class as the event data.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DataSourceException">
            <summary>
            Represents error that occurred during setting a external data source 
            by the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control.
            </summary>
            <remarks>
            This exception packages the exception that was raised by the system when 
            there is a problem with the data source. The original exception can be 
            accessed through the <see cref="P:System.Exception.InnerException"/> property.
            <para>
            The most common source for this exception to be raised is an incorrect
            Data source specified. Please refer to the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoComplete.DataSource"/>
            property for more information.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataSourceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.DataSourceException"/> class
            using a message and a original exception.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The original exception.</param>
            <remarks>
            The content of the <paramref name="message">message</paramref> parameter is intended to be
            understood by humans. The caller of this constructor is required to
            ensure that this string has been localized for the current system culture.
            This message takes into account the current system culture.
            <para>
            The <paramref name="inner">inner</paramref> parameter is the original exception
            raised by the system in the process of setting the data source.
            </para>
            <para>
            The following table shows the initial property values for an instance
            of <see cref="T:Syncfusion.Windows.Forms.Tools.DataSourceException"/>.
            </para>
            <list type="table">
            <listheader><term>Property</term><description>Value</description></listheader>
            <item><term><see cref="T:System.Windows.Forms.Message"/></term><description>The error message string.</description></item>
            <item><term><see cref="P:System.Exception.InnerException"/></term><description>The inner exception reference.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataSourceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.DataSourceException"/> class
            using a message.
            </summary>
            <param name="message">The message for the exception.</param>
            <remarks>
            The content of the <paramref name="message">message</paramref> parameter is intended to be
            understood by humans. The caller of this constructor is required to
            ensure that this string has been localized for the current system culture.
            This message takes into account the current system culture.
            <para>
            The following table shows the initial property values for an instance
            of <see cref="T:Syncfusion.Windows.Forms.Tools.DataSourceException"/>.
            </para>
            <list type="table">
            <listheader><term>Property</term><description>Value</description></listheader>
            <item><term><see cref="T:System.Windows.Forms.Message"/></term><description>The error message string.</description></item>
            <item><term><see cref="P:System.Exception.InnerException"/></term><description>A null reference (Nothing in Visual Basic).</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboBoxHideDropDown">
            <summary>
            Create a custom ComboBox class that does not display the drop down
            in any mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxHideDropDown.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override WndProc.
            </summary>
            <param name="m"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboBoxAutoComplete">
            <summary>
            ComboBoxAutoComplete derives from <see cref="T:System.Windows.Forms.ComboBox"/> and embeds a 
            <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control to provide auto completion services
            for the ComboBox.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxAutoComplete.OnDropDown(System.EventArgs)">
            <summary>
            Override the OnDropDown method to show the AutoComplete drop down.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxAutoComplete.GetUnselectedInitialText">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxAutoComplete.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override WndProc.
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxAutoComplete.AllowNewText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxAutoComplete.ParentForm">
            <summary>
            The ParentForm of the ComboBox.
            </summary>
            <remarks>
            This property needs to be set to be the form on which this ComboBox  control
            is placed. This is used by the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxAutoComplete.AutoCompleteControl"/>
            control.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ButtonEdit">
            <summary>
            The ButtonEdit class provides an easy way to create controls
            with a edit control (<see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.TextBox"/> and <see cref="T:System.Windows.Forms.ComboBox"/>) and any number of associated buttons.
            </summary>
            <remarks>
            <para>
            The buttons can be set to aligned to either side of the edit control.
            </para>
            <para>
            The buttons are derived from the <see cref="T:System.Windows.Forms.Button"/> class and are implemented
            in the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> class. This class provides a customized
            version of Button that can work with the ButtonEdit class.
            </para>
            <para>
            The ButtonEdit class implements the <see cref="T:Syncfusion.Windows.Forms.Tools.IButtonEditParent"/> interface
            that enables it to act as a listener with the ButtonEditChildButton class. The
            ButtonEdit class listens for change notifications from the child ButtonEditChildButton
            child controls and adjusts its layout accordingly.
            </para>
            <para>
            The buttons can be added to the ButtonEdit control through the designer. The buttons
            will be automatically laid out. The ButtonEdit control uses <see cref="T:Syncfusion.Windows.Forms.Tools.GridBagLayout"/>
            to layout the buttons.
            </para>
            <para>
            The ButtonEdit class can be easily derived from to replace the standard
            edit control with a specialized TextBox derived class.
            </para>
            <para>
            The ButtonEdit class supports the Windows Forms styles and can be used as a regular TextBox control.
            </para>
            </remarks>
            <example> 
            <code lang="C#">
                        // InitializeComponent sample
                        this.buttonEdit1 = new Syncfusion.Windows.Forms.Tools.ButtonEdit();
            
                        this.buttonEditChildButton1 = new Syncfusion.Windows.Forms.Tools.ButtonEditChildButton();
                        this.buttonEdit1.SuspendLayout();
                        this.SuspendLayout();
            
                        this.buttonEdit1.Buttons.Add(this.buttonEditChildButton1);
                        this.buttonEdit1.Controls.AddRange(new System.Windows.Forms.Control[] {
                                                                                                  this.buttonEditChildButton1});
                        this.buttonEdit1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
                        this.buttonEdit1.Location = new System.Drawing.Point(8, 16);
                        this.buttonEdit1.Name = "buttonEdit1";
                        this.buttonEdit1.SelectionLength = 0;
                        this.buttonEdit1.SelectionStart = 0;
                        this.buttonEdit1.ShowTextBox = true;
                        this.buttonEdit1.Size = new System.Drawing.Size(368, 22);
                        this.buttonEdit1.TabIndex = 0;
                        this.buttonEdit1.TextAlign = System.Windows.Forms.HorizontalAlignment.Left;
                        //
                        // buttonEditChildButton1
                        //
                        this.buttonEditChildButton1.ButtonAlign = Syncfusion.Windows.Forms.Tools.ButtonAlignment.Right;
                        this.buttonEditChildButton1.ButtonEditParent = this.buttonEdit1;
                        this.buttonEditChildButton1.ButtonType = Syncfusion.Windows.Forms.Tools.ButtonTypes.Browse;
                        this.buttonEditChildButton1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
                        this.buttonEditChildButton1.Location = new System.Drawing.Point(352, 0);
                        this.buttonEditChildButton1.Name = "buttonEditChildButton1";
                        this.buttonEditChildButton1.PreferredWidth = 16;
                        this.buttonEditChildButton1.Size = new System.Drawing.Size(16, 22);
                        this.buttonEditChildButton1.TabIndex = 1;
                        this.buttonEditChildButton1.Click += new System.EventHandler(this.buttonEditChildButton1_Click);
                        this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
                        this.ClientSize = new System.Drawing.Size(400, 273);
                        this.Controls.AddRange(new System.Windows.Forms.Control[] {      this.buttonEdit1});
                        this.Text = "Syncfusion ButtonEdit Demo";
                        this.buttonEdit1.ResumeLayout(false);
                        this.ResumeLayout(false);</code>
            
                    <coderef file="c:\syncfusion\essential suite\tools\samples\quick start\buttoneditdemo\VB\MainForm.vb" name="ButtonEdit InitializeComponent" lang="VB"><code lang="VB">
                       ' InitializeComponent sample
                       Me.buttonEdit1 = New Syncfusion.Windows.Forms.Tools.ButtonEdit()
                       Me.buttonEditChildButton1 = New Syncfusion.Windows.Forms.Tools.ButtonEditChildButton()
                       Me.buttonEdit1.SuspendLayout()
                       Me.SuspendLayout()
                       Me.buttonEdit1.Buttons.Add(Me.buttonEditChildButton1)
                       Me.buttonEdit1.Controls.AddRange(New System.Windows.Forms.Control() {Me.buttonEditChildButton1})
                       Me.buttonEdit1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
                       Me.buttonEdit1.Location = New System.Drawing.Point(8, 16)
                       Me.buttonEdit1.Name = "buttonEdit1"
                       Me.buttonEdit1.SelectionLength = 0
                       Me.buttonEdit1.SelectionStart = 0
                       Me.buttonEdit1.ShowTextBox = True
                       Me.buttonEdit1.Size = New System.Drawing.Size(368, 22)
                       Me.buttonEdit1.TabIndex = 0
                       Me.buttonEdit1.TextAlign = System.Windows.Forms.HorizontalAlignment.Left
                       '
                       ' buttonEditChildButton1
                       '
                       Me.buttonEditChildButton1.ButtonAlign = Syncfusion.Windows.Forms.Tools.ButtonAlignment.Right
                       Me.buttonEditChildButton1.ButtonEditParent = Me.buttonEdit1
                       Me.buttonEditChildButton1.ButtonType = Syncfusion.Windows.Forms.Tools.ButtonTypes.Browse
                       Me.buttonEditChildButton1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
                       Me.buttonEditChildButton1.Location = New System.Drawing.Point(352, 0)
                       Me.buttonEditChildButton1.Name = "buttonEditChildButton1"
                       Me.buttonEditChildButton1.PreferredWidth = 16
                       Me.buttonEditChildButton1.Size = New System.Drawing.Size(16, 22)
                       Me.buttonEditChildButton1.TabIndex = 1
                       AddHandler Me.buttonEditChildButton1.Click, New System.EventHandler(AddressOf buttonEditChildButton1_Click)
                       Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
                       Me.ClientSize = New System.Drawing.Size(400, 273)
                       Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.buttonEdit1})
                       Me.Text = "Syncfusion ButtonEdit Demo"
                       Me.buttonEdit1.ResumeLayout(False)
                       Me.ResumeLayout(False)</code></coderef>
                       </example>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.IButtonEditParent">
            <summary>
            This interface is implemented by the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> to listen
            to notifications from <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> classes.
            </summary>
            <remarks>
            You will not need to use this class directly. It is useful for listening to notifications
            from <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> class.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IButtonEditParent.ChildButtonSizeChanged(Syncfusion.Windows.Forms.Tools.ButtonEditChildButton,System.Drawing.Size)">
            <summary>
            Notifies the listener that the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/>'s size has changed.
            </summary>
            <param name="btn">The <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> thats has changed in size.</param>
            <param name="newSize">The new size of the button.</param>
            <remarks>
            This notification is sent by the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> when the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.PreferredWidth"/> property value is changed.
            The <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> control implements this interface and receives
            the notification to change its layout in accordance with the new size of the
            ButtonEditChildButton.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IButtonEditParent.ChildButtonAlignmentChanged(Syncfusion.Windows.Forms.Tools.ButtonEditChildButton,Syncfusion.Windows.Forms.Tools.ButtonAlignment)">
            <summary>
            Notifies the listener that the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/>'s alignment has changed.
            </summary>
            <param name="btn">The <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> thats has changed alignment.</param>
            <param name="newAlign">The new alignment.</param>
            <remarks>
            This notification is sent by the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> when the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.ButtonAlign"/> property value is changed.
            The <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> control implements this interface and receives
            the notification to change its layout in accordance with the new alignment of the
            ButtonEditChildButton. See the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonAlignment"/> type for the values
            that the ButtonAlignment can support.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEdit.flatStyleValue">
            <summary>
            The button flat style to applied across all buttons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEdit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEdit.buttonsCollection">
            <summary>
            Collection of ButtonEditChildButtons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEdit.hostFormObject">
            <summary>
            The host form.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEdit.buttonTextBox">
            <summary>
            The text box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEdit.rm">
            <summary>
            The resource manager.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEdit.listener">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEdit.parentContainer">
            <summary>
            The IContainerControl Parent
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEdit.DropDownButtonWidth">
            <summary>
            The width of the dropdown button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEdit.colorScheme">
            <summary>
            The color scheme that the renderer will render. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.GetImage(System.String)">
            <summary>
            Helper function to get an image from within embedded resources.
            </summary>
            <param name="resourceName">The resource name to get</param>
            <returns>An image; null if the image is not available</returns>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> class can take a image based on the
            <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.ButtonType"/> property. This helper functions
            loads the images based the resource name.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.#ctor">
            <summary>
            Create a object of type <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> and initialize it.
            </summary>
            <remarks>
            The ButtonEdit class can be created by dragging and dropping a ButtonEdit control
            from the controls toolbox. The constructor initializes the embedded TextBox.
            The embedded child controls will have to be explicitly added to the ButtonEdit
            object (this will be done by the designer if using the control through the Windows
            Forms designer).
            <para>
            The <see cref="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.CreateTextBox"/> method provides an easy way to change the default
            embedded TextBox to a specialized TextBox derived class such as the <see cref="T:Syncfusion.Windows.Forms.Tools.MaskedEditBox"/>
            or the <see cref="T:Syncfusion.Windows.Forms.Tools.CurrencyTextBox"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.CreateTextBox">
            <summary>
            This method creates a <see cref="T:System.Windows.Forms.TextBox"/> object.
            </summary>
            <returns>The TextBox object that is created.</returns>
            <remarks>
            This method can be overriden to create a <see cref="T:System.Windows.Forms.TextBox"/> derived
            class to be returned. This will result in the TextBox object in the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/>
            control to be replaced with a derived control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.InitTextBox">
            <summary>
            Called to initialize the <see cref="T:System.Windows.Forms.TextBox"/> used in the 
            editable text portion.
            </summary>
            <remarks>
            <para>
            This method is called once to initialize the <b>TextBox</b> used to draw the 
            editable portion of the ButtonEdit. Use the <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.TextBox"/> property to get a 
            reference to the <b>TextBox</b> from inside a override of this method.
            </para>
            <para>
            Make sure to call the base class when you override this method for 
            default initialization.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.CreateTextBox"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.ResetBackColor">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.ApplyStyle">
            <summary>
            Private helper function that applies the style to all the child buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.HandleChildButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Handle the Button Clicked Event of the child buttons.
            </summary>
            <param name="sender">The child button</param>
            <param name="valArgs">The Event data</param>
            <remarks>
            This handler raises the <see cref="E:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonClicked"/> event and passes the
            <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> that was clicked as the sender of the
            event. 
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.RaiseButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonClicked"/> event.
            </summary>
            <param name="sender">The child button.</param>
            <param name="valArgs">The event data.</param>
            <remarks>
            Calls the <see cref="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.OnButtonClicked(Syncfusion.Windows.Forms.Tools.ButtonClickedEventArgs)"/> method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.OnButtonClicked(Syncfusion.Windows.Forms.Tools.ButtonClickedEventArgs)">
            <summary>
            Override this to handle the <see cref="E:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonClicked"/>event in a derived class.
            Call the base implementation first so that the delegates will be
            called.
            </summary>
            <param name="args">The ButtonClickEventArgs event data.</param>
            <remarks>
            This method raises the <see cref="E:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonClicked"/> event when any of the
            Child buttons are clicked.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.OnBorderSidesChanged(System.EventArgs)">
            <summary>
            Raises the BorderSidesChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorderSidesChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OmBorderSidesChanged 
            in a derived class, be sure to call the base class's 
            OnBorderSidesChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.OnBorder3DStyleChanged(System.EventArgs)">
            <summary>
            Raises the Border3DStyleChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorder3DStyleChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBorder3DStyleChanged 
            in a derived class, be sure to call the base class's 
            OnBorder3DStyleChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.DrawBorderAndBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Called to draw the border and background of the Control.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> within which to draw.</param>
            <remarks>
            <para>
            This method is used to draw the border around the text area (when called from 
            <see cref="!:DrawEditPortionBorderAndBackground"/> method) and around the listbox area (when in 
            ComboBoxStyle.Simple mode and called from the <see cref="!:DrawListPortion"/> method).
            </para>
            <para>This method uses themes to draw if necessary or calls <see cref="!:DrawUnThemedBackground"/> and 
            <see cref="!:DrawUnThemedBorder"/> to draw the background and border.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Called to draw the unthemed border of this Control.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> within which to draw.</param>
            <remarks>
            <para>Called by <see cref="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.DrawBorderAndBackground(System.Drawing.Graphics,System.Drawing.Rectangle)"/> to draw the border when
            not in themes mode.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Called to draw the unthemed background of this Control.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> within which to draw.</param>
            <remarks>
            <para>Called by <see cref="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.DrawBorderAndBackground(System.Drawing.Graphics,System.Drawing.Rectangle)"/> to draw the background when
            not in themes mode.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.OnThemeChanged(System.EventArgs)">
            <summary>
            Raises the ThemeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnThemeChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnThemeChanged in a derived
            class, be sure to call the base class's OnThemeChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.Layout(System.Drawing.Graphics)">
            <summary>
            Force laying out the combobox elements.
            </summary>
            <param name="g">The Graphics object using which to calculate element sizes and positions.</param>
            <remarks>
            Advanced method. You do not have to call this directly.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.UpdateTextBoxAndButtonBounds(System.Int32)">
            <summary>
            Updates the bounds of the drop-down button bounds.
            </summary>
            <remarks>
            Sets the bounds based on the <see cref="F:Syncfusion.Windows.Forms.Tools.ButtonEdit.DropDownButtonWidth"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.DrawBorderAndBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called from the <b>Paint</b> event handler to draw the edit portion's border and background.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> from the Paint event.</param>
            <remarks>
            This method calls the <see cref="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.DrawBorderAndBackground(System.Drawing.Graphics,System.Drawing.Rectangle)"/> method with the appropriate
            dimenison to draw the border around the text portion.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.SetNeedLayout(System.Boolean)">
            <summary>
            Will force laying out the combo elements within the next Paint Message handler.
            </summary>
            <param name="needLayout">true to force; false to prevent layout.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.DetermineHeightsBasedOnFont(System.Drawing.Graphics,System.Int32@)">
            <summary>
            Called to determine the heights of certain portions of this Control.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="textAreaHeight">A reference variable through which to return the height for the text area.</param>
            <remarks>
            <para>
            Make sure to call the base class when you override this method.
            </para>
            <para>
            This method expects you to return a height for the text area through the reference variable,
            set the height of this Control and the height of the buttons.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.Syncfusion#Windows#Forms#IPopupItem#GetPopupParentControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.Syncfusion#Windows#Forms#IPopupItem#IsRelatedControl(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            
            </summary>
            <param name="testControl"></param>
            <param name="askParent"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.Syncfusion#Windows#Forms#IPopupParent#ChildClosing(Syncfusion.Windows.Forms.IPopupChild,Syncfusion.Windows.Forms.PopupCloseType)">
            <summary>
            
            </summary>
            <param name="child"></param>
            <param name="closeType"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.Syncfusion#Windows#Forms#IPopupParent#GetBorderOverlapCue(Syncfusion.Windows.Forms.PopupRelativeAlignment)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.Syncfusion#Windows#Forms#IPopupParent#GetLocationForPopupAlignment(Syncfusion.Windows.Forms.PopupRelativeAlignment,Syncfusion.Windows.Forms.PopupRelativeAlignment@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.ChildButtonSizeChanged(Syncfusion.Windows.Forms.Tools.ButtonEditChildButton,System.Drawing.Size)">
            <summary>
            This is the implementation of the <see cref="T:Syncfusion.Windows.Forms.Tools.IButtonEditParent"/> interface
            for listening to changes to the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> child buttons.
            </summary>
            <param name="btn">The ButtonEditChildButton that has changed in size.</param>
            <param name="newSize">The new size of the button.</param>
            <remarks>
            This notification is sent by the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> when the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.PreferredWidth"/> property value is changed.
            The <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> control implements this interface and receives
            the notification to change its layout in accordance with the new size of the
            ButtonEditChildButton.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.ChildButtonAlignmentChanged(Syncfusion.Windows.Forms.Tools.ButtonEditChildButton,Syncfusion.Windows.Forms.Tools.ButtonAlignment)">
            <summary>
            This is the implementation of the <see cref="T:Syncfusion.Windows.Forms.Tools.IButtonEditParent"/> interface
            for listening to changes to the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> child buttons.
            </summary>
            <param name="btn">The ButtonEditChildButton that has changed in alignment.</param>
            <param name="newAlign">The new alignment of the button.</param>
            <remarks>
            This notification is sent by the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> when the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.ButtonAlign"/> property value is changed.
            The <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> control implements this interface and receives
            the notification to change its layout in accordance with the new alignment of the
            ButtonEditChildButton. See the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonAlignment"/> type for the values
            that the ButtonAlignment can support.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.HandleChildClicked(System.Object,System.EventArgs)">
            <summary>
            Event handler that sets the Parent's ActiveControl when one
            of the child controls are clicked.
            </summary>
            <remarks>There is a problem with using the ButtonEdit control
            inside a UserControl that doesnt update the UserControl's Active
            Control property properly when the user clicks inside the ButtonEdit.
            This event handler sets the ActiveControl explicitly.</remarks>
            <param name="sender">The child TextBox.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.GetActiveEditControl(Syncfusion.Windows.Forms.IEditControlsEmbedListener)">
            <summary>
            The active edit control. This implements the <see cref="T:Syncfusion.Windows.Forms.IEditControlsEmbed"/>
            interface.
            </summary>
            <returns>The edit control that has the current focus.</returns>
            <remarks>
            This interface is implemented so that the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoComplete"/> control
            can provide auto completion services for the embedded TextBox control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.Insert(System.Int32,Syncfusion.Windows.Forms.Tools.ButtonEditChildButton)">
            <summary>
            Insert the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> into the Controls collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="button">The child button control that is to be added.</param>
            <remarks>
            This method is invoked by the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection"/> class
            when new buttons are added to the ButtonEdit control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.Remove(System.Int32,Syncfusion.Windows.Forms.Tools.ButtonEditChildButton)">
            <summary>
            Remove a ButtonEditChildButton from the Controls collection.
            </summary>
            <param name="index">The index of the child control to be removed</param>
            <param name="button">The child control that is to be removed</param>
            <remarks>
            This method is invoked by the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection"/> class
            when buttons are removed from the ButtonEdit control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.OnGotFocus(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.OnLostFocus(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.HideButton(System.Int32,System.Boolean)">
            <summary>
            This method can make a child button visible or hide it within the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> layout.
            </summary>
            <remarks>
            There might be instances when you need to hide a child button that is part of
            the <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.Buttons"/> collection. Calling this method with the button index
            and the right value for the visibility will set the appropriate visibility for the
            button and also adjust the layout so that the othet child buttons and the TextBox
            are aligned properly.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.HandleEditTextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event of the embedded TextBox control.
            </summary>
            <param name="sender">The TextBox control that sends the event.</param>
            <param name="e">The event data.</param>
            <remarks>
            The TextChanged event is handled and the ButtonEdit control sets its own
            Text to be the same as that of the embedded TextBox control's Text property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.Refresh">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.SetColorScheme">
            <summary>
            Set the Color scheme for the button based on the current XP Scheme and
            the IsComboButton property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.CharacterCasing">
            <summary>
            Specifies whether the ComboBoxBase control modifies the case of characters as they are typed.
            </summary>
            <value>
            <para>One of the <see cref="T:System.Windows.Forms.CharacterCasing"/> enumeration values that specifies whether the ComboBoxBase control modifies the case of characters. The default is CharacterCasing.Normal.</para>
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.TextAlign">
            <summary>
            Specifies how text is aligned in this control.
            </summary>
            <value>
            One of the <see cref="T:System.Windows.Forms.HorizontalAlignment"/> enumeration 
            values that specifies how text is aligned in the control. 
            The default is <b>HorizontalAlignment.Left</b>.
            </value>
            <remarks>
            You can use this property to align the text within a ComboBoxBase 
            to match the layout of text on your form. For example, if your controls 
            are all located on the right side of the form, you can set the TextAlign 
            property to <b>HorizontalAlignment.Right</b>, and the text will be aligned 
            with the right side of the control instead of the default left alignment.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.ForeColor">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.DefaultSize">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.DropDownButtonHeight">
            <summary>
            Specifies the height of the drop-down button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.EditPortionHeight">
            <summary>
            Specifies the height of the edit portion.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.TextBox">
            <summary>
            The embedded <see cref="T:System.Windows.Forms.TextBox"/> control.
            </summary>
            <remarks>
            The TextBox control is the core control of the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> control.
            This control takes up the width of the control minus the widths of the individual
            buttons. This TextBox control can be accessed through this property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.Text">
            <summary>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.Text"/> property of the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> class is the same
            as the <see cref="P:System.Windows.Forms.TextBox.Text"/> property of the embedded
            <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.TextBox"/> control.
            <value>A TextBox object.</value>
            </summary>
            <remarks>
            The TextBox control's properties can be changed through the property grid in the
            designer. The TextBox control can be hidden from view using the <see cref="P:System.Windows.Forms.Control.Visible"/>
            property to false. The Text property is overriden to keep the Text in sync with the
            embedded TextBox control's Text property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.ShowTextBox">
            <summary>
            This specifies if the embedded TextBox is visible in the 
            ButtonEdit.
            </summary>
            <remarks>
            If the TextBox control is kept invisible, it will be ignored during the
            layout process and the space will be divided among the child <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.Buttons"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.SelectionStart">
            <summary>
            The SelectionStart property of the ButtonEdit control is the same as the <see cref="P:System.Windows.Forms.TextBoxBase.SelectionStart"/>
            property of the embedded <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
            <remarks>
            The ButtonEdit control shadows some of the properties of the embedded TextBox control.
            The SelectionStart property is shadowed enabling access to the ButtonEdit in a manner
            similar to the TextBox control for accessing the Text content of the control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.SelectionLength">
            <summary>
            The Selection Length of the embedded TextBox control.
            </summary>
            <remarks>
            The ButtonEdit control shadows some of the properties of the embedded TextBox control.
            The SelectionLength property is shadowed enabling access to the ButtonEdit in a manner
            similar to the TextBox control for accessing the Text content of the control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.FlatStyle">
            <summary>
            The FlatStyle to be applied to the buttons in the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> control.
            </summary>
            <remarks>
            The ButtonEdit control applies the same FlatStyle to all the child controls
            in the layout. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.PreventHeightChange">
            <summary>
            Specifies whether or not the Height property of the control can be changed.
            </summary>
            <value>true to prevent height change; false otherwise.</value>
            <remarks>
            Note that this property will be frequently set and reset within the control layout.
            You can use this temporarily to force a particular height on the control.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonClicked">
            <summary>
            The ButtonClicked event is raised when one of the child <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/>
            is clicked.
            </summary>
            <remarks>
            Handle this event if you want to handle the click event of any of the child buttons.
            You can also add any of the events exposed by the child buttons themselves as they
            <see cref="T:System.Windows.Forms.Button"/> class derived buttons that raise the Click
            event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.Border3DStyle">
            <summary>
            Lets you specify the 3D border style for the control.
            </summary>
            <remarks>
            This property is used only when BorderStyle is Fixed3D.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.BorderSides">
            <summary>
            Lets you specify the border sides for which you want the 3D border style applied
            </summary>
            <remarks>
            This property is used only when BorderStyle is Fixed3D.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.FlatBorderColor">
            <summary>
            Specifies the Color with which the Flat Border should be drawn.
            </summary>
            <value>
            A Color value. Default is SystemColors.ControlDark.
            </value>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ButtonEdit.ThemeChanged">
            <summary>
            This event will be fired when the ThemesEnabled property changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.Syncfusion#Windows#Forms#IThemedControl#ThemesEnabled">
            <summary>
            Specifies whether or not themes are enabled for this Control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.NeedLayout">
            <summary>
            Specifies whether or not the Layout method needs to be called to layout the combo
            elements.
            </summary>
            <remarks>
            Internal method. You will not have to call this property explicitly.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.TextBoxBindings">
            <summary>
            Use this property to bind the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.ParentContainer">
            <summary>
            The ParentContainer control that implements IContainerControl.
            </summary>
            <remarks>
            Set this property to a Form or UserControl if its not the same
            as the Parent of the control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.Buttons">
            <summary>
            The collection of Buttons that make up this ButtonEdit control.
            </summary>
            <remarks>
            The Buttons property is a collection of type <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection"/>
            that includes all the child buttons that are embedded as child controls in the
            ButtonEdit control. 
            <para>
            You can add and remove buttons and edit their properties through the designer.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection">
            <summary>
            Collection of <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> objects.
            </summary>
            <remarks>
            The collection of <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> controls that make up the
            <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.Buttons"/> property of the ButtonEdit class.
            <para>
            You will not need to use this class directly.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection.owner">
            <summary>
            The owner ButtonEdit object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection.#ctor(Syncfusion.Windows.Forms.Tools.ButtonEdit)">
            <summary>
            Create a object of type <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection"/>
            </summary>
            <param name="owner">The ButtonEdit object that owns this collection.</param>
            <remarks>
            The ButtonEdit class that owns this collection is passed in as a parameter
            and this collection class will use this reference to the owner to inform
            it to add a Button control or remove a Button control when an item is
            added or removed to the collection.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection.Add(Syncfusion.Windows.Forms.Tools.ButtonEditChildButton)">
            <summary>
            Adds a <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> to the collection.
            </summary>
            <param name="button">The object to be added.</param>
            <returns>The index of the object in the collection.</returns>
            <remarks>
            Add an item to the internal List object results in the <see cref="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection.OnInsertComplete(System.Int32,System.Object)"/>
            method being invoked.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Derived handler for the InsertComplete event.
            </summary>
            <param name="index">The index of the inserted item.</param>
            <param name="value">The object that was inserted.</param>
            <remarks>
            Be sure to call the base class implementation of this method
            if overriding.
            <para>
            The owner (the ButtonEdit) control is instructed to insert a new
            ButtonEditChildButton.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection.Remove(Syncfusion.Windows.Forms.Tools.ButtonEditChildButton)">
            <summary>
            Remove a<see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> object from the collection.
            </summary>
            <param name="button">The ButtonEditChildButton that is to be removed from the collection.</param>
            <remarks>
            Removes the ButtonEditChildButton from the internal List object if the ButtonEditChildButton
            exists.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection.Contains(Syncfusion.Windows.Forms.Tools.ButtonEditChildButton)">
            <summary>
            Checks if a object exists in this collection.
            </summary>
            <param name="button">The object to check for.</param>
            <returns>true if the object exists in this collection;otherwise, false</returns>
            <remarks>
            This method is used for checking if an item exists in the collection before trying
            to delete or change that item.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection.CopyTo(Syncfusion.Windows.Forms.Tools.ButtonEditChildButton[],System.Int32)">
            <summary>
            Copy elements of this collection to another collection starting
            at an index.
            </summary>
            <param name="array">The array to be copied to.</param>
            <param name="index">The index to begin from.</param>
            <remarks>
            The internal List copies the child buttons to the new array passed in.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Derived handler for the RemoveComplete event.
            </summary>
            <param name="index">The index of the inserted item.</param>
            <param name="value">The object that was inserted.</param>
            <remarks>
            The owner is informed by the collection to relayout itself to accomodate the
            change.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection.Item(System.Int32)">
            <summary>
            Indexer property for <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonEditChildButtonCollection"/>
            </summary>
            <remarks>
            This allows the ButtonEditChildButtons to be accessed through the indexer.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton">
            <summary>
            The ButtonEditChildButton class is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/>
            class as its child buttons. This class is derived from the <see cref="T:System.Windows.Forms.Button"/>
            class. You will not need to create this control directly as it will be created through
            the ButtonEdit class.
            </summary>
            <remarks>
            <para>
            The Buttons embedded in a <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> control need to abide by some constraints
            imposed by the layout and the settings of the ButtonEdit control. A customized Button control
            is needed for this purpose so that the relationship between the embedded child buttons and the
            parent ButtonEdit control can be established.
            </para>
            <para>
            Customizing the Button class to provide features suitable for use inside the ButtonEdit
            control also provides ease of use for users. The ButtoneditChildButton implements additional
            properties such as <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.ButtonType"/> (that allow you to choose different types of
            commonly used button icons).
            </para>
            <para>
            The ButtoneditChildButton also supports a listener model that notifiers a listener when its
            size or alignment changes. The listener implements the <see cref="T:Syncfusion.Windows.Forms.Tools.IButtonEditParent"/> interface
            to listen to these notifications.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.buttonAlign">
            <summary>
            Specifies if the button is to be aligned to the right
            or the left of the edit control
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.buttonEditParent">
            <summary>
            The ButtonEditParent that needs to be notified of changes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.preferredWidth">
            <summary>
            The preferred width of the button.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> class.
            </summary>
            <remarks>
            The ButtonEditChildVutton is created and asigned the constraints that need to be
            in place for it to be embedded in a <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> control. 
            <para>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.ButtonType"/> is initially set to <see cref="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.Normal"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.GetButtonImage(Syncfusion.Windows.Forms.Tools.ButtonTypes)">
            <summary>
            Set the image for the button. This is set based on the type
            of button.
            </summary>
            <remarks>
            This dependance between the ButtonType and the Image is not maintained strictly
            and is meant to be a help to developers. You can specify any image you want for 
            the button through the <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.Image"/> property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides the OnPaint method. 
            </summary>
            <param name="pe">The paint event data</param>
            <remarks>
            Paint the border when the button is in <see cref="F:System.Windows.Forms.FlatStyle.Flat"/> style or 
            <see cref="F:System.Windows.Forms.FlatStyle.Popup"/> style.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.ButtonEditParent">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> control that is the parent and also the listener.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> control implements the <see cref="T:Syncfusion.Windows.Forms.Tools.IButtonEditParent"/>
            interface to act as a listener for change notifications from ButtonEditChildButton controls.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.PreferredWidth">
            <summary>
            The preferred width is the width set by the user and will be treated as the width of the
            ButtonEditChildButton control.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.Size"/> property and the PreferredWidth property are maintained in sync
            and the Size property will not allow the width property to be chnaged. Changes to the 
            width of the button have to be set through the PreferredWidth property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.Size">
            <summary>
            Overrides the Size property. 
            </summary>
            <remarks>
            The Size property displays the size of the ButtonEditChildButton. The height of the button
            is fixed by the height of the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> control and the width is specified
            through the <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.PreferredWidth"/> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.ButtonType">
            <summary>
            Specifies the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonTypes"/> for this ButtonEditChildButton.
            </summary>
            <remarks>
            Each of the ButtonTypes are associated with a commonly used button icon
            such as Up, down, undo , redo, etc. Choosing one of these types will set the
            <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.Image"/> property to one of the pre configured images.
            <para>
            This dependance between the ButtonType and the Image is not maintained strictly
            and is meant to be a help to developers. You can specify any image you want for 
            the button through the <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.Image"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.ButtonAlign">
            <summary>
            The alignment of the button with respect to the edit control.
            </summary>
            <remarks>
            The possible values for the ButtonAlign property are the values of the
            <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonAlignment"/> enumeration. Using the values of the enumeration
            the value can be set to be at the right or the left of the edit control.
            <para>
            The default value for this property is <see cref="F:Syncfusion.Windows.Forms.Tools.ButtonAlignment.Right"/>
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.TabStop">
            <summary>
            Indicates whether the user can user can use the TAB key to give focus to the control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ButtonClickedEventArgs">
            <summary>
            The event data for <see cref="E:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonClicked"/> event.
            </summary>
            <remarks>
            The <see cref="E:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonClicked"/> event is raised when any of
            the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> child controls of the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/>
            class are clicked.
            <para>
            One of the members of the event data is the actual <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/>
            that was clicked.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonClickedEventArgs.clickedButtonValue">
            <summary>
            The clicked button object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonClickedEventArgs.#ctor">
            <summary>
            Creates an object of type ButtonClickedEventArgs. Overloaded.
            </summary>
            <remarks>
            Need to set the <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonClickedEventArgs.ClickedButton"/> property with the
            <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> that was clicked.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ButtonClickedEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.ButtonEditChildButton)">
            <summary>
            Creates an object of type ButtonClickedEventArgs.
            </summary>
            <param name="value">The button that was clicked.</param>
            <remarks>
            This version of the constructor sets the <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonClickedEventArgs.ClickedButton"/> property with the
            <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> that was clicked.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ButtonClickedEventArgs.ClickedButton">
            <summary>
            The Clicked <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> object.
            </summary>
            <remarks>
            The <see cref="E:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonClicked"/> event handler will be able to use this
            to get the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> that was clicked.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ButtonClickedEventHandler">
            <summary>
            The delegate for the <see cref="E:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonClicked"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A ButtonClickedEventArgs that contains the event data.</param>
            <remarks>
            See the <see cref="E:Syncfusion.Windows.Forms.Tools.ButtonEdit.ButtonClicked"/> event for more information.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ButtonAlignment">
            <summary>
            The button alignment with respect to the edit control.
            </summary>
            <remarks>
            Any <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/> included as part of a <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/>
            control can be aligned to the right or to the left of the edit control (the TextBox).
            <para>
            The default value is <see cref="F:Syncfusion.Windows.Forms.Tools.ButtonAlignment.Right"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonAlignment.Left">
            <summary>
            The button appears to the left of the edit control.
            </summary>
            <remarks>
            See the <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.ButtonAlign"/> property for more information.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonAlignment.Right">
            <summary>
            The button appears to the right of the edit control.
            </summary>
            <remarks>
            See the <see cref="P:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton.ButtonAlign"/> property for more information.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorControl">
            <summary>
            Calculator control encapsulates the functionality of a calculator with
            the ability to perform arithmetic calculations.
            </summary>
            <remarks>
            <para>
            The calculator control can be used in two different layouts. See
            <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypes"/> for more information
            </para>
            <para>
            The default property of the CalculatorControl class is the
            <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Value"/> property. This property is of
            type <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorValue"/>.
            </para>
            <para>
            The CalculatorControl uses a <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.CalculatorEngine"/> object to perform the
            calculations and maintain the state of the calculations. The CalculatorControl implements
            the <see cref="T:Syncfusion.Windows.Forms.Tools.ICalculatorEngineParent"/> interface to receive notifications
            from the CalculatorEngine.
            </para>
            <para>
            The calculator buttons are of type <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorButton"/> and the buttons
            maintain their own information about the action that is to be perfoemd when clicked.
            </para>
            </remarks>
            <example>
            <code lang="C#">
            
                        //InitializeComponent
                        // Create the Calculator Control
                        this.calculatorControl1 = new CalculatorControl();
                        this.textBox1 = new TextBox();
            
                        // Set the value of the calculator control
                        this.calculatorControl1.DoubleValue = 0;
            
                        // Set the border style for the control
                        this.calculatorControl1.BorderStyle = Border3DStyle.Raised;
            
                        // The flat style for the buttons
                        this.calculatorControl1.FlatStyle = FlatStyle.Standard;
            
                        // Set the size of the calculator
                        this.calculatorControl1.Size = new System.Drawing.Size(288, 232);
            
                        // Add a event handler for the ValueCalculated event of the child button
                        this.calculatorControl1.ValueCalculated += new Syncfusion.Windows.Forms.Tools.CalculatorControl.ValueCalculatedEventHandler(this.CodeGen_calculatorControl1_ValueCalculated);
            
                        // Add the CalculatorControl control to the form
                        this.Controls.Add(this.calculatorControl1);</code>
                        <coderef file="c:\syncfusion\essential suite\tools\samples\quick start\calculatordemo\VB\MainForm.vb" name="CalcuatorControl InitializeComponent" lang="VB"><code lang="VB">
                       'InitializeComponent
                       ' Create the Calculator Control
                       Me.calculatorControl1 = New CalculatorControl()
                       Me.textBox1 = New TextBox()
                       ' Set the value of the calculator control
                       Me.calculatorControl1.DoubleValue = 0
                       ' Set the border style for the control
                       Me.calculatorControl1.BorderStyle = Border3DStyle.Raised
                       ' The flat style for the buttons
                       Me.calculatorControl1.FlatStyle = FlatStyle.Standard
                       ' Set the size of the calculator
                       Me.calculatorControl1.Size = New System.Drawing.Size(288, 232)
                       ' Add a event handler for the ValueCalculated event of the child button
                       AddHandler Me.calculatorControl1.ValueCalculated, New Syncfusion.Windows.Forms.Tools.CalculatorControl.ValueCalculatedEventHandler(AddressOf CodeGen_calculatorControl1_ValueCalculated)
                       ' Add the CalculatorControl control to the form
                       Me.Controls.Add(Me.calculatorControl1)</code></coderef>
                       </example>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ICalculatorEngineParent">
            <summary>
            This interface can be implemented by classes that want to act
            as the parent for this calculator engine.
            </summary>
            <remarks>
            The CalculatorControl implements this interface to get notifications
            from the CalculatorEngine when there is a change in the state of
            the CalculatorEngine.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ICalculatorEngineParent.EngineValueChanged(Syncfusion.Windows.Forms.Tools.CalculatorValue,System.Boolean,System.String,System.Double)">
            <summary>
            The calculator engine will invoke this method for its parent
            to be informed of a change in its value.
            </summary>
            <param name="internalValue">The internal string value of the engine</param>
            <param name="errorCondition">The error condition</param>
            <param name="feedbackMessage">The feedback message</param>
            <param name="memoryValue">The memory value</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ICalculatorEngineParent.RepeatAssignAction">
            <summary>
            The parent specifies if the engine needs to repeat the assign (=) action
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ICalculatorButtonParent">
            <summary>
            This interface can be implemented by classes that want to act
            as the parent for this calculator engine.
            </summary>
            <remarks>
            The CalculatorControl implements this interface to get notifications
            from the CalculatorEngine when there is a change in the state of
            the CalculatorEngine.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ICalculatorButtonParent.ButtonAction(Syncfusion.Windows.Forms.Tools.CalcActions)">
            <summary>
            The Calculator Buttons will use this method to call back 
            a click action and pass in their <see cref="T:Syncfusion.Windows.Forms.Tools.CalcActions"/> type
            action property.
            </summary>
            <param name="action">The action that is to be performed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ICalculatorButtonParent.HandleChildKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This handler will be invoked by the buttons each time a 
            button has the focus and the KeyDown event is raised. This will
            be used by the parent ContainerControl to process keyboard shortcuts.
            </summary>
            <param name="e">The KeyEventArgs defining the KeyDown event.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.totalButtonCount">
            <summary>
            The total number of buttons.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.border3dStyleValue">
            <summary>
            The border 3D style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.toolTipHelp">
            <summary>
            For tooltip
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.lastAction">
            <summary>
            The last action received.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.textCalculatorBox">
            <summary>
            The display box for the CalculatorControl.
            </summary>
            <remarks>
            This TextBox will display the output from the calculations.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.calcButtons">
            <summary>
            The array of buttons for the CalculatorControl.
            </summary>
            <remarks>
            Each of these buttons will have a different function.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.memoryStateDisplay">
            <summary>
            The label to display the memory state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.calcLayoutType">
            <summary>
            The layout type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.showDisplayArea">
            <summary>
            Specifies whether the display text box should be displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.mnemonicKeys">
            <summary>
            Hashtable to mnemonic keys.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.calcEngineObject">
            <summary>
            The calculator 'engine'.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.calcWinStandardLayout">
            <summary>
            The GridBagLayout object for the Windows Standard Layout
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.themesEnabled">
            <summary>
            Specifies if the Calculator buttons are ThemesEnabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.calcFinancialLayout">
            <summary>
            The GridBagLayout for Financial Layout
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.autoSizeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.selectedCulture">
            <summary>
            The currently selected culture.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.specialCultureValue">
            <summary>
            Specifies if the special culture values need to be applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.rightToLeftCultures">
            <summary>
            Array of cultures that require RightToLeft by default.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.useUserOverride">
            <summary>
            The UseUserOverride value to be passed in when creating CultureInfo objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.numberFormatInfoObject">
            <summary>
            The NumberFormatInfo object that will specify the
            localized attributes for displaying the curreny
            value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.repeatAssignAction">
            <summary>
            Specifies if the previous action is to be repeated when the Assignment (=) action is clicked 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.flatStyle">
            <summary>
            The flat style for the calculator buttons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.appearance">
            <summary>
            The NumberFormatInfo that defines the formatting.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.#cctor">
            <summary>
            Static initializer for the CalculatorControl class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/> class
            <para>
            The constructor will initialize the <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.CalculatorEngine"/>
            and the display text box with the initial values.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.GetCopyOfCurrentNumberFormatInfo">
            <summary>
            Get a copy of the current NumberFormatInfo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.ApplyRightToLeft">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.InitializeCalculatorEngine">
            <summary>
            This method initalizes the CalculatorEngine that will perform the
            calculations.
            </summary>
            <remarks>
            The CalculatorEngine is initialized and the CalculatorControl sets the
            interface for communicating with the CalculatorEngine.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.InitializeCalculatorDisplay">
            <summary>
            This method initializes the calculator display.
            </summary>
            <remarks>
            The display TextBox and the memory value display label are created
            and initialized.
            <para>
            The calculator buttons are created and added to the CalculatorControl.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.SetTextBoxColor">
            <summary>
            Modifies the properties of the TextBox used for displaying the
            calculated value.
            </summary>
            <remarks>
            The TextBox is set to be disabled and the fore color and back color
            properties are changed.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides the <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/> method.
            </summary>
            <param name="pe">The Paint event data.</param>
            <remarks>
            This override is for drawing a border around the CalculatorControl
            by invoking the <see cref="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.DrawBorder(System.Drawing.Graphics)"/> method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.DrawBorder(System.Drawing.Graphics)">
            <summary>
            This method draws a border around the CalculatorControl.
            </summary>
            <param name="g">the Graphics object to draw on.</param>
            <remarks>
            The type of the border drawn is based on the <see cref="T:System.Windows.Forms.Border3DStyle"/>
            property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.OnBackColorChanged(System.EventArgs)">
            <summary>
            This method overrides the <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)"/> method.
            </summary>
            <param name="arg">The event data.</param>
            <remarks>
            This method is overriden in order to set the color of the 
            child buttons to be the same as the back color of the CalculatorControl.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.CreateCalculatorDisplayBox">
            <summary>
            This method creates the display textbox.
            </summary>
            <returns>
            The created TextBox object.
            </returns>
            <remarks>
            This method creates the TextBox that will be used by the
            CalculatorControl to display the value of the calculations.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Dispose(System.Boolean)">
            <summary>														   
            Clean up any resources being used.								   
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.HandleChildKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handled the KeyDown event of the child controls.
            </summary>
            <param name="e">The KeyEventArgs for the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.ResetCalculator">
            <summary>
            Resets the calculator and initializes the internal calculator
            engine.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.RaiseLayoutTypeChangedEvent">
            <summary>
            Raises the LayoutTypeChangedEvent
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.OnLayoutTypeChange(Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypeChangedEventArgs)">
            <summary>
            Invoke the LayoutTypeChange event.
            <param name="args">An LayoutTypeChangedEventArgs that contains the event data.</param>
            <remarks>
            The OnLayoutTypeChange method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors:  When overriding OnLayoutTypeChange in a derived
            class, be sure to call the base class's OnLayoutTypeChange method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.RaiseFlatStyleChangedEvent">
            <summary>
            Raised the FlatStyleChangedEvent
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.RaiseThemesChangedEvent">
            <summary>
            Raised the FlatStyleChangedEvent
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.OnFlatStyleChange(Syncfusion.Windows.Forms.Tools.CalculatorStyleChangedEventArgs)">
            <summary>
            Invoke the FlatStyleChange event.
            <param name="args">An StyleChangedEventArgs that contains the event data.</param>
            <remarks>
            The OnFlatStyleChange method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors:  When overriding OnFlatStyleChange in a derived
            class, be sure to call the base class's OnFlatStyleChange method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>	
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.GetLayoutManager">
            <summary>
            Get the current layout manager for the calculator.
            </summary>
            <returns>The current layout manager for the calculator.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.GetLayoutManager(Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypes)">
            <summary>
            Get the layout manager for this layout type.
            </summary>
            <param name="layoutType">The layout type</param>
            <returns>The layout manager</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.HandleBoundsChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the <see cref="E:Syncfusion.Windows.Forms.Tools.LayoutItemBase.BoundsChanged"/> event. This initiates a 
            refresh of the layout.
            </summary>
            <param name="sender">The calculator control</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.SetButton(System.Int32,Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle,Syncfusion.Windows.Forms.Tools.CalcActions,System.String)">
            <summary>
            Set the characteristics for a button with the current layout. This
            helper method is invoked when a Layout is initialized for each 
            calculator button.
            </summary>
            <param name="index">The index of the button</param>
            <param name="btnStyle">The Button style</param>
            <param name="action">The Button action</param>
            <param name="title">The caption of the button</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.AddShortcutKey(System.Int32,System.Int32)">
            <summary>
            Add a shortcut key for the button.
            </summary>
            <param name="index">The index of the button.</param>
            <param name="keyData">The KeyData that the button will be invoked through.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.SetLayoutConstraintsForControl(Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypes,System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.GridBagConstraints,System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Set the layout constraints for a child control.
            </summary>
            <param name="layoutType">The layout type</param>
            <param name="control">The target control</param>
            <param name="gbc">The grid bag constraints object for this control</param>
            <param name="minSize">The minimum size</param>
            <param name="prefSize">The preferred size</param>
            <remarks>
            This helper method is invoked when a Layout is initialized for each 
            non button control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.InitializeLayoutAndAddControls">
            <summary>
            Intialize the layout managers and the controls. This method initializes
            all the controls that need to be initialized for a layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.InitializeFinancialLayout">
            <summary>
            This method initializes the <see cref="F:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypes.Financial"/> layout for the CalculatorControl.
            </summary>
            <remarks>
            The FinancialLayout resembes the layout of the calculator popularized
            by the Quicken(r) products. Most of the functionality is geared towards
            simple banking arithmetic.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.InitializeWindowsStandardLayout">
            <summary>
            This method initializes the <see cref="F:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypes.WindowsStandard"/> layout for the CalculatorControl.
            </summary>
            <remarks>
            The WindowsStandardLayout resembles the layout of the calculator provides
            with the windows operating system. Most of the functionality is the same as
            the operation of the Windows operating system calculator.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.OnValueCalculated(Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorControl.ValueCalculated"/> event.
            </summary>
            <param name="arg">The event data for the ValueCalculated event.</param>
            <remarks>
            This event is raised when there is a change in the <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Value"/>
            property of the CalculatorControl. The handler can output the value to
            its own display area. This helps customize the Calculator control usage
            and the default display area of the CalculatorControl can be hidden
            and the display can be another suitable display area.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.SetDisplayString">
            <summary>
            This method transfers the current value to the display.
            </summary>
            <remarks>
            This method displays output only if the <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.ShowDisplayArea"/>
            property is set to true.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.RefreshMemoryLabel(System.Double)">
            <summary>
            Refresh the memory label based on the new memory value.
            </summary>
            <param name="memoryValue">The memory value.</param>
            <remarks>
            The memory label is set to M if the memory value is > 0
            and empty otherwise.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.ButtonAction(Syncfusion.Windows.Forms.Tools.CalcActions)">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.EngineValueChanged(Syncfusion.Windows.Forms.Tools.CalculatorValue,System.Boolean,System.String,System.Double)">
            <summary>
            The calculator engine will invoke this method for its parent
            to be informed of a change in its value.
            </summary>
            <param name="internalValue">The internal string value of the engine</param>
            <param name="errorCondition">The error condition</param>
            <param name="feedbackMessage">The feedback message</param>
            <param name="memoryValue">The memory value</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CalculatorControl.ValueCalculated">
            <summary>
            this event is raised when the <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Value"/> of the calculator
            control changes.
            </summary>
            <remarks>
            Handle this event if you want to do some processing when the
            Value changes.
             </remarks>
             <example>
            <code lang="C#">
            		this.calculatorControl1.ValueCalculated += new Syncfusion.Windows.Forms.Tools.CalculatorControl.ValueCalculatedEventHandler(this.CodeGen_calculatorControl1_ValueCalculated);
            
            		//calculatorControl1_ValueCalculated
            		if(arg.ErrorCondition == false)
            			this.textBox1.Text = arg.Value.ToString();
            		else
            			this.textBox1.Text = arg.Message;</code>
            			<coderef file="c:\syncfusion\essential suite\tools\samples\quick start\calculatordemo\VB\MainForm.vb" name="CalcuatorControl ValueCalculated event" lang="VB"><code lang="VB">
                       AddHandler Me.calculatorControl1.ValueCalculated, New Syncfusion.Windows.Forms.Tools.CalculatorControl.ValueCalculatedEventHandler(AddressOf CodeGen_calculatorControl1_ValueCalculated)
                       'calculatorControl1_ValueCalculated
                       If (arg.ErrorCondition = False) Then
                           Me.textBox1.Text = arg.Value.ToString
                       Else
                           Me.textBox1.Text = arg.Message
                       End If</code></coderef>
            
            </example>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CalculatorControl.LayoutTypeChanged">
            <summary>
            This event is raised when the <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.LayoutType"/> changes.
            </summary>
            <remarks>
            Other classes that need to be aware of the current layout of the
            CalculatorControl or just need to know that the layout has changed
            so that they can reinitialize themselves can handle this event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CalculatorControl.FlatStyleChanged">
            <summary>
            This event is raised when the FlatStyle changes for the CalculatorControl.
            </summary>
            <remarks>
            The CalculatorControl maintains the same flatstyle for all its child
            buttons. This event ias handled by all the buttons and they set their
            flatstyle property appropriately.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Culture">
            <summary>
            The culture that is to be used for formatting the currency display.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.NumberFormatInfoObject">
            <summary>
            The NumberFormaInfo object that will be used for formatting the
            number value.
            </summary>
            <remarks>
            This property will not be exposed to the developer. This is only meant
            to be an acccessor for use within the control. The developer will be able
            to access the properties of the NumberFormatInfo through the individual
            properties exposed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.SpecialCultureValue">
            <summary>
            The mode for the cultures
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.UseUserOverride">
            <summary>
            The UseUserOverride paramater for CultureInfo.
            </summary>
            <remarks>
            The NumberTextBoxBase control has several properties that expose Culture specific
            information. These properties use a <see cref="T:System.Globalization.NumberFormatInfo"/> object for
            handling the culture specific information. This property is used in the creation
            of the NumberFormatInfo object. <seealso cref="P:System.Globalization.CultureInfo.UseUserOverride"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.BorderStyle">
            <summary>
            Specifies the Border3DStyle for the CalculatorControl's border.
            </summary>
            <remarks>
            This value can be any of the values of the type <see cref="T:System.Windows.Forms.Border3DStyle"/>.
            Setting the value to <see cref="F:System.Windows.Forms.Border3DStyle.Adjust"/> displays no border.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.AutoSize">
            <summary>
            Specifies if the control is to be resized based on the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.FlatStyle">
            <summary>
            The flat style for the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorButton"/> objects.
            </summary>
            <remarks>
            This property raises the StyleChanged event so that the 
            buttons can set themselves to this new FlatStyle.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.ThemesEnabled">
            <summary>
            The flat style for the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorButton"/> objects.
            </summary>
            <remarks>
            This property raises the StyleChanged event so that the 
            buttons can set themselves to this new FlatStyle.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.RepeatAssignAction">
            <summary>
            Specifies if the assignment action (=) will repeat the previous action.
            </summary>
            <remarks>
            This property raises the StyleChanged event so that the 
            buttons can set themselves to this new FlatStyle.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.CalculatorEngine">
            <summary>
            Private accessor for the CalculatorEngine
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.DoubleValue">
            <summary>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Value"/> of the CalculatorControl as a double value.
            </summary>
            <remarks>
            This property does not maintain its own value and converts the 
            CalculatorValue object to double.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Value">
            <summary>
            This is the current value of the CalculatorControl.
            </summary>
            <remarks>
            The Value property is a shadow of the CalculatorEngine's
            Value property. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.DisplayTextAlign">
            <summary>
            The text alignment. Specified by <see cref="T:System.Windows.Forms.HorizontalAlignment"/>
            The Text in the display textbox will be aligned left or right based on
            this value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.LayoutType">
            <summary>
            Specifies the current layout type for the CalculatorControl. This is of type
            <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypes"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.ShowDisplayArea">
            <summary>
            This property specifies if the calculator control is to
            display the display textbox. The textbox can be hidden and
            the application using the Calculator Control can handle the
            <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorControl.ValueCalculated"/> event to display the value
            in their own display area/textbox.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine">
            <summary>
            The CalculatorEngine class is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/> to
            perform the internal arithmetic calculations. The CalculatorControl itself does not
            retain any information about the calculations performed. 
            </summary>
            <remarks>
            The design of the CalculatorControl uses the CalculatorEngine class for all its
            calculations. The CalculatorControl only takes user input and passes the results
            of the calculation back to the display.
            <para>
            Give the functionality that this class is required to perform, it provides 
            methods and properties that will perform calculations and also inform the 
            CalculatorControl about the changes.
            </para>
            <para>
            You will not need to use this class separately.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ICalculatorEngine">
            <summary>
            This interface is implemented by the CalculatorEngine class to 
            provide a common interface for interacting with the CalculatorControl.
            </summary>
            <remarks>
            The CalculatorControl can work with any class that implements this
            interface.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ICalculatorEngine.HandleAction(Syncfusion.Windows.Forms.Tools.CalcActions)">
            <summary>
            This method allows the CalculatorControl to tell the
            CalculatorEngine to perform an action. 
            </summary>
            <param name="action">The action to be performed.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ICalculatorEngine.GetValue">
            <summary>
            The Value of the CalculatorEngine at this point.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ICalculatorEngine.SetValue(Syncfusion.Windows.Forms.Tools.CalculatorValue)">
            <summary>
            Set the value of the Calculator Engine
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ICalculatorEngine.Reset">
            <summary>
            Reset the CalculatorEngine.
            </summary>
            <remarks>
            This method is for resetting the CalculatorEngine. This is useful when
            switching layouts for eaxmple.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.calculatorValue">
            <summary>
            The internal value of the CalculatorEngine.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.memoryNumber">
            <summary>
            The memory value of the CalculatorEngine.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.decimalMode">
            <summary>
            Data is appended to the double part
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.replaceMode">
            <summary>
            Replace the text in the display string for the
            next input
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.errorCondition">
            <summary>
            The current error condition.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.message">
            <summary>
            The error message in case the CalculatorEngine is in error state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.equalClicked">
            <summary>
            Specifies if the equal button was clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.percentLastClicked">
            <summary>
            Specifies if the percent operation was performed last.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.stackObject">
            <summary>
            The internal stack object used for the calculations.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.stackTopValue">
            <summary>
            The stack position.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.digitEntered">
            <summary>
            Specifies if a digit was entered lastly.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.calculatorEngineParentObject">
            <summary>
            The parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.numberFormatInfoObject">
            <summary>
            Globalization information.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.singleOperator">
            <summary>
            Specifies if the Reciprocal or Sqrt operator was selected.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.#ctor(Syncfusion.Windows.Forms.Tools.ICalculatorEngineParent)">
            <summary>
            Create an object of type CalculatorEngine.
            </summary>
            <param name="parent">The calculator engine parent</param>
            <remarks>
            This constructor invokes the default constructor and also
            assigns the paramter that is passed in to be the parent for this
            CalculatorEngine. The interface <see cref="T:Syncfusion.Windows.Forms.Tools.ICalculatorEngineParent"/>
            is defined for the interaction between the CalculatorEngine and the
            Parent.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.InitializeCalculatorStack">
            <summary>
            The CalculatorEngine class uses a internal stack to
            perform the calculations. This method initializes the
            stack.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.GetFormatDecimal">
            <summary>
            This is the default double character recognized by system functions.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.DoCalculation(System.Double,Syncfusion.Windows.Forms.Tools.CalcActions,System.Double)">
            <summary>
            Helper function that performs the arithmetic calculation.
            </summary>
            <param name="op1">Operand 1</param>
            <param name="oper">The operator</param>
            <param name="op2">Operand 2</param>
            <returns>The calculated value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.Push(System.Object)">
            <summary>
            Push the element - could be an operand or the operator
            onto the stack
            </summary>
            <param name="element">The object to be pushed onto the stack</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.Pop">
            <summary>
            Pop the top elemnt from the stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.StackIsEmpty">
            <summary>
            Check if the stack is empty.
            </summary>
            <returns>true if the stack is empty;false, otherwise</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.ClearStack">
            <summary>
            Clear the calculation stack
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.HandleClearEntry">
            <summary>
            Handler for the Clear Entry action. This action clears the last entry or error.
            </summary>
            <returns>true if the action completed; otherwise, false</returns>
            <remarks>
            The interaction between the CalculatorControl buttons and the
            CalculatorEngine is defined by the <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorButton.ButtonAction"/>
            event raised. This event is handled by the <see cref="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.HandleAction(Syncfusion.Windows.Forms.Tools.CalcActions)"/> method.
            <para>
            The HandleAction method then invokes the HandleClearEntry method if the "Clear
            Entry" button was clicked.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.HandleAction(Syncfusion.Windows.Forms.Tools.CalcActions)">
            <summary>
            Handle the button action based on the <see cref="T:Syncfusion.Windows.Forms.Tools.CalcActions"/> object that was passed in.
            </summary>
            <param name="action">The calculator action</param>
            <returns>true if the action was handled successfully; false, otherwise</returns>
            <remarks>
            The interaction between the CalculatorControl buttons and the
            CalculatorEngine is defined by the <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorButton.ButtonAction"/>
            event raised. This event is handled by the <see cref="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.HandleAction(Syncfusion.Windows.Forms.Tools.CalcActions)"/> method.
            <para>
            The HandleAction method then invokes the appropriate method based on the
            button that was clicked.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.RaiseCalculatorValueChangedEvent">
            <summary>
            Raises the <see cref="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.EngineValueChanged(Syncfusion.Windows.Forms.Tools.CalculatorValue,System.Boolean,System.String,System.Double)"/> event.
            </summary>
            <remarks>
            The EngineValueChanged event is raised when there is a change in the
            value or the error condition.
            <para>
            See <see cref="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.EngineValueChanged(Syncfusion.Windows.Forms.Tools.CalculatorValue,System.Boolean,System.String,System.Double)"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.HandleDigit(Syncfusion.Windows.Forms.Tools.CalcActions)">
            <summary>
            A number has been entered.
            </summary>
            <param name="action">The value of the number.</param>
            <returns>true if there is no error. </returns>
            <remarks>
            The new digit is added to the appropriate operand and held in memory
            for calucations. This is subject to the max length restrictions.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.HandleDecimalPoint">
            <summary>
            This method is invoked when the decimal point button has been clicked.
            </summary>
            <returns>true if the action was handled without error; false, otherwise</returns>
            <remarks>
            All digits entered after this is added to the decimal portion of the
            internal value string.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.HandleBackspace">
            <summary>
            This method is invoked when the backspace key is pressed.
            </summary>
            <returns>true if the action was handled without error; false, otherwise</returns>
            <remarks>
            Deletes one character from the end of the displayed current value.
            This key is ignored if the value in the display is a calculated value.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.HandleClear">
            <summary>
            This method is invoked when the Clear Button is pressed.
            </summary>
            <returns>true if the action was handled without error; false, otherwise</returns>
            <remarks>
            This action resets the CalculatorEngine and the display is also initialized.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.Reset">
            <summary>
            This takes the CalculatorEngine object back to the initialized state.
            </summary>
            <remarks>
            All data held in memory for calculations are dropped.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.GetValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.StackTop">
            <summary>
            The top of the stack
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.NumberFormatInfoObject">
            <summary>
            The NumberFormatInfo class that defines the globalization
            values for the CalculatorEngine.
            </summary>
            <remarks>
            This is a read only property.
            <para>
            The values for the NumberFormatInfo object can be set through the
            individual properties such as <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.DecimalSeparator"/>
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.DecimalSeparator">
            <summary>
            The Decimal separator that is in effect in the globalization settings.
            </summary>
            <remarks>
            By default this value is taken from the globalization values provided
            by the NumberFormatInfo object. However, this default value can be changed
            by setting this property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.ErrorCondition">
            <summary>
            The current error condition of the CalculatorEngine.
            </summary>
            <remarks>
            This is a read only property that returns the current error condition
            of the CalculatorEngine.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.Message">
            <summary>
            The current error message that accompanies an error condition.
            </summary>
            <remarks>
            This property is valid only if the <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.ErrorCondition"/> 
            property is set to true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine.Value">
            <summary>
            The CalculatorValue object that specifies the current value of
            the CalculatorEngine.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle">
            <summary>
            Defines the look and feel of a <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorButton"/>.
            </summary>
            <remarks>
            The CalcultorBtnStyle class is closely tied to the display attributes
            of the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorButton"/> class.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.font">
            <summary>
            The font to be used for the button caption
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.foreColor">
            <summary>
            The fore color for the button
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.flatStyle">
            <summary>
            The flat style to be applied to the button
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.#ctor">
            <summary>
            Creates an instance of the CalculatorButtonStyle class.
            Overloaded.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.#ctor(System.Drawing.Color,System.Drawing.Font,System.Windows.Forms.FlatStyle)">
            <summary>
            Creates an instance of the CalculatorButtonStyle class.
            </summary>
            <param name="foreColor">The fore color to be used for the button.</param>
            <param name="font">The font to be used for the button.</param>
            <param name="flatStyle">The FlatStyle to be used for the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.#ctor(Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle)">
            <summary>
            Creates an instance of the CalculatorButtonStyle class.
            </summary>
            <param name="btnStyle">Another instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle"/> class.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.RaiseStyleChangedEvent">
            <summary>
            This method raises the <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.StyleChanged"/> event.
            </summary>
            <remarks>
            The StyleChanged event is handled by the CalculatorButton class 
            to 
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.OnStyleChanged(System.EventArgs)">
            <summary>
            Invoke the StyleChanged event.
            <param name="args">An EventArgs that contains the event data.</param>
            <remarks>
            The OnStyleChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors:  When overriding OnStyleChanged in a derived
            class, be sure to call the base class's OnStyleChanged method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>		
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.StyleChanged">
            <summary>
            The StyleChanged event
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.Font">
            <summary>
            The font to be used for displaying the Button title.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.ForeColor">
            <summary>
            The color for the button title.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.FlatStyle">
            <summary>
            The flat style to be applied to the button
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalcActions">
            <summary>
            Enumerates all the actions that could be assigned to a 
            calculator button including the digits and all arithmetic 
            operators
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcDigit0">
            <summary>
            The digit 0.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcDigit1">
            <summary>
            The digit 1.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcDigit2">
            <summary>
            The digit 2.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcDigit3">
            <summary>
            The digit 3.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcDigit4">
            <summary>
            The digit 4.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcDigit5">
            <summary>
            The digit 5.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcDigit6">
            <summary>
            The digit 6.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcDigit7">
            <summary>
            The digit 7.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcDigit8">
            <summary>
            The digit 8.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcDigit9">
            <summary>
            The digit 9.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorNone">
            <summary>
            Dummy operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorMultiply">
            <summary>
            The * multiplication operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorPlus">
            <summary>
            The + addition operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorMinus">
            <summary>
            The - subtraction operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorDivide">
            <summary>
            The / division operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorPercent">
            <summary>
            The % percent operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorEquals">
            <summary>
            The = equals operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorMemoryClear">
            <summary>
            The MC memory clear operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorMemoryRecall">
            <summary>
            The MR memory recall operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorMemoryStore">
            <summary>
            The MS memory store operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorMemoryPlus">
            <summary>
            The M+ memory plus operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorReciprocal">
            <summary>
            The reciprocal operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorSqrt">
            <summary>
            The sqrt operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorSign">
            <summary>
            The +/- sign operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcSpecialClear">
            <summary>
            The C Clear operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcSpecialClearEntry">
            <summary>
            The CE Clear Entry operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcSpecialDecimal">
            <summary>
            The . Decimal operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcSpecialBackspace">
            <summary>
            The backspace operator.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPButton.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPButton.OnThemeChanged(System.EventArgs)">
            <summary>
            Raises the ThemeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnThemeChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnThemeChanged in a derived
            class, be sure to call the base class's OnThemeChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorButton">
            <summary>
            Class derived from <see cref="T:System.Windows.Forms.Button"/>
            and customized to hold information specific to calculator
            functions.
            </summary>
            <remarks>
            The CalculatorButtons are not created directly by users and the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/>
            creates and uses these buttons.
            <para>
            The style for the CalculatorButton objects are kept in <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle"/> objects.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorButton.btnStyleObject">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle"/> object that specifies
            the style characteristics of the button
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorButton.title">
            <summary>
            The button title.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorButton.calcAction">
            <summary>
            The calculator Action associated with this button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorButton.buttonParent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButton.#ctor(Syncfusion.Windows.Forms.Tools.ICalculatorButtonParent)">
            <summary>
            Creates an instance of the CalculatorButton class.
            </summary>
            <remarks>
            This constructor initializes the style object and the title for the 
            Button with empty objects. They can be set through the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle"/>
            property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButton.Initialize(Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle,Syncfusion.Windows.Forms.Tools.CalcActions,System.String)">
            <summary>
            Initialize the CalculatorButton object.
            </summary>
            <param name="btnStyle">The button style object</param>
            <param name="action">The action to be performed by this button</param>
            <param name="title">The caption text</param>
            <returns>true if the button is initialized successfully; false, otherwise</returns>
            <remarks>
            The CalculatorButton also changes its style when the CalculatorButtonStyle object raises
            the <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.StyleChanged"/> event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButton.ApplyStyles">
            <summary>
            Internal helper function to apply the button styles to the
            button
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButton.OnClick(System.EventArgs)">
            <summary>
            Overrides the base class' OnClick method and raises the
            CalculatorButton event
            </summary>
            <param name="e">The event data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButton.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Tell the parent that a KeyDown event happened.
            </summary>
            <param name="e">The KeyEventArgs object defining the KeyDown event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButton.RaiseCalculatorButtonEvent(Syncfusion.Windows.Forms.Tools.CalcActions)">
            <summary>
            Raises the CalculatorButton event.
            </summary>
            <param name="action">The action performed by this calculator.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButton.OnCalculatorButton(Syncfusion.Windows.Forms.Tools.CalculatorButtonEventArgs)">
            <summary>
            Invoke the CalculatorButton event.
            <param name="arg">An CalculatorButtonEventArgs that contains the event data.</param>
            <remarks>
            The OnCalculatorButton method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors:  When overriding OnCalculatorButton in a derived
            class, be sure to call the base class's OnCalculatorButton method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButton.HandleStyleChanged(System.Object,System.EventArgs)">
            <summary>
            Handled the StyleChanged event of the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle"/>
            object associated with this button.
            </summary>
            <param name="sender">The CalculatorButtonStyle object.</param>
            <param name="args">The event data.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CalculatorButton.ButtonAction">
            <summary>
            The ButtonAction event is raised when a CalculatorButton with a 
            associated CalcAction is pressed.
            </summary>
            <remarks>
            Each CalculatorButton has a CalcAction associated with it.
            The interaction between the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/> buttons and the
            <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine"/> is defined by the ButtonAction event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorButton.Action">
            <summary>
            The action performed by this CalculatorButton
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorButton.ButtonStyle">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle"/> object that specifies
            the look and feel of the button.
            </summary>
            <remarks>
            The CalculatorButton dynamically updates its style when there is a
            change to the style object by handling the <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.StyleChanged"/>
            event of the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle"/> object.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorButtonEventHandler">
            <summary>
            The delegate for the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorButtonEventHandler"/>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorStyleChangedEventHandler">
            <summary>
            Delegate for the <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.StyleChanged"/> event.
            </summary>
            <remarks>
            The event handler for the <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.StyleChanged"/> event should bear this 
            signature.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorButtonEventArgs">
            <summary>
            Event data for the <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorButton.ButtonAction"/> event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorButtonEventArgs.action">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.CalcActions"/> associated with the button 
            raising this event
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorButtonEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.CalcActions)">
            <summary>
            Creates an instance of the CalculatorButtonEventArgs object
            </summary>
            <param name="action">The <see cref="T:Syncfusion.Windows.Forms.Tools.CalcActions"/> associated with 
            the button</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorButtonEventArgs.Action">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.CalcActions"/> associated with the button
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorValue">
            <summary>
            The CalculatorControl uses this class to accept new values and
            also reports its internal value using this class.
            </summary>
            <remarks>
            This class encapsulates the value of the CalculatorControl in the
            form that it maintains internally and also provides the value in  the
            format required to the requesting class.
            <para>
            The CalculatorValue class provides methods to get the value of the
            CalculatorControl as a string or as a double value.
            </para>
            <para>
            The receiving method or class can get the value in the format they require
            it in and format it themselves for display.
            </para>
            <para>
            This helps the CalculatorControl to work with differnet kinds of classes that
            require the value to be formatted differently.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorValue.internalValue">
            <summary>
            The internal string value of the CalculatorControl.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorValue.#ctor">
            <summary>
            Instantiates an object of type CalculatorValue and initializes it.
            </summary>
            <remarks>
            The CalculatorValue is initially set to 0. This can be changed by 
            invoking the <see cref="M:Syncfusion.Windows.Forms.Tools.CalculatorValue.SetValue(System.String)"/> method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorValue.#ctor(System.String)">
            <summary>
            This constructor takes a string as the initial value and initializes 
            itself with this value.
            </summary>
            <param name="val">The initial value that is to be set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorValue.#ctor(System.Double)">
            <summary>
            This constructor takes a double as the initial value and initializes 
            itself with this value.
            </summary>
            <param name="val">The initial value that is to be set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorValue.ToDouble">
            <summary>
            Returns the current value of the class object as a double type.
            </summary>
            <remarks>
            Invoke this methos to get the value of the CalculatorValue object as
            a double.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorValue.ToDecimal">
            <summary>
            Returns the current value of the class object as a decimal type.
            </summary>
            <remarks>
            Invoke this methos to get the value of the CalculatorValue object as
            a decimal.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorValue.ToString">
            <summary>
            Returns the current value of the class object as a string type.
            </summary>
            <remarks>
            Invoke this methos to get the value of the CalculatorValue object as
            a string.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorValue.SetValue(System.String)">
            <summary>
            Sets the current value of the class object through a string.
            </summary>
            <param name="val">The value that is to be set.</param>
            <remarks>
            Invoke this methos to set the value of the CalculatorValue object using
            a string.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorValue.SetValue(System.Double)">
            <summary>
            Sets the current value of the class object through a double value.
            </summary>
            <param name="val">The value that is to be set.</param>
            <remarks>
            Invoke this method to set the value of the CalculatorValue object using
            a double.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorValue.Empty">
            <summary>
            Statis initializer for the CalculatorValue class.
            </summary>
            <remarks>
            This can be accessed as CalculatorValue.Empty.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypeChangedEventArgs">
            <summary>
            The event data for <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorControl.LayoutTypeChanged"/> event.
            </summary>
            <remarks>
            This class contains the data needed for handling a change in the
            layout type of the CalculatorControl. The CalculatorControl supports
            two different layouts as enumerated by the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypes"/>
            enumeration.
            <para>
            When the <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.LayoutType"/> property is set to 
            a particular layout, the internal implementation of the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/>
            needs to know about the change and other classes that interact with the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/>
            will also need to know so that they can adjust themselves to the new layout.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypeChangedEventArgs.layoutType">
            <summary>
            The new layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypeChangedEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypes)">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypeChangedEventArgs"/> class.
            </summary>
            <param name="layoutType">A value of type <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypes"/>.</param>
            <remarks>
            The new layout that has been set on the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/>
            is the only variable that is needed for this data type. This can also be accessed
            through the <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypeChangedEventArgs.LayoutType"/> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypeChangedEventArgs.LayoutType">
            <summary>
            The new layout type that has been applied to the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/>.
            </summary>
            <remarks>
            The CalculatorControl supports
            two different layouts as enumerated by the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypes"/>
            enumeration.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypes">
            <summary>
            The CalculatorControl supports the following layouts
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypes.WindowsStandard">
            <summary>
            This layout is modeled after the Windows Standard calculator
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypes.Financial">
            <summary>
            This layout is modeled after the standard financial layout
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorStyleChangedEventArgs">
            <summary>
            Provides data for a <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.StyleChanged"/> event.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/> applies the FlatStyle property to
            all the Calculator Buttons. This event argument specifies the FlatStyle
            currently applied to the CalculatorControl so that the buttons handling 
            the <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorButtonStyle.StyleChanged"/> event will be able to apply the right
            FlatStyle.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorStyleChangedEventArgs.flatStyle">
            <summary>
            The changed flat style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorStyleChangedEventArgs.#ctor(System.Windows.Forms.FlatStyle)">
            <summary>
            Creates an object of type <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorStyleChangedEventArgs"/>.
            </summary>
            <param name="flatStyle">The changed flat style</param>
            <remarks>
            The FlatStyle property is passed in as a parameter.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorStyleChangedEventArgs.FlatStyle">
            <summary>
            The changed Flat style
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorLayoutTypeChangedEventHandler">
            <summary>
            Delegate for the LayoutTypeChanged event
            </summary>
            <remarks>
            Refer to the <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorControl.LayoutTypeChanged"/> event for more information.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs">
            <summary>
            The event data for CalculatorControl.ValueCalculated event.
            </summary>
            <remarks>
            This event is raised whenever there is a change in the internal value of the
            <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/>. This event data class contains the necessary 
            pieces of information for the handlers to get the new value of the CalculatorControl.
            <para>
            This class also has members that provide information about the current error state
            of the CalculatorControl.
            </para>
            <para>
            The Memory value of the calculator can also be got from this class.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.internalValue">
            <summary>
            The internal value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.errorCondition">
            <summary>
            The error condition.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.message">
            <summary>
            The feedback message.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.memoryValue">
            <summary>
            The memory value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.lastAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.CalculatorValue,System.Boolean,System.String,Syncfusion.Windows.Forms.Tools.CalcActions)">
            <summary>
            Create an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs"/> class
            </summary>
            <param name="val">The Value of the CalculatorControl.</param>
            <param name="errorCondition">The error condition.</param>
            <param name="message">The feedback messsage.</param>
            <param name="lastAction">The last action that was performed.</param>
            <remarks>
            This constructor sets all the required values for the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.Value">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorValue"/> object that contains the value of the CalculatorControl.
            </summary>
            <remarks>
            This value has to be read in conjunction with the error condition of the Calculator
            Control and the error message. The memory value can also be accessed through this class.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.LastAction">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorValue"/> object that contains the value of the CalculatorControl.
            </summary>
            <remarks>
            This value has to be read in conjunction with the error condition of the Calculator
            Control and the error message. The memory value can also be accessed through this class.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.MemoryValue">
            <summary>
            The memory value of the CalculatorControl.
            </summary>
            <remarks>
            This value is to be used along with the <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.Value"/> property of 
            the CalculatorControl as well as the error condition if any.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.Message">
            <summary>
            The custome error message set by the CalculatorControl when in error mode.
            </summary>
            <remarks>
            This message has to be used in conjunction with the <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.ErrorCondition"/>
            value set by the CalculatorControl.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.ErrorCondition">
            <summary>
            The error condition of the CalculatorControl if any.
            </summary>
            <remarks>
            This message has to be used in conjunction with the <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs.Message"/>
            value set by the CalculatorControl.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventHandler">
            <summary>
            The delegate for the <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorControl.ValueCalculated"/> event.
            </summary>
            <remarks>
            Refer to the <see cref="E:Syncfusion.Windows.Forms.Tools.CalculatorControl.ValueCalculated"/> event for more information.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ThemedXPButtonDrawing">
            <summary>
            XP Button drawing class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ThemedXPButtonDrawing.#ctor(System.Windows.Forms.Control,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="control">The control.</param>
            <param name="classList">The class list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ThemedXPButtonDrawing.DrawXPButton(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the XP Button.
            </summary>
            <param name="g">The graphics object.</param>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorTextBox">
            <summary>
            TextBox derived class that draws the display text for the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/> control. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorTextBox.#ctor(Syncfusion.Windows.Forms.Tools.ICalculatorButtonParent)">
            <summary>
            Constructor for the CalculatorTextBox class.
            </summary>
            <param name="calcParent">The calculator parent.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Tell the parent that a KeyDown event happened.
            </summary>
            <param name="e">The KeyEventArgs object defining the KeyDown event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorTextBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override the WndProc to deactivate mouse click.
            </summary>
            <param name="m">The Message.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.PopupCalculator">
            <summary>
            The PopupCalculator is a class derived from <see cref="T:System.Windows.Forms.Control"/>
            that embeds a <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/> to display it in Popup Mode.
            <para>
            The PopupCalculator class includes a <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> that it
            uses for displaying the drop down window.
            </para>
            <para>
            The alignment of the CalculatorControl with the parent control can be set through the
            <see cref="P:Syncfusion.Windows.Forms.Tools.PopupCalculator.PopupCalculatorAlignment"/> property.
            </para>
            <para>
            The embedded <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/> itself can be accessed through the
            <see cref="P:Syncfusion.Windows.Forms.Tools.PopupCalculator.Calculator"/> property.
            </para>
            <para>
            This class also raises the <see cref="E:Syncfusion.Windows.Forms.Tools.PopupCalculator.BeforeCalculatorPopupDisplay"/> event.
            <see cref="P:Syncfusion.Windows.Forms.Tools.PopupCalculator.PopupCalculatorAlignment"/> property.
            </para>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupCalculator.calcPopupContainer">
            <summary>
            The popup control container for the calculator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupCalculator.calcControl">
            <summary>
            The Calculator Control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupCalculator.closeAction">
            <summary>
            The PopupCalculator will be closed after this action.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupCalculator.calculatorAlignment">
            <summary>
            The alignment of the CalculatorControl with respect to the
            parent control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupCalculator.calcInitialized">
            <summary>
            Specifies if the embedded calculator has been created.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupCalculator.initFlatStyle">
            <summary>
            The FlatStyle for the embedded calculator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupCalculator.initSize">
            <summary>
            The Size for the embedded calculator. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupCalculator.initBorderStyle">
            <summary>
            The BorderStyle for the embedded calculator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupCalculator.initValue">
            <summary>
            The Value for the embedded calculator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupCalculator.initLayoutType">
            <summary>
            The LayoutType for the embedded calculator.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PopupCalculator.#ctor">
            <summary>
            Creates an object of type <see cref="T:Syncfusion.Windows.Forms.Tools.PopupCalculator"/>.
            </summary>
            <remarks>
            This constructor initializes the internal controls used for displaying
            the CalculatorControl.
            <para>
            The initial value of the calculator needs to be set through the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.CalculatorControl.Value"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PopupCalculator.RaiseClosingEvent(Syncfusion.Windows.Forms.Tools.CalculatorCloseType)">
            <summary>
            Raise the <see cref="E:Syncfusion.Windows.Forms.Tools.PopupCalculator.Closing"/> event. This event is
            raised by the calculator control before the popup calculator closes
            when the '=' button is clicked. This event will not be raised when
            the popup calculator control closes when it loses focus.
            </summary>
            <returns>true if the popup calculator is not to be closed; false, if it is to be
            closed</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PopupCalculator.HandlePopupControlClosing(System.Object,Syncfusion.Windows.Forms.PopupClosedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PopupCalculator.HandleCalculatorValueCalculated(System.Object,Syncfusion.Windows.Forms.Tools.CalculatorValueCalculatedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PopupCalculator.OnClosing(Syncfusion.Windows.Forms.Tools.CalculatorClosingEventArgs)">
            <summary>
            Invoke the PopupCalculatorClosing event.
            <param name="args">A CancelEventArgs that contains the event data.</param>
            <remarks>
            The OnPopupCalculatorClosing method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors:  When overriding OnStyleChanged in a derived
            class, be sure to call the base class's OnStyleChanged method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>	
            <returns>true if the popup calculator is not to be closed; false, if it is to be
            closed</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PopupCalculator.RaiseBeforeCalculatorPopupDisplayEvent">
            <summary>
            This method raises the <see cref="E:Syncfusion.Windows.Forms.Tools.PopupCalculator.BeforeCalculatorPopupDisplay"/> event.
            </summary>
            <returns>true if the Calculator display has been cancelled by a event handler; false, otherwise</returns>
            <remarks>
            This event can be handled if you want to make some changes to the CalculatorControl
            before it is displayed.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PopupCalculator.OnBeforeCalculatorPopupDisplay(System.ComponentModel.CancelEventArgs)">
            <summary>
            Invoke the BeforeCalculatorPopupDisplay event.
            <param name="args">A BeforeCalculatorPopupDisplayEventArgs that contains the event data.</param>
            <remarks>
            The OnBeforeCalculatorPopupDisplay method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors:  When overriding OnBeforeCalculatorPopupDisplay in a derived
            class, be sure to call the base class's OnBeforeCalculatorPopupDisplay method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PopupCalculator.CloseCalculator">
            <summary>
            Close the popup calculator if its is displayed.
            </summary>
            <remarks>
            This method is invoked when the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/> raises the
            <see cref="E:Syncfusion.Windows.Forms.Tools.PopupCalculator.Closing"/> event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PopupCalculator.HandleCalcPopupContainerBeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handle the popup control container's BeforePopup event.
            </summary>
            <param name="sender">The popup control container</param>
            <param name="e">The event data</param>
            <remarks>
            This handles the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> 's <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.BeforePopup"/>
            event and sets the BorderStyle and BackColor for the PopupControl conatiner.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PopupCalculator.DisplayCalculator">
            <summary>
            Call this to display the calculator.Overloaded.
            </summary>
            <remarks>
            This is the method is used to display the Popup Calculator itself. This
            method takes into account the CalculatorPopupAlignment and displays the
            Popup Calculator at the right position.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PopupCalculator.DisplayCalculator(System.Drawing.Point)">
            <summary>
            Call this to display the calculator.
            </summary>
            <param name="location">The location to display the popup calculator.</param>
            <remarks>
            This method displays the CalculatorControl and raises the <see cref="E:Syncfusion.Windows.Forms.Tools.PopupCalculator.BeforeCalculatorPopupDisplay"/>
            event. This event allows the display to be cancelled by a handler.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.PopupCalculator.BeforeCalculatorPopupDisplay">
            <summary>
            Event raised before the calculator popup is displayed.
            </summary>
            <remarks>
            This event is a <see cref="T:System.ComponentModel.CancelEventHandler"/> type
            event. You can cancel the PopupCalculator from being displayed
            by handling this event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.PopupCalculator.Closing">
            <summary>
            Event raised by a popup calculator when closing after the
            '=' button was clicked.
            </summary>
            <remarks>
            By default the CalculatorControl will raise this event when
            the '=' equal button is clicked. This event can be canceled 
            by a handler and the PopupCalculator will not be closed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PopupCalculator.CloseAction">
            <summary>
            Specifies the action that will trigger closing the popup calculator.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PopupCalculator.ParentControl">
            <summary>
            This property is the same as the <see cref="P:Syncfusion.Windows.Forms.Tools.PopupCalculator.ParentControl"/> property
            of the PopupControlContainer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PopupCalculator.PopupCalculatorAlignment">
            <summary>
            This specifies the relative alignment of the Popup with the
            parent control.
            </summary>
            <remarks>
            Refer to the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorPopupAlignment"/> enumeration
            for the list of values that this can take.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PopupCalculator.Calculator">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/> that this PopupCalculator class embeds. 
            </summary>
            <remarks>
            This is a read only property.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.PopupCalculatorContainer">
            <summary>
            Derived class for the PopupCalculator.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PopupCalculatorContainer.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorCloseType">
            <summary>
            Specifies the way in which a calculator popup was closed.
            </summary>
            <remarks>
            This information is usually provided in a 
            PopupControlContainer's <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.CloseUp"/> event.
            You can use it to determine, in some cases, whether or not
            to use the updated data in a popup.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorCloseType.Done">
            <summary>
            The user wants the changes made in the popup to be applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorCloseType.Canceled">
            <summary>
            The user canceled the popup and expects the changes, if any to be ignored.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorCloseType.Deactivated">
            <summary>
            The popup was deactivated due to the user clicking in some
            other window, a differnt application getting focus, etc.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.PopupCalculatorClosingEventHandler">
            <summary>
            Delegate for the <see cref="E:Syncfusion.Windows.Forms.Tools.PopupCalculator.Closing"/> event.
            </summary>
            <remarks>
            See the <see cref="E:Syncfusion.Windows.Forms.Tools.PopupCalculator.Closing"/> event for more information.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorClosingEventArgs">
            <summary>
            The event data for <see cref="E:Syncfusion.Windows.Forms.Tools.PopupCalculator.Closing"/> event.
            </summary>
            <remarks>
            This event is raised by the <see cref="T:Syncfusion.Windows.Forms.Tools.PopupCalculator"/> class
            when in Popup mode. The event is raised when the Popup is being closed
            after the Calculator was displayed.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorClosingEventArgs.closeType">
            <summary>
            Specifies whether the equal buton was clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorClosingEventArgs.finalValue">
            <summary>
            The final value of the calculator.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CalculatorClosingEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.CalculatorCloseType,Syncfusion.Windows.Forms.Tools.CalculatorValue)">
            <summary>
            Creates an object of type PopupCalculatorClosedEventArgs.
            </summary>
            <param name="closeType">Specifies if the '=' button was clicked</param>
            <param name="finalValue">The final value of the calculator.</param>
            <remarks>
            This constructor for the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorClosingEventArgs"/> class
            takes the two required pieces of information for this class as parameters.
            The first parameter specifies if the Equal button was clicked. What this means
            is that the user chose to click the Equal button and complete the calculation.
            The <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorValue"/> object contains the final calculated value
            of the CalculatorControl.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorClosingEventArgs.CloseType">
            <summary>
            Specifies if the equal button was clicked.
            </summary>
            <remarks>
            The behavior of the CalculatorControl in PopupMode is to close when the
            Equal button is clicked. This property specifies if the Equal button 
            was clicked by the user.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CalculatorClosingEventArgs.FinalValue">
            <summary>
            The final value of the calculator.
            </summary>
            <remarks>
            The final value of the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl"/> is the value that
            the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorControl.Engine"/> object had when the Popup Calculator Control
            was closed.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CalculatorPopupAlignment">
            <summary>
            This enumeration lists the possible alignments
            for the CalculatorPopup when displayed by the
            <see cref="T:Syncfusion.Windows.Forms.Tools.CurrencyEdit"/> control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorPopupAlignment.Left">
            <summary>
            Align to the left of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CalculatorPopupAlignment.Right">
            <summary>
            Align to the right of the control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CheckBoxAdv">
            <summary>
            The CheckBoxAdv control is an alternative to the .Net CheckBox control. It has a very 
            customizable border and background and supports advanced DataBinding.
            </summary>
            <example>
            	CheckBoxAdv CheckBoxAdv1 = new CheckBoxAdv();
            	this.CheckBoxAdv1.AutoHeight = true;
            	this.CheckBoxAdv1.BackColor = System.Drawing.SystemColors.Control;
            	this.CheckBoxAdv1.BackgroundStyle = CheckBoxAdvBackStyle.VerticalGradient;
            	this.CheckBoxAdv1.Border3DStyle = System.Windows.Forms.Border3DStyle.Bump;
            	this.CheckBoxAdv1.BorderColor = System.Drawing.SystemColors.WindowFrame;
            	this.CheckBoxAdv1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            	this.CheckBoxAdv1.CheckState = System.Windows.Forms.CheckState.Indeterminate;
            	this.CheckBoxAdv1.DrawFocusRectangle = false;
            	this.CheckBoxAdv1.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
            	this.CheckBoxAdv1.GradientEnd = System.Drawing.SystemColors.ControlDark;
            	this.CheckBoxAdv1.GradientStart = System.Drawing.SystemColors.Control;
            	this.CheckBoxAdv1.HotBorderColor = System.Drawing.SystemColors.Highlight;
            	this.CheckBoxAdv1.Location = new System.Drawing.Point(32, 16);
            	this.CheckBoxAdv1.Name = "CheckBoxAdv1";
            	this.CheckBoxAdv1.ShadowColor = System.Drawing.SystemColors.GrayText;
            	this.CheckBoxAdv1.ShadowOffset = new System.Drawing.Point(1, 1);
            	this.CheckBoxAdv1.Size = new System.Drawing.Size(232, 21);
            	this.CheckBoxAdv1.StretchImage = false;
            	this.CheckBoxAdv1.TabIndex = 0;
            	this.CheckBoxAdv1.Text = "Check if something";
            	this.CheckBoxAdv1.TextShadow = true;
            	this.CheckBoxAdv1.ThemesEnabled = true;
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.checkBox">
            <summary>
            The Pannel used to draw the check box on.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.checkState">
            <summary>
            The check state of the 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.mouseOver">
            <summary>
            Determines if the mouse is over the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.drawFocusRectangle">
            <summary>
            Determines if the focus rectangle will be visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.autoHeight">
            <summary>
            Determines if the height of the CheckBox will be automatically calculated
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.imageCheckBox">
            <summary>
            Determines if the check box will draw itself with the images provided.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.stretchImage">
            <summary>
            Determines if the images will be stretched when drawing over the check box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.wrapText">
            <summary>
            Determines if the text will be wrapped.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.textShadow">
            <summary>
            Determines if the text shadow is visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.buttonState">
            <summary>
            Determines the state of the check box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.textOffset">
            <summary>
            Determines the position of the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.shadowOffset">
            <summary>
            Determimes the offset of the shadow.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.focusRect">
            <summary>
            The focus rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.checkedImage">
            <summary>
            The image when checked and mouse not over.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.uncheckedImage">
            <summary>
            The image when unchecked and mouse over.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.disabledImage">
            <summary>
            The image when disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.mouseOverCheckedImage">
            <summary>
            The image when checked and mouse over.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.mouseOverUncheckedImage">
            <summary>
            The image when unchecked and mouse over.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.indeterminateImage">
            <summary>
            The image when imdeterminate and mouse not over.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.mouseOverIndetermImage">
            <summary>
            The image when indeterminate and omuse over.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.border3DStyle">
            <summary>
            The 3D border style of the CheckBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.borderStyle">
            <summary>
            The 2D border style of the CheckBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.borderSingle">
            <summary>
            The border style of the BheckBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.backStyle">
            <summary>
            The background style of the CheckBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.borderColor">
            <summary>
            The color of the border.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.hotBorderColor">
            <summary>
            The color of the border when mouse over.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.shadowColor">
            <summary>
            The color of the text shadow.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.gradientStart">
            <summary>
            The start color of the gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.gradientEnd">
            <summary>
            The end color of the gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.checkedString">
            <summary>
            The string to get/set to the StringValue property when checked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.uncheckedString">
            <summary>
            The string to get/set to the StringValue property when unchecked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.indeterminateString">
            <summary>
            The string to get/set to the StringValue property when indeterminate.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.checkedInt">
            <summary>
            The int to get/set to the IntValue property when checked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.uncheckedInt">
            <summary>
            The int to get/set to the IntValue property when unchecked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.indeterminateInt">
            <summary>
            The int to get/set to the IntValue property when indeterminate.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.cd">
            <summary>
            Helps in the drawing of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.tcd">
            <summary>
            Helps in the themed drawing of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.textAlignment">
            <summary>
            The alignment of the text.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.CheckStateChanged">
            <summary>
            Occurs when the CheckState property changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.TextAlignment">
            <summary>
            Indicates the alignment of the text. WrapText must be set to false.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.GradientEnd">
            <summary>
            The end color of the gradient of the background of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.GradientStart">
            <summary>
            The start color of the gradient of the background of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.BackgroundStyle">
            <summary>
            The background style of the CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.ShadowOffset">
            <summary>
            The offset of the text shadow.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.ShadowColor">
            <summary>
            The color of the text shadow.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.TextShadow">
            <summary>
            Determines if the text shadow is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.WrapText">
            <summary>
            Determines if the text in the CheckBox is wrapped.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.StretchImage">
            <summary>
            Determines if the state images of the CheckBox is stretched.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.ImageCheckBox">
            <summary>
            Determines if the check box will be drawn using the images provided.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.AutoHeight">
            <summary>
            Determines if the CheckBox will automatically calculate it`s height.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.DrawFocusRectangle">
            <summary>
            Determines if the focus rectangle is visible when got focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.BorderStyle">
            <summary>
            Determines the style of the border.It can be None 3D and 2D.
            </summary>
            <remarks>
            By default it`s value is Fixed3D.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.BorderSingle">
            <summary>
            Determines the style of the border when BorderStyles is FixedSingle.
            </summary>
            <remarks>
            By default it`s value is Solid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.HotBorderColor">
            <summary>
            Determines the color of the FixedSingle border when mouse over.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.BorderColor">
            <summary>
            Determines the color of the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.IndeterminateImage">
            <summary>
            Gets/Sets the image used to draw the check box when imdeterminate and mouse not over.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.MouseOverIndetermImage">
            <summary>
            Gets/Sets the image used to draw the check box when  indeterminate and mouse over.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.MouseOverUncheckedImage">
            <summary>
            Gets/Sets the image used to draw the check box when unchecked and mouse over.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.MouseOverCheckedImage">
            <summary>
            Gets/Sets the image used to draw the check box when checked and mouse over.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.DisabledImage">
            <summary>
            Gets/Sets the image used to draw the check box when disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.UncheckedImage">
            <summary>
            Gets/Sets the image used to draw the check box when unchecked and mouse not over.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.CheckedImage">
            <summary>
            Gets/Sets the image used to draw the check box when checked and mouse not over.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckBoxAdv.CheckState">
            <summary>
            Gets/Sets the check state of the CheckBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CheckBoxExt">
            <summary>
            The CheckBoxExt type will soon be replaced with the CheckBoxAdv for consistency in 
            Control naming in our library. 
            Please replace all occurances of CheckBoxExt with CheckBoxAdv in your app.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CurrencyEdit">
            <summary>
            CurrencyEdit class encapsulates a <see cref="T:Syncfusion.Windows.Forms.Tools.CurrencyTextBox"/> control and
            adds the ability to drop down a <see cref="T:Syncfusion.Windows.Forms.Tools.PopupCalculator"/>.
            </summary>
            <remarks>
            The CurrencyEdit class dervies from <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> and embeds
            a CurrencyTextBox class.
            <para>
            The embedded CurrencyTextBox class is exposed through the <see cref="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.TextBox"/>
            property.
            </para>
            <para>
            The CurrencyEdit has full support for the Windows Forms designer and you
            can just drag and drop it on to the form and set the properties.
            </para>
            <para>
            The calculator button's visiblity is controlled by the <see cref="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.ShowCalculator"/>
            property.
            </para>
            </remarks>
            <example>
            <coderef file="c:\syncfusion\essential suite\tools\samples\quick start\currencydemo\CS\MainForm.cs" name="Currency InitializeComponent - Currency Edit" lang="CS">
            <code lang="C#">
                // CurrencyEdit control
                this.currencyEdit1 = new Syncfusion.Windows.Forms.Tools.CurrencyEdit();
            
                //
                // currencyEdit1
                //
                this.currencyEdit1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
                this.currencyEdit1.Location = new System.Drawing.Point(16, 80);
                this.currencyEdit1.Name = "currencyEdit1";
                this.currencyEdit1.SelectionLength = 0;
                this.currencyEdit1.SelectionStart = 5;
                this.currencyEdit1.ShowCalculator = true;
                this.currencyEdit1.ShowTextBox = true;
                this.currencyEdit1.Size = new System.Drawing.Size(304, 22);
                this.currencyEdit1.TabIndex = 1;
                this.currencyEdit1.Text = "$1.00";
                this.currencyEdit1.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            
                // Add the CurrencyEdit control to the form
                this.Controls.Add(this.currencyEdit1);
            </code></coderef>
            <coderef file="c:\syncfusion\essential suite\tools\samples\quick start\currencydemo\VB\MainForm.vb" name="Currency InitializeComponent - Currency Edit" lang="VB"><code lang="VB">
                ' CurrencyEdit control
                Me.currencyEdit1 = New Syncfusion.Windows.Forms.Tools.CurrencyEdit
                '
                ' currencyEdit1
                '
                Me.currencyEdit1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
                Me.currencyEdit1.Location = New System.Drawing.Point(16, 80)
                Me.currencyEdit1.Name = "currencyEdit1"
                Me.currencyEdit1.SelectionLength = 0
                Me.currencyEdit1.SelectionStart = 5
                Me.currencyEdit1.ShowCalculator = true
                Me.currencyEdit1.ShowTextBox = true
                Me.currencyEdit1.Size = New System.Drawing.Size(304, 22)
                Me.currencyEdit1.TabIndex = 1
                Me.currencyEdit1.Text = "$1.00"
                Me.currencyEdit1.TextAlign = System.Windows.Forms.HorizontalAlignment.Right
                ' Add the CurrencyEdit control to the form
                Me.Controls.Add(Me.currencyEdit1)
                </code>
                </coderef></example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyEdit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyEdit.btnCalculator">
            <summary>
            The calculator button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyEdit.calcPopup">
            <summary>
            The CalculatorControl popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyEdit.showCalculator">
            <summary>
            Specifies if the calculator button is to be displayed
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyEdit.calcCloseAction">
            <summary>
            Close the calculator when this action occurs.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyEdit.transferFromCalculator">
            <summary>
            Specifies if the current value of the CalculatorControl
            should be transferred to the CurrencyTextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyEdit.transferToCalculator">
            <summary>
            Specifies if the current value of the CurrencyTextBox should be
            transferred to the CalculatorControl.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyEdit.calculatorLayoutType">
            <summary>
            The LayoutType for the drop down calculator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyEdit.childButtons">
            <summary>
            To prevent serialization of the child buttons.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyEdit.beforeCalcShow">
            <summary>
            Indicates if calculator must be shown and got focus.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.#ctor">
            <summary>
            Creates an instance of the CurrencyEdit class and initialize it.
            </summary>
            <remarks>
            The CurrencyEdit class also creates the controls that is hosts such
            as the <see cref="T:Syncfusion.Windows.Forms.Tools.CurrencyTextBox"/> control and the <see cref="T:Syncfusion.Windows.Forms.Tools.PopupCalculator"/>
            control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.InitializeLayout">
            <summary>
            Initialize the layout for the <see cref="T:Syncfusion.Windows.Forms.Tools.CurrencyEdit"/> control.
            Overrids InitializeLayout in <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.HandleCalculatorBtnClick(System.Object,System.EventArgs)">
            <summary>
            This method is the handler for the calculator button's click event.
            </summary>
            <param name="sender">The calculator event.</param>
            <param name="e">The event data.</param>
            <remarks>
            Display the PopupCalculator when the calculator button is clicked.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.HandleCalculatorPopupClosingEvent(System.Object,Syncfusion.Windows.Forms.Tools.CalculatorClosingEventArgs)">
            <summary>
            Handles the PopupCalculator's CalculatorClosing event.
            </summary>
            <param name="sender">The popup calculator.</param>
            <param name="args">The event data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.RaiseCalculatorShowingEvent">
            <summary>
            This method raises the <see cref="E:Syncfusion.Windows.Forms.Tools.CurrencyEdit.CalculatorShowing"/> event.
            </summary>
            <returns>true if the Calculator display has been cancelled by a event handler; false, otherwise</returns>
            <remarks>
            This event can be handled if you want to make some changes to the CalculatorControl
            before it is displayed.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.RaiseCalculatorClosingEvent(Syncfusion.Windows.Forms.Tools.CalculatorCloseType)">
            <summary>
            Raise the <see cref="E:Syncfusion.Windows.Forms.Tools.CurrencyEdit.CalculatorClosing"/> event. This event is
            raised by the calculator control before the popup calculator closes
            when the '=' button is clicked. This event will not be raised when
            the popup calculator control closes when it loses focus.
            </summary>
            <returns>true if the popup calculator is not to be closed; false, if it is to be
            closed</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.OnCalculatorClosing(Syncfusion.Windows.Forms.Tools.CalculatorClosingEventArgs)">
            <summary>
            Invoke the CalculatorClosing event.
            <param name="args">A CancelEventArgs that contains the event data.</param>
            <remarks>
            The OnPopupCalculatorClosing method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors:  When overriding OnStyleChanged in a derived
            class, be sure to call the base class's OnStyleChanged method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>
            <returns>true if the popup calculator is not to be closed; false, if it is to be
            closed</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.OnCalculatorShowing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Invoke the BeforeCalculatorPopupDisplay event.
            <param name="args">A BeforeCalculatorPopupDisplayEventArgs that contains the event data.</param>
            <remarks>
            The OnBeforeCalculatorPopupDisplay method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors:  When overriding OnBeforeCalculatorPopupDisplay in a derived
            class, be sure to call the base class's OnBeforeCalculatorPopupDisplay method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.HandleTextBoxKeyDownEvent(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handle the KeyDown event of the embedded TextBox and drop down the
            Calculator Control.
            </summary>
            <param name="sender">The TextBox.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.CreateTextBox">
            <summary>
            Set the CurrencyTextBox as the TextBox for this control.
            </summary>
            <returns>A CurrencyTextBox object</returns>
            <remarks>
            This override of the CreateTextBox method allows us to change the
            default TextBox object that will be created with a <see cref="T:Syncfusion.Windows.Forms.Tools.CurrencyTextBox"/>
            object.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.OnDecimalValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.DecimalValueChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyEdit.OnValidationError(Syncfusion.Windows.Forms.Tools.ValidationErrorArgs)">
            <summary>
            Invoke the ValidationError event.
            <param name="args">A ValidationErrorEventArgs that contains the event data.</param>
            <remarks>
            The OnValidationError method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors:  When overriding OnValidationError in a derived
            class, be sure to call the base class's OnValidationError method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CurrencyEdit.CalculatorShowing">
            <summary>
            Event raised before the calculator popup is displayed.
            </summary>
            <remarks>
            This event is a <see cref="T:System.ComponentModel.CancelEventHandler"/> type
            event. You can cancel the PopupCalculator from being displayed
            by handling this event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CurrencyEdit.CalculatorClosing">
            <summary>
            Event raised by a popup calculator when closing after the
            specified button was clicked.
            </summary>
            <remarks>
            By default the CalculatorControl will raise this event when
            the specified button is clicked. This event can be canceled
            by a handler and the PopupCalculator will not be closed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.CalculatorButton">
            <summary>
            Gets the Calculator Button.
            </summary>
            <remarks>
            The Calculator Button can be used to change the appearance of the
            button.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.CloseAction">
            <summary>
            The popup calculation will close when this action is encountered.
            </summary>
            <remarks>
            This is set to <see cref="F:Syncfusion.Windows.Forms.Tools.CalcActions.CalcOperatorEquals"/> by default.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.CalculatorLayoutType">
            <summary>
            Specify the layout type for the CalculatorControl.
            </summary>
            <remarks>
            The CalculatorControl supports different layouts for
            Financial and Windows Standard type calculators.
            <para>
            The different layouts change the layout of the buttons
            and their appearance.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.PopupCalculatorAlignment">
            <summary>
            This property specifies the alignment of the Popup Calculator
            with respect to the ButtonEdit control.
            </summary>
            <remarks>
            Please refer to the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorPopupAlignment"/> type
            for the types of alignments supported.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.CalcPopup">
            <summary>
            This property specifies the alignment of the Popup Calculator
            with respect to the ButtonEdit control.
            </summary>
            <remarks>
            Please refer to the <see cref="T:Syncfusion.Windows.Forms.Tools.CalculatorPopupAlignment"/> type
            for the types of alignments supported.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.ShowCalculator">
            <summary>
            Specifies if the calculator button is to be displayed.
            If the Calculator is not to be used, you can use the
            <see cref="T:Syncfusion.Windows.Forms.Tools.CurrencyTextBox"/> class that is used internally
            by the <see cref="T:Syncfusion.Windows.Forms.Tools.CurrencyEdit"/> class
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.TransferToCalculator">
            <summary>
            Transfer the values from the edit control to the calculator.
            </summary>
            <remarks>
            Specifies if the current currency value of the CurrencyTextBox
            is to be transferred to the CalculatorControl when the Calculator
            is dropped down.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.TransferFromCalculator">
            <summary>
            Transfer the calculated value to the edit control.
            </summary>
            <remarks>
            Specifies if the calculated value is to be transferred to
            the CurrencyTextBox when the popup calculator is closed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.ShowTextBox">
            <summary>
            Specifies if the TextBox is to be displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.TextBox">
            <summary>
            The CurrencyTextBox control that defines the Currency behavior for this control.
            </summary>
            <remarks>
            See the <see cref="T:Syncfusion.Windows.Forms.Tools.CurrencyTextBox"/> control for more information.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.DecimalValue">
            <summary>
            The decimal value of the control. This will be formatted and
            displayed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CurrencyEdit.DecimalValueChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.DecimalValue"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyEdit.Text">
            <summary>
            Overrides the Text property.
            </summary>
            <remarks>
            The Text property is not persisted.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CurrencyEdit.ValidationError">
            <summary>
            ValidationError event will be raised when an unacceptable
            character is encountered as input.
            </summary>
            <remarks>
            <para>
            This event can be handled and you can do your processing based
            on the information provided. The ValidationErrorEventArgs object
            will provide the invalid text that was input and also the position
            within that text where the error occurred.
            </para>
            </remarks>
            <example>
            <code lang="C#">
                        Console.WriteLine("ValidationError in currencyTextBox1 InvalidText" + e.InvalidText);
                        Console.WriteLine("ValidationError in currencyTextBox1 StartPosition" + e.StartPosition );</code>
                        <coderef file="c:\syncfusion\essential suite\tools\samples\quick start\currencydemo\VB\MainForm.vb" name="Currency ValidationError" lang="VB"><code lang="VB">
                        Console.WriteLine(("ValidationError in currencyTextBox1 InvalidText" + e.InvalidText))
                        Console.WriteLine(("ValidationError in currencyTextBox1 StartPosition" + e.StartPosition))</code></coderef>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DataButtonEdit">
            <summary>
            CurrencyEdit class encapsulates a CurrencyTextBox control and
            adds the ability to drop down a popup calculator
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataButtonEdit.buttonLeftEnd">
            <summary>
            The left end button
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataButtonEdit.#ctor">
            <summary>
            Creates an instance of the CurrencyEdit class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataButtonEdit.SetButtonsStatus">
            <summary>
            Set the status of the data buttons depending on position.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataButtonEdit.SetPosition(System.Int32)">
            <summary>
            Set the position
            </summary>
            <param name="newPosition">The new position to move to.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataButtonEdit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataButtonEdit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataButtonEdit.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DataButtonEdit.DataManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DataButtonEdit.DataSource">
            <summary>
              <para>Gets or sets the data source that the grid is displaying data for.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DataListView">
            <summary>
            DataListView extends the ListView class to provide DataBinding 
            support.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.DataListView"/> creates appropriate columns 
            to reflect the columns in the DataSource and populates them.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataListView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataListView.dataSource">
            <summary>
            The data source for the DataListView.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataListView.imageFromOwner">
            <summary>
            Specifies if the image information will be provided by the owner.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataListView.listOwner">
            <summary>
            The owner.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataListView.imageColumnIndex">
            <summary>
            The index of the image column.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataListView.#ctor">
            <summary>
            Create an instance of the DataListView class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataListView.OnResize(System.EventArgs)">
            <summary>
            This member overrides Control.OnResize.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataListView.PopulateList">
            <summary>
            Propulates the ListView based on the columns in the 
            DataSource.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataListView.SetColumns">
            <summary>
            Sets the columns based on the DataSource.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataListView.AdjustHeight(System.Int32)">
            <summary>
            Set the control Height based on the item count subject 
            to a maximum height.
            </summary>
            <param name="maxHeight">The maximum height.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataListView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataListView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataListView.AddColumn(System.Object,System.Int32)">
            <summary>
            Add a column to the ListView and also set its column width
            if available.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataListView.SetData">
            <summary>
            Set the data for the ListView from the DataSource.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataListView.AddListRow(System.Object)">
            <summary>
            Add a row of data to the ListView.
            </summary>
            <param name="currentRow">The row of data to be added.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataListView.ResizeListColumns(System.Int32)">
            <summary>
            Resize the columns.
            </summary>
            <param name="totalWidth">The new total width.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DataListView.ImageColumnIndex">
            <summary>
            The index of the image column.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DataListView.ListOwner">
            <summary>
            The owner object that will provide formatting information.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DataListView.ImageFromOwner">
            <summary>
            Specifies if the image field will be provided by the Owner object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DataListView.DataSource">
            <summary>
            Gets or sets the data source that the ListView is displaying data for.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DataLookupEdit">
            <summary>
            CurrencyEdit class encapsulates a CurrencyTextBox control and
            adds the ability to drop down a popup calculator
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataLookupEdit.btnDown">
            <summary>
            The calculator button
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataLookupEdit.dropDownContainer">
            <summary>
            The popup control container for the calculator
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataLookupEdit.dropDownList">
            <summary>
            The Calculator Control
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataLookupEdit.columnInfoList">
            <summary>
            The collection of Columns specifying the attributes of the columns of
            the List displayed with the matches.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataLookupEdit.isInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.GetImageColumnIndex">
            <summary>
            This method implements IDataViewListOwner.GetImageColumnIndex.
            </summary>
            <returns>The index of the column in the data source that provides the
            index of images in the assigned image list.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.GetColumnWidth(System.Int32)">
            <summary>
            This method implements IDataViewListOwner.GetColumnWidth.
            </summary>
            <param name="columnIndex">The index of the column for which to 
            return the width.
            </param>
            <returns>The width of the column.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.#ctor">
            <summary>
            Creates an instance of the CurrencyEdit class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.GetColumns">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataLookupEdit.imageListValue">
            <summary>
            The image list that will be used by the AutoComplete object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.InitializeDropDown">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.WireEvents">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.HandleListSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.SetSelectedValue(System.String)">
            <summary>
            
            </summary>
            <param name="selectedValue"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.HandlePopupClosed(System.Object,Syncfusion.Windows.Forms.PopupClosedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.HandleListDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Handles the DoubleClick event of the drop down list.
            </summary>
            <param name="sender">The drop down list</param>
            <param name="e">The EventArgs object with event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.IsDropDownShowing">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DataLookupEdit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.HandleDownBtnClick(System.Object,System.EventArgs)">
            <summary>
            Handle the calculator button's click event
            </summary>
            <param name="sender">The calculator event</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.DisplayDataListView">
            <summary>
            Call this to display the calculator.Overloaded.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.ShowDataListView(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.RaiseBeforeDataListPopupDisplayEvent">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.OnBeforeDataListPopupDisplay(System.ComponentModel.CancelEventArgs)">
            <summary>
            Invoke the BeforeCalculatorPopupDisplay event.
            <param name="args">A BeforeCalculatorPopupDisplayEventArgs that contains the event data.</param>
            <remarks>
            The OnBeforeCalculatorPopupDisplay method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors:  When overriding OnBeforeCalculatorPopupDisplay in a derived
            class, be sure to call the base class's OnBeforeCalculatorPopupDisplay method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.HandleDataListPopupClosedEvent(System.Object,System.EventArgs)">
            <summary>
            Handles the CalculatorControl's PopupClosed event
            </summary>
            <param name="sender">The popup control container</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.CloseDataList">
            <summary>
            Close the popup calculator if its is displayed
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DataLookupEdit.HandleDataListPopupContainerBeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handle the popup control container's BeforePopup event
            </summary>
            <param name="sender">The popup control container</param>
            <param name="e">The event data</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DataLookupEdit.BeforeDataListPopupDisplay">
            <summary>
            Event raised before the calculator popup is displayed
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DataLookupEdit.Columns">
            <summary>
            The columns that will be displayed in the popup control when the AutoCompleteMode is
            set to AutoSuggest. The Columns property is a collection of AutoCompleteDataColumnInfo objects
            that specify the attributes of a column.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfoCollection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.AutoCompleteDataColumnInfo"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DataLookupEdit.DropDownList">
            <summary>
            The drop down list displaying the matches.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DataLookupEdit.ImageList">
            <summary>
            The ImageList that will specify the images that will be used
            by the popup control when in AutoSuggest Mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DataLookupEdit.ListView">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DataLookupEdit.DataSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DataLookupEdit.DataListView">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DateTimeCustomFormatParser">
            <summary>
            Summary description for DateTimeCustomFormatParser.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv">
            <summary>
            The DateTimePickerAdv control extends the Windows Forms DateTimePicker control and provides several important features. 
            
            Internationalization - The DateTimePickerAdv control is fully culture aware. 
            Databinding - Supports DataBinding with a data source. Supports null value. 
            Custom dropdown - The DateTimePickerAdv can display a custom drop down calendar. 
            XP Themes - The DateTimePickerAdv control supports XP themes when applicable. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.popupWindow">
            <summary>
            The popup window containing the calendar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.WireCalendarEvents">
            <summary>
            Gets the Custom Popup Window with the calendar and wires the calendars events
            This is kept in a separate method so that it can be invoked from ISupportInitialize.EndInit()
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.OnBindableValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.BindableValueChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.InitDefaultPopup(Syncfusion.Windows.Forms.Tools.CalendarPopup)">
            <summary>
            Virtual function used to initialize the default popup window.
            </summary>
            <param name="defaultPopup">the deafault popup window <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.JumpField">
            <summary>
            Override this method when you want to modify the default behavior of the DateTimePickerAdv that jumps to select the first field when the last is selected and the right arrow is pressed and vice versa.
            </summary>
            <returns>A bool value that indicates wether to jump or not</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.IsNumber(System.String)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.PopupWindow">
            <summary>
            Gets Popup window calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.FieldsArray">
            <summary>
            Holds the fields of the DateTimePickerAdv.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.SelectedField">
            <summary>
            Indicates the selected field of the DateTimePickerAdv.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.EnableNullKeys">
            <summary>
            Determines if Backspace or Delete keys make the date null.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.Style">
            <summary>
            Indicates the Office style of the Date Time Picker.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.ReadOnly">
            <summary>
            Toggles the read only state of the picker.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.BorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.BackColor" -->
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.NullModeKeyReset">
            <summary>
            Indicates what keys will toggle off null date.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.CalendarSizeToFit">
            <summary>
            Indicates if the calendar will size acording to the widths of the days.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.EnableNullDate">
            <summary>
            Indicates if the null date support is enabled. If set to false the DateTimePicker will always have a selected date.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.UseEnhancedMenu">
            <summary>
            Indicates if the context menu will be a Syncfusion XPMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.ThemedChildControls">
            <summary>
            Indicates if the checkbox, drop button ,updown and calendar will be themed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.VSLikeUpDown">
            <summary>
            Indicates if the UpDown will have a VS like look.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.ClipboardFormat">
            <summary>
            Indicates the format of the value of the picker when copying.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.CopyFieldsOnly">
            <summary>
            Indicates if when copy/paste operation is done only tha selected field is taken into consideration.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.TabLeave">
            <summary>
            Indicates if the focus will be moved off the control when there are no fields to tab through.
            </summary>
            <remarks>
            This is active only when the TabForwarding property is set to true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.FlatDropButton">
            <summary>
            Indicates if the dropdown buttonwill have a flat appearance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.TabForwarding">
            <summary>
            When the Tab key gets pressed indicates if the DateTimePicker will advance to the next field.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.AutoForwarding">
            <summary>
            Indicates if after the completion of a field the DateTimePicker advances to the next field.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.Spacing">
            <summary>
            Indicates the spacing between the fields of the picker.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.CalendarSize">
            <summary>
            Indicates the size of the popup Calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.UseCurrentCulture">
            <summary>
            Indicates if the current culture of the machine will be used. The culture will be set to the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> culture.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.CalendarTrailingForeColor">
            <summary>
            Indicates the trailing fore color of the popup calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.CalendarTitleForeColor">
            <summary>
            Indicates the title fore color of the popup calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.CalendarTitleBackColor">
            <summary>
            Indicates the title back color of the popup calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.CalendarMonthBackground">
            <summary>
            Indicates the back color of the popup calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.CalendarForeColor">
            <summary>
            Indicates the fore color of the popup calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.CalendarFont">
            <summary>
            Indicates the font of the popup calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.Calendar">
            <summary>
            Gets the popup calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.Checked">
            <summary>
            Indicates the checked state of the check box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.MonthImageList">
            <summary>
            Indicates the image list of the popup menu of the popup calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.DropDownAlign">
            <summary>
            Indicates the popup window`s allignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.CustomDrop">
            <summary>
            Indicates if the CustomPopupWindow will be shown instead of the internal calendar popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.CustomPopupWindow">
            <summary>
            Indicates the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> that will be shown instead of the internal calendar. 
            If the container contains controls implementing the <see cref="T:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar"/> interface and the Active property set to true the 
            picker will interact with those controls like the internal calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.DigitYear">
            <summary>
            Indicates the year that will complete the year fields when typing.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.NullString">
            <summary>
            Indicates the text visible when there is no date selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.IsNullDate">
            <summary>
            Indicates if there is no date selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.Format">
            <summary>
            Indicates the format of the picker.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.ShowUpDownOnFocus">
            <summary>
            Indicates if the UpDown buttons will be visible when got focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.ShowDropButton">
            <summary>
            Indicates if the drop button is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.ShowUpDown">
            <summary>
            Indicates if the UpDown buttons are visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.ShowCheckBox">
            <summary>
            Indicates if the checkBox will be visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.MinValue">
            <summary>
            Indicates the minimum value that can be picked from the picker.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.MaxValue">
            <summary>
            Indicates the maximum value that can be picked from the picker.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.Value">
            <summary>
            Indicates the selected date of the picker.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.BindableValueChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.BindableValue"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.BindableValue">
            <summary>
            Is a wrapper property around the selected date of the picker. Use this property if you
            want to be able to set the value of the control to null.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.CustomFormat">
            <summary>
            Indicates the format of the picker when Format is Custom.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.Culture">
            <summary>
            Indicates the current culture of the picker.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.NullButtonEventHandler">
            <summary>
            Delegate used for the NullButtonEvent of the IDateTimePickerAdvCalendar.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.SelectDateEventHandler">
            <summary>
            Delegate used for the SelectDateEvent of the IDateTimePickerAdvCalendar.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DateTimePickerAdv.DateChangedEventHandler">
            <summary>
            Delegate used for the DateChangedEvent of the IDateTimePickerAdvCalendar.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DateTimePickerExt">
            <summary>
            The DateTimePickerExt type will soon be replaced with the DateTimePickerAdv for consistency in 
            Control naming in our library. 
            Please replace all occurances of DateTimePickerExt with DateTimePickerAdv in your app.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DateTimePickerAdvCalendarStore">
            <summary>
            Summary description for DateTimePickerAdvCalendarStore.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DateTimePickerAdvMenu">
            <summary>
            Summary description for DateTimePickerAdvMenu.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvMenu">
            <summary>
            Summary description for IDateTimePickerAdvMenu.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DateTimePickerAdvMenu.Syncfusion#Windows#Forms#Tools#IDateTimePickerAdvMenu#add_Popup(System.EventHandler)">
            <summary>
            Summary description for DateTimePickerAdvMenu.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DateTimePickerAdvMenu.Syncfusion#Windows#Forms#Tools#IDateTimePickerAdvMenu#remove_Popup(System.EventHandler)">
            <summary>
            Summary description for DateTimePickerAdvMenu.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DateTimePickerAdvMenuExt">
            <summary>
            Summary description for DateTimePickerAdvMenuExt.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.#ctor">
            <summary>
            Creates a new instance of the PopupMenu class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of the Popupmenu class and adds itself to the specified container.
            </summary>
            <param name="container">The Container into which to add.</param>
            <remarks>This constructor is used by the design-time to add a Component to the Form's
            IContainer field so that it gets Disposed when the Form gets Disposed.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.OnBeforePopup(Syncfusion.Windows.Forms.CancelMouseEventArgs)">
            <summary>
            Raises the BeforePopup event.
            </summary>
            <param name="args">A CancelMouseEventArgs that contains the event data.</param>
            <remarks>
            The OnBeforePopup method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnBeforePopup in a derived 
            class, be sure to call the base class's OnBeforePopup method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.IsShowing">
            <summary>
            Gets a value indicating whether is Popup is currently open 
            and dropped down.
            </summary>
            <returns>true if the Popup is open; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.Show(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <overload>
            Pops up a menu at the specified location within the Control.
            </overload>
            <summary>
            Pops up a menu beside the specified Rectangle in the Control.
            </summary>
            <param name="control">The Parent Control for this PopupMenu.</param>
            <param name="besideRect">The rectangular region in Client co-ords of the Control
            to which the popup will be docked.</param>
            <remarks>
            Use this version of Show to popup the menu around a rectangle
            like in a Combo box rather than around a Point. The Popup
            drop-down position will be determined based on the available
            screen area and the docking rect beside which to popup.
            <para>In NT4.0 this method will return immediately and the menu will be shown asynchronously.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Will be thrown if control is null.</exception>
            <exception cref="T:System.Exception">Will be thrown if the Control's handle is not created or if
            the Control is not visible.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.Show(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Pops up a menu beside the specified Rectangle in the Control.
            </summary>
            <param name="control">The Parent Control for this PopupMenu.</param>
            <param name="pos">The Point in the Control's Client co-ordinates
            at which the popup will be dropped-down.</param>
            <remarks>
            <para>Use this version of Show to popup the menu at a specified Point.
            The Popup drop-down alignment will be determined based on the available
            screen area and the Point beside which to popup.</para>
            <para>In NT4.0 this method will return immediately and the menu will be shown asynchronously.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Will be thrown if control is null.</exception>
            <exception cref="T:System.Exception">Will be thrown if the Control's handle is not created or if
            the Control is not visible.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.Hide">
            <summary>
            Hide a Popup if Showing.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.ProcessShortcut(System.Windows.Forms.Keys)">
            <overload>
            <para>Lets you process a shortcut key.</para>
            <para>The underlying <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.ParentBarItem"/> is allowed to process the shorcut which 
            will result in a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/>'s <see cref="!:Click"/> event getting 
            fired, if one with the specified shortcut is found.</para>
            </overload>
            <summary>
            Process the shortcut key.
            </summary>
            <param name="key">The shortcut key.</param>
            <returns>True if processed; false otherwise.</returns>
            <remarks>In this overload, if the shortcut was processed, the PopupMenu's <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.SourceControl"/> property
            will be set to null when the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/>'s <see cref="!:Click"/> event is fired.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.ProcessShortcut(System.Windows.Forms.Keys,System.Windows.Forms.Control)">
            <summary>
            Process the shortcut key.
            </summary>
            <param name="key">The shorcut key.</param>
            <param name="control">The control in whose context the shortcut should be processed.</param>
            <returns>True if procesed; false otherwise.</returns>
            <remarks>In this overload, if the shortcut was processed, the PopupMenu's <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.SourceControl"/> property
            will be set to the specified control when the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/>'s <see cref="!:Click"/> event is fired.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.SourceControl">
            <summary>
            Gets the Control that is displaying the PopupMenu.
            </summary>
            <value>The control that is displaying the context
             menu. If no control has displayed the context menu, the property returns a 
             null reference (Nothing in Visual Basic).</value>
             <remarks><para>This property enables you to determine which control currently 
             displays the context menu defined in this PopupMenu. If the context menu is 
             not currently displayed, you can use this property to determine which 
             control last displayed the context menu. You can use this property in the 
             <see cref="!:ParentBarItem.Popup"/> event to ensure that the control displays the proper menu items. 
             You can also use this property to pass a reference to the control to a 
             method that performs the tasks associated with a menu command displayed 
             in the popup menu. Since the Form class inherits from Control, you can 
             also use this property if the context menu is associated with a form.</para>
             <para>You can use this property in the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.BeforePopup"/> event
             to figure out in which control the context menu was shown.</para>
             <para>This can also be used when a shortcut key triggers a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/>.<see cref="!:Click"/> event to
             determine in which Control's context the shortcut was processed, if a PopupMenu
             is associated with multiple controls.</para>
             </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.SynchronousPopup">
            <summary>
            This lets you specify whether or not the PopupMenu should be displayed within the WM_CONTEXTMENU message processing stack or if the PopupMenu should be shown after a short delay (using a timer). Use the Asynchronous (timer based) approach if you intend to Dispose the underlying SourceControl from within a Popup event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.ParentBarItem">
            <summary>
            The ParentBarItem that specifies the items in the dropdown menu.
            </summary>
            <remarks>
            The ParentBarItem that specifies the items in the dropdown menu. 
            The Default value is null.
            <para>
            If this property is null, then calling Show on the PoupMenu will not 
            have any effect (will Assert in debug mode).</para>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.ParentBarItemChanged">
            <summary>
            Is fired when the ParentBarItem property changes.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.BeforePopup">
            <summary>
            Is fired right before the popup menu gets displayed with the position.
            </summary>
            <remarks>
            This event gets fired before the underlying <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu.ParentBarItem"/>'s <b>BeforePopup</b>
            event gets fired. The difference is that this event also provides the mouse position
            of the context menu. Both events are cancelable.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection">
            <summary>
                <para>
                  A collection that stores <see cref="!:CollectionNamespace.FieldDefinition"/> objects.
               </para>
            </summary>
            <seealso cref="!:CollectionNamespace.FieldDefinitionCollection"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection.#ctor">
            <summary>
                <para>
                  Initializes a new instance of <see cref="!:CollectionNamespace.FieldDefinitionCollection"/>.
               </para>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection.#ctor(Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection)">
            <summary>
                <para>
                  Initializes a new instance of <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> based on another <see cref="!:CollectionNamespace.FieldDefinitionCollection"/>.
               </para>
            </summary>
            <param name="value">
                  A <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> from which the contents are copied
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection.#ctor(Syncfusion.Windows.Forms.Tools.FieldDefinition[])">
            <summary>
                <para>
                  Initializes a new instance of <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> containing any array of <see cref="!:CollectionNamespace.FieldDefinition"/> objects.
               </para>
            </summary>
            <param name="value">
                  A array of <see cref="!:CollectionNamespace.FieldDefinition"/> objects with which to intialize the collection
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection.Add(Syncfusion.Windows.Forms.Tools.FieldDefinition)">
            <summary>
               <para>Adds a <see cref="!:CollectionNamespace.FieldDefinition"/> with the specified value to the 
               <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> .</para>
            </summary>
            <param name="value">The <see cref="!:CollectionNamespace.FieldDefinition"/> to add.</param>
            <returns>
               <para>The index at which the new element was inserted.</para>
            </returns>
            <seealso cref="!:CollectionNamespace.FieldDefinitionCollection.AddRange"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection.AddRange(Syncfusion.Windows.Forms.Tools.FieldDefinition[])">
            <summary>
            <para>Copies the elements of an array to the end of the <see cref="!:CollectionNamespace.FieldDefinitionCollection"/>.</para>
            </summary>
            <param name="value">
               An array of type <see cref="!:CollectionNamespace.FieldDefinition"/> containing the objects to add to the collection.
            </param>
            <returns>
              <para>None.</para>
            </returns>
            <seealso cref="!:CollectionNamespace.FieldDefinitionCollection.Add"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection.AddRange(Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection)">
            <summary>
                <para>
                  Adds the contents of another <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> to the end of the collection.
               </para>
            </summary>
            <param name="value">
               A <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> containing the objects to add to the collection.
            </param>
            <returns>
              <para>None.</para>
            </returns>
            <seealso cref="!:CollectionNamespace.FieldDefinitionCollection.Add"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection.Contains(Syncfusion.Windows.Forms.Tools.FieldDefinition)">
            <summary>
            <para>Gets a value indicating whether the 
               <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> contains the specified <see cref="!:CollectionNamespace.FieldDefinition"/>.</para>
            </summary>
            <param name="value">The <see cref="!:CollectionNamespace.FieldDefinition"/> to locate.</param>
            <returns>
            <para><see langword="true"/> if the <see cref="!:CollectionNamespace.FieldDefinition"/> is contained in the collection; 
              otherwise, <see langword="false"/>.</para>
            </returns>
            <seealso cref="!:CollectionNamespace.FieldDefinitionCollection.IndexOf"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection.CopyTo(Syncfusion.Windows.Forms.Tools.FieldDefinition[],System.Int32)">
            <summary>
            <para>Copies the <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> values to a one-dimensional <see cref="T:System.Array"/> instance at the 
               specified index.</para>
            </summary>
            <param name="array"><para>The one-dimensional <see cref="T:System.Array"/> that is the destination of the values copied from <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> .</para></param>
            <param name="index">The index in <paramref name="array"/> where copying begins.</param>
            <returns>
              <para>None.</para>
            </returns>
            <exception cref="T:System.ArgumentException"><para><paramref name="array"/> is multidimensional.</para> <para>-or-</para> <para>The number of elements in the <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> is greater than the available space between <paramref name="arrayIndex"/> and the end of <paramref name="array"/>.</para></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than <paramref name="array"/>'s lowbound. </exception>
            <seealso cref="T:System.Array"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection.IndexOf(Syncfusion.Windows.Forms.Tools.FieldDefinition)">
            <summary>
               <para>Returns the index of a <see cref="!:CollectionNamespace.FieldDefinition"/> in 
                  the <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> .</para>
            </summary>
            <param name="value">The <see cref="!:CollectionNamespace.FieldDefinition"/> to locate.</param>
            <returns>
            <para>The index of the <see cref="!:CollectionNamespace.FieldDefinition"/> of <paramref name="value"/> in the 
            <see cref="!:CollectionNamespace.FieldDefinitionCollection"/>, if found; otherwise, -1.</para>
            </returns>
            <seealso cref="!:CollectionNamespace.FieldDefinitionCollection.Contains"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Tools.FieldDefinition)">
            <summary>
            <para>Inserts a <see cref="!:CollectionNamespace.FieldDefinition"/> into the <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> at the specified index.</para>
            </summary>
            <param name="index">The zero-based index where <paramref name="value"/> should be inserted.</param>
            <param name=" value">The <see cref="!:CollectionNamespace.FieldDefinition"/> to insert.</param>
            <returns><para>None.</para></returns>
            <seealso cref="!:CollectionNamespace.FieldDefinitionCollection.Add"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection.GetEnumerator">
            <summary>
               <para>Returns an enumerator that can iterate through 
                  the <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> .</para>
            </summary>
            <returns><para>None.</para></returns>
            <seealso cref="T:System.Collections.IEnumerator"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection.Remove(Syncfusion.Windows.Forms.Tools.FieldDefinition)">
            <summary>
               <para> Removes a specific <see cref="!:CollectionNamespace.FieldDefinition"/> from the 
               <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> .</para>
            </summary>
            <param name="value">The <see cref="!:CollectionNamespace.FieldDefinition"/> to remove from the <see cref="!:CollectionNamespace.FieldDefinitionCollection"/> .</param>
            <returns><para>None.</para></returns>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is not found in the Collection. </exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FieldDefinitionCollection.Item(System.Int32)">
            <summary>
            <para>Represents the entry at the specified index of the <see cref="!:CollectionNamespace.FieldDefinition"/>.</para>
            </summary>
            <param name="index"><para>The zero-based index of the entry to locate in the collection.</para></param>
            <value>
               <para> The entry at the specified index of the collection.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the valid range of indexes for the collection.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IDateTimePickerCalendarSource.GetCalendar">
            <summary>
            Implement this interface to 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar">
            <summary>
            Interface used by DateTimePickerAdv. If the DateTimePickerAdv customDrop is true and the CustomPopupWindow is the interface`s parent and Active is true then the interface will comunicate with the picker through events.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.Active">
            <summary>
            Indicates if the interface`s events are to be considered by the DateTimePickerAdv.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.CalendarFont">
            <summary>
            The font used to draw the calendar that implements the interface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.CalendarForeColor">
            <summary>
            The color used to draw the foreground of calendar that implements the interface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.CalendarMonthBackground">
            <summary>
            The color used to draw the month background of calendar that implements the interface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.TitleBackColor">
            <summary>
            The color used to draw the title background of calendar that implements the interface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.TitleForeColor">
            <summary>
            The color used to draw the foreground of the title of calendar that implements the interface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.TrailingForeColor">
            <summary>
            The color used to draw the trailing foreground of calendar that implements the interface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.MinDate">
            <summary>
            The minimum date of the calendar that implements the interface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.MaxDate">
            <summary>
            The maximum date of the calendar that implements the interface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.Value">
            <summary>
            The date of the calendar that implements the interface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.Culture">
            <summary>
            The culture of the calendar that implements the interface.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.NullButtonDown">
            <summary>
            Fires when the null button of the calendar that implements the interface is clicked.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.SelectDate">
            <summary>
            Fires when a date is selected in the calendar that implements the interface.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.IDateTimePickerAdvCalendar.DateChange">
            <summary>
            Fires when the date is changed in the calendar that implements the interface.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DateTimePickerAdvCalendarAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv">
            <summary>
            The MonthCalendarAdv extends the Windows Forms MonrhCalendar control and provides several important features:
            Internationalization - The MonthCalendarAdv control is fully culture aware. 
            XP Themes - The MonthCalendarAdv control supports XP themes when applicable. 
            Multiple selection - The MonthCalendarAdv can select multiple non-consecutive dates.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.HandleGridKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles the KeyUp event of the grid control to refresh the
            calendar so that customizations applied through the DateCellQueryInfo
            event are applied.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.GetInfo(System.Int32,System.Int32)">
            <summary>
            Gets the current style for a cell.
            </summary>
            <param name="i">The row index of the cell.</param>
            <param name="j">The column index of the cell.</param>
            <returns>The style of the cell.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.SetInfo(System.Int32,System.Int32,Syncfusion.Windows.Forms.Grid.GridStyleInfo)">
            <summary>
            Set the GridStyleInfo for the cell.
            </summary>
            <param name="i">The row index of the cell.</param>
            <param name="j">The column index of the cell.</param>
            <param name="style">The new style of the cell.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.DateCellQueryInfo">
            <summary>
            Handle this event to provide custom formatting for calendar cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.SizeToFit">
            <summary>
            Indicates if the calendar will addapt it`s width to fit the contents of the day names.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.TodayFontColor">
            <summary>
            Indicates the color of the today date text in the calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.TodayButton">
            <summary>
            The today button at the bottom of the calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.NoneButton">
            <summary>
            The none button at the bottom of the calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.MinValue">
            <summary>
            Indicates the minimum value selectable by the calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.MaxValue">
            <summary>
            Indicates the maximum value selectable by the calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.AllowSelection">
            <summary>
            Indicates the selection types of the calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.AllowMultipleSelection">
            <summary>
            Indicates the selection types of the calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.MonthImageList">
            <summary>
            Indicates the imagelist of the popup menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.DayNamesColor">
            <summary>
            Indicates the color of the day names.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.HeadForeColor">
            <summary>
            Indicates the fore color of the header.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.InactiveMonthColor">
            <summary>
            Indicates the trailing fore color of the calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.HighlightColor">
            <summary>
            Indicates the color of the selected date.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.ThemedEnabledScrollButtons">
            <summary>
            Indicates the themed state of the scroll buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.ThemedEnabledGrid">
            <summary>
            Indicates the themed state of the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.ScrollButtonSize">
            <summary>
            Indicates the size of the scroll buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.HorizontalAlignment">
            <summary>
            Indicates the horizontal alignment of the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.VerticalAlignment">
            <summary>
            Indicates the vertical alignment of the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.SelectedDates">
            <summary>
            Gets the selected dates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.GridBackColor">
            <summary>
            Indicates the back color of the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.DayNamesHeight">
            <summary>
            Indicates the height of the day names.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.DayNamesFont">
            <summary>
            Indicates the font of the day names.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.GridLines">
            <summary>
            Determines the style of the grid lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.BottomHeight">
            <summary>
            Indicates the height of the bottom controls.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.HeaderHeight">
            <summary>
            Indicates the height of the header.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.DaysColor">
            <summary>
            Indicates the color of the days.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.BackgroundImage">
            <summary>
            Indicates the background image of the calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.WrapText">
            <summary>
            Indicates of the grid should wrap text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.HeaderFont">
            <summary>
            Indicates the font of the header.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.HeaderVerticalGradient">
            <summary>
            Indicates if the header gradient will be vertical.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.HeaderImage">
            <summary>
            Indicates the image of the header.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.HeadGradient">
            <summary>
            Determines if the header will show a gradient background.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.HeaderEndColor">
            <summary>
            Indicates the end color of the header gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.HeaderStartColor">
            <summary>
            Indicates the start color of the header gradient. Also used as backcolor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.DaysFont">
            <summary>
            Indicates the font of the days.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.Value">
            <summary>
            Indicates the current value of the calendar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.Culture">
            <summary>
            Indicates the culture pf the calendar.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DateCellQueryInfoEventHandler">
            <summary>
            A method that represents a handler for the <see cref="E:Syncfusion.Windows.Forms.Tools.MonthCalendarAdv.DateCellQueryInfo"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DateCellQueryInfoEventArgs">
            <summary>
            Provides information about the current calendar date cell that is being formatted.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.DateCellQueryInfoEventArgs.DateValue"/> property provides the date that this
            cell represents. The <see cref="P:Syncfusion.Windows.Forms.Tools.DateCellQueryInfoEventArgs.Style"/> property can be set to any
            valid <see cref="T:Syncfusion.Windows.Forms.Grid.GridStyleInfo"/> values and it will be applied to the
            calendar cell. Set the <see cref="!:Handled"/> property to true for the
            changes to be accepted.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MonthCalendarExt">
            <summary>
            The MonthCalendarExt type will soon be replaced with the MonthCalendarAdv for consistency in 
            Control naming in our library. 
            Please replace all occurances of MonthCalendarExt with MonthCalendarAdv in your app.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MonthCalendarAdvConverter">
            <summary>
            Summary description for MonthCalendarAdvConverter.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboBoxAdv">
            <summary>
            Represents a combo box control.
            </summary>
            <remarks>
            <para>Similar to the Windows Forms' <see cref="T:System.Windows.Forms.ComboBox"/>,
            the <b>ComboBoxAdv</b> displays an editing field combined with a listbox,
            allowing the user to select from the list or to enter new text. The
            <see cref="!:DropDownStyle"/> property determines the style of combo box to display.</para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound">
            <summary>
            Represents the base class for all combos with data binding support. Like
            <see cref="T:Syncfusion.Windows.Forms.Tools.ComboBoxAdv"/> and <see cref="T:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.AddItemsCore(System.Object[])">
            <summary>
              <para> Adds the specified items to the combo box.</para>
            </summary>
            <param name="value">An array of <see cref="T:System.Object"/> to append to the combo box. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.FindString(System.String)">
            <overload>Finds the first item in the <see cref="T:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound"/> that starts with the specified string.</overload>
            <summary>
            Finds the first item in the combo box that starts with the specified string.
            </summary>
            <param name="s">The string to search for.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
            <remarks>The search performed by this method is not case-sensitive.
            The s parameter is a substring to compare against the text associated
            with the items in the combo box list. The search performs a partial
            match starting from the beginning of the text, and returning the first
            item in the list that matches the specified substring. You can then
            perform tasks, such as removing the item that contains the search text
            using the <see cref="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.Remove(System.Object)"/> method
            or changeing the item's text. Once you have
            found the specified text, if you want to search for other instances of
            the text in the ComboBoxBaseDataBound, you must use the version of the FindString
            method that provides a parameter for specifying a starting index
            within the ComboBox. If you want to perform a search for an exact word
            match instead of a partial match, use the <see cref="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.FindStringExact(System.String)"/> method.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.FindString(System.String,System.Int32)">
            <summary>
            Finds the first item after the given index which starts with the given string. The search is not case sensitive.
            </summary>
            <param name="s">The string to search for.</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched. Set to -1 to search from the beginning of the control.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
            <remarks>The search performed by this method is not case-sensitive.
            The s parameter is a substring to compare against the text associated
            with the items in the combo box list. The search performs a partial
            match starting from the beginning of the text, returning the first
            item in the list that matches the specified substring. You can then
            perform tasks, such as removing the item that contains the search text
            using the <see cref="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.Remove(System.Object)"/>
            method or changing the item's text. This method is
            typically used after a call has been made using the version of this
            method that does not specify a starting index. Once an initial item has
            been found in the list, this method is typically used to find further
            instances of the search text by specifying the index position in the
            startIndex parameter of the item after the first found instance of the
            search text. If you want to perform a search for an exact word match
            instead of a partial match, use the <see cref="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.FindStringExact(System.String)"/> method.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.FindStringExact(System.String)">
            <overload>Finds the item that exactly matches the specified string.</overload>
            <summary>
            Finds the first item in the combo box that matches the specified string.
            </summary>
            <param name="s">The string to search for.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
            <remarks>
            The search performed by this method is not case-sensitive.
            The s parameter is a string to compare against the text associated
            with the items in the combo box list. The search looks for a match
            starting from the beginning of the text, returning the first item in
            the list that matches the specified substring. You can then perform
            tasks, such as removing the item that contains the search text using
            the <see cref="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.Remove(System.Object)"/>
            method or changing the item's text. Once you have found the
            specified text, if you want to search for other instances of the text
            in the ComboBoxBaseDataBound, you must use the version of the FindStringExact method
            that provides a parameter for specifying a starting index within the
            ComboBox. If you want to perform partial word search instead of an
            exact word match, use the <see cref="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.FindString(System.String)"/> method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.FindStringExact(System.String,System.Int32)">
            <summary>
            Finds the first item after the specified index that matches the specified string.
            </summary>
            <param name="s">The string to search for.</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched. Set to -1 to search from the beginning of the control.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
            <remarks>
            The search performed by this method is not case-sensitive. The s
            parameter is a string to compare against the text associated with the
            items in the combo box list. The search looks for a match starting from
            the beginning of the text, returning the first item in the list that
            matches the specified substring. You can then perform tasks, such as
            removing the item that contains the search text using the <see cref="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.Remove(System.Object)"/>
            method
            or changing the item's text. This method is typically used after a call
            has been made using the version of this method that does not specify a
            starting index. Once an intial item has been found in the list, this
            method is typically used to find further instances of the search text
            by specifying the index position in the startIndex parameter of the
            item after the first found instance of the search text. If you want
            to perform partial word search instead of an exact word match, use the
            <see cref="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.FindString(System.String)"/> method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.FindStringExact(System.String,System.Boolean)">
            <summary>
            Finds the first item in the combo box that matches the specified string.
            </summary>
            <param name="text">Text to search</param>
            <param name="ignoreCase">If true, ignore case in serach</param>
            <returns>Returns index of specified text in list or -1, if nothing found</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.OnDropDownStyleChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.GetItemText(System.Object)">
            <summary>
            Gets the text associated with an item.
            </summary>
            <param name="item">The item that is usually an entry in the list.</param>
            <returns>The item's text.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ShouldSerializeText">
            <summary>
            Specifies whether or not the Text property should be serialized in the designer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.OtherChangesMade">
            <summary>
            Overriden. Checks if selected index of the ListControl has been changed.
            </summary>
            <returns>TRUE - if index has been changed, FALSE - otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ListControl">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.Sorted">
            <summary>
              <para>Gets or sets a value indicating whether the items in the combo box are sorted.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.IntegralHeight">
            <summary>
              <para>Gets or sets a value indicating whether the control should resize to avoid
            showing partial items.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.MaxDropDownItems">
            <summary>
            Gets or sets the maximum number of items to be shown
            in the drop-down portion of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.Items">
            <summary>
              <para> Gets an object representing the collection of the items
            contained in this control.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.DataSource">
            <summary>
              <para>Gets or sets the data source for this <see cref="T:System.Windows.Forms.ListControl" /> object.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.DisplayMember">
            <summary>
             Gets or sets a string that specifies the
            property of the data source whose contents you want to
            display.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.SelectedIndex">
            <summary>
              <para>Gets or sets the
            zero-based index of the currently selected item.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.SelectedItem">
            <summary>
              <para>Gets or sets currently selected item in the ComboBox.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.SelectedValue">
            <summary>
              <para> Gets or sets the value of the member property
            specified by the <see cref="P:System.Windows.Forms.ListControl.ValueMember" /> property.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.Text">
            <summary>
              <para>Gets or sets the text associated with this control.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.SelectedText">
            <summary>
              <para> Gets or sets the text that is selected in the editable
            portion of a combo box.
            </para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.SelectionLength">
            <summary>
              <para>Gets or sets the number of characters selected in the editable portion of the
            combo box.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.SelectionStart">
            <summary>
              <para>Gets or sets the starting index of text selected in the combo box.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ValueMember">
            <summary>
              <para>Gets or sets a string that
            specifies the property of the data source from which to draw
            the value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.FlatStyle">
            <override/>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.SelectedIndexChanged">
            <summary>
              <para>Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.SelectedIndex"/> property has changed.</para>
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.DataSourceChanged">
            <summary>
              <para>Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.DataSource"/> changes.</para>
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.DisplayMemberChanged">
            <summary>
              <para>Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.DisplayMember"/> property changes.</para>
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ValueMemberChanged">
            <summary>
              <para>Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ValueMember"/> property changes.</para>
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.SelectedValueChanged">
            <summary>
              <para>Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.SelectedValue"/> property changes.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.DataManager">
            <summary>
              <para>Gets the <see cref="T:System.Windows.Forms.CurrencyManager"/> object associated with this control.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.#ctor(Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound)">
            <summary>
              <para>Initializes a new instance of <see cref="T:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection"/> .</para>
            </summary>
            <param name="owner">The <see cref="T:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound"/> that owns this object collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.GetEnumerator">
            <summary>
              <para>Returns an enumerator that can be used to iterate through the item
            collection.</para>
            </summary>
            <returns>
              <para>An <see cref="T:System.Collections.IEnumerator"/> object that represents the item
            collection.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.Remove(System.Object)">
            <summary>
              <para>Removes the specified item from the <see cref="T:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound"/> .</para>
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the list. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.Insert(System.Int32,System.Object)">
            <summary>
              <para>Inserts an item into the collection at the specified index.</para>
            </summary>
            <param name="index">The zero-based index location where the item is inserted.</param>
            <param name="item">An object representing the item to insert.</param>
            <returns>
              <para>The zero-based index of the newly added item.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.Clear">
            <summary>
              <para>Removes all items from the <see cref="T:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound"/> .</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.Contains(System.Object)">
            <summary>
              <para>Determines if the specified item is located within the collection.</para>
            </summary>
            <param name="value">An object representing the item to locate in the collection.</param>
            <returns>
              <para>
                <see langword="true" /> if the item is located within the collection;
            otherwise, <see langword="false" />.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.Add(System.Object)">
            <summary>
              <para>Adds an item to the list of items for a ComboBoxBaseDataBound.</para>
            </summary>
            <param name="item">An object representing the item to add to the collection.</param>
            <returns>
              <para>The zero-based index of the item in the collection.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.AddRange(System.Object[])">
            <summary>
              <para>Adds an array of items to the list of items for a ComboBoxBaseDataBound.</para>
            </summary>
            <param name="items">An array of objects to add to the list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.CopyTo(System.Object[],System.Int32)">
            <summary>
              <para>Copies the entire collection into an existing array of objects at a specified location within the array.</para>
            </summary>
            <param name="dest">The object array to copy the collection to.</param>
            <param name=" arrayIndex">The location in the destination array to copy the collection to. </param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.Count">
            <summary>
              <para>Gets the number of items in the collection.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseDataBound.ObjectCollection.IsReadOnly">
            <summary>
              <para> Gets a value indicating whether this collection can be modified.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxAdv.FindString(System.String)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxAdv.FindString(System.String,System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxAdv.FindStringExact(System.String)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxAdv.FindStringExact(System.String,System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxAdv.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxAdv.OnBeforePopup">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxAdv.OnPopupClosed">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxAdv.ListBox">
            <summary>
            Returns the ListBox associated with this combo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboListBox">
            <summary>
            Specifies the list box used in a <see cref="T:Syncfusion.Windows.Forms.Tools.ComboBoxAdv"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.FontComboBox">
            <summary>
            A ComboBox that will show a list of fonts installed in the system.
            </summary>
            <remarks>
            <para>The <see cref="M:Syncfusion.Windows.Forms.Tools.FontComboBox.Fill"/> method will let you refill the combo box at any time.
            This method will be called intially from the constructor.</para>
            <para>
            You could get the selected Font text and construct a new Font as follows:
            <code>
            Font newFont = new Font(this.fontCombo.Text, 10.0);
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FontComboBox.#ctor">
            <summary>
            Creates a new instance of the FontComboBox.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FontComboBox.Fill">
            <summary>
            Call this method to fill the combo box at any time. This will be called automatically in the constructor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.FontComboBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.FontComboBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.FontComboBox.OnDropDown(System.EventArgs)" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.FontComboBox.Items" -->
        <member name="T:Syncfusion.Windows.Forms.Tools.FontListBox">
            <summary>
            A ListBox that will show a list of fonts installed in the system.
            </summary>
            <remarks>
            <para>The <see cref="M:Syncfusion.Windows.Forms.Tools.FontListBox.Fill"/> method will let you refill the listbox at any time.
            This method will be called intially from the constructor.</para>
            <para>
            You could get the selected Font text and construct a new Font as follows:
            <code>
            Font newFont = new Font(this.fontListBox.Text, 10.0);
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FontListBox.Fill">
            <summary>
            Call this method to fill the combo box at any time. This will be called automatically in the constructor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.FontListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.FontListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.FontListBox.Items" -->
        <member name="T:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox">
            <summary>
            Represents a combo box that can show multiple columns in the dropdown.
            </summary>
            <remarks>
            <p>This combo box is meant to be used in data bound mode where it will
            show all the records and the different fields in the data source in a 
            multi column grid, in the dropdown.</p>
            <p>Data binding is done as usual through the <see cref="!:DataSource"/>,
            <see cref="!:DisplayMember"/> and <see cref="!:ValueMember"/> properties.
            The <b>DisplayMember</b> is used to determine which field will be shown 
            in the combo.</p>
            <p>If you bind an array of objects of custom type then the public properties
             in that type will correspond to each column in the dropdown multi-column grid.</p>
            <p>Note that in this version you cannot popuplate the <see cref="P:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.Items"/> of this combo manually.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.CreateListControl">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.InitListControl(System.Windows.Forms.ListControl)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.UpdateListBoxBorderStyle">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.OnDataManagerPositionChanged">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.OnDisplayMemberChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.NativeAdd(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.NativeClear">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.NativeInsert(System.Int32,System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.NativeRemoveAt(System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.SetItemsCore(System.Collections.IList)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.OnDataSourceChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.FindString(System.String)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.FindString(System.String,System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.FindStringExact(System.String)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.FindStringExact(System.String,System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.OnBeforePopup">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.SelectedIndex">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.MultiColumn">
            <summary>
            Specifies whether multiple columns or a single column should be shown in the dropdown.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.Items">
            <summary>
            The MultiColumnComboBox can be popuplated only via data binding through
            the <see cref="!:DataSource"/> property.
            </summary>
            <remarks>Do not add/remove items through this property.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.ListBox">
            <summary>
            Returns the dropdown list box, which is an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GridListBox"/>
            associated with this combo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.IntegralHeight">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.ShowColumnHeader">
            <summary>
            Gets or sets a value that indicates if column headers should be displayed in the dropdown.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox.AlphaBlendSelectionColor">
            <summary>
            Specifies the <see cref="T:System.Drawing.Color"/> for alpha blended row selections in the dropdown.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> for alpha blended row selections. Is is important to set the alpha value to be less
            than 255 when calling <see cref="M:System.Drawing.Color.FromArgb(System.Int32)"/>.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GridListBox">
            <summary>
            Specifies the list box used in a <see cref="T:Syncfusion.Windows.Forms.Tools.MultiColumnComboBox"/>.
            </summary>
            <remarks>The documentation for the base class <b>GridListControl</b>
            is available as part of Essential Grid.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridListBox.CreateGridChild">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridListBox.OnBindingContextChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridListBox.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MCGridListControlChild.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GradientLabel">
            <summary>
            The GradientLabel class provides a way to create fancy and appealing
            labels in all your forms.
            </summary>
            <remarks>The GradientLabel class is fully compatible
            with the Windows Forms <see cref="T:System.Windows.Forms.Label"/> that is derives from.
            The GradientLabel class gets most of its uniqueness from the
            <see cref="T:Syncfusion.Drawing.BrushInfo"/> class that is used for the <see cref="P:Syncfusion.Windows.Forms.Tools.GradientLabel.BackgroundColor"/>
            property.
            The look and feel of the GradientLabel is almost completely configurable
            through the <see cref="P:Syncfusion.Windows.Forms.Tools.GradientLabel.BackgroundColor"/> property.
            The <see cref="T:System.Windows.Forms.Border3DStyle"/> is another property that can specify the
            look and feel of the GradientLabel.
            </remarks>
            <example>
            	<coderef file="tools\samples\editors package\GradientLabelDemo\CS\MainForm.cs" name="GradientLabel InitializeComponent" lang="C#">
            	<code lang="C#">
                        // InitializeComponent
                        // Create the Gradient Label
                        this.gradientLabel1 = new GradientLabel();
            
                        // Set formatting properties
                        this.gradientLabel1.Text = "Essential Suite Gradient Label";
                        this.gradientLabel1.BackgroundColor = new BrushInfo(Syncfusion.Drawing.GradientStyle.Vertical, System.Drawing.SystemColors.Highlight, System.Drawing.SystemColors.HighlightText);
                        this.gradientLabel1.BorderStyle = Border3DStyle.Etched;
                        this.gradientLabel1.Font = new Font("Microsoft Sans Serif", 14.25F, (System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Italic), System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
                        this.gradientLabel1.Location = new Point(24, 16);
                        this.gradientLabel1.Name = "gradientLabel1";
                        this.gradientLabel1.Size = new Size(440, 56);
                        this.gradientLabel1.TextAlign = ContentAlignment.MiddleCenter;
            
                        // Add the GradientLabel control to the form
                        this.Controls.Add(this.gradientLabel1);
            	</code></coderef>
            	<coderef file="tools\samples\editors package\GradientLabelDemo\VB\MainForm.vb" name="GradientLabel InitializeComponent" lang="VB">
            	<code lang="VB">
                       ' InitializeComponent
                       ' Create the GradientLabel control.
                       Me.gradientLabel1 = New GradientLabel()
                       ' Set formatting properties
                       Me.gradientLabel1.Text = "Essential Suite Gradient Label"
                       Me.gradientLabel1.BackgroundColor = New BrushInfo(Syncfusion.Drawing.GradientStyle.Vertical, System.Drawing.SystemColors.Highlight, System.Drawing.SystemColors.HighlightText)
                       Me.gradientLabel1.BorderStyle = Border3DStyle.Etched
                       Me.gradientLabel1.Font = New Font("Microsoft Sans Serif", 14.25!, (System.Drawing.FontStyle.Bold Or System.Drawing.FontStyle.Italic), System.Drawing.GraphicsUnit.Point, CType(0, Byte))
                       Me.gradientLabel1.Location = New Point(24, 16)
                       Me.gradientLabel1.Name = "gradientLabel1"
                       Me.gradientLabel1.Size = New Size(440, 56)
                       Me.gradientLabel1.TextAlign = ContentAlignment.MiddleCenter
                       ' Add the GradientLabel control to the form
                       Me.Controls.Add(Me.gradientLabel1)
            	</code></coderef>
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientLabel.border3dStyleValue">
            <summary>
            The border 3D style
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientLabel.border3dSideValue">
            <summary>
            What sides have a border
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientLabel.backgroundColorValue">
            <summary>
            The background Brush info
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientLabel.#ctor">
            <summary>
            Creates a new instance of the GradientLabel class and initializes
            it.
            </summary>
            <remarks>This constructor initializes the look and feel of
            the <see cref="T:Syncfusion.Windows.Forms.Tools.GradientLabel"/> by setting the  <see cref="T:System.Windows.Forms.Border3DStyle"/>
            and the <see cref="P:Syncfusion.Windows.Forms.Tools.GradientLabel.BackgroundColor"/> property.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientLabel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override the OnPainBackground method of the <see cref="T:System.Windows.Forms.Label"/>
            class.
            </summary>
            <param name="pe">The event args value for the event.</param>
            <remarks>This method is overriden to paint the background of the
            <see cref="T:Syncfusion.Windows.Forms.Tools.GradientLabel"/> so that the text drawn by the default
            painting routines will not be affected. 
            The 3D border specified through the <see cref="T:System.Windows.Forms.Border3DStyle"/>
            is also painted through this method.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientLabel.DrawBackground(System.Drawing.Graphics)">
            <summary>
            Draw the backgorund. This is invoked by the <see cref="M:Syncfusion.Windows.Forms.Tools.GradientLabel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)"/>
            override.
            </summary>
            <param name="g">The graphics object that the background is to be drawn on.</param>
            <remarks>You can override this virtual function to provide your own
            drawing methods.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientLabel.DrawBorder(System.Drawing.Graphics)">
            <summary>
            Draw the 3D border for the <see cref="T:Syncfusion.Windows.Forms.Tools.GradientLabel"/>. This is invoked by the <see cref="M:Syncfusion.Windows.Forms.Tools.GradientLabel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)"/>
            override.
            </summary>
            <param name="g">The graphics object that the background is to be drawn on.</param>
            <remarks>The 3D border specfied in the <see cref="T:System.Windows.Forms.Border3DStyle"/> property
            is drawn in this method on the provided <see cref="T:System.Drawing.Graphics"/> object.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientLabel.BackgroundColor">
            <summary>
            The background color and other styles can be set through 
            this property.
            </summary>
            <remarks>This property is the most important attribute of the 
            <see cref="T:Syncfusion.Windows.Forms.Tools.GradientLabel"/> class. The <see cref="T:Syncfusion.Drawing.BrushInfo"/> class
            that is used by this property is a very extensive implementation 
            for custom painting. You can configure the different look and feel
            you want to give your <see cref="T:Syncfusion.Windows.Forms.Tools.GradientLabel"/> by changing this 
            value.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientLabel.BorderStyle">
            <summary>
            The 3D border style for the GradientLabel.
            </summary>
            <remarks>The GradientLabel replaces the default <see cref="P:Syncfusion.Windows.Forms.Tools.GradientLabel.BorderStyle"/>
            provided for <see cref="T:System.Windows.Forms.Label"/> classes with the Border3DStyle type in
            this property.
            This property uses the <see cref="T:System.Windows.Forms.Border3DStyle"/> enumeration.
            Setting the value to <see cref="F:System.Windows.Forms.Border3DStyle.Adjust"/> shows no border.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientLabel.BorderSides">
            <summary>
            The sides of the label that has borders drawn.
            </summary>
            <remarks>
            This property uses the <see cref="T:System.Windows.Forms.Border3DSide"/> enumeration.
            Setting the value to <see cref="F:System.Windows.Forms.Border3DSide.All"/> shows borders
            on all sides.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.BorderMode">
            <summary>
            The clipping mode to be used by the control
            when returning the text content of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.BorderMode.ThreeDimensional">
            <summary>
            Include all literals in the data that's
            returned.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.BorderMode.Flat">
            <summary>
            Exclude all literals in the data that's returned.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SplashControl">
            <summary>
            The SplashControl class provides an easy to use class that can be used
            to display splash screens.
            </summary>
            <remarks>
            The SplashControl can just be dragged and dropped on to your form
            from the controls toolbox. The SplashControl is implemented as a component
            that is not visible at run time. It is visible in the component area
            of your form where you can select it and set its properties.
            <para>
            If the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.AutoMode"/> property is set to true, the SplashControl
            will automatically be launched from the Load event of the host form (your
            application's startup form).
            </para>
            <para>
            If the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.AutoMode"/> is set to false, you need to call <see cref="M:Syncfusion.Windows.Forms.Tools.SplashControl.ShowSplash(System.Boolean)"/>
            at the appropriate time and the Splash screen will be displayed.
            </para>
            <para>
            The SplashControl is by default a timed display splash screen. What this
            means is that the Splash screen will be displayed for a specified period
            and then closed.
            </para>
            <para>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.TimerInterval"/> property specifies for how long the splash
            screen should be visible. The unit of measurement for this property is milli
            seconds.
            </para>
            <para>
            The Splash screen can be made into a non timed splash screen by setting the
            <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.TimerInterval"/> property to -1.
            </para>
            <para>
            In this case you have to call <see cref="M:Syncfusion.Windows.Forms.Tools.SplashControl.HideSplash"/> method to close the non timed
            Splash screen.This approach is more suitable when you are doing some
            background processing in the main form and you want to keep the SplashScreen
            up till the work is done.
            </para>
            <para>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.SplashImage"/> property needs to be set to your image for
            the Splash screen. The SplashControl can only display a image as the
            splash screen. Please refer to the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> class if you want
            more flexibility in building a splash screen (or splash message box) that
            provides more control in terms of displaying information and collecting response.
            </para>
            <para>
            You can handle the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashControl.BeforeSplash"/> event to process any code juse
            before the Splash screen is displayed.
            </para>
            <para>
            The <see cref="E:Syncfusion.Windows.Forms.Tools.SplashControl.SplashDisplayed"/> event is raised after the Splash screen
            is shown on the screen and the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashControl.SplashClosed"/> event is raised
            after the Splash screen is closed.
            </para>
            </remarks>
            <example>
            	<coderef file="tools\samples\notification package\SplashControlDemo\CS\MainForm.cs" name="SplashControl InitializeComponent" lang="C#">
            	<code lang="C#">
                        // InitializeComponent
            
                        System.Resources.ResourceManager resources = new System.Resources.ResourceManager(typeof(MainForm));
            
                        // Create the splash control
                        this.splashControl1 = new SplashControl();
            
                        // Setting AutoMode to true will automatically launch
                        // splash screen - no additional code is required
                        this.splashControl1.AutoMode = true;
            
                        // The start position for the splash screen
                        this.splashControl1.DesktopAlignment = Syncfusion.Windows.Forms.Tools.SplashPanel.SplashAlignment.Center;
            
                        // The host form for the splash control
                        this.splashControl1.HostForm = this;
            
                        // Specifies if the splash screen should appear animated
                        this.splashControl1.ShowAnimation = false;
            
                        // The Splash image - specified through the designer
                        this.splashControl1.SplashImage = ((System.Drawing.Bitmap)(resources.GetObject("splashControl1.SplashImage")));
            
                        // The time period for which the splash should appear
                        this.splashControl1.TimerInterval = 10000;
            	</code></coderef>
                        
            	<coderef file="tools\samples\notification package\SplashControlDemo\VB\MainForm.vb" name="SplashControl InitializeComponent" lang="VB"><code lang="VB">
                       ' InitializeComponent
                       Dim resources As System.Resources.ResourceManager = New System.Resources.ResourceManager(GetType(MainForm))
                       ' Create the splash control
                       Me.splashControl1 = New SplashControl()
                       ' Setting AutoMode to true will automatically launch
                       ' splash screen - no additional code is required
                       Me.splashControl1.AutoMode = True
                       ' The start position for the splash screen
                       Me.splashControl1.DesktopAlignment = Syncfusion.Windows.Forms.Tools.SplashPanel.SplashAlignment.Center
                       ' The host form for the splash control
                       Me.splashControl1.HostForm = Me
                       ' Specifies if the splash screen should appear animated
                       Me.splashControl1.ShowAnimation = False
                       ' The Splash image - specified through the designer
                       Me.splashControl1.SplashImage = CType(resources.GetObject("splashControl1.SplashImage"), System.Drawing.Bitmap)
                       ' The time period for which the splash should appear
                       Me.splashControl1.TimerInterval = 10000
            	</code></coderef>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ISplashParent">
            <summary>
            A generic interface that defines a SplashPanel parent. 
            </summary>
            <remarks>Any object/Control that wants to act as a <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/>
            parent should implement this interface.
            <para>
            The SplashPanel provides an easy way to display different types of messages
            and also collect user input in an unobtrusive manner. This interface
            allows your class to get notifications from the SplashPanel object 
            you want to monitor without handling events.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ISplashParent.BeforeSplashNotify(Syncfusion.Windows.Forms.Tools.SplashPanel)">
            <summary>
            Invoker for notifying the splash parent before the splash panel is 
            displayed.
            </summary>
            <param name="splashPanelObject">The splash panel object.</param>
            <remarks>
            This method will be called by the <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnBeforeSplash(System.ComponentModel.CancelEventArgs)"/> 
            method. 
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ISplashParent.SplashDisplayedNotify(Syncfusion.Windows.Forms.Tools.SplashPanel)">
            <summary>
            Invoker for notifying the splash parent after the splash panel
            is displayed.
            </summary>
            <param name="splashPanelObject">The splash panel object</param>
            <remarks>
            This method will be called by the <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnSplashDisplayed(System.EventArgs)"/> 
            method. 
            </remarks> 
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ISplashParent.SplashClosingNotify(Syncfusion.Windows.Forms.Tools.SplashPanel)">
            <summary>
            Invoker for notifying the splash parent before the splash panel
            is closed.
            </summary>
            <param name="splashPanelObject">The splash panel object</param>
            <remarks>
            This method will be called by the <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnSplashClosing(System.ComponentModel.CancelEventArgs)"/> 
            method. 
            </remarks> 
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ISplashParent.SplashClosedNotify(Syncfusion.Windows.Forms.Tools.SplashPanel,Syncfusion.Windows.Forms.Tools.SplashCloseType)">
            <summary>
            Invoker for notifying the splash parent when the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/>
            has closed.
            </summary>
            <param name="splashPanelObject">The child splash panel that was closed.</param>
            <param name="splashCloseType">A SplashCloseType value.</param>
            <remarks>
            This method will be called by the <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnSplashClosed(Syncfusion.Windows.Forms.Tools.SplashClosedEventArgs)"/> 
            method. 
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.autoModeValue">
            <summary>
            Specifies whether the splash control will operate in auto mode.
            In auto mode the control automatically binds to the host form's
            load event and displays the splash screen for the specified period
            of time.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.MaxDisplayTime">
            <summary>
            The maximum display time allowed. The property DisplayTime
            uses this to reject any values greater than this.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.hostFormObject">
            <summary>
            The host form for this control. Accessors provided for
            this field by <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.HostForm"/>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.isShowingValue">
            <summary>
            Holds the current display status of the splash window.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.splashControlDefaultPanelObject">
            <summary>
            The form to be used as the Splash Form. Accessors provided 
            by SplashForm.
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.splashImageValue">
            <summary>
            The background image for the default splash screen. Accessors
            provided by <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.SplashImage"/>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.hideHostForm">
            <summary>
            Hide the host form for the duration of the Splash.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.hostFormLocation">
            <summary>
            The location of the host form before it is hidden.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.firstCall">
            <summary>
            The first time the Hose form's visibility has changed
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.hostFormSize">
            <summary>
            The HostForm's size before being hidden.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.hostFormWindowState">
            <summary>
            Specifies the initial WindowState of the HostForm
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.hostFormShowInTaskBar">
            <summary>
            Holds the HostForm's ShowInTaskbar value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.customPanel">
            <summary>
            If a custom panel is specified
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.useCustomPanel">
            <summary>
            Specifies if a custom panel is to be used as the SplashScreen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.firstActivate">
            <summary>
            Tracks if the HostForm is being activated for the first time.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.autoModeDisableOwner">
            <summary>
            Specifies if the Splash Screen's owner is to be disabled when in AutoMode.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.#cctor">
            <summary>
            Static Initilizer for the SplashControl.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.#ctor">
            <summary>
            Create a new object of type SplashControl. Overloaded.
            </summary>
            <remarks>
            The SplashControl class uses the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> class as
            the splash screen. It creates a SplashPanel object internally and manipulates
            it based on the settings and the methods invoked.
            <para>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.AutoMode"/> property is initialized to true.
            </para>
            <para>
            You need to specify the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.SplashImage"/> property for the 
            splash screen's background.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.#ctor(System.Drawing.Image)">
            <summary>
            Creates a new object of type SplashControl.
            </summary>
            <param name="backImage">The back ground image for the default splash screen.</param>
            <remarks>
            This sets the background image of the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> that will be
            displayed as the splash screen.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.OnSplashClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashControl.SplashClosing"/> event. When overriding this
            make sure you call this base version.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            The <see cref="T:System.ComponentModel.CancelEventHandler"/> can be used by a handling class
            to cancel the splash screen from being closed. You can also handle
            this event to get notified just before the Splash screen is closed.
            You can perform custom actions in the handler as per your requirements.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.SplashControl.OnSplashClosed(System.EventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.OnBeforeSplash(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashControl.BeforeSplash"/> event. When overriding this
            make sure you call this base version.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            The <see cref="T:System.ComponentModel.CancelEventHandler"/> can be used by a handling class
            to cancel the splash screen from being displayed. You can also handle
            this event to get notified just before the Splash screen is displayed.
            You can perform custom actions in the handler as per your requirements.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.OnSplashDisplayed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashControl.SplashDisplayed"/> event. When overriding this
            make sure you call this base version.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            The <see cref="E:Syncfusion.Windows.Forms.Tools.SplashControl.SplashDisplayed"/> event is raised after the Splash screen is made visible to the
            user. This can also be handled to do some custom processing like
            displaying a status message in the main form.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.HideSplash">
            <summary>
            Hides the splash screen if its being displayed.
            </summary>
            <remarks>
            This method does not do anything if the splash screen is
            not being displayed.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.HandleHostFormLoad(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Load event of the host form. This
            applies only when the control's <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.AutoMode"/> 
            is set to true.
            </summary>
            <param name="sender">The host form control</param>
            <param name="e">The event args</param>
            <remarks>
            This method is not invoked when the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.AutoMode"/> is set to
            false. You need to call <see cref="M:Syncfusion.Windows.Forms.Tools.SplashControl.ShowSplash(System.Boolean)"/> in a appropriate 
            place in your form's code to display the splash screen.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.ShowSplash(System.Boolean)">
            <summary>
            This method displays the splash screen.
            </summary>
            <param name="disableOwner">This parameter specifies if the splash screen should be displayed modally.</param>
            <remarks>
            You will need to call this method only when the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.AutoMode"/> property
            is set to false.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.ShowDialogSplash(System.Windows.Forms.Form)">
            <summary>
            Displays the Splash Panel as a modal dialog.
            </summary>
            <param name="ownerForm">The owner form.</param>
            <returns>The DialogResult value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.ShowDialogSplash(System.Drawing.Point,System.Windows.Forms.Form)">
            <summary>
            Displays the Splash Panel as a modal dialog.
            </summary>
            <param name="location">The location at which the Splash Panel is to be displayed.</param>
            <param name="ownerForm">The owner form.</param>
            <returns>The DialogResult value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.SplashClosedNotify(Syncfusion.Windows.Forms.Tools.SplashPanel,Syncfusion.Windows.Forms.Tools.SplashCloseType)">
            <summary>
            This is the notification from the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> used by this SplashControl.
            Implementation for <see cref="T:Syncfusion.Windows.Forms.Tools.ISplashParent"/>.
            </summary>
            <param name="splashPanel">The <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> object that has closed.</param>
            <param name="splashCloseType">Specifies how the splash screen is closing.</param>
            <remarks>
            This raises the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashControl.SplashClosed"/> event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.BeforeSplashNotify(Syncfusion.Windows.Forms.Tools.SplashPanel)">
            <summary>
            This is the notification from the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> that the
            splash screen is being displayed.
            </summary>
            <param name="splashPanel">The <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> that is being made visible.</param>
            <remarks>
            This raises the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashControl.BeforeSplash"/> event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.SplashDisplayedNotify(Syncfusion.Windows.Forms.Tools.SplashPanel)">
            <summary>
            This is the notification from the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> that the
            splash screen has been displayed.
            </summary>
            <param name="splashPanel">The <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> that has been made visible.</param>
            <remarks>
            This raises the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashControl.SplashDisplayed"/> event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.SplashControl.BeforeSplash">
            <summary>
            The event that is raised before the splash screen is
            displayed.
            </summary>
            <remarks>
            The <see cref="T:System.ComponentModel.CancelEventHandler"/> can be used by a handling class
            to cancel the splash screen from being displayed. You can also handle
            this event to get notified just before the Splash screen is displayed.
            You can perform custom actions in the handler as per your requirements.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.SplashControl.SplashDisplayed">
            <summary>
            The event that is raised after the splash screen is displayed.
            </summary>
            <remarks>
            This event is raised after the Splash screen is made visible to the
            user. This can also be handled to do some custom processing like
            displaying a status message in the main form.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.SplashControl.SplashClosed">
            <summary>
            This event is raised when the splash window is closed.
            </summary>
            <remarks>
            This event is raised after the splash screen has been closed.
            Handle this to perform any step after the screen is gone. One 
            use would be to hide the main form before displaying the splash
            screen and then making the main form visible in this event's
            handler.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.SplashControl.SplashClosing">
            <summary>
            The event that is raised before the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashControl"/> is closed.
            </summary>
            <remarks>
            This event is raised before the SplashControl is closed and it can be
            handled to stop the SplashControl from closing or to some custom processing.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.ShowAnimation">
            <summary>
            This property specifies if the splash screen should appear on the
            screen in a animated manner.
            </summary>
            <remarks>
            The splash screen will be animated if the value is set to true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.HideHostForm">
            <summary>
            Specifies if the host form should be hiiden when the splash screen is 
            displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.HostFormWindowState">
            <summary>
            Specifies the initial <see cref="P:System.Windows.Forms.Form.WindowState"/> of the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.HostForm"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.IsShowing">
            <summary>
            Specifies if the splash screen is currently being displayed.
            </summary>
            <remarks>
            This property is not visible at runtime. This returns an internal
            value that is maintained to indicate if the Splash panel is visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.AutoMode">
            <summary>
            Specifies whether the SplashControl control operates in AutoMode.
            </summary>
            <remarks>
            When AutoMode is set to true, the control will automatically bind 
            to the Load event of the host form, hide the host form and display 
            the splash form as per the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.TimerInterval"/> settings.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.AutoModeDisableOwner">
            <summary>
            Specifies whether the SplashControl control is displayed modally in AutoMode.
            </summary>
            <remarks>
            When AutoModeModal is set to true, the splash screen will be displayed
            modally.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.DesktopAlignment">
            <summary>
            Sets the desktop alignment for the splash screen.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.SplashAlignment"/> type lists the values that
            this property can take. The default value is <see cref="F:Syncfusion.Windows.Forms.Tools.SplashAlignment.Center"/>
            which places the splash screen in the center of the screen.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.ShowAsTopMost">
            <summary>
            Gets or sets a value indicating whether the Splash screen shown by the SplashControl
            is shown as a TopMost window when displayed.
            </summary>
            <value>
            true if the Splash screen is displayed as a TopMost window; otherwise, false. The default is true.
            </value>
            <remarks>
            Displaying the Splash screen as a TopMost window makes the Splash screen appear on top of
            all other windows.
            <para>
            If this property is to be false and the Splash screen is displayed in non modal mode, the
            Splash screen might be hidden by the Form displaying the Splash screen. If you want the 
            Splash screen to be the TopMost window with respect to the application/Form displaying 
            it only, you should display the Splash screen modally with this property set to false.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.TimerInterval">
            <summary>
            The time interval for which the splash screen is to be
            displayed (in milliseconds).
            </summary>
            <remarks>
            The default value is 5000 milliseconds (or 5 seconds).
            <para>
            Set the value to -1 if you want to treat this as a non timed
            splash screen. In this case you will need to call <see cref="M:Syncfusion.Windows.Forms.Tools.SplashControl.HideSplash"/>
            to close the window.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.SplashControlPanel">
            <summary>
            The internal <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> that is displayed as the splash screen.
            </summary>
            <remarks>
            This property is not available at design time. It can be accessed
            at run time to set a different <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> derived
            object as the splash screen.
            <para>
            The default method to changing the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> object's
            look and feel is to set the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.SplashImage"/> property to your
            image.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.HostForm">
            <summary>
            The host form of this SplashControl.
            </summary>
            <remarks>
            This property is automatically set when the SplashControl is dragged
            and dropped on a form. This is used to hook into the Load event of the
            host form at run time to launch the splash screen automatically when
            the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.AutoMode"/> is set to true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.SplashImage">
            <summary>
            The image for displaying as the background of the default
            splash screen.
            </summary>
            <remarks>
            The SplashImage can be any image that can be assigned to the 
            Windows Forms <see cref="T:System.Drawing.Image"/> class. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.TransparentColor">
            <summary>
            The color to be used to make the SplashImage transparent.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.CustomSplashPanel">
            <summary>
            Specify a custom <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> if the default SplashPanel
            is not to be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.UseCustomSplashPanel">
            <summary>
            Specifies if the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.CustomSplashPanel"/> is to be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.ShowInTaskbar">
            <summary>
            Specifies if the SplashPanel is to be shown in the Taskbar
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.FormIcon">
            <summary>
            Specifies the icon for the SplashPanel
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.Text">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SplashControl.DefaultPanel">
            <summary>
            The default SplashScreen class that will be used internally by
            the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashControl"/>.
            </summary>
            <remarks>
            This <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> derived class is used by the SplashControl class
            as the splash screen that is displayed. The <see cref="!:BackImage"/> property
            is added to this derived class. This is set to the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.SplashImage"/>
            object.
            <para>
            The size of the SplashPanel is set to the size of BackImage.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SplashPanel">
            <summary>
            The SplashPanel class is a <see cref="T:System.Windows.Forms.Panel"/> derived
            class that will let you design custom splash screens
            within the Form's designer. The SplashPanel can take multiple child controls
            that can be used to display information or collect information from the user.
            </summary>
            <remarks>
            <para>
            The SplashPanel class is a panel class that has uses beyond the typical
            splash screen. It can be used to create non obtrusive message boxes
            such as the Microsoft MSN messenger (as of MSN Messenger version 3.0 )
            message window that informs user that a new mail has arrrived. These kind
            of messages boxes are made very easy to create and use with the SplashPanel class.
            </para>
            <para>
            To design a custom splash, drag and drop it off the toolbox
            into a Form during design-time. Then populate it with
            appropriate Controls just like you would any other Panel.
            The splash panel can also appear in an animated manner on the
            screen. The startup position of the splash panel can also be
            specified through the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.DesktopAlignment"/> property.
            </para>
            <para>
            The Splash Panel itself can be set to have appealing gradient and
            pattern backgrounds by specifying the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.BackgroundColor"/>
            property.
            </para>
            <para>
            When you are ready to display the splash, call this <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.ShowSplash(System.Drawing.Point,System.Windows.Forms.Form,System.Boolean)"/> method.
            This will show the splash panel at the specified location.
            </para>
            <para>The SplashPanel uses a <see cref="T:System.Windows.Forms.Timer"/>
            internally to automatically close the Splash screen after the set
            interval is elapsed. This behavior can be changed by setting
            the SplashPanel's <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.TimerInterval"/> property to
            -1. The SplashPanel can be explicitly closed by calling <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.HideSplash(Syncfusion.Windows.Forms.Tools.SplashCloseType,System.Int32)"/>
            </para>
            <para>The SplashPanel also raises the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashPanel.BeforeSplash"/>, <see cref="E:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashDisplayed"/>
            and <see cref="E:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashClosing"/> events that you can handle. You could for example
            set the focus on a Control within the SplashPanel in the
            SplashDisplayed event handler.</para>
            </remarks>
            <example>
            <coderef file="c:\syncfusion\essential suite\tools\samples\quick start\SplashPanelDemo\CS\MainForm.cs" name="SplashPanel InitializeComponent" lang="CS">
            <code lang="C#">
            
                 // Create the splash panel
                 this.splashPanel1 = new SplashPanel();
                 this.button1 = new Button();
            
                 // The animation speed
                 this.splashPanel1.AnimationSpeed = 10;
            
                 // The background
                 this.splashPanel1.BackgroundColor = new BrushInfo(Syncfusion.Drawing.GradientStyle.Vertical, System.Drawing.SystemColors.HighlightText, System.Drawing.SystemColors.Highlight);
            
                 // The border style
                 this.splashPanel1.BorderStyle = System.Windows.Forms.Border3DStyle.Bump;
            
                 // The child controls - added through the designer
                 this.splashPanel1.Controls.AddRange(new System.Windows.Forms.Control[] {
                                                                                            this.linkLabel1});
                 // The startup location for the splash panel
                 this.splashPanel1.DesktopAlignment = SplashPanel.SplashAlignment.SystemTray;
            
                 // Specifies whether the window should appear animated
                 this.splashPanel1.ShowAnimation = true;
            
                 // The interval for which the panel is to be displayed
                 this.splashPanel1.TimerInterval = 5000;
            
                 this.button1.Click += new System.EventHandler(this.button1_Click);
                 </code>
                 </coderef>
                 
                 <coderef file="c:\syncfusion\essential suite\tools\samples\quick start\SplashPanelDemo\VB\MainForm.vb" name="SplashPanel InitializeComponent" lang="VB"><code lang="VB">
                ' Create the splash panel
                Me.splashPanel1 = New SplashPanel()
                Me.button1 = New Button()
                ' The animation speed
                Me.splashPanel1.AnimationSpeed = 10
                ' The background
                Me.splashPanel1.BackgroundColor = New BrushInfo(Syncfusion.Drawing.GradientStyle.Vertical, System.Drawing.SystemColors.HighlightText, System.Drawing.SystemColors.Highlight)
                ' The border style
                Me.splashPanel1.BorderStyle = System.Windows.Forms.Border3DStyle.Bump
                ' The child controls - added through the designer
                Me.splashPanel1.Controls.AddRange(New System.Windows.Forms.Control() {Me.linkLabel1})
                ' The startup location for the splash panel
                Me.splashPanel1.DesktopAlignment = SplashPanel.SplashAlignment.SystemTray
                ' Specifies whether the window should appear animated
                Me.splashPanel1.ShowAnimation = True
                ' The interval for which the panel is to be displayed
                Me.splashPanel1.TimerInterval = 5000
                AddHandler Me.button1.Click, New System.EventHandler(AddressOf button1_Click)
                </code>
                </coderef>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ISplashWrapperFormListener">
            <summary>
            This interface is implemented by the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> class
            to get notifications from the <see cref="T:Syncfusion.Windows.Forms.Tools.WrapperForm"/> when
            the wrapper form displays and closes a splash screen.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ISplashWrapperFormListener.SplashFormDisplayedNotify">
            <summary>
            Informs the listener that the splash screen has been displayed
            </summary>
            <remarks>
            This method is invoked from the <see cref="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ShowWindow(Syncfusion.Windows.Forms.Tools.SplashWindowShowMode)"/>
            method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ISplashWrapperFormListener.SplashFormClosedNotify">
            <summary>
            Informs the listener that the splash screen has been closed.
            </summary>
            <remarks>
            This method is invoked from the <see cref="M:Syncfusion.Windows.Forms.Tools.WrapperForm.HideWindow"/>
            method.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.splashParentObject">
            <summary>
            The parent of this splash panel
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.splashWrapperFormObject">
            <summary>
            The wrapper form that will host this splash.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.discreetLocationValue">
            <summary>
            The discreet location specified for displaying the splash panel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.showAnimationValue">
            <summary>
            Specifies if the splash display is to be animated.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.desktopAlignmentValue">
            <summary>
            The desktop alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.timerObject">
            <summary>
            The timer used to specify when to dispose the splash window.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.border3dStyleValue">
            <summary>
            The border 3D style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.timerIntervalValue">
            <summary>
            The display interval in milliseconds. Accessors provided
            for this field by DisplayTime.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.backgroundColorValue">
            <summary>
            The background Brush info.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.animationSpeed">
            <summary>
            Specifies how fast the animation is shown when the window is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.splashCloseType">
            <summary>
            Specifies how the splash was closed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.slideStyle">
            <summary>
            The sliding style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.suspendAutoCloseWhenMouseOver">
            <summary>
            Specifies if the SplashPanel should not be closed when the mouse is over it.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.mouseOver">
            <summary>
            Specifies if the mouse is over the SplashPanel or any other child control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.AnimationInterval">
            <summary>
            Used for animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.delayTimer">
            <summary>
            To enable delayed closing
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.showAsTopMost">
            <summary>
            Specifies if the SplashPanel is to be displayed as the TopMost Window.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.showInTaskbar">
            <summary>
            Specifies if the Splash Panel should be in the Taskbar when shown.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.icon">
            <summary>
            The icon to be used when displayed in the Taskbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.titleText">
            <summary>
            The text to be used when in the Taskbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.transparentColor">
            <summary>
            Used for converting the background image into a region.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.formRegion">
            <summary>
            Region to be passed on to Wrapper Form when its not null.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.borderType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.closeOnClick">
            <summary>
            The SplashPanel closes if this is set to true and the user clicks it.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.allowMove">
            <summary>
            The SplashPanel can be moved by the user if this set to true.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.allowResize">
            <summary>
            The SplashPanel can be resized by the user if this set to true.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.currentBorderArea">
            <summary>
            Specifies the position of the mouse within the border area specified for resizing the
            splash panel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.borderTestWith">
            <summary>
            The width and height of the border area for resizing
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.borderTestHeight">
            <summary>
            The width and height of the border area for resizing
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashPanel.wasMoved">
            <summary>
            Specifies if the SplashPanel was moved. If this is true the CloseOnClick property will be ignored.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.#ctor">
            <summary>
            Creates a new instance of the SplashPanel class and initializes it.
            </summary>
            <remarks>
            The default value for the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.TimerInterval"/> is set to
            5000 milli seconds.
            The splash panel has animation turned and by default will appear in the
            middle of the screen.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnBeforeSplash(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the BeforeSplash event.
            </summary>
            <param name="args">A CancelEventArgs that contains the event data.</param>
            <remarks>
            The OnBeforeSplash method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnBeforeSplash in a derived 
            class, be sure to call the base class's OnBeforeSplash method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.RaiseBeforeSplashEvent">
            <summary>
            This method invokes thye <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnBeforeSplash(System.ComponentModel.CancelEventArgs)"/> method to raise
            the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashPanel.BeforeSplash"/> event.
            </summary>
            <returns>This method returns the value set for the <see cref="T:System.ComponentModel.CancelEventArgs"/>
            object used by the event data. A return value of true means the SplashPanel will 
            not be displayed.
            </returns>
            <remarks>
            This method creates a <see cref="T:System.ComponentModel.CancelEventArgs"/> object to use as the
            event data and invokes the <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnBeforeSplash(System.ComponentModel.CancelEventArgs)"/> method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnSplashDisplayed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashDisplayed"/> event.
            </summary>
            <param name="args">An EventArgs instance containing
            data pertaining to this event.</param>
            <remarks>
            The OnSplashDisplayed method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnSplashDisplayed in a derived 
            class, be sure to call the base class's OnSplashDisplayed method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.RaiseSplashDisplayedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.RaiseSplashClosingEvent">
            <summary>
            This method invokes thye <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnBeforeSplash(System.ComponentModel.CancelEventArgs)"/> method to raise
            the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashPanel.BeforeSplash"/> event.
            </summary>
            <returns>This method returns the value set for the <see cref="T:System.ComponentModel.CancelEventArgs"/>
            object used by the event data. A return value of true means the SplashPanel will 
            not be displayed.
            </returns>
            <remarks>
            This method creates a <see cref="T:System.ComponentModel.CancelEventArgs"/> object to use as the
            event data and invokes the <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnBeforeSplash(System.ComponentModel.CancelEventArgs)"/> method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnSplashClosed(Syncfusion.Windows.Forms.Tools.SplashClosedEventArgs)">
            <summary>
            Raises the SplashClosing event.
            </summary>
            <param name="args">A SplashClosedEventArgs instance containing
            data pertaining to this event.</param>
            <remarks>
            The OnSplashClosing method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnSplashClosing in a derived 
            class, be sure to call the base class's OnSplashClosing method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.RaiseSplashClosedEvent(Syncfusion.Windows.Forms.Tools.SplashClosedEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnSplashMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashMouseEnter"/> event.
            </summary>
            <param name="args">An EventArgs instance containing
            data pertaining to this event.</param>
            <remarks>
            The OnSplashMouseEnter method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnSplashMouseEnter in a derived 
            class, be sure to call the base class's OnSplashMouseEnter method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnSplashMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashMouseLeave"/> event.
            </summary>
            <param name="args">An EventArgs instance containing
            data pertaining to this event.</param>
            <remarks>
            The OnSplashMouseLeave method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnSplashMouseLeave in a derived 
            class, be sure to call the base class's OnSplashMouseLeave method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnMouseEnter(System.EventArgs)">
            <summary>
            Overrides OnMouseEnter to support SuspendAutoCloseOnMouseOver.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.SuspendAutoCloseMode">
            <summary>
            Call this to suspend the auto closing of the SplashPanel after the 
            TimerInterval.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.RestoreAutoCloseMode">
            <summary>
            Call this to restore the auto closing of the SplashPanel.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.GetRegionFromImage(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="backgroundImage"></param>
            <param name="transparentColor"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.DrawBackground(System.Drawing.Graphics)">
            <summary>
            Draw the background of the panel using the information in the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.BackgroundColor"/> property.
            </summary>
            <param name="g">The graphics object to draw on.</param>
            <remarks>
            Override this virtual function if you want to draw a different background 
            on change the way the drawing is done.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides OnPaintBackground to paint the user specified <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.BackgroundColor"/>
            as the background.
            </summary>
            <param name="pe">The PaintEventArgs object that has the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashFormDisplayedNotify">
            <summary>
            This method implements the <see cref="T:Syncfusion.Windows.Forms.Tools.ISplashWrapperFormListener"/> method SplashFormDisplayedNotify
            to receive notification from the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashWrapperForm"/> when the Splash window has been
            displayed.
            </summary>
            <remarks>
            The SplashPanel receives notification from the SplashWrapperForm that actually displays this
            SplashPanel on the desktop that the SplashPanel has been displayed. This is needed for the SplashPanel
            to start its internal timer so that the SplashPanel can be closed in the time interval set in <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.TimerInterval"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashFormClosedNotify">
            <summary>
            This methods is an implementation of the ISplashWrapperFormListener method for 
            receiving notification from the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashWrapperForm"/> when the window
            is closed.
            </summary>
            <remarks>The <see cref="E:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashClosing"/> event is raised in response to this
            method being invoked.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.IsShowing">
            <summary>
            Provides information about whether the splash is currently displayed.
            </summary>
            <returns>true indicates splash is displayed; false indicates otherwise.</returns>
            <remarks>
            The SplashPanel considered visible if the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashWrapperForm"/> that embeds this
            SplashPanel is visible.
            The <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.HideSplash(Syncfusion.Windows.Forms.Tools.SplashCloseType,System.Int32)"/> method uses this method to ascertain if the SplashPanel is
            indeed being displayed.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.ShowSplash(System.Drawing.Point,System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Displays the SplashPanel at the specified location.
            </summary>
            <param name="location">A  point in screen coordinates. The value can be Point.Empty.</param>
            <param name="ownerForm">The form that will embed the SplashForm.This can be null.</param>
            <param name="disableOwner">Specifies if the owner form is to be diabled.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.ShowSplash">
            <summary>
            Displays the SplashPanel.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.ShowDialogSplash(System.Drawing.Point,System.Windows.Forms.Form)">
            <summary>
            Displays the Splash Panel as a modal dialog.
            </summary>
            <param name="location">The location at which the Splash Panel is to be displayed.</param>
            <param name="ownerForm">The owner form.</param>
            <returns>The DialogResult value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.ShowDialogSplash(System.Windows.Forms.Form)">
            <summary>
            Displays the Splash Panel as a modal dialog.
            </summary>
            <param name="ownerForm">The owner form.</param>
            <returns>The DialogResult value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.HideSplash(Syncfusion.Windows.Forms.Tools.SplashCloseType,System.Int32)">
            <summary>
            Hides a splash with the specified SplashCloseType mode.
            </summary>
            <param name="splashCloseType">A <see cref="T:Syncfusion.Windows.Forms.Tools.SplashCloseType"/> value.</param>
            <param name="delayInMilliseconds">The time period for which the close should be delayed.</param>
            <remarks>
            This method will close the SplashPanel when it is being displayed. It invokes
            <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.IsShowing"/> to ascertain that the SplashPanel is being displayed
            before any further action is taken.
            <para>
            The method will have no effect if the SplashPanel is not currently being displayed.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.HideSplash(Syncfusion.Windows.Forms.Tools.SplashCloseType)">
            <summary>
            
            </summary>
            <param name="splashCloseType">A <see cref="T:Syncfusion.Windows.Forms.Tools.SplashCloseType"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.HideSplash">
            <summary>
            Cancels and hides a splash that is open.
            </summary>
            <remarks>
            Call this method to Hide a SplashPanel window that is being displayed currently.
            The SplashPanel will be closed with the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashCloseType"/> set to
            <see cref="F:Syncfusion.Windows.Forms.Tools.SplashCloseType.Canceled"/>. This method actually invokes the overloaded
            version that takes a <see cref="T:Syncfusion.Windows.Forms.Tools.SplashCloseType"/> as the parameter.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.StopTimer">
            <summary>
            Stop the timer object that is used to track the appearance of the SplashPanel.
            </summary>
            <remarks>
            This method stops the <see cref="T:System.Windows.Forms.Timer"/> and closes the timer object.
            This is invoked by the <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.HandleTimerEvent(System.Object,System.Timers.ElapsedEventArgs)"/> method and you will not need to
            call this directly.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.StartTimer">
            <summary>
            Starts the <see cref="T:System.Windows.Forms.Timer"/> object that will be used to show the
            SplashPanel for a specified period of time.
            </summary>
            <remarks>Change the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.TimerInterval"/> property if you want to
            change the period for which the SplashPanel is displayed.
            <para>This method is invoked by <see cref="M:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashFormDisplayedNotify"/> and you will not need to
            call this directly.</para>
            <para>
            This method will do nothing if the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.TimerInterval"/> property is
            set to -1.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashPanel.HandleTimerEvent(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Timers.Timer.Elapsed"/> event of the <see cref="T:System.Windows.Forms.Timer"/> object
            that is used to track the time period for displaying the SplashPanel.
            </summary>
            <param name="sender">The Timer object</param>
            <param name="e">The event data for the Timer's elapsed event.</param>
            <remarks>
            This method hides the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> and closes the <see cref="T:System.Windows.Forms.Timer"/>
            object.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashParent">
            <summary>
            The SplashPanel can take a class that implements  <see cref="T:Syncfusion.Windows.Forms.Tools.ISplashParent"/>
            as its parent for notification purposes.
            </summary>
            <value>An instance that implements ISplashParent.</value>
            <remarks>
            You can implement the ISplashParent interface in your classes and set the
            SplashParent property of the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> to your class to
            get notifiations.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.SplashPanel.BeforeSplash">
            <summary>
            Occurs when the splash is about to be shown.
            </summary>
            <remarks>
            <para>
            This event provides a way for the user to stop a SplashPanel from being
            displayed. If you set the <see cref="T:System.ComponentModel.CancelEventHandler"/> to be true,
            the SplashPanel will not be displayed.
            </para>
            <para>
            You can also access the SplashPanel's <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashWrapperForm"/> and make 
            changes to it if you want to do any modifications.
            </para>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashDisplayed">
            <summary>
            Occurs after the SplashPanel has beed displayed.
            </summary>
            <remarks>
            This event informs the handler that the SplashPanel is visible now.
            You could display a status message or some feedback to the user in
            another part of the application.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashClosing">
            <summary>
            Occurs when a SplashPanel is being closed.
            </summary>
            <remarks>
            This event can be handled to prevent a SplashPanel from being closed
            and also to do custom processing.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashClosed">
            <summary>
            Occurs when a SplashPanel is closed.
            </summary>
            <remarks>
            Handling this event will tell you whether the splash was
            closed or canceled by the user. This, in some cases, will then let you
            know whether or not you should accept changes in the splash.
            <para>
            The delegate for the event is <see cref="T:Syncfusion.Windows.Forms.Tools.SplashClosedEventHandler"/>.
            </para>
            <para>
            You could handle this event and do any post SplashPanel displayed processing
            in there. For example, you have an application that displays non obtrusive
            message boxes using the SplashPanel class, you can handle this event to
            check if the user has made any change or selection.
            </para>
            </remarks>
            <example>
            <code lang="C#">
                        this.splashPanel1.SplashClosing += new Syncfusion.Windows.Forms.Tools.SplashClosedEventHandler(this.splashPanel1_SplashClosing);
            
                        // splashPanel1_SplashClosing event handler
                        MessageBox.Show("SplashPanel closing event handler");</code>
                        <coderef file="c:\syncfusion\essential suite\tools\samples\quick start\SplashPanelDemo\VB\MainForm.vb" name="SplashPanel SplashClosing event" lang="VB"><code lang="VB">
                       AddHandler Me.splashPanel1.SplashClosing, New Syncfusion.Windows.Forms.Tools.SplashClosedEventHandler(AddressOf splashPanel1_SplashClosing)
                       ' splashPanel1_SplashClosing event handler
                       MessageBox.Show("SplashPanel closing event handler")</code></coderef>
            </example>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashMouseEnter">
             <summary>
             Occurs when the mouse enters the visible part of the SplashPanel or any of its child
             controls.
             </summary>
             <remarks>
            This event informs that the mouse has entered the SplashPanel.
             </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashMouseLeave">
            <summary>
            Occurs when the mouse leaves the visible part of the SplashPanel or any of its child
            controls.
            </summary>
            <remarks>
            This event informs that the mouse has left the SplashPanel.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.SuspendAutoCloseWhenMouseOver">
            <summary>
            Specifies if the SplashPanel should not be closed when the mouse is over it.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.ShowInTaskbar">
            <summary>
            Specifies if the SplashPanel is to be shown in the Taskbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.FormIcon">
            <summary>
            Specifies the icon for the SplashPanel when displayed in the Taskbar.
            </summary>
            
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.Text">
            <summary>
            Specifies the text when displayed in the Taskbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.BackgroundColor">
            <summary>
            The background color and other styles can be set through 
            this property.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> provides this property to enable specialized
            custome gradient backgrounds for the splash screens you create.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.SlideStyle">
            <summary>
            The SlideStyle for the SplashPanel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.ShowAsTopMost">
            <summary>
            Gets or sets a value indicating whether the SplashPanel is shown as a TopMost
            window when displayed.
            </summary>
            <value>
            true if the SplashPanel is displayed as a TopMost window; otherwise, false. The default is true.
            </value>
            <remarks>
            Displaying the SplashPanel as a TopMost window makes the SplashPanel appear on top of
            all other windows.
            <para>
            If this property is to be false and the SplashPanel is displayed in non modal mode, the
            SplashPanel might be hidden by the Form displaying the SplashPanel. If you want the 
            SplashPanel to be the TopMost window with respect to the application/Form displaying 
            it only, you should display the SplashPanel modally with this property set to false.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.BorderStyle">
            <summary>
            The 3D border for the SplashPanel.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> class provides 3D border styles for its
            borders.
            </para>
            <para>
            You can set the border style for the SplashPanel to any of the
            values supported by the <see cref="T:System.Windows.Forms.Border3DStyle"/> enumeration. Setting
            the BorderStyle property to <see cref="F:System.Windows.Forms.Border3DStyle.Adjust"/> results in
            no border being visible.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.BorderType">
            <summary>
            Specifies the type of border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.AnimationSpeed">
            <summary>
            The speed at which the animation unfolds on the screen and the SplashPanel becomes visible.
            </summary>
            <remarks>
            <para>
            The same speed is also used when the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> is closed.
            To acheive the best animation effect, the animation speed should be set relative with
            respect to the height and width of the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/>.
            </para>
            <para>
            The value for the animation speed is restricted to be between 5 and 50.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.ShowAnimation">
            <summary>
            Specifies if the window display should be animated.
            </summary>
            <remarks>
            Set this property to true if you want the splash window to appear
            in an animated manner.
            <para>
            See the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.AnimationSpeed"/> property for changing the speed of animation.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.DesktopAlignment">
            <summary>
            Specifies how the splash screen has to be aligned when it appears 
            initially with respect to the desktop.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Windows.Forms.Tools.SplashAlignment"/>
            lists the possible values for this property.
            <para>The default value for the DesktopAlignment is <see cref="F:Syncfusion.Windows.Forms.Tools.SplashAlignment.Center"/>
            which sets the SplashPanel to appear in the middle of the screen.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.TimerInterval">
            <summary>
            The period of time the splash window should be visible for.
            </summary>
            <remarks>
            The unit of measurement for this is in milliseconds. The default value is
            5000 milliseconds which translates to 5 seconds.
            <para>
            The time is taken into account after the window appears on the
            screen.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashWrapperForm">
            <summary>
            Gets or Sets a reference to the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashWrapperForm"/> that will be
            used to host this SplashPanel when displayed.
            </summary>
            <value>The SplashWrapperForm object that will host this SplashPanel.</value>
            <remarks>
            SplashWrapperForm is the top level Form based control that hosts
            this Splash Panel when displayed.
            <para>
            The SplashPanel usually creates a custom SplashWrapperForm when it is asked to display 
            itself. However, you can provide your own SplashWrapperForm if you have a customized
            version.
            </para>
            <para>
            You could also get a reference to the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashWrapperForm"/>
            that the SplashPanel uses by default and make changes to it. 
            The SplashPanel creates a default SplashWrapperForm when there is no 
            SplashWrapperForm supplied to it, but ShowSplash was called to show the splash screen.
            Hence, the best place to get the default SplashWrapperForm
            associated with this SplashPanel is in the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashPanel.BeforeSplash"/> event handler.
            </para>
            <note type="note">This property is not available at runtime.</note>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashForm">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.TransparentColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.DiscreetLocation">
            <summary>
            The location to display the splash window. This is a <see cref="T:System.Drawing.Point"/>
            value that is in screen coordinates.
            </summary>
            <remarks>
            You can display a discreet location for the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/>
            to be displayed at. The location parameter passed to the constructor
            of SplashPanel is used to set this value initially.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.SplashPanel.CloseOnClick" -->
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashPanel.AllowMove">
            <summary>
            If set to true, AllowMove property allows the user to click within the SplashPanel and 
            move the SplashPanel on the screen. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.SplashPanel.AllowResize" -->
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashControl.DefaultPanel.components">
            <summary>
            Required designer variable
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.DefaultPanel.#ctor">
            <summary>
            Creates an object of type SplashScreen. Overloaded.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.AnimationSpeed"/> is set to 25 and the <see cref="P:Syncfusion.Windows.Forms.Tools.SplashPanel.ShowAnimation"/>
            is turned off by default.
            </para>
            <para>
            You need to set the <see cref="!:BackImage"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.DefaultPanel.#ctor(System.Drawing.Image)">
            <summary>
            Creates an object of type SplashControlDefaultPanel.
            </summary>
            <param name="backImage">The image to be displayed in the splash window</param>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.SplashControl"/> creating this sets the BackImage
            to be its <see cref="P:Syncfusion.Windows.Forms.Tools.SplashControl.SplashImage"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.DefaultPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashControl.DefaultPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashControl.DefaultPanel.BackgroundImage">
            <summary>
            Set the backImage with a image.
            </summary>
            <remarks>
            The image to be used as the background image.
            The size of the SplashPanel is set to the size of BackImage.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SplashClosedEventHandler">
            <summary>
            Represents the method that will handle the SplashClosing event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A SplashClosedEventArgs that 
            contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SplashClosedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashClosing"/> event.
            </summary>
            <remarks>
            The SplashClosed event is raised when a <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/>
            is closed. The <see cref="P:Syncfusion.Windows.Forms.Tools.SplashClosedEventArgs.SplashCloseType"/> specifies the manner
            in which the SplashPanel was closed.
            <para>
            See the <see cref="E:Syncfusion.Windows.Forms.Tools.SplashPanel.SplashClosing"/> event for more information.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashClosedEventArgs.splashCloseType">
            <summary>
            The Splash close type object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SplashClosedEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.SplashCloseType)">
            <summary>
            Creates an instance of the SplashClosedEventArgs class.
            </summary>
            <param name="splashCloseType">A SplashCloseType value.</param>
            <remarks>
            The SplashCloseType property is initialized with the 
            value passed in.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SplashClosedEventArgs.SplashCloseType">
            <summary>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.SplashClosedEventArgs.SplashCloseType"/> value indicating the way in which 
            the Splash was closed.
            </summary>
            <remarks>
            The SplashCloseType value indicates how the SplashPanel was closed.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SplashAlignment">
            <summary>
            Specifies the positioning of the splash with the desktop.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashAlignment.SystemTray">
            <summary>
            The Splash window will be made visible at the location closest
            to the system tray clock (if available).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashAlignment.Center">
            <summary>
            The splash window will be shown at the center of the screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashAlignment.LeftTop">
            <summary>
            The splash window will be shown at the left top of the screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashAlignment.LeftBottom">
            <summary>
            The splash window will be shown at the left bottom of the screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashAlignment.RightTop">
            <summary>
            The splash window will be shown at the right top of the screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashAlignment.RightBottom">
            <summary>
            The splash window will be shown at the right bottom of the screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashAlignment.Custom">
            <summary>
            Does not indicate any of the above alignments.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SplashCloseType">
            <summary>
            Specifies the way in which a splash control container was closed.
            </summary>
            <remarks>
            Signifies the mode in which the splash control container was closed.
            This can be interpreted by the parent of the splash control container
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashCloseType.Done">
            <summary>
            The user wants the changes made in the splash to be applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashCloseType.Canceled">
            <summary>
            The user canceled the splash and expects the changes, if any to be ignored.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SplashCloseType.TimedOut">
            <summary>
            The popup was deactivated because it was displayed for the specified
            time. This should be considered to be equivalent to the Done
            type as the user may want some changes saved.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TaskbarDockPosition">
            <summary>
            The current docking position of the windows task bar.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TaskbarDockPosition.Bottom">
            <summary>
            The taskbar is docked at the bottom of the current screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TaskbarDockPosition.Left">
            <summary>
            The taskbar is docked at the left of the current screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TaskbarDockPosition.Top">
            <summary>
            The taskbar is docked at the top of the current screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TaskbarDockPosition.Right">
            <summary>
            The taskbar is docked at the right of the current screen.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SlideStyle">
            <summary>
            The SlideStyle type specifies to the animation functions in 
            the <see cref="T:Syncfusion.Windows.Forms.Tools.SplashPanel"/> class the nature of the slide
            animation to be performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SlideStyle.Horizontal">
            <summary>
            Slide horizontally from left to right. This animation effect
            is typically used when the window is displayed at the left edge of the
            screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SlideStyle.Vertical">
            <summary>
            Slide vertically from bottom to top. This slide animation effect is
            typically used when the location of the window is at the right end 
            of the screen.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SlideStyle.Default">
            <summary>
            The default style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.WrapperForm">
            <summary>
            The Form derived class that hosts a <see cref="P:Syncfusion.Windows.Forms.Tools.WrapperForm.SplashPanel"/> when it is
            displayed.
            </summary>
            <remarks>
            You will normally not have to use this class or refer to
            an instance of this class. An instance of this class will
            be automatically generated by the SplashPanel which
            will then set this as its parent when <see cref="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ShowSplash(System.Boolean)"/> 
            is called on it.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WrapperForm.SWP_NOSIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WrapperForm.SWP_NOMOVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WrapperForm.SWP_NOACTIVATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WrapperForm.borderGap">
            <summary>
            How to space the SplashPanel within this host.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WrapperForm.splashFormListener">
            <summary>
            This object will be notified by the SplashWrapperForm
            of important events.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WrapperForm.preferredWidth">
            <summary>
            The preferred width of the <see cref="T:Syncfusion.Windows.Forms.Tools.WrapperForm"/> when it
            becomes visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WrapperForm.preferredHeight">
            <summary>
            The preferred height of the <see cref="T:Syncfusion.Windows.Forms.Tools.WrapperForm"/> when it
            becomes visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WrapperForm.animationTimer">
            <summary>
            The timer that is used to animate the window. The animation
            is actually created by changing the height and width of the 
            window at regular time intervals.
            </summary>
            <remarks>
            The Windows API AnimateWindow does not work properly. It crashes
            when some controls are added to the SplashPanel.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WrapperForm.hideAnimationTimer">
            <summary>
            The timer that is used when the SplashPanel is being
            closed to create the animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WrapperForm.splashPanel">
            <summary>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.WrapperForm.SplashPanel"/> that will be hosted by this
            SplashWrapperForm object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WrapperForm.slideStyle">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.SlideStyle"/> for the animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WrapperForm.splashWrapperFormOwner">
            <summary>
            The owner form - we don't use the Owner property as that requires a
            TopLevel window
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WrapperForm.dialogResult">
            <summary>
            Result when the SplashPanel is invoked as Modal
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.#ctor(Syncfusion.Windows.Forms.Tools.SplashPanel)">
            <summary>
            Creates a new instance of the SplashWrapperForm class.
            </summary>
            <param name="splashPanel">The SplashPanel that will be displayed
            by this SplashWrapperForm</param>
            <remarks>
            The SplashWrapperForm will be initialized with the <see cref="P:Syncfusion.Windows.Forms.Tools.WrapperForm.SplashPanel"/>
            object that it will host. The SplashWrapperForm will only be valid for the
            duration that the SplashPanel is visible. 
            <para>
            The SplashWrapperForm works closely with the SplashPanel object it hosts
            and will not be visible and the user will see the SplashPanel
            as the SplashWrapperForm.
            </para>
            <para>
            The SplashWrapperForm is set to be a top level window.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.SetBorderStyle">
            <summary>
            Set the border style for this SplashHost. The BorderStyle
            is a <see cref="T:System.Windows.Forms.Border3DStyle"/> value that is painted
            by this control in the OnPaint handler.
            </summary>
            <remarks>
            You can override this method to provide your own FormBorderStyle for 
            this SplashWrapperForm.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override the OnPaint method to paint the 3D border style.
            </summary>
            <param name="pe">The PaintEventArgs event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.Draw3DBorder(System.Drawing.Graphics,System.Windows.Forms.Border3DStyle)">
            <summary>
            This method draws the 3D border that is specified in the <see cref="!:SplashPanel.Border3DStyle"/>
            property.
            </summary>
            <param name="g">The graphics object that is to be drawn on.</param>
            <param name="border3DStyleValue">The Border3DStyle value to be used for drawing the border.</param>
            <remarks>
            You can override this virtual function and draw your own implementation
            of the 3D border.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ShowSplash(System.Boolean)">
            <summary>
            Display the <see cref="P:Syncfusion.Windows.Forms.Tools.WrapperForm.SplashPanel"/> that this SplashWrapperForm is hosting.
            </summary>
            <param name="disableOwner">This parameter specifies if the SplashWrapperForm should
            be disable the owner form.</param>
            <remarks>
            This method calls <see cref="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ShowWindow(Syncfusion.Windows.Forms.Tools.SplashWindowShowMode)"/> or <see cref="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ShowWindowAnimated(Syncfusion.Windows.Forms.Tools.SplashWindowShowMode)"/>
            depending on what the <see cref="!:SplashPanel.ShowAnimation"/> property is set to.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ShowDialogSplash">
            <summary>
            Displays the SplashPanel as a Modal dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ComputeControlLocation">
            <summary>
            Place the hosted SplashPanel within the bounds of the SplashWrapperForm.
            </summary>
            <remarks>
            The default implementation of this method sizes the hosted <see cref="P:Syncfusion.Windows.Forms.Tools.WrapperForm.SplashPanel"/>
            to occupy the entire area of the SplashWrapperForm except for the border.
            <para>
            This method is invoke by the <see cref="M:Syncfusion.Windows.Forms.Tools.WrapperForm.AttachSplash"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ShowWindow(Syncfusion.Windows.Forms.Tools.SplashWindowShowMode)">
            <summary>
            Displays the splash window without any animation.
            </summary>
            <param name="disableOwner">Specifies if the owner form is to be disabled.</param>
            <remarks>
            This method is invoked by the <see cref="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ShowSplash(System.Boolean)"/> method
            if the <see cref="!:SplashPanel.ShowAnimation"/> property is set to false.
            <para>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.WrapperForm.SplashPanel"/> is also notified that the window has been
            displayed.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ShowOptimized">
            <summary>
            No animation
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ShowDialogOptimized(System.Windows.Forms.IWin32Window)">
            <summary>
            No animation
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ShowWindowAnimated(Syncfusion.Windows.Forms.Tools.SplashWindowShowMode)">
            <summary>
            Displays the splash host window in a animated manner.
            </summary>
            <param name="disableOwner">Specifies if the window is to be displayed modally.</param>
            <remarks>
            This method is invoked by the <see cref="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ShowSplash(System.Boolean)"/> method when the
            <see cref="!:SplashPanel.ShowAnimated"/> property is set to true.
            <para>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.SlideStyle"/>  used for the animation is based on the value
            returned  by the <see cref="M:Syncfusion.Windows.Forms.Tools.WrapperForm.GetSlideStyle(Syncfusion.Windows.Forms.Tools.SplashAlignment)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.Show">
            <summary>
            Override Show and display using SetWindowPos and SWP_NOACTIVATE so that
            the focus is not grabbed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.HandleAnimationTimer(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            The animation of the splash window is implemented using a timer
            and its Elapsed event is handled in this method.
            </summary>
            <param name="sender">The animation timer object.</param>
            <param name="e">The elapsed event args event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.HandleHideAnimationTimer(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            The handler for the elapsed event of the Hide animation timer. Used
            when the splash window is closing.
            </summary>
            <param name="sender">The hide animation timer.</param>
            <param name="e">The elapsed event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.HideWindow">
            <summary>
            Hide this SplashWrapperForm.
            </summary>
            <remarks>
            This method is invoked by the <see cref="M:Syncfusion.Windows.Forms.Tools.WrapperForm.HideSplash"/> method.
            <para>
            This method also notifies the <see cref="P:Syncfusion.Windows.Forms.Tools.WrapperForm.SplashPanel"/> that the
            window is being closed.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.GetSlideStyle(Syncfusion.Windows.Forms.Tools.SplashAlignment)">
            <summary>
            Private helper function used for the animated display.
            </summary>
            <param name="desktopAlignment">The relative alignment with the desktop</param>
            <returns>Returns the style to be passed to the AnimateWindow function</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.GetAppbarPosition">
            <summary>
            Private helper method that gets the position of the Windows Taskbar.
            </summary>
            <returns>The position of the windows taskbar.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.GetDisplayLocation(Syncfusion.Windows.Forms.Tools.SplashAlignment)">
            <summary>
            The display location based on the current work area and the 
            desired alignment.
            </summary>
            <returns>The point where the splash window is to be displayed</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.AttachSplash">
            <summary>
            Attach the SplashPanel to the SplashWrapperForm.
            </summary>
            <remarks>
            This method associates the <see cref="P:Syncfusion.Windows.Forms.Tools.WrapperForm.SplashPanel"/> object with this
            SplashWrapperForm. This adds the SplashPanel control to the form and
            sets its position.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.ComputeMySize">
            <summary>
            Set the size of the host to the size of the SplashPanel and adjust for 
            the borderwidth.
            </summary>
            <remarks>
            The size of the <see cref="P:Syncfusion.Windows.Forms.Tools.WrapperForm.SplashPanel"/> is adjusted to be the the
            size of the SplashWrapperForm except for the border.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.HideSplash">
            <summary>
            Call this to hide the SplashWrapperForm.
            </summary>
            <remarks>
            This method calls the <see cref="M:Syncfusion.Windows.Forms.Tools.WrapperForm.HideWindow"/> or <see cref="M:Syncfusion.Windows.Forms.Tools.WrapperForm.HideWindowAnimated"/>
            method to hide the splash window. If this is a modal window, the DialogResult
            is set to DialogResult.OK.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WrapperForm.HideWindowAnimated">
            <summary>
            Hide the SplashWrapperForm window in an animated manner.
            </summary>
            <remarks>
            Called by the <see cref="M:Syncfusion.Windows.Forms.Tools.WrapperForm.HideSplash"/> method.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WrapperForm.SplashWrapperFormListener">
            <summary>
            This is the same as the <see cref="P:Syncfusion.Windows.Forms.Tools.WrapperForm.SplashPanel"/> hosted by the
            SplashWrapperForm. This will be used by the SplashWrapperForm to
            notify the SplashPanel of important events so that the SplashPanel
            can respond.
            </summary>
            <value>
            A SplashPanel object that implements ISplashWrapperFormListener.
            </value>
            <remarks>
            The value cannot be set through this property. All
            SplashWrapperForm objects are single use only. The splash host will
            be destroyed after the splash window is hiddden and
            the only way to set the SplashPanel for a 
            SplashHost would be through the SplashHost contructor.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WrapperForm.CreateParams">
            <summary>
            Override CreateParams to add extended styles for ToolWindow and 
            NoActivate.
            </summary>
            <remarks>
            The SplashWrapperForm object needs to be Top level window and
            also should not be activated. These styles are set in this method.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WrapperForm.SplashPanel">
            <summary>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.WrapperForm.SplashPanel"/> object that is hosted by this 
            <see cref="T:Syncfusion.Windows.Forms.Tools.WrapperForm"/>
            </summary>
            <remarks>
            The SplashPanel object is the reason the SplashWrapperForm
            exists. This SplashPanel will be the only visible part of the
            SplashWrapperForm. You should not add any other controls that
            will be visible to the SplashWrapperForm.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Windows.Forms.Tools.StatusBarAdv" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.StatusBarAdv.#ctor">
            <summary>
            Creates the StatusbarAdv.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StatusBarAdv.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StatusBarAdv.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StatusBarAdv.ShouldEnableSizing">
            <summary>
            Specifies whether or not sizing should be enabled.
            </summary>
            <returns>true to enable sizing by the user, false otherwise.</returns>
            <remarks>
            This method checks if the StatusBarAdv's <see cref="P:Syncfusion.Windows.Forms.Tools.StatusBarAdv.SizingGrip"/> is on,
             is docked to the bottom, the right-bottom corner aligns with the parent's right-bottom
             and that the Parent is not maximized.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StatusBarAdv.SetPreferredSize(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Sets the preferred size in the layout of the specified control.
            </summary>
            <remarks>
            Use this method to set the preferred size of a control inside the status bar.
            </remarks>
            <param name="control">The control to set the preferred size to.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StatusBarAdv.SetHAlign(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.HorzFlowAlign)">
            <summary>
            Sets the horizontal alignment options for the specified control.
            </summary>
            <remarks>
            If the status bar`s Alignment property is set to ChildContstraints, the status bar will use this option in the positioning and resizing of the control.
            </remarks>
            <param name="control">The control to set the HAlign to.</param>
            <param name="align">The alignment optionis to be set to the specified control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StatusBarAdv.GetPreferredSize(System.Windows.Forms.Control)">
            <summary>
            Gets the preferred size of the specified control.
            </summary>
            <param name="control">The control that has the returned preferred size.</param>
            <returns>The preferred size of the control.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StatusBarAdv.OnRightToLeftChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StatusBarAdv.GetIsMirrored">
            <summary>
            Specifies whether or not the control should be drawn right-to-left.
            </summary>
            <returns>true if the control is to be drawn right-to-left; false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdv.ThemesEnabled">
            <summary>
            Indicates if the Statusbar will draw a themed backgorund. Indicated settings: BorderStyle = None.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdv.SizingGrip">
            <summary>
            Indicates if the Sizing grip is visible.
            </summary>
            <remarks>
            If SizingGrip is false the statusbar will not resize it`s parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdv.CustomLayoutBounds">
            <summary>
            Indicates a custom rectangle that the layout will use to display the panels.
            </summary>
            <remarks>Set this property to specify new boundaries for the layout of the panels.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdv.Alignment">
            <summary>
            Determines the alignment of the panels.
            </summary>
            <remarks>
            This property determines the location of the panels.
            If set to ChildConstraints the Panels` HAlign property will be used to position and size them.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdv.Spacing">
            <summary>
            Determines the spacing between the panels.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdv.AutoHeightControls">
            <summary>
            Determines if the StatusBar will resize the Height of the panels acording to it`s Height.
            </summary>
            <remarks>
            The default value is true indicating that when the status bar`s height changes the panels inside will change their height also.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdv.Panels">
            <summary>
            Indicates the StatusBarAdvPanel controls contained in the StatusBarAdv.
            </summary>
            <remarks>
            Use this property to Add/Remove panels from the status bar.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdv.ParentMaximized">
            <summary>
            Specifies whether or not the parent control is maximized.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel">
            <summary>
            The StatusBarAdvPanel is used with the StatusBarAdv to show information like key states date and time.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.#ctor">
            <summary>
            Creates the panel.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.ToolTip">
            <summary>
            Indicates the tool tip of the panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.SizeToContent">
            <summary>
            Indicates if the size of the panel will be automatically calculated by the size of it`s contents.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.MinimumSize">
            <summary>
            Indicates the minimum size of the panel in the FlowLayout.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.PreferredSize">
            <summary>
            Indicates the preferred size of the panel in the FlowLayout.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.Constraints">
            <summary>
            Indicates the constraints in the FlowLayout.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.HAlign">
            <summary>
            Indicates the HorizontalAlignment in the FlowLayout.
            </summary>
            <remarks>
            Set this property if the parent status bar has the Alignment property set to ChildConstraints.
            Otherwise this setting will not be taken into account.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.Icon">
            <summary>
            Indicates the icon of the panel.
            </summary>
            <remarks>
            This icon represents the icon that appears in the panel.
            It is a 16x16 icon.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.PanelType">
            <summary>
            Indicates the type of the panel.
            </summary>
            <remarks>
            Set this property if you want the panel to display a predefined text representing key states, date/time information or culture information.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.Alignment">
            <summary>
            Indicates the alignment type of the text and icon of the panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.Text">
            <summary>
            Indicates the text of the panel.
            </summary>
            <remarks>
            This property will be ignored if the PanelType property is set to a value different than Custom.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StatusBarAdvPanel.ThemesEnabled">
            <summary>
            Indicates if the background color will be set to Transparent. Indicated settings: BorderStyle:Fixed3D, Border3DStyle = Etched.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DrawTabEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.TabControlAdv.DrawItem"/> event of the <see cref="T:Syncfusion.Windows.Forms.Tools.TabControlAdv"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="drawItemInfo">A DrawTabEventArgs that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.TabControlAdv.DrawItem"/> event of
            <see cref="T:Syncfusion.Windows.Forms.Tools.TabControlAdv"/>.
            </summary>
            <remarks>
            <para>This class contains all the information needed for the user to paint the specified
            item. It provides the BackColor, ForeColor, Bounds (includes space for the border),
            BoundsInterior(does not include space for the borders), etc. It also provides access
            to the default drawing logic of the tabs via its DrawXXX methods.</para>
            <para>
            In case you use the default drawing logic for drawing the borders, then you can use
            the BoundsInterior to get the rectangular area without the borders to draw your custom
            interior.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DrawItemState,System.Drawing.Color,System.Drawing.Color,System.Drawing.Rectangle,Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.DrawDefaultBackground,Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.DrawDefaultBorders,Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.DrawDefaultInterior)">
            <summary>
            Creates a new instance of the DrawTabEventArgs.
            </summary>
            <param name="g">The Graphics object into which to draw.</param>
            <param name="font">The font using which to draw the tab.</param>
            <param name="bounds">The exterior bounds of the tab.</param>
            <param name="index">The index of this tab in the TabControlAdv.</param>
            <param name="state">The state of this item.</param>
            <param name="foreColor">The color of the text.</param>
            <param name="backColor">The back ground color.</param>
            <param name="boundsInterior">The interior bounds of this tab.</param>
            <param name="defaultDrawBackground">A reference to the method that performs default background drawing.</param>
            <param name="defaultDrawBorders">A reference to the method that performs default border drawing.</param>
            <param name="defaultDrawInterior">A reference to the method that performs default image and text drawing.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.DrawBackground">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.DrawItemEventArgs.DrawBackground"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.DrawBorders">
            <summary>
            Draws the borders within the bounds specified in the DrawTabEventArgs
            constructor and with the appropriate color.
            </summary>
            <remarks>Notes to Inheritors:  When overriding DrawBorders in a derived class, be sure to call the base class's DrawBorders method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.DrawInterior">
            <summary>
            Draws the text and image within the bounds specified in the DrawTabEventArgs
            constructor and with the appropriate color.
            </summary>
            <remarks>Notes to Inheritors:  When overriding DrawInterior in a derived class, be sure to call the base class's DrawInterior method.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.BackColor">
            <summary>
            Specifies the background color.
            </summary>
            <value>A Color value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.ForeColor">
            <summary>
            Specifies the color of the text.
            </summary>
            <value>A Color value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.Index">
            <summary>
            Gets the index value of the item that is being drawn.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.Graphics">
            <summary>
            Gets the graphics surface to draw the item on.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.State">
            <summary>
            Gets the state of the item being drawn.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.BoundsInterior">
            <summary>
            Specifies the interior of the tab minus the borders.
            </summary>
            <value>A Rectangle specifying the interior area.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.Bounds">
            <summary>
            Gets the rectangle that represents the bounds of the item that is
            being drawn.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.Font">
            <summary>
            Gets the font assigned to the tab being drawn.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.TextBrush">
            <summary>
            Specifies the text brush, with which to draw the text in the tabs.
            </summary>
            <value>A <see cref="T:System.Drawing.Brush"/> instance with which to draw the text.</value>
            <remarks>
            This value will be null when the <see cref="E:Syncfusion.Windows.Forms.Tools.TabControlAdv.DrawItem"/> event gets fired.
            If you then specify a brush before calling the <see cref="M:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.DrawInterior"/> method,
            that brush will be used to draw the text.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.DrawDefaultBackground">
            <summary>
            Represents a method that performs default background drawing.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.DrawDefaultBorders">
            <summary>
            Represents a method that performs default border drawing.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs.DrawDefaultInterior">
            <summary>
            Represents a method that performs default image and text drawing.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties">
            <summary>
            Specifies the mechanism by which the <see cref="T:Syncfusion.Windows.Forms.Tools.TabControlAdv"/> will get the default properties
            associated with a tab renderer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DefaultTabPanelBackgroundColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Specifies the default tab panel background color.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DefaultTabForeColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Specifies the default tab fore color.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DefaultActiveTabColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Specifies the default active tab color.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DefaultInactiveTabColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Specifies the default inactive tab color.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DefaultFixedSingleBorderColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Specifies the default single border color.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DefaultTabPanelFont(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Specifies the defualt tab panel font.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DefaultActiveTabFont(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Specifies the default active tab font.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DefaultInactiveTabFont(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Specifies the default inactive tab font.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.GetOverlapSize(System.Drawing.SizeF)">
            <summary>
            Specifies the amount in X and Y directions, in which a selected tab will
            overlap the inactive tab.
            </summary>
            <param name="tabSize">The user specified tab size, if any. If no size was specified by the user, then
            this will be SizeF.Empty.</param>
            <remarks>If you return for example (6, 3) then the tab will overlap by 3 pixels
            to its left and right and by 3 pixels on top.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.OnPaintPanelBackground(Syncfusion.Windows.Forms.Tools.ITabControl,System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws the tab panel's background.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.IsBackgroundSolid">
            <summary>
            Specifies whether or not the bg will be a solid color.
            </summary>
            <returns>true if solid; false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DrawLeftToRight">
            <summary>
            Specifies whether to draw the tabs from left to right, or right to left.
            </summary>
            <remarks>
            This is useful when you implement overlapped tabs.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.ShowInDesignMode">
            <summary>
            Specifies whether this tab type should be made available in the design-time property grid for the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabRendererFactory">
            <summary>
            Manages custom <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/>s (custom tab styles).
            </summary>
            <remarks>
            <para>When you create a custom tab style, you have to register it with the framework
            through the <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererFactory.RegisterTabType(System.String,System.Type,Syncfusion.Windows.Forms.Tools.ITabDefaultProperties)"/> method.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererFactory.RegisterTabType(System.String,System.Type,Syncfusion.Windows.Forms.Tools.ITabDefaultProperties)">
            <summary>
            Lets you register custom tab styles with the framework.
            </summary>
            <param name="tabStyleName">A unique name associated with your tab style.</param>
            <param name="tabType">A <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/> implementation.</param>
            <param name="tabPanelPropertyExtender">A <see cref="T:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties"/> implementation.</param>
            <remarks>
            <para>Each "tab style" (that you can specify in the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property)
            is represented by a type that implements the <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/> interface
            and a corresponding <see cref="T:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties"/> implementation to specify certain default tab control properties.
            Register these implementations with this method before specifying them in the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property.
            A good place to do the registration is from your <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/> implementation's
            static constructor.
            </para>
            <para>Note that your <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/> implementation should have a non-default constructor that takes
            the following 2 parameters: (<see cref="T:Syncfusion.Windows.Forms.Tools.ITabControl"/> and <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer"/>).</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererFactory.CreateNewTabRenderer(System.String,Syncfusion.Windows.Forms.Tools.ITabControl,Syncfusion.Windows.Forms.Tools.ITabPanelRenderer)">
            <summary>
            Returns a new instance of a registered <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/> given the custom tab style name.
            </summary>
            <param name="tabStyle">The custom tab style name.</param>
            <param name="tabControl">The tab control that requests a new instance.</param>
            <param name="panelRenderer">The panel renderer that requests a new instance.</param>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/> instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererFactory.GetRegisteredRenderers(System.Boolean)">
            <summary>
            Gets a list of registered <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/> types.
            </summary>
            <param name="forDesignTime">true to indicate if this list is for design-time; false otherwise.</param>
            <returns>An ArrayList of <see cref="T:System.Type"/> instances.</returns>
            <remarks>
            If forDesignTime is true, then tab styles with the <see cref="P:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.ShowInDesignMode"/>
            property set to false will be excluded from the returned list.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererFactory.GetRegisteredExtender(System.String)">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties"/>
            instance associated with a specific tab style.
            </summary>
            <param name="tabStyle">The tab style name.</param>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties"/> instance.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabSizeMode">
            <summary>
            Specifies the sizing mode of a <see cref="T:Syncfusion.Windows.Forms.Tools.TabControlAdv"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabSizeMode.Normal">
            <summary>
            The width of each tab is sized to accommodate what is displayed on the tab,
            and the size of tabs in a row are not adjusted to fill the entire width of
            the container control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabSizeMode.FillToRight">
            <summary>
            The width of each tab is sized so that each row of tabs fill the entire
            width of the container control. This is only applicable to tab controls with
            more than one row.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabSizeMode.Fixed">
            <summary>
            All tabs in a control are the same width.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabSizeMode.ShrinkToFit">
            <summary>
            The width of each tab is shrunk so that all the tabs are visible. This property
            can be set only when in single-line mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.RelativeImageAlignment">
            <summary>
            Specifies the relative alignment of the Image with respect to the text in a <see cref="T:Syncfusion.Windows.Forms.Tools.TabControlAdv"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.RelativeImageAlignment.LeftOfText">
            <summary>
            The image will be drawn to the left of the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.RelativeImageAlignment.RightOfText">
            <summary>
            The image will be drawn to the right of the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.RelativeImageAlignment.AboveText">
            <summary>
            The image will be drawn above the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.RelativeImageAlignment.BelowText">
            <summary>
            The image will be drawn below the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.RelativeImageAlignment.Overlap">
            <summary>
            The text will be drawn over the image.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ScrollIncrement">
            <summary>
            Represents the mode in which scrolling will take place in a <see cref="T:Syncfusion.Windows.Forms.Tools.TabControlAdv"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ScrollIncrement.Tab">
            <summary>
            Scroll by tab.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ScrollIncrement.Page">
            <summary>
            Scroll by page.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ScrollDirection">
            <summary>
            Indicates the direction in which to scroll.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ScrollDirection.Left">
            <summary>
            Scrolls to the left.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ScrollDirection.Right">
            <summary>
            Scrolls to the right.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabVerticalAlignment">
            <summary>
            Indicates the preferred vertical alignment of the tabs when the tabs are aligned to the left or right of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabVerticalAlignment.Default">
            <summary>
            Tabs are rendered based on the Control's RightToLeft property setting.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabVerticalAlignment.Top">
            <summary>
            Tabs are alinged to the top of the control regardless of the RightToLeft property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabVerticalAlignment.Bottom">
            <summary>
            Tabs are aligned to the bottom of the control regardless of the RightToLeft property value.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabPanelPropertyChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.ITabPanelData.PropertyChanged"/> event.
            </summary>
            <param name="sender">The <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelData"/> source of the event.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.TabPanelPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabPanelPropertyChangedEventArgs">
            <summary>
            The class that contains data for the <see cref="E:Syncfusion.Windows.Forms.Tools.ITabPanelData.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelPropertyChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Creates a new instance of the TabPanelPropertyChangedEventArgs class.
            </summary>
            <param name="affectedProperty">The affected property.</param>
            <param name="oldValue">The old value for the property.</param>
            <param name="newValue">The new value for the property.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelPropertyChangedEventArgs.PropertyName">
            <summary>
            The property that changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelPropertyChangedEventArgs.OldValue">
            <summary>
            The old value of the property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelPropertyChangedEventArgs.NewValue">
            <summary>
            The new value of the property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ITabPanelData">
            <summary>
            The interface that represents the tab panel's data.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelData.IsTabSelectable(System.Int32,System.Boolean)">
            <summary>
            Specifies whether or not a tab is selectable.
            </summary>
            <param name="tabIndex">The tab's index.</param>
            <param name="visually">specifies whether check is for visual selection or programatic selection.</param>
            <returns>true if selectable; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelData.CreateNewTabData">
            <summary>
            Creates a new <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelData.OnSelectedIndexChanged(System.Int32,System.Int32)">
            <summary>
            This will fire the property changed event indicating the change in SelectedIndex.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.TabStyle">
            <summary>
            The tab style with which to draw.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.BorderStyle">
            <summary>
            The border style with which to draw.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.Alignment">
            <summary>
            The tab alignment with which to align the tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.TabSize">
            <summary>
            The tab size, if in fixed width mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.TabGap">
            <summary>
            The tab gap between tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.VerticalAlignment">
            <summary>
            The vertical alignment of the tabs when they are aligned to the right or left.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.Multiline">
            <summary>
            Specifies whether or not to draw the tabs in multiline mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.KeepSelectedTabInFrontRow">
            <summary>
            Specifies whether the selected tab should be moved to the front row when in multiline mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.SizeMode">
            <summary>
            Specifies the tab sizing mode.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.TabSizeMode"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.BackColor">
            <summary>
            Specifies the tab panel's back color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.FixedSingleBorderColor">
            <summary>
            Specifies the border color when in <see cref="F:System.Windows.Forms.BorderStyle.FixedSingle"/> mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.Font">
            <summary>
            Specifies the tab panel's font.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.ActiveTabFont">
            <summary>
            Specifies the active tab's font.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.ActiveTabColor">
            <summary>
            Specifies the active tab's color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.InactiveTabColor">
            <summary>
            Specifies the inactive tab's color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.ImageList">
            <summary>
            Specifies the imagelist.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.SelectedIndex">
            <summary>
            Specifies the selected tab index.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.TextAlignment">
            <summary>
            Specifies the text alignment of the text in the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.TextLineAlignment">
            <summary>
            Specifies the text line alignment of the text in the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.ImageAlignmentR">
            <summary>
            Specifies the relative image alignment of the images with respect to the text in the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.RotateTextWhenVertical">
            <summary>
            Specifies whether or not to rotate the tabs when aligned vertically.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.RotateText180WhenLeftAligned">
            <summary>
            Specifies whether or not to rotate the tabs when aligned vertically.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.Padding">
            <summary>
            Specifies the left and top padding to use when calculating the tab positions.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.HotTrack">
            <summary>
            Specifies whether or not hot tracking is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.ShowToolTips">
            <summary>
            Specifies whether or not tooltips are enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.UserMoveTabs">
            <summary>
            Specifies whether or not users are allowed to move tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.TabsData">
            <summary>
            Specifies a collection of <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ITabPanelData.PropertyChanged">
            <summary>
            This event is thrown when one of the tab's property changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ITabPanelData.SelectedIndexChanging">
            <summary>
            This event is fired before the <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.SelectedIndex"/> property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ITabData">
            <summary>
            The interface that represents the data associated with a tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabData.Font">
            <summary>
            Gets or sets the font of the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabData.BackColor">
            <summary>
            Gets or sets the back color of the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabData.ForeColor">
            <summary>
            Gets or sets the back color of the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabData.Text">
            <summary>
            Gets or sets the text of the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabData.Enabled">
            <summary>
            Gets or sets the enabled state of the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabData.TabVisible">
            <summary>
            Gets or sets the visible state of the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabData.ToolTip">
            <summary>
            Gets or sets the tooltip of the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabData.ImageIndex">
            <summary>
            Gets or sets the image index of the tab.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ITabData.BoundsAffected">
            <summary>
            This event will be thrown when the tabs bounds were affected.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ITabData.PropertyChanged">
            <summary>
            This event is throws when the tabs property changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabPanelData">
            <summary>
            The default implementation of the <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelData"/> interface.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelData.ChangeSelectedIndex(System.Int32)">
            <summary>
            Changes the selected tab index.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelData.IsTabSelectable(System.Int32,System.Boolean)">
            <summary>
            Specifies whether the tab is selectable, visually or programatically.
            </summary>
            <param name="tabIndex">The index of the tab page.</param>
            <param name="visually">specifies whether check is for visual selection or programatic selection.</param>
            <returns>true if the tab page can be selected; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelData.CreateNewTabData">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabPanelData.CreateNewTabData"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelData.#ctor(System.Windows.Forms.Control)">
            <summary>
            Create a new instance of the TabPanelData class.
            </summary>
            <param name="parent">The Control parent.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelData.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            This method fires the <see cref="E:Syncfusion.Windows.Forms.Tools.TabPanelData.PropertyChanged"/> event.
            </summary>
            <param name="property">The property name that changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelData.OnSelectedIndexChanging(Syncfusion.Windows.Forms.Tools.SelectedIndexChangingEventArgs)">
            <summary>
            This method fires the <see cref="E:Syncfusion.Windows.Forms.Tools.TabPanelData.SelectedIndexChanging"/> event.
            </summary>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.SelectedIndexChangingEventArgs"/> instance with information regarding this event.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.TabStyle">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.TabStyle"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.BorderStyle">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.BorderStyle"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.Alignment">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.Alignment"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.TabSize">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.TabSize"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.TabGap">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.TabGap"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.Multiline">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.Multiline"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.KeepSelectedTabInFrontRow">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.KeepSelectedTabInFrontRow"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.FixedSingleBorderColor">
            <summary>
            Specifies the border color when in <see cref="F:System.Windows.Forms.BorderStyle.FixedSingle"/> mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.ImageList">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.ImageList"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.SelectedIndex">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.SelectedIndex"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.SizeMode">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.SizeMode"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.BackColor">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.BackColor"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.Font">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.Font"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.TextAlignment">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.TextAlignment"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.TextLineAlignment">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.TextLineAlignment"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.ImageAlignmentR">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.ImageAlignmentR"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.RotateTextWhenVertical">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.RotateTextWhenVertical"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.RotateText180WhenLeftAligned">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.RotateText180WhenLeftAligned"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.Padding">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.Padding"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.HotTrack">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.HotTrack"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.ShowToolTips">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.ShowToolTips"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.UserMoveTabs">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.UserMoveTabs"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.TabsData">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.TabsData"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.ActiveTabFont">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.ActiveTabFont"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.ActiveTabColor">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.ActiveTabColor"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelData.InactiveTabColor">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelData.InactiveTabColor"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TabPanelData.PropertyChanged">
            <summary>
            This event is fired when one of the <see cref="T:Syncfusion.Windows.Forms.Tools.TabPanelData"/>'s properties changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TabPanelData.SelectedIndexChanging">
            <summary>
            This event is fired before the <see cref="P:Syncfusion.Windows.Forms.Tools.TabPanelData.SelectedIndex"/> property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabDataCollection">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/> objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.#ctor(Syncfusion.Windows.Forms.Tools.ITabPanelData)">
            <summary>
            Creats a new instance of the TabDataCollection class.
            </summary>
            <param name="owner">The <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelData"/> that contains this collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.RemoveAt(System.Int32)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.Clear">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.Clear"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.Remove(System.Object)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.Remove(System.Object)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.Move(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves items from one location to another
            </summary>
            <param name="from">The starting index.</param>
            <param name="to">The target index.</param>
            <param name="count">The number of items to move.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.Insert(System.Int32,System.Object)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.Add(System.Object)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.Add(System.Object)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.Reverse(System.Int32,System.Int32)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.Reverse"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.SetRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.Sort"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.OnCollectionChanging">
            <summary>
            This method is called when the collection is about to change.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabDataCollection.OnCollectionAffected">
            <summary>
            This method calls the CollectionAffected event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabDataCollection.Item(System.Int32)">
            <summary>
            The indexer for this collection
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/> object.</value>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TabDataCollection.CollectionAffected">
            <summary>
            This event is fired when this collection is affected.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabData">
            <summary>
            The default <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/> implementation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabData.#ctor">
            <summary>
            Creates a new instance of the TabData.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabData.Dispose">
            <summary>
            Call this to dispose this object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabData.Dispose(System.Boolean)">
            <summary>
            Called to dispose the object.
            </summary>
            <param name="disposing">true if called by Dispose; false if called by the destructor.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabData.OnBoundsAffected">
            <summary>
            This method throws the <see cref="E:Syncfusion.Windows.Forms.Tools.TabData.BoundsAffected"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabData.OnPropertyChanged">
            <summary>
            This method throws the <see cref="E:Syncfusion.Windows.Forms.Tools.TabData.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabData.Font">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabData.Font"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabData.BackColor">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabData.BackColor"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabData.Text">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabData.Text"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabData.Enabled">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabData.Enabled"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabData.TabVisible">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabData.TabVisible"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabData.ToolTip">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabData.ToolTip"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabData.ForeColor">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabData.ToolTip"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabData.ImageIndex">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabData.ImageIndex"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TabData.BoundsAffected">
            <summary>
            This event is fired when the tab data's bounds are affected.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TabData.PropertyChanged">
            <summary>
            This event is fired when the tab data's property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ITabControl">
            <summary>
            The interface that represents the parent tab control.
            </summary>
            <remarks>
            Implement this interface if you need to create a custom tab control that uses
            the <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer"/> and <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/> framework.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabControl.OnTabPanelBoundsAffected">
            <summary>
            Called when the tab panel's bounds are affected.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabControl.OnRepaint(System.Drawing.RectangleF)">
            <summary>
            Called to force a repaint in the specified rect.
            </summary>
            <param name="affectedRect">The rect to repaint.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabControl.GetGraphics">
            <summary>
            Gets the <see cref="T:System.Drawing.Graphics"/> object used by this Control for painting.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabControl.GetControl">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.Control"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabControl.OnDrawItem(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Called to let custom drawing of the tabs.
            </summary>
            <param name="eventArgs">The <see cref="T:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs"/> object containing some information regarding this call.</param>
            <returns>True if custom drawing was performed; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabControl.OnScrollPositionChanged">
            <summary>
            Called to notify a change in scroll position.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabControl.IsDesignMode">
            <summary>
            Queries if this is design mode.
            </summary>
            <returns>true if in design mode; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabControl.ValidateFocusedTab">
            <summary>
            Validates the current active tab page.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabControl.Renderer">
            <summary>
            Gets the tab panel renderer used to draw the tab panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabControl.ThemedDrawing">
            <summary>
            Gets the drawing utility object that helps draw themed tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabControl.ThemesEnabled">
            <summary>
            Specifies whether or not XP Themes should be used if avaialble for drawing.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer">
            <summary>
            The interface you should implement to create a custom tab panel renderer.
            </summary>
            <remarks>
            <para>The base interface that the <see cref="T:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer"/>
            and the <see cref="T:Syncfusion.Windows.Forms.Tools.MultilineTabPanelRenderer"/> derive from.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.Layout(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Lays out the tabs according to the current bounds.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> instance.</param>
            <param name="fromPaint">Specifies whether or not this method was called from the Paint event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.Scroll(Syncfusion.Windows.Forms.Tools.ScrollIncrement,Syncfusion.Windows.Forms.Tools.ScrollDirection)">
            <summary>
            Will scroll the tabs based on the specified <see cref="T:Syncfusion.Windows.Forms.Tools.ScrollIncrement"/>
            and <see cref="T:Syncfusion.Windows.Forms.Tools.ScrollDirection"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.GetPreferredSize(System.Drawing.Graphics,System.Drawing.SizeF@)">
            <summary>
            Gets the preferred size of the tab panel.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context to help calculate the sizes.</param>
            <param name="size">The <see cref="T:System.Drawing.SizeF"/> that should contain the preferred size when returned.</param>
            <remarks>
            <para>A non-zero width in the size parameter indicates the available width
            and requires you to provide the preferred height for that width. Zero width
            in the size parameter indicates you to provide the preferred width and height
            for the tab panel, assuming infinite available width.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.GetTabBounds(System.Int32)">
            <summary>
            Get the bounds of the specified tab.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.IsBackgroundSolid">
            <summary>
            Specifies whether or not the bg color is solid.
            </summary>
            <returns>true if solid; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.OnPaintPanelBackground(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Paints the tab panel background.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> instance.</param>
            <param name="backColor">The background <see cref="T:System.Drawing.Color"/>.</param>
            <param name="rect">The background bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the tab panel with the tabs.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> instance.</param>
            <param name="clipRect">The clipping rectangle to use while drawing.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.HitTestTabs(System.Drawing.PointF,System.Boolean)">
            <summary>
            Returns the tab position under the specified co-ords.
            </summary>
            <param name="mousePosition">The mouse position in client or transformed drawing co-ords.</param>
            <param name="inTransformedCoOrds">true to indicate that the mouse position is in transformed drawing co-ords; false to indicate client co-ords.</param>
            <returns>The hit tab's index or -1 if none found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the parent tab control to forward mouse move messages.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that has some information regarding this event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.OnMouseLeave(System.EventArgs)">
            <summary>
            Called by the parent tab control to forward mouse leave messages.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that has some information regarding this event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the parent tab control to forward mouse down messages.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that has some information regarding this event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the parent tab control to forward mouse up messages.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that has some information regarding this event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.OnGotFocus(System.EventArgs)">
            <summary>
            Called by the parent tab control to forward got focus messages.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> that has some information regarding this event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.OnLostFocus(System.EventArgs)">
            <summary>
            Called by the parent tab control to forward lost focus messages.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> that has some information regarding this event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.IsMovingTab">
            <summary>
            Specifies whether or not a tab is currently being moved.
            </summary>
            <returns>true if moving, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.CancelTabDrag">
            <summary>
            Cancels current tab draggin, if any.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.ValidateScrollOffset(System.Boolean,System.Boolean)">
            <summary>
            Ensures that the current scroll position is valid.
            </summary>
            <param name="makeSelectedTabVisible">true to make the selected tab visible; false otherwise.</param>
            <param name="invalidate">true to redraw the invalid regions; false otherwise.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.NeedMouseMove">
            <summary>
            Specifies whether the parent tab control should forward mouse move messages to the renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.NeedLayout">
            <summary>
            Specifies whether the tabs need to laid out due to change in some property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.TabPanelData">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelData"/>
            that contains information regarding tab panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.Bounds">
            <summary>
            Gets or sets the current bounds of the tab panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.ScrollingSupported">
            <summary>
            Gets a value indicating whether or not scrolling is supported.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.CanScrollLeft">
            <summary>
            Specifies whether scrolling to the left is allowed for the current layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.CanScrollRight">
            <summary>
            Specifies whether scrolling to the right is allowed for the current layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.TabPanelBackColor">
            <summary>
            Returns the tab panel's back color
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties">
            <summary>
            Implement this interface to provide certain default properties for the tab panel.
            </summary>
            <remarks>
            <para>You should implement this interface when you create custom tabs along with the
            <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/> implementation.
            A default implementation is available via <see cref="T:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties.DefaultActiveTabColor">
            <summary>
            Gets the default active tab's color.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties.DefaultInactiveTabColor">
            <summary>
            Gets the default inactive tab's color.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties.DefaultTabForeColor">
            <summary>
            Gets the tab's fore color.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties.DefaultTabPanelBackgroundColor">
            <summary>
            Gets the default tab panel background color.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties.DefaultTabPanelFont">
            <summary>
            Gets the default tab panel font.
            </summary>
            <returns>A <see cref="T:System.Drawing.Font"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties.DefaultActiveTabFont">
            <summary>
            Gets the default active tab font.
            </summary>
            <returns>A <see cref="T:System.Drawing.Font"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties.DefaultInactiveTabFont">
            <summary>
            Gets the default inactive tab font.
            </summary>
            <returns>A <see cref="T:System.Drawing.Font"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties.DefaultFixedSingleBorderColor">
            <summary>
            Gets the default single border Color.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color"/>.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ITabRenderer">
            <summary>
            The interface to implement when you create custom tab styles (tab renderers).
            </summary>
            <remarks>
            <para>Use the default <see cref="T:Syncfusion.Windows.Forms.Tools.TabRendererBase"/> implementation
            when you want to create custom tab renderers. See <see cref="T:Syncfusion.Windows.Forms.Tools.TabRendererFactory"/>
            for information on how to register your custom renderer with the framework and other requirements.</para>
            <para>Note that your implementation <bold>should have a non-default constructor</bold> that takes
            the following 2 parameters: (<see cref="T:Syncfusion.Windows.Forms.Tools.ITabControl"/> and <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer"/>).</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabRenderer.GetPreferredSize(System.Drawing.Graphics)">
            <summary>
            Gets the preferred size for this tab.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabRenderer.IsTextShrunk">
            <summary>
            Specifies whether or not the text is shrunk.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabRenderer.HitTest(System.Drawing.PointF)">
            <summary>
            Determines whether the specified mouse position is within this tab.
            </summary>
            <param name="mousePosition">The point to verify.</param>
            <returns>true if the point is within the tab bounds; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabRenderer.GetRedrawBounds">
            <summary>
            Gets the rectangle representing the dirty portion of the tab.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabRenderer.GetCurrentBounds">
            <summary>
            Gets the current tab bounds. This includes any overlapped region.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabRenderer.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the tab.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> instance.</param>
            <param name="clipRect">The clipping rect to use while drawing.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabRenderer.TabPropertyChanged">
            <summary>
            Call this to notify the tab that its properties have changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabRenderer.Visible">
            <summary>
            Specifies whether or not this tab is visible
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabRenderer.TabData">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/>
            containing information regarding this tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabRenderer.Bounds">
            <summary>
            Gets or sets the current bounds of this tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabRenderer.HotTrack">
            <summary>
            Gets or sets the flag that indicates whether hot tracking is on in this tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabRenderer.TabAlignment">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.TabAlignment"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabRenderer.DrawItemCallback">
            <summary>
            Represents the method you should call from your implementation to allow for custom drawing of the tabs.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.DrawItemCallback"/> instance.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer">
            <summary>
            A <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer"/> instance
            that implements the single-line tab mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabPanelRenderer">
            <summary>
            A default <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer"/> implementation.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer"/> and <see cref="T:Syncfusion.Windows.Forms.Tools.MultilineTabPanelRenderer"/>
            renderers derive from this class.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.GetPreferredSize(System.Drawing.Graphics,System.Drawing.SizeF@)">
            <summary>
            See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.GetPreferredSize(System.Drawing.Graphics,System.Drawing.SizeF@)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.ComputeTabPositions(System.Drawing.Graphics)">
            <summary>
            See <see cref="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.ComputeTabPositions(System.Drawing.Graphics)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.GetTabBounds(System.Int32)">
            <summary>
            See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.GetTabBounds(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.DrawItemCallback(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Calls the <see cref="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnDrawItem(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.SetNeedLayout(System.Boolean)">
            <summary>
            Specifies that the tab positions need to be recalculated.
            </summary>
            <param name="needLayout"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.Layout(System.Drawing.Graphics,System.Boolean)">
            <summary>
            See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.Layout(System.Drawing.Graphics,System.Boolean)"/>.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> instance.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.m_toolTipHash">
            <summary>
            Hash containing [ control ]:[ ToolTip ] pairs.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.m_bFirstMouseMove">
            <summary>
            Show tooltip for fist mouse move.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.DefaultActiveTabColor">
            <summary>
            Gets the default active tab color.
            </summary>
            <returns>The Color instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.DefaultInactiveTabColor">
            <summary>
            Gets the default inactive tab color.
            </summary>
            <returns>The Color instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.DefaultTabForeColor">
            <summary>
            Gets the default tab fore color.
            </summary>
            <returns>The Color instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.DefaultTabPanelBackgroundColor">
            <summary>
            Gets the default tab panel background color.
            </summary>
            <returns>The Color instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.DefaultFixedSingleBorderColor">
            <summary>
            Gets the default single border color.
            </summary>
            <returns>The Color instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.DefaultTabPanelFont">
            <summary>
            Gets the default tab panel font.
            </summary>
            <returns>The Font instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.DefaultActiveTabFont">
            <summary>
            Gets the default active tab font.
            </summary>
            <returns>The Font instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.DefaultInactiveTabFont">
            <summary>
            Gets the default inactive tab font.
            </summary>
            <returns>The Font instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.Scroll(Syncfusion.Windows.Forms.Tools.ScrollIncrement,Syncfusion.Windows.Forms.Tools.ScrollDirection)">
            <summary>
            See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.Scroll(Syncfusion.Windows.Forms.Tools.ScrollIncrement,Syncfusion.Windows.Forms.Tools.ScrollDirection)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.ValidateScrollOffset(System.Boolean,System.Boolean)">
            <summary>
            See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.ValidateScrollOffset(System.Boolean,System.Boolean)"/>.
            </summary>
            <param name="makeSelectedTabVisible"></param>
            <param name="invalidate"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.ApplyDrawingTransform(System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Transforms the RectangleF in client co-ords to rotated drawing co-ords; or vice-versa.
            </summary>
            <param name="rect">The RectangleF to transform.</param>
            <param name="apply">true to transform to drawing co-ords; false to transform to client co-ords.</param>
            <returns>
            The transformed <see cref="T:System.Drawing.RectangleF"/>.
            </returns>
            <remarks>
            The TabPanelRenderer class performs the drawing of the tabs in a transformed space to
            accomodate the top, bottom, left and right alignment of the tabs. The transform
            is such that irrespective of the tab alignment the TabPanelRenderer can use the same code
            to draw the tabs.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.#ctor">
            <summary>
            Creates a new instance of the TabPanelRenderer class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.Detach">
            <summary>
            Called when a <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelData"/> instance is detached from this renderer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.CreateNewRenderer(System.String,Syncfusion.Windows.Forms.Tools.ITabData)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/> given a tab style name.
            </summary>
            <param name="tabStyle">The tab style name.</param>
            <param name="tabData">The <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/> containing the data for the renderer. Can be null.</param>
            <returns>The new <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.RemoveTabRenderers">
            <summary>
            Removes the <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/>s.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnTabsCollectionChanged">
            <summary>
            Called when the tabs collection changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.GetLargestHeight(System.Drawing.Graphics)">
            <summary>
            Gets the largest height for any tab.
            </summary>
            <param name="g">A Graphics object.</param>
            <returns>The largest height.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnBoundsAffected">
            <summary>
            Called when a property changed that requires recalculating the preferred size and layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.TabPanel_PropertyChanged(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.TabPanelPropertyChangedEventArgs)">
            <summary>
            The event handler that gets called when the corresponding <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelData"/>'s property changed.
            </summary>
            <param name="sender">The <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelData"/>.</param>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.Tools.TabPanelPropertyChangedEventArgs"/> containing information regarding this event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnTabStyleChanged">
            <summary>
            Called when the associated <see cref="T:Syncfusion.Windows.Forms.Tools.ITabControl"/>'s
            <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnSelectionChanged(System.Int32,System.Int32)">
            <summary>
            Called when the associated <see cref="T:Syncfusion.Windows.Forms.Tools.ITabControl"/>'s selected index changed.
            </summary>
            <param name="previousIndex">The previous selected tab index.</param>
            <param name="currentIndex">The new selected tab index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.InvalidateTabs(System.Int32,System.Int32)">
            <summary>
            Invalidates the union of the tab regions specified by their index.
            </summary>
            <param name="tab1">The beginning tab index.</param>
            <param name="tab2">The ending tab index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.Tab_PropertyChanged(System.Object,System.EventArgs)">
            <summary>
            The event handler that gets called when a <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/>'s property changed.
            </summary>
            <param name="sender">The <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/>.</param>
            <param name="e">An EventArgs instance containing information regarding this event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.Tab_BoundsAffected(System.Object,System.EventArgs)">
            <summary>
            The event handler that gets called when a <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/>'s bounds are affected.
            </summary>
            <param name="sender">The <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/>.</param>
            <param name="e">An EventArgs instance containing information regarding this event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the tabs.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="clipRect">The rectangle that should be clipped from the drawing region.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the tab control when mouse move occured.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.SetToolTip(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets tooltip to specified control.
            </summary>
            <param name="control"></param>
            <param name="strToolTip"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.toolTipAdv_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.control_MouseHover(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.HitTestTabs(System.Drawing.PointF,System.Boolean)">
            <summary>
            Returns the tab index at the specified location.
            </summary>
            <param name="mousePosition">The location where hit test is to be performed.</param>
            <param name="inTransformedCoOrds">Specifies whether the above location is in absolute or transformed co-ordinates.</param>
            <returns>
            The hit tab index. -1 if no tab was found.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnMouseLeave(System.EventArgs)">
            <summary>
            Called by the tab control when mouse leave occured.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.CancelTabDrag">
            <summary>
            Cancels the current tab drag-and-drop.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the tab control when a mouse down occurs.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.IsMovingTab">
            <summary>
            Specifies whether or not a tab is currently being moved.
            </summary>
            <returns>true if moving, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnDragMoveTabs(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called as the tab is dragged.
            </summary>
            <remarks>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance.</param>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the tab control when a mouse up occurs.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnGotFocus(System.EventArgs)">
            <summary>
            Called by the tab control when focussed.
            </summary>
            <param name="e">The EventArgs instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnLostFocus(System.EventArgs)">
            <summary>
            Called by the tab control when lost focus.
            </summary>
            <param name="e">The EventArgs instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.MoveTabs(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves tabs in groups from one position to other.
            </summary>
            <param name="nTabsToMoveFrom">The begining position of the group.</param>
            <param name="nCount">The number of tabs to move.</param>
            <param name="nMoveToIndex">The destination position.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.ResetHotTracking">
            <summary>
            Reset hot tracking state, if any.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.NeedLayout">
            <summary>
            Specifies whether or not layout is required.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.Bounds">
            <summary>
            See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.Bounds"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.ScrollingSupported">
            <summary>
            See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.ScrollingSupported"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.CanScrollLeft">
            <summary>
            See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.CanScrollLeft"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.CanScrollRight">
            <summary>
            See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.CanScrollRight"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.NeedMouseMove">
            <summary>
            See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.NeedMouseMove"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.TabPanelData">
            <summary>
            See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.TabPanelData"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.SelectedIndexOnDragStart">
            <summary>
            Gets the selected tab index when drag and drop started.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.DragIgnoreRect">
            <summary>
            The rectangular region where drop should not be performed during drag and drop.
            </summary>
            <remarks>
            This region is in transformed co-ordinates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.Moving">
            <summary>
            Indicates whether the user is moving tabs via a drag-and-drop.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.#ctor(Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer"/> class.
            </summary>
            <param name="parent">The <see cref="T:Syncfusion.Windows.Forms.Tools.ITabControl"/> parent.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.TabPanel_PropertyChanged(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.TabPanelPropertyChangedEventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.TabPanel_PropertyChanged(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.TabPanelPropertyChangedEventArgs)"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.Scroll(Syncfusion.Windows.Forms.Tools.ScrollIncrement,Syncfusion.Windows.Forms.Tools.ScrollDirection)">
            <summary>
            Scrolls by the specified increment in the specified direction.
            </summary>
            <param name="siIncrement">The scroll increment.</param>
            <param name="sdPhysicalDirection">The direction.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.ValidateScrollOffset(System.Boolean,System.Boolean)">
            <summary>
            Validates the current scroll offset, recalculating it, if necessary.
            </summary>
            <param name="makeSelectedTabVisible">true to make the selected tab visible.</param>
            <param name="invalidate">true to force a repaint if recalculation is necessary.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.OnBoundsAffected">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnBoundsAffected"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.OnSelectionChanged(System.Int32,System.Int32)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.OnSelectionChanged(System.Int32,System.Int32)"/>
            </summary>
            <param name="previousIndex"></param>
            <param name="currentIndex"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.ComputeTabPositions(System.Drawing.Graphics)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabPanelRenderer.ComputeTabPositions(System.Drawing.Graphics)"/>
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.GetPreferredSize(System.Drawing.Graphics)">
            <summary>
            Gets the preferred size.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object.</param>
            <returns>The preferred size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.GetPreferredSize(System.Drawing.Graphics,System.Drawing.SizeF@)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.GetPreferredSize(System.Drawing.Graphics,System.Drawing.SizeF@)"/>.
            </summary>
            <param name="g"></param>
            <param name="preferredSize"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.PadX">
            <summary>
            Specifies the padding to use to the left of the tabs while calculating the tab positions.
            </summary>
            <value>A float value representing the horizontal padding.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.PadY">
            <summary>
            Specifies the padding to use the top of the tabs while calculating the tab positions.
            </summary>
            <value>A float value representing the vertical padding.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.ScrollOffsetX">
            <summary>
            Specifies the current scroll position.
            </summary>
            <remarks>A float value representing the scroll offset.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.ScrollingSupported">
            <summary>
            Specifies whether or not scrolling is supported by this renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.CanScrollLeft">
            <summary>
            Specifies whether or not the tab can scroll left based on the current dimensions.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SingleLineTabPanelRenderer.CanScrollRight">
            <summary>
            Specifies whether or not the tab can scroll right based on the current dimensions.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DrawItemCallback">
            <summary>
            Represents the method that will be called by <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/> implementation to allow custom drawing.
            </summary>
            <param name="eventArgs">A <see cref="T:Syncfusion.Windows.Forms.Tools.DrawTabEventArgs"/> instance.</param>
            <returns>true to indicate custom drawing was done; false otherwise.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SelectedIndexChangingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.TabControlAdv.SelectedIndexChanging"/> event.
            </summary>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.SelectedIndexChangingEventArgs"/> instance.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabUtils">
            <summary>
            Class that encloses certain utility methods to be used by tab renderer implmentations.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabUtils.ApplyTransform(System.Drawing.Graphics,System.Windows.Forms.TabAlignment,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Transforms (or removes the transform) a given rect, based on alignment, such that
            drawing code written for the TabAlignment.Top logic can be reused for all other alignments.
            </summary>
            <param name="g">The associated Graphics object when the paint event occurs.</param>
            <param name="align">The current alignement.</param>
            <param name="rect">The RectangleF that is to be transformed.</param>
            <param name="apply">true to transform; false to remove the transform.</param>
            <returns>The transformed rectangle, if apply is true; or the rectangle on which
            the reverse transform is applied.</returns>
            <remarks>
            Use this in conjunction with the TabRendererBase.ApplyTransform in your custom
            implementation of TabRendererBase.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MultilineTabPanelRenderer">
            <summary>
            A <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer"/> instance
            that implements the multi-line tab mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultilineTabPanelRenderer.#ctor(Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.MultilineTabPanelRenderer"/> class.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultilineTabPanelRenderer.GetPreferredSize(System.Drawing.Graphics,System.Drawing.SizeF@)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer.GetPreferredSize(System.Drawing.Graphics,System.Drawing.SizeF@)"/>.
            </summary>
            <param name="g"></param>
            <param name="preferredSize"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.MultilineTabPanelRenderer.InvalidateTabs(System.Int32,System.Int32)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.MultilineTabPanelRenderer.GetMinimumWidth(System.Drawing.Graphics)">
            <summary>
            Get the minimum width required in the tab panel to show all the tabs.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> instance.</param>
            <returns>The minimum width in float.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MultilineTabPanelRenderer.ComputeTabPositions(System.Drawing.Graphics)">
            <summary>
            Computes the tab positions given the Graphics context.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context.</param>
            <remarks>
            <para>Called by the Layout to calculate the tab positions.</para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties">
            <summary>
            Specifies certain default properties for a tab renderer used by TabControlAdv.
            </summary>
            <remarks>
            Use this class only when you are deriving from TabRendererBase to create a custom
            tab renderer.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties.DefaultTabPanelBackgroundColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Returns the default back color for the panel.
            </summary>
            <param name="panelData">The tab panel data.</param>
            <param name="tabControl">The tab control.</param>
            <returns>A Color value.</returns>
            <remarks>
            This implementation returns the tab control's BackColor.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties.DefaultTabForeColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Returns the default fore color for the tabs.
            </summary>
            <param name="panelData">The tab panel data.</param>
            <param name="tabControl">The tab control.</param>
            <returns>A Color value.</returns>
            <remarks>
            This implementation returns SystemColors.WindowText.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties.DefaultActiveTabColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Returns the defualt active tab's Color.
            </summary>
            <param name="panelData">The tab panel data.</param>
            <param name="tabControl">The tab control.</param>
            <returns>A Color value.</returns>
            <remarks>
            This implementation returns the tab control's BackColor.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties.DefaultInactiveTabColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Returns the defualt inactive tab's Color.
            </summary>
            <param name="panelData">The tab panel data.</param>
            <param name="tabControl">The tab control.</param>
            <returns>A Color value.</returns>
            <remarks>
            This implementation returns the tab control's BackColor.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties.DefaultFixedSingleBorderColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Returns the defualt single border Color.
            </summary>
            <param name="panelData">The tab panel data.</param>
            <param name="tabControl">The tab control.</param>
            <returns>A Color value.</returns>
            <remarks>
            This implementation returns a system color.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties.DefaultTabPanelFont(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Returns the defualt tab panel font.
            </summary>
            <param name="panelData">The tab panel data.</param>
            <param name="tabControl">The tab control.</param>
            <returns>A Color value.</returns>
            <remarks>
            This implementation returns the tab control's Font.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties.DefaultInactiveTabFont(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Returns the defualt tab panel font.
            </summary>
            <param name="panelData">The tab panel data.</param>
            <param name="tabControl">The tab control.</param>
            <returns>A Font value.</returns>
            <remarks>
            If the panelData's Font is not null, it is returned. If not, the default tab panel font is
            returned.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties.DefaultActiveTabFont(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Returns the defualt tab panel font.
            </summary>
            <param name="panelData">The tab panel data.</param>
            <param name="tabControl">The tab control.</param>
            <returns>A Font value.</returns>
            <remarks>
            Returns the default inactive tab font, after making it bold.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties.GetOverlapSize(System.Drawing.SizeF)">
            <summary>
            Specfies the overlap size.
            </summary>
            <returns>The overlap size.</returns>
            <remarks>This implementation returns (0, 0).</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties.OnPaintPanelBackground(Syncfusion.Windows.Forms.Tools.ITabControl,System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws the background of the tab panel
            </summary>
            <param name="tabControl">The parent <see cref="T:Syncfusion.Windows.Forms.Tools.ITabControl"/> implementation.</param>
            <param name="g">The Graphics into which to draw.</param>
            <param name="bgColor">The background color.</param>
            <param name="bounds">The rectangular bounds of the tab panel.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties.IsBackgroundSolid">
            <summary>
            Specifies whether or not the bg color is solid.
            </summary>
            <returns>true if solid; false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties.DrawLeftToRight">
            <summary>
            Returns true to specify drawing from left to right.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabUIDefaultProperties.ShowInDesignMode">
            <summary>
            Specifies whether this tab type should be made available in the design-time property grid for the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabRendererBase">
            <summary>
            A default <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/> implementation
            from which your custom tab renderers could derive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.#ctor(Syncfusion.Windows.Forms.Tools.ITabControl,Syncfusion.Windows.Forms.Tools.ITabPanelRenderer)">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.TabRendererBase"/>.
            </summary>
            <param name="parent">The <see cref="T:Syncfusion.Windows.Forms.Tools.ITabControl"/> instance.</param>
            <param name="panelRenderer">The parent <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer"/> instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.TabPropertyChanged">
            <summary>
            See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabRenderer.TabPropertyChanged"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.GetTextPosition(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Gets the position where the text should be drawn given a layout rect and the Graphics context.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> instance.</param>
            <param name="text">The text to draw.</param>
            <param name="font">The font with which to draw.</param>
            <param name="rectLayout">The layout rectangle.</param>
            <param name="stringformat">The <see cref="T:System.Drawing.StringFormat"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawFocusRect(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws the focus rectangle in the specified rectangle.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> instance.</param>
            <param name="focusRect">The layout rectangle.</param>
            <param name="fore">The forecolor with which to draw.</param>
            <param name="back">The backcolor with which to draw.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawTextAndImage(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Draws the text and image of the tab, given the context.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> instance.</param>
            <param name="rectTextAndImage">The layout rectangle.</param>
            <param name="e">The object that has information regarding this tab and paint event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawText(System.Drawing.Graphics,System.Drawing.RectangleF,System.String,System.Drawing.StringFormat,Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Draws the text of the tab, given the context.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> instance.</param>
            <param name="rectText">The layout rectangle.</param>
            <param name="text">The text to draw.</param>
            <param name="format">The <see cref="T:System.Drawing.StringFormat"/> with which to draw.</param>
            <param name="e">The object that has information regarding this tab and paint event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabRenderer.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawBackground(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Draws the background of the tab.
            </summary>
            <param name="drawItemInfo">The object that has information regarding this tab and paint event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawBorders(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Draws the borders of the tab.
            </summary>
            <param name="drawItemInfo">The object that has information regarding this tab and paint event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawInterior(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Draws the interior of the tab.
            </summary>
            <param name="drawItemInfo">The object that has information regarding this tab and paint event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.ApplyTransform(System.Drawing.Graphics)">
            <summary>
            Rotates/scales the provided graphics object by an angle based on the current alignment
            such that you can use drawing code that assumes Top alignment for a tab.
            </summary>
            <param name="g">The Graphics object to apply transform on.</param>
            <remarks>
            You should normally use this in the DrawInterior, DrawBackground, DrawBorders
            overrides the transform the incoming Graphics object.
            Use this in conjunction with the TabUtils.ApplyTransform to transform
            the incoming bounds of the above overrides.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.GetRedrawBounds">
            <summary>
            See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabRenderer.GetRedrawBounds"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.GetForeColor">
            <summary>
            Gets the fore color with which to draw the tab text.
            </summary>
            <returns>Returns the fore color.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.GetCurrentBounds">
            <summary>
            Gets the current drawing bounds.
            </summary>
            <returns>The bounds as a rectangle.</returns>
            <remarks>
            <para>
            If this is the selected tab, then this method adds the overlapped size to the
            bounds returned by <see cref="P:Syncfusion.Windows.Forms.Tools.ITabRenderer.Bounds"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.GetOverlapSize(System.Drawing.SizeF)">
            <summary>
            Gets the overlapped size, if any, of the tabs.
            </summary>
            <returns>The overlap size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.HitTest(System.Drawing.PointF)">
            <summary>
            Lets you know whether the specified position is within the current bounds.
            </summary>
            <param name="mousePosition">The mouse position to test.</param>
            <returns>true if hit; false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabRendererBase.TabData">
            <summary>
            Gets or Sets the <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/> associated with this tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabRendererBase.Visible">
            <summary>
            Specifies whether or not this tab should be drawn visible
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabRendererBase.HotTrack">
            <summary>
            Gets or Sets a value indicating hot tracking is on.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawItemCallback">
            <summary>
            See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabRenderer.DrawItemCallback"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabRendererBase.TabControl">
            <summary>
            Gets the parent <see cref="T:Syncfusion.Windows.Forms.Tools.ITabControl"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabRendererBase.Bounds">
            <summary>
            See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabRenderer.Bounds"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabRendererBase.TabAlignment">
            <summary>
            See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabRenderer.TabAlignment"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabRendererBase.CFnGetTabFont">
            <summary>
            See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabRenderer.GetPreferredSize(System.Drawing.Graphics)"/>.
            </summary>
            
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabControlAdv">
            <summary>
            Manages a set of tab pages.
            </summary>
            <remarks>
            <para>A TabControlAdv contains tab pages, which are represented
            by <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdv"/> objects that you add through the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabPages"/> property.</para>
            <para>It provides a set of pre-built tab types(<see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property) with different look
            and feel, allows you to align the tabs to either of the four sides
            of the Control (<see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.Alignment"/> property), can be used in a singleline or multiline mode(<see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.Multiline"/> property)
            and provides a broad set of properties to affect its appearance and behavior.</para>
            <para>
            It also provides you a simple event based mechanism (<see cref="E:Syncfusion.Windows.Forms.Tools.TabControlAdv.DrawItem"/> event) to customize
            the drawing of the tabs.
            </para>
            <para>
            To enable themes support in XP turn on the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ThemesEnabled"/> property.
            </para>
            </remarks>
            <example>
            The following example uses the Visual Studio .NET Windows Forms Designer to
            create a TabControlAdv with three tab pages. Each tab page contains several controls.
            <code lang="C#">
            public class Form1 : System.Windows.Forms.Form
            {
                private Syncfusion.Windows.Forms.Tools.TabControlAdv TabControlAdv1;
                private System.Windows.Forms.Label tab2label1;
                private System.Windows.Forms.Button tab3Button;
                private System.Windows.Forms.MonthCalendar tab3monthCalendar1;
                private System.Windows.Forms.DateTimePicker tab3dateTimePicker1;
                private System.Windows.Forms.Label tab3label;
                private System.Windows.Forms.Label tab2label2;
                private System.Windows.Forms.TextBox tab2textBox1;
                private System.Windows.Forms.ListBox tab1listBox1;
                private System.Windows.Forms.ComboBox tab1comboBox1;
            
                private System.Windows.Forms.Label tab1label1;
                private Syncfusion.Windows.Forms.Tools.TabPageAdv tab1;
                private Syncfusion.Windows.Forms.Tools.TabPageAdv tab3;
                private Syncfusion.Windows.Forms.Tools.TabPageAdv tab2;
                private System.ComponentModel.IContainer components;
            
                    public Form1()
                    {
                        //
                        // Required for Windows Form Designer support
                        //
                        InitializeComponent();
                    }
                    private void InitializeComponent()
                        {
                            this.components = new System.ComponentModel.Container();
                            this.tab2label1 = new System.Windows.Forms.Label();
                            this.tab1 = new Syncfusion.Tools.Windows.Forms.Tab.TabPageAdv();
                            this.tab1listBox1 = new System.Windows.Forms.ListBox();
                            this.tab1comboBox1 = new System.Windows.Forms.ComboBox();
                            this.tab1label1 = new System.Windows.Forms.Label();
                            this.tab3 = new Syncfusion.Tools.Windows.Forms.Tab.TabPageAdv();
                            this.tab3Button = new System.Windows.Forms.Button();
                            this.tab3monthCalendar1 = new System.Windows.Forms.MonthCalendar();
                            this.tab3dateTimePicker1 = new System.Windows.Forms.DateTimePicker();
                            this.tab3label = new System.Windows.Forms.Label();
                            this.tab2 = new Syncfusion.Tools.Windows.Forms.Tab.TabPageAdv();
                            this.tab2label2 = new System.Windows.Forms.Label();
                            this.tab2textBox1 = new System.Windows.Forms.TextBox();
                            this.TabControlAdv1 = new Syncfusion.Tools.Windows.Forms.Tab.TabControlAdv();
                            this.tab1.SuspendLayout();
                            this.tab3.SuspendLayout();
                            this.tab2.SuspendLayout();
                            this.TabControlAdv1.SuspendLayout();
                            this.SuspendLayout();
                            //
                            // tab2label1
                            //
                            this.tab2label1.Dock = System.Windows.Forms.DockStyle.Top;
                            this.tab2label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
                            this.tab2label1.Name = "tab2label1";
                            this.tab2label1.Size = new System.Drawing.Size(373, 48);
                            this.tab2label1.TabIndex = 0;
                            this.tab2label1.Text = "Tab2";
                            this.tab2label1.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
                            this.tab2label1.Paint += new System.Windows.Forms.PaintEventHandler(this.TabPageAdv1_Paint);
                            //
                            // tab1
                            //
                            this.tab1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                            this.tab1.Controls.AddRange(new System.Windows.Forms.Control[] {
                                                                                            this.tab1listBox1,
                                                                                            this.tab1comboBox1,
                                                                                            this.tab1label1});
                            this.tab1.Location = new System.Drawing.Point(1, 29);
                            this.tab1.Name = "tab1";
                            this.tab1.Size = new System.Drawing.Size(373, 257);
                            this.tab1.TabIndex = 0;
                            this.tab1.Text = "Tab 1";
                            this.tab1.ToolTipText = "0asdfasdf";
                            //
                            // tab1listBox1
                            //
                            this.tab1listBox1.Items.AddRange(new object[] {
                                                                            "Item 1",
                                                                            "Item 2",
                                                                            "Item 3"});
                            this.tab1listBox1.Location = new System.Drawing.Point(8, 88);
                            this.tab1listBox1.Name = "tab1listBox1";
                            this.tab1listBox1.Size = new System.Drawing.Size(192, 147);
                            this.tab1listBox1.TabIndex = 2;
                            //
                            // tab1comboBox1
                            //
                            this.tab1comboBox1.DropDownWidth = 192;
                            this.tab1comboBox1.Location = new System.Drawing.Point(8, 56);
                            this.tab1comboBox1.Name = "tab1comboBox1";
                            this.tab1comboBox1.Size = new System.Drawing.Size(192, 21);
                            this.tab1comboBox1.TabIndex = 1;
                            this.tab1comboBox1.Text = "comboBox1";
                            //
                            // tab1label1
                            //
                            this.tab1label1.Dock = System.Windows.Forms.DockStyle.Top;
                            this.tab1label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
                            this.tab1label1.Name = "tab1label1";
                            this.tab1label1.Size = new System.Drawing.Size(371, 48);
                            this.tab1label1.TabIndex = 0;
                            this.tab1label1.Text = "Tab Page 1";
                            this.tab1label1.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
                            //
                            // tab3
                            //
                            this.tab3.Controls.AddRange(new System.Windows.Forms.Control[] {
                                                                                            this.tab3Button,
                                                                                            this.tab3monthCalendar1,
                                                                                            this.tab3dateTimePicker1,
                                                                                            this.tab3label});
                            this.tab3.Location = new System.Drawing.Point(1, 29);
                            this.tab3.Name = "tab3";
                            this.tab3.Size = new System.Drawing.Size(373, 257);
                            this.tab3.TabIndex = 1;
                            this.tab3.Text = "Tab 3";
                            this.tab3.ToolTipText = "2asdfasdf";
                            this.tab3.Layout += new System.Windows.Forms.LayoutEventHandler(this.TabPageAdv2_Layout);
                            //
                            // tab3Button
                            //
                            this.tab3Button.Location = new System.Drawing.Point(264, 72);
                            this.tab3Button.Name = "tab3Button";
                            this.tab3Button.Size = new System.Drawing.Size(72, 24);
                            this.tab3Button.TabIndex = 3;
                            this.tab3Button.Text = "button1";
                            this.tab3Button.Click += new System.EventHandler(this.button1_Click);
                            //
                            // tab3monthCalendar1
                            //
                            this.tab3monthCalendar1.Location = new System.Drawing.Point(16, 96);
                            this.tab3monthCalendar1.Name = "tab3monthCalendar1";
                            this.tab3monthCalendar1.TabIndex = 2;
                            //
                            // tab3dateTimePicker1
                            //
                            this.tab3dateTimePicker1.Location = new System.Drawing.Point(8, 64);
                            this.tab3dateTimePicker1.Name = "tab3dateTimePicker1";
                            this.tab3dateTimePicker1.TabIndex = 1;
                            //
                            // tab3label
                            //
                            this.tab3label.Dock = System.Windows.Forms.DockStyle.Top;
                            this.tab3label.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
                            this.tab3label.Name = "tab3label";
                            this.tab3label.Size = new System.Drawing.Size(373, 48);
                            this.tab3label.TabIndex = 0;
                            this.tab3label.Text = "Tab3";
                            this.tab3label.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
                            //
                            // tab2
                            //
                            this.tab2.Controls.AddRange(new System.Windows.Forms.Control[] {
                                                                                            this.tab2label2,
                                                                                            this.tab2textBox1,
                                                                                            this.tab2label1});
                            this.tab2.Location = new System.Drawing.Point(1, 29);
                            this.tab2.Name = "tab2";
                            this.tab2.Size = new System.Drawing.Size(373, 257);
                            this.tab2.TabIndex = 2;
                            this.tab2.Text = "Tab2";
                            this.tab2.ToolTipText = "1asdfasdfasd";
                            //
                            // tab2label2
                            //
                            this.tab2label2.Location = new System.Drawing.Point(8, 96);
                            this.tab2label2.Name = "tab2label2";
                            this.tab2label2.Size = new System.Drawing.Size(112, 16);
                            this.tab2label2.TabIndex = 2;
                            this.tab2label2.Text = "Text Entry:";
                            //
                            // tab2textBox1
                            //
                            this.tab2textBox1.Location = new System.Drawing.Point(8, 120);
                            this.tab2textBox1.Multiline = true;
                            this.tab2textBox1.Name = "tab2textBox1";
                            this.tab2textBox1.Size = new System.Drawing.Size(368, 80);
                            this.tab2textBox1.TabIndex = 1;
                            this.tab2textBox1.Text = "textBox1";
                            //
                            // TabControlAdv1
                            //
                            this.TabControlAdv1.Anchor = (((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                                | System.Windows.Forms.AnchorStyles.Left)
                                | System.Windows.Forms.AnchorStyles.Right);
                            this.TabControlAdv1.BackColor = System.Drawing.SystemColors.ActiveBorder;
                            this.TabControlAdv1.Controls.AddRange(new System.Windows.Forms.Control[] {
                                                                                                        this.tab3,
                                                                                                        this.tab2,
                                                                                                        this.tab1});
                            this.TabControlAdv1.Cursor = System.Windows.Forms.Cursors.Default;
                            this.TabControlAdv1.HotTrack = true;
                            this.TabControlAdv1.ImageList = this.imageList1;
                            this.TabControlAdv1.ItemSize = new System.Drawing.Size(80, 30);
                            this.TabControlAdv1.Location = new System.Drawing.Point(40, 16);
                            this.TabControlAdv1.Name = "TabControlAdv1";
                            this.TabControlAdv1.ShowToolTips = true;
                            this.TabControlAdv1.Size = new System.Drawing.Size(376, 288);
                            this.TabControlAdv1.TabGap = 20;
                            this.TabControlAdv1.TabIndex = 4;
                            this.TabControlAdv1.TabStyle = typeof(Syncfusion.Tools.Windows.Forms.Tab.TabRenderer2D);
                            this.TabControlAdv1.TextAlignment = System.Drawing.StringAlignment.Near;
                            this.TabControlAdv1.UserMoveTabs = true;
                            this.TabControlAdv1.VSLikeScrollButton = true;
                            //
                            // Form1
                            //
                            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
                            this.ClientSize = new System.Drawing.Size(688, 309);
                            this.Controls.AddRange(new System.Windows.Forms.Control[] {
                                                                                        this.TabControlAdv1});
                            this.Name = "Form1";
                            this.Text = "Form1";
                            this.tab1.ResumeLayout(false);
                            this.tab3.ResumeLayout(false);
                            this.tab2.ResumeLayout(false);
                            this.TabControlAdv1.ResumeLayout(false);
                            this.ResumeLayout(false);
            
                        }
                    }
            </code>
            <code lang="VB">
            Private Function Form1() As Public
            '
            ' Required for Windows Form Designer support
            '
            InitializeComponent()
            End Function
            
            Private  Sub InitializeComponent()
            Me.components = New System.ComponentModel.Container()
            Me.tab2label1 = New System.Windows.Forms.Label()
            Me.tab1 = New Syncfusion.Tools.Windows.Forms.Tab.TabPageAdv()
            Me.tab1listBox1 = New System.Windows.Forms.ListBox()
            Me.tab1comboBox1 = New System.Windows.Forms.ComboBox()
            Me.tab1label1 = New System.Windows.Forms.Label()
            Me.tab3 = New Syncfusion.Tools.Windows.Forms.Tab.TabPageAdv()
            Me.tab3Button = New System.Windows.Forms.Button()
            Me.tab3monthCalendar1 = New System.Windows.Forms.MonthCalendar()
            Me.tab3dateTimePicker1 = New System.Windows.Forms.DateTimePicker()
            Me.tab3label = New System.Windows.Forms.Label()
            Me.tab2 = New Syncfusion.Tools.Windows.Forms.Tab.TabPageAdv()
            Me.tab2label2 = New System.Windows.Forms.Label()
            Me.tab2textBox1 = New System.Windows.Forms.TextBox()
            Me.TabControlAdv1 = New Syncfusion.Tools.Windows.Forms.Tab.TabControlAdv()
            Me.tab1.SuspendLayout()
            Me.tab3.SuspendLayout()
            Me.tab2.SuspendLayout()
            Me.TabControlAdv1.SuspendLayout()
            Me.SuspendLayout()
            
            '
            ' tab2label1
            '
            Me.tab2label1.Dock = System.Windows.Forms.DockStyle.Top
            Me.tab2label1.Font = New System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, (CType((0), System.Byte)))
            Me.tab2label1.Name = "tab2label1"
            Me.tab2label1.Size = New System.Drawing.Size(373, 48)
            Me.tab2label1.TabIndex = 0
            Me.tab2label1.Text = "Tab2"
            Me.tab2label1.TextAlign = System.Drawing.ContentAlignment.MiddleCenter
            Me.tab2label1.Paint += New System.Windows.Forms.PaintEventHandler(Me.TabPageAdv1_Paint)
            
            '
            ' tab1
            '
            Me.tab1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
            Me.tab1.Controls.AddRange(New System.Windows.Forms.Control()
            {Me.tab1listBox1,Me.tab1comboBox1,Me.tab1label1})
            Me.tab1.Location = New System.Drawing.Point(1, 29)
            Me.tab1.Name = "tab1"
            Me.tab1.Size = New System.Drawing.Size(373, 257)
            Me.tab1.TabIndex = 0
            Me.tab1.Text = "Tab 1"
            Me.tab1.ToolTipText = "0asdfasdf"
            '
            ' tab1listBox1
            '
            Me.tab1listBox1.Items.AddRange(New System.Windows.Forms.Control()
            {Me.tab1listBox1,Me.tab1comboBox1,Me.tab1label1})
            Dim Object() As Me.tab1listBox1.Items.AddRange(New string()
            {
            "Item 1",
            "Item 2",
            "Item 3"
            })
            Me.tab1listBox1.Location = New System.Drawing.Point(8, 88)
            Me.tab1listBox1.Name = "tab1listBox1"
            Me.tab1listBox1.Size = New System.Drawing.Size(192, 147)
            Me.tab1listBox1.TabIndex = 2
            '
            ' tab1comboBox1
            '
            Me.tab1comboBox1.DropDownWidth = 192
            Me.tab1comboBox1.Location = New System.Drawing.Point(8, 56)
            Me.tab1comboBox1.Name = "tab1comboBox1"
            Me.tab1comboBox1.Size = New System.Drawing.Size(192, 21)
            Me.tab1comboBox1.TabIndex = 1
            Me.tab1comboBox1.Text = "comboBox1"
            '
            ' tab1label1
            '
            Me.tab1label1.Dock = System.Windows.Forms.DockStyle.Top
            Me.tab1label1.Font = New System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, (CType((0), System.Byte)))
            Me.tab1label1.Name = "tab1label1"
            Me.tab1label1.Size = New System.Drawing.Size(371, 48)
            Me.tab1label1.TabIndex = 0
            Me.tab1label1.Text = "Tab Page 1"
            Me.tab1label1.TextAlign = System.Drawing.ContentAlignment.MiddleCenter
            
            Me.tab3.Controls.AddRange(New System.Windows.Forms.Control()
            {Me.tab3Button,Me.tab3monthCalendar1,Me.tab3dateTimePicker1,Me.tab3label})
            Me.tab3.Location = New System.Drawing.Point(1, 29)
            Me.tab3.Name = "tab3"
            Me.tab3.Size = New System.Drawing.Size(373, 257)
            Me.tab3.TabIndex = 1
            Me.tab3.Text = "Tab 3"
            Me.tab3.ToolTipText = "2asdfasdf"
            Me.tab3.Lay+= New System.Windows.Forms.LayoutEventHandler(Me.TabPageAdv2_Layout)
            '
            ' tab3Button
            '
            Me.tab3Button.Location = New System.Drawing.Point(264, 72)
            Me.tab3Button.Name = "tab3Button"
            Me.tab3Button.Size = New System.Drawing.Size(72, 24)
            Me.tab3Button.TabIndex = 3
            Me.tab3Button.Text = "button1"
            Me.tab3Button.Click += New System.EventHandler(Me.button1_Click)
            '
            ' tab3monthCalendar1
            '
            Me.tab3monthCalendar1.Location = New System.Drawing.Point(16, 96)
            Me.tab3monthCalendar1.Name = "tab3monthCalendar1"
            Me.tab3monthCalendar1.TabIndex = 2
            '
            ' tab3dateTimePicker1
            '
            Me.tab3dateTimePicker1.Location = New System.Drawing.Point(8, 64)
            Me.tab3dateTimePicker1.Name = "tab3dateTimePicker1"
            Me.tab3dateTimePicker1.TabIndex = 1
            '
            ' tab3label
            '
            Me.tab3label.Dock = System.Windows.Forms.DockStyle.Top
            Me.tab3label.Font = New System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, (CType((0), System.Byte)))
            Me.tab3label.Name = "tab3label"
            Me.tab3label.Size = New System.Drawing.Size(373, 48)
            Me.tab3label.TabIndex = 0
            Me.tab3label.Text = "Tab3"
            Me.tab3label.TextAlign = System.Drawing.ContentAlignment.MiddleCenter
            '
            ' tab2
            '
            Me.tab2.Controls.AddRange(New System.Windows.Forms.Control()
            {Me.tab2label2,Me.tab2textBox1,Me.tab2label1})
                Me.tab2.Location = New System.Drawing.Point(1, 29)
            Me.tab2.Name = "tab2"
            Me.tab2.Size = New System.Drawing.Size(373, 257)
            Me.tab2.TabIndex = 2
            Me.tab2.Text = "Tab2"
            Me.tab2.ToolTipText = "1asdfasdfasd"
            '
            ' tab2label2
            '
            Me.tab2label2.Location = New System.Drawing.Point(8, 96)
            Me.tab2label2.Name = "tab2label2"
            Me.tab2label2.Size = New System.Drawing.Size(112, 16)
            Me.tab2label2.TabIndex = 2
            Me.tab2label2.Text = "Text Entry:"
            '
            ' tab2textBox1
            '
            Me.tab2textBox1.Location = New System.Drawing.Point(8, 120)
            Me.tab2textBox1.Multiline = True
            Me.tab2textBox1.Name = "tab2textBox1"
            Me.tab2textBox1.Size = New System.Drawing.Size(368, 80)
            Me.tab2textBox1.TabIndex = 1
            Me.tab2textBox1.Text = "textBox1"
            '
            ' TabControlAdv1
            '
            Me.TabControlAdv1.Anchor = (((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom)  _
            Or System.Windows.Forms.AnchorStyles.Left)  _
            Or System.Windows.Forms.AnchorStyles.Right)
            Me.TabControlAdv1.Cursor = System.Windows.Forms.Cursors.Default
            Me.TabControlAdv1.HotTrack = True
            Me.TabControlAdv1.ImageList = Me.imageList1
            Me.TabControlAdv1.ItemSize = New System.Drawing.Size(80, 30)
            Me.TabControlAdv1.Location = New System.Drawing.Point(40, 16)
            Me.TabControlAdv1.Name = "TabControlAdv1"
            Me.TabControlAdv1.ShowToolTips = True
            Me.TabControlAdv1.Size = New System.Drawing.Size(376, 288)
            Me.TabControlAdv1.TabGap = 20
            Me.TabControlAdv1.TabIndex = 4
            Me.TabControlAdv1.TabStyle = Type.GetType(Syncfusion.Tools.Windows.Forms.Tab.TabRenderer2D)
            Me.TabControlAdv1.TextAlignment = System.Drawing.StringAlignment.Near
            Me.TabControlAdv1.UserMoveTabs = True
            Me.TabControlAdv1.VSLikeScrollButton = True
            '
            ' Form1
            '
            Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
            Me.ClientSize = New System.Drawing.Size(688, 309)
            Me.Controls.AddRange(New System.Windows.Forms.Control()
            {Me.TabControlAdv1})
                Me.Name = "Form1"
            Me.Text = "Form1"
            Me.tab1.ResumeLayout(False)
            Me.tab3.ResumeLayout(False)
            Me.tab2.ResumeLayout(False)
            Me.TabControlAdv1.ResumeLayout(False)
            Me.ResumeLayout(False)
            End Sub
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.SetNeedLayout(System.Boolean)">
            <summary>
            Will force laying out the tab control elements within the next Paint Message handler.
            </summary>
            <param name="value">true to force; false to prevent layout.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.#ctor">
            <summary>
            Initializes a new instance of the TabControl class.
            </summary>
            <example>
             The following example creates a TabControlAdv with one TabPageAdv object. 
             The ctor constructor instantiates tabControl1.
             Use the Syncfusion.Windows.Forms.Tools namespace for this example.
            <code lang="C#">
            public Form1()
            {
            	this.tabPage1 = new TabPageAdv();
            	// Invokes the TabControlAdv() constructor to create the tabControl1 object.
            	this.tabControl1 = new TabControlAdv();
            	
            	this.tabControl1.Controls.Add(tabPage1);
            	this.Controls.Add(tabControl1);
            }
            </code>
            <code lang="VB">
            Public Sub New()
            	Me.tabPage1 = New TabPageAdv()
            	' Invokes the TabControlAdv() constructor to create the tabControl1 object.
            	Me.tabControl1 = New TabControlAdv()
            	Me.tabControl1.Controls.Add(tabPage1)
            	Me.Controls.Add(tabControl1)
            End Sub 'New
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.Init">
            <summary>
            Called by the constructor to initialize default properties of the tab control.
            </summary>
            <remarks>
            Advanced method. You do not have to call this directly.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.RemoveAll">
            <summary>
            Removes all the tab pages and additional controls 
            from this tab control.
            </summary>
            <remarks>All controls are removed through the Controls property.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.BringSelectedTabToView">
            <summary>
            Will bring the selected tab to view, if scrolled out of view.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ValidateSelectedIndex">
            <summary>
            Validates that the current selected tab is not disbaled or invisible.
            </summary>
            <remarks>
            This method ensures that the current selected tab is not disabled or invisible. If so,
            it would reset the SelectedIndex to a new tab page that is selectable. If no selectable
            tab pages are found, then this method will do nothing.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ShouldSerializeItemSize">
            <summary>
            Specifies whether or not the current value of the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ItemSize"/> property is to be serialized.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ResetItemSize">
            <summary>
            Reset the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ItemSize"/> property to its default value.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ShouldSerializePadding">
            <summary>
            Specifies whether or not the current value of the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.Padding"/> property is to be serialized.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ShouldSerializeTabPanelBackColor">
            <summary>
            Specifies whether or not the current value of the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabPanelBackColor"/> property is to be serialized.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ResetTabPanelBackColor">
            <summary>
            Reset the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabPanelBackColor"/> property to its default value.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ResetFont">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.ResetFont"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ShouldSerializeActiveTabFont">
            <summary>
            Specifies whether or not the current value of the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ActiveTabFont"/> property is to be serialized.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ResetActiveTabFont">
            <summary>
            Reset the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ActiveTabFont"/> property to its default value.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ShouldSerializeActiveTabColor">
            <summary>
            Specifies whether or not the current value of the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ActiveTabColor"/> property is to be serialized.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ResetActiveTabColor">
            <summary>
            Reset the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ActiveTabColor"/> property to its default value.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ShouldSerializeInactiveTabColor">
            <summary>
            Specifies whether or not the current value of the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ActiveTabColor"/> property is to be serialized.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ResetInactiveTabColor">
            <summary>
            Reset the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.InactiveTabColor"/> property to its default value.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.TabControlAdv.SelectedIndexChanged"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnSelectedIndexChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnSelectedIndexChanged 
            in a derived class, be sure to call the base class's 
            OnSelectedIndexChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnSelectedIndexChanging(Syncfusion.Windows.Forms.Tools.SelectedIndexChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.TabControlAdv.SelectedIndexChanging"/> event.
            </summary>
            <param name="e">An <see cref="E:Syncfusion.Windows.Forms.Tools.TabControlAdv.SelectedIndexChanging"/> instance that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnSelectedIndexChanging method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnSelectedIndexChanging 
            in a derived class, be sure to call the base class's 
            OnSelectedIndexChanging method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.UpdateSelectedTabPage(System.Boolean)">
            <summary>
            Advanced method to aid customization.
            </summary>
            <param name="setBounds">Specifies if the bounds should also be set on the tab page.</param>
            <remarks>
            <para>
            This method is called from <see cref="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.Layout(System.Drawing.Graphics,System.Boolean)"/>to 
            ensure that the current tab page is valid and is the requested tab.
            </para>
            <para>Sometimes bounds should not be set on the tab pages as the tab control
            might not have been created at this point.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.RendererChanged(Syncfusion.Windows.Forms.Tools.TabPanelRenderer)">
            <summary>
            Advanced method to aid customization.
            </summary>
            <param name="rendererNew">The new tab panel renderer.</param>
            <remarks>
            <para>This method is called when the Multiline property is toggled.
            Internally, a different <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer"/> is
            used to render the multiline mode and the singleline mode. You can override this method
            and provide a custom renderer or modify the exisiting renderer based on the current Multiline setting.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnTabPanelBoundsAffected">
            <summary>
            Force the tab control to re-layout its elements.
            </summary>
            <remarks>
            Advanced method. Need not be called under normal usage scenarios.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.GetTabRect(System.Int32)">
            <summary>
            Gets the Rectangle region of a Tab in client co-ords given its tab-index.
            </summary>
            <param name="index">The tab index of the tab.</param>
            <returns>A Rectangle in client co-ords.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.HitTestTabs(System.Drawing.Point)">
            <summary>
            Returns the tab at the specified location.
            </summary>
            <param name="mousePos">The point where the tab is to be found.</param>
            <returns>The hit tab's index. -1 if none found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnDrawItem(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Raises the DrawItem event.
            </summary>
            <param name="eventArgs">A DrawItemEventArgs that contains the event data.</param>
            <returns>true if there were listeners; false otherwise.</returns>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnDrawItem method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnDrawItem 
            in a derived class, be sure to call the base class's 
            OnDrawItem method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnMouseLeave(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnGotFocus(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)"/>.
            </summary>
            <param name="e">An EventArgs that contains the event data. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnLostFocus(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ProcessMnemonic(System.Char)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ValidateFocusedTab">
            <summary>
            Calls the <see cref="M:System.Windows.Forms.ContainerControl.Validate"/> method
            on the parent container control.
            </summary>
            <returns>true if validation was successful; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.GetTopLeftBorderColor">
            <summary>
            Gets the Top and Left border color.
            </summary>
            <returns>The Color value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.GetRightBottomBorderColor">
            <summary>
            Gets the Right and Bottom border color.
            </summary>
            <returns>The Color value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.GetRightBottomBorderShadeColor">
            <summary>
            Gets the Right and Bottom border shade color.
            </summary>
            <returns>The Color value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.Draw3DBorder(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draws the 3D border around the tab control.
            </summary>
            <param name="g">The Graphics object into which the border is drawn.</param>
            <param name="borderBounds">The rectangular bounds within which the border is drawn.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.DrawPanelBackground(System.Drawing.Graphics)">
            <summary>
            Draws the background for the tab panel.
            </summary>
            <param name="g">The Graphics object into which to draw.</param>
            <remarks>
            This method will paint the background of the tabs and the scroll button
            area, if any. However, the background of the tabs will again be repainted
            by the corresponding <see cref="T:Syncfusion.Windows.Forms.Tools.ITabRenderer"/> (corresponding to the
            specified tab style).
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.GetBorderRect">
            <summary>
            Advanced method to aid customizaton.
            </summary>
            <returns>The border rectangle.</returns>
            <remarks>
            <para>This is the border drawn by the tab control excluding the tab panel.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.Layout(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Force laying out the tab control elements.
            </summary>
            <param name="g">The Graphics object using which to calculate element sizes and positions.</param>
            <remarks>
            Advanced method. You do not have to call this directly.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)"/>.
            </summary>
            <param name="levent"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnDockChanged(System.EventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ComputeTabPanelBounds">
            <summary>
            Advanced method to aid customization.
            </summary>
            <remarks>
            <para>Called by the <see cref="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.Layout(System.Drawing.Graphics,System.Boolean)"/> method to 
            compute the tab panel bounds.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.SetTabPanelBounds(System.Drawing.RectangleF)">
            <summary>
            Called to set the bounds for the tab panel.
            </summary>
            <param name="tabPanelBounds">The new bounds of the tab panel.</param>
            <remarks>
            <para>Override this method and provide a new rectangle to set a
            custom bounds for the tab panel.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.GetTabPanelBounds">
            <summary>
            Returns the current bounds of the tab panel.
            </summary>
            <returns>A rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.AdjustTabPanelBounds(System.Drawing.RectangleF)">
            <summary>
            Advanced method to aid customization.
            </summary>
            <param name="tabPanelBounds">The computed tab panel bounds.</param>
            <returns>The adjusted tab panel bounds.</returns>
            <remarks>
            <para>This method is called by <see cref="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ComputeTabPanelBounds"/>
            to adjust the computed tab panel bounds for custom needs. 
            The base class implementation inserts a scroll button if necessary and also adjusts
            the panel bounds to accomodate this scroll button with a call to 
            <see cref="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.AdjustScrollButtonDimensions(System.Drawing.RectangleF@,System.Boolean)"/>.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.AdjustScrollButtonDimensions(System.Drawing.RectangleF@,System.Boolean)">
            <summary>
            Advanced method to aid customization.
            </summary>
            <param name="tabPanelBounds">The tab panel bounds to be adjusted.</param>
            <param name="scrollNeeded">true to indicate scroll buttons are needed; false otherwise.</param>
            <remarks>
            <para>
            The base class implementation adjusts the tab panel bounds and positions the scroll buttons
            appropriately.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.InitScrollButtons">
            <summary>
            Initializes the scroll buttons used to let user scroll the tabs.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.DestroyScrollButtons(System.Boolean)">
            <summary>
            Called to destroy the scroll buttons.
            </summary>
            <param name="multilineChanged">true if this is called because the multiline property changed; false if called from Dispose.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ProcessKeyPreview(System.Windows.Forms.Message@)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)"/>.
            </summary>
            <param name="ke"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnFontChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ToString">
            <summary>
            Overridden. See <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>The string representation of the Control.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.CreateControlsInstance">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.CreateControlsInstance"/>
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TabControlAdv.DrawItem">
            <summary>
            Occurs when the tabs are drawn.
            </summary>
            <value>
            The event handler receives an argument of type DrawTabEventArgs
            containing data related to this event. Take a look at the
            DrawTabEventArgs class reference for information on the
            data passed to this event handlers.
            </value>
            <remarks>
            In this event handler, you can take over drawing of the whole tab or draw portions
            of the tab while delegating the rest to the default drawing logic.
            <para>
            A tab's default drawing logic is exposed in the DrawTabEventArgs args.
            The default drawing logic is classified as drawing the background, interiors and borders.
            You can call the corresponding DrawBackground, DrawInterior, DrawBorders methods
            in the DrawTabEventArgs class to use the default painting logic.
            The example below illustrates this logic.
            </para>
            </remarks>
            <example>
            The following example customizes tab drawing to create a Yahoo-Messenger like
            tab panel. It uses just the tab's default drawing logic to obtain this effect.
            <code lang="C#">
            // Make sure to set the "3D" tab style, turn on the HotTrack property and handle
            // the DrawItem event of the tab control.
            private void InitializeComponent()
            {
                    ....
                    this.TabControlAdv1.HotTrack = true;
                    this.TabControlAdv1.TabStyle = typeof(Syncfusion.Windows.Forms.Tools.TabRenderer3D);
                    this.TabControlAdv1.DrawItem += new Syncfusion.Windows.Forms.Tools.DrawTabEventHandler(this.Tab_DrawItemYahooMessengerLike);
                    ....
            }
            private void Tab_DrawItemYahooMessengerLike(object sender, DrawTabEventArgs drawItemInfo)
            {
                // Draw the default background and interior in all cases.
                drawItemInfo.DrawBackground();
                drawItemInfo.DrawInterior();
            
                // The border should be drawn only when the item is selected or highlighted.
                if(((int)drawItemInfo.State &amp; ((int)DrawItemState.Selected | (int)DrawItemState.HotLight)) > 0)
                {
                    // Draw the borders
                    drawItemInfo.DrawBorders();
                }
            }
            </code>
            <code lang="VB">
            ' Make sure to set the "3D" tab style, turn on the HotTrack property and handle
            ' the DrawItem event of the tab control.
            Private Sub InitializeComponent()
                 Me.TabControlAdv1.HotTrack = True
                 Me.TabControlAdv1.TabStyle = GetType(Syncfusion.Windows.Forms.Tools.TabRenderer3D)
                    Me.TabControlAdv1.DrawItem += New Syncfusion.Windows.Forms.Tools.DrawTabEventHandler(Me.Tab_DrawItemYahooMessengerLike)
                End Sub 'InitializeComponent
            
                Private Sub Tab_DrawItemYahooMessengerLike(sender As Object, drawItemInfo As DrawTabEventArgs)
                    ' Draw the default background and interior in all cases.
                    drawItemInfo.DrawBackground()
                    drawItemInfo.DrawInterior()
            
                    ' The border should be drawn only when the item is selected or highlighted.
                    If(CInt(drawItemInfo.State) And(CInt(DrawItemState.Selected) Or CInt(DrawItemState.HotLight))) > 0 Then
                        ' Draw the borders
                        drawItemInfo.DrawBorders()
                    End If
                End Sub 'Tab_DrawItemYahooMessengerLike
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TabControlAdv.SelectedIndexChanged">
            <summary>
            Occurs when the SelectedIndex property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TabControlAdv.SelectedIndexChanging">
            <summary>
            Occurs before the SelectedIndex property gets changed to let you cancel the new selection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.NeedLayout">
            <summary>
            Specifies whether or not the Layout method needs to be called to layout the TabControlAdv
            elements.
            </summary>
            <remarks>
            Internal method. You will not have to call or override this method explicitly.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.Renderer">
            <summary>
            Gets the current <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer"/>
            used by the tab control to render the tab panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabPages">
            <summary>
            Gets the collection of tab pages in this tab control.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection"/> that contains the <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdv"/>
            objects in this TabControlAdv.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabCount">
            <summary>
            Gets the number of tabs in the tab strip.
            </summary>
            <value>The number of tabs in the tab strip.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.CurDefaultTabPanelProperties">
            <summary>
            Gets the current <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties"/>
            used by the tab control to render the tab panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.VSLikeScrollButton">
            <summary>
            Specifies whether the scroll buttons should be drawn in
            the Visual Studio MDI child tabs like flat look.
            </summary>
            <value>true for VS like scroll buttons; false otherwise. Default is false.</value>
            <example>
            Take a look at <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property reference for sample code on how to initialize a TabControlAdv programatically.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ShowScroll">
            <summary>
            Specifies whether to Show or Hide Scroll Buttons when 
            there is not enough space for the tabs in Single Line 
            mode.
            </summary>
            <value>true if scroll buttons are needed; false otherwise.
            Default value is true.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.DefaultSize">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle">
            <summary>
            Specifies whether the tabs are painted as 2D, 3D(regular),
            WorkbookMode or other registered tab types.
            </summary>
            <value>A reference to a type that implements the ITabRenderer interface.</value>
            <remarks>
            There are 3 pre-built tab styles avaialable, represented by the following classes
            in the Syncfusion.Windows.Forms.Tools namespace: TabRenderer2D (2D tabs),
            TabRenderer3D(3D tabs), TabRendererWorkbookMode (Workbook mode tabs).
            <para>This type-based TabStyle property allows you to implement custom tab types and
            plug them into the avaialble TabStyles list of a TabControlAdv instance and specify them as the preferred TabStyle seemlessly.</para>
            </remarks>
            <example>
            <para>The following example creates a TabControlAdv with three TabPageAdv objects.
            This example sets the TabStyle property to 2D which displays the tabs of the
            tab pages in a flat/2D appearance.</para>
            <para>To define the dimensions of the tabs, set the ItemSize property equal to a
            Size structure. In this example, Size defines the tabs 90 pixels wide and
            50 pixels high. You cannot change the width of the tabs unless the SizeMode
            property is set to Fixed.</para>
            <para>Use the System.Drawing and Syncfusion.Windows.Forms.Tools namspaces for this example.</para>
            <coderef file="\Tools\Samples\Tabs Package\XPTabs\CS\Form2_InitProgramatically.cs" name="Initailizing TabControlAdv properties" lang="C#"><code lang="C#">
                    private void InitMyTabs()
                    {
                        this.tabControl1 = new TabControlAdv();
                        this.tabPage1 = new TabPageAdv();
                        this.tabPage2 = new TabPageAdv();
                        this.tabPage3 = new TabPageAdv();
            
                        // Positions tabs on the left side of tabControl1.
            //            this.tabControl1.Alignment = System.Windows.Forms.TabAlignment.Left;
            
                        // Sets the tabs to appear in 2D mode.
                        tabControl1.TabStyle = typeof(TabRenderer2D);
            
                        // Highlights TabPage.Text when the mouse passes over tabs.
                        this.tabControl1.HotTrack = true;
            
                        // Set the relative alignment between the images and text in a tab
                        this.tabControl1.ImageAlignmentR = RelativeImageAlignment.BelowText;
            
                        // Allows more than one row of tabs.
                        // this.tabControl1.Multiline = true;
            
                        // Creates a cushion of 22 pixels around TabPage.Text strings.
                        this.tabControl1.Padding = new System.Drawing.Point(22, 22);
            
                        // Makes the tab width definable.
                        this.tabControl1.SizeMode = Syncfusion.Windows.Forms.Tools.TabSizeMode.Fixed;
            
                        // Sizes the tabs of tabControl1.
                        this.tabControl1.ItemSize = new Size(90, 64); // Make sure to take into account the padding values.
            
                        // To rotate text when aligned vertically.
                        this.tabControl1.RotateTextWhenVertical = true;
            
                        // Allows the user to move the tabs by simply dragging and dropping
                        this.tabControl1.UserMoveTabs = true;
            
                        // Draws the scroll buttons Visual Studio MDI Tabs like.
                        this.tabControl1.VSLikeScrollButton = true;
            
                        this.tabControl1.Controls.AddRange(new Control[] {
                                                                             this.tabPage1,
                                                                             this.tabPage2,
                                                                             this.tabPage3});
                        this.tabControl1.Location = new Point(16, 24);
                        this.tabControl1.SelectedIndex = 0;
                        this.tabControl1.Size = new Size(248, 232);
            
                        this.tabPage1.Text = "Tab1";
                        this.tabPage2.Text = "Tab2";
                        this.tabPage3.Text = "Tab3";
            
                        this.Size = new Size(300,300);
                        this.Controls.AddRange(new Control[] {
                                                                 this.tabControl1});
            
                        // Selects tabPage1 using SelectedIndex.
                        this.tabControl1.SelectedIndex = 1;
            
                        // Shows ToolTipText when the mouse passes over tabs.
                        this.tabControl1.ShowToolTips = true;
                    }</code></coderef>
            <coderef file="\Tools\Samples\Tabs Package\XPTabs\VB\Form2_InitProgramatically.vb" name="Initailizing TabControlAdv properties" lang="VB"><code lang="VB">
                   Private Sub InitMyTabs()
            
                       Me.tabControl1 = New TabControlAdv()
                       Me.tabPage1 = New TabPageAdv()
                       Me.tabPage2 = New TabPageAdv()
                       Me.tabPage3 = New TabPageAdv()
                       ' Positions tabs on the left side of tabControl1.
                       '            this.tabControl1.Alignment = System.Windows.Forms.TabAlignment.Left;
                       ' Sets the tabs to appear in 2D mode.
                       tabControl1.TabStyle = GetType(TabRenderer2D)
                       ' Highlights TabPage.Text when the mouse passes over tabs.
                       Me.tabControl1.HotTrack = True
                       ' Set the relative alignment between the images and text in a tab
                       Me.tabControl1.ImageAlignmentR = RelativeImageAlignment.BelowText
                       ' Allows more than one row of tabs.
                       ' this.tabControl1.Multiline = true;
                       ' Creates a cushion of 22 pixels around TabPage.Text strings.
                       Me.tabControl1.Padding = New System.Drawing.Point(22, 22)
                       ' Makes the tab width definable.
                       Me.tabControl1.SizeMode = Syncfusion.Windows.Forms.Tools.TabSizeMode.Fixed
                       ' Sizes the tabs of tabControl1.
                       Me.tabControl1.ItemSize = New Size(90, 64)
                       ' Make sure to take into account the padding values.
                       ' To rotate text when aligned vertically.
                       Me.tabControl1.RotateTextWhenVertical = True
                       ' Allows the user to move the tabs by simply dragging and dropping
                       Me.tabControl1.UserMoveTabs = True
                       ' Draws the scroll buttons Visual Studio MDI Tabs like.
                       Me.tabControl1.VSLikeScrollButton = True
                       Me.tabControl1.Controls.AddRange(New Control() {Me.tabPage1, Me.tabPage2, Me.tabPage3})
                       Me.tabControl1.Location = New Point(16, 24)
                       Me.tabControl1.SelectedIndex = 0
                       Me.tabControl1.Size = New Size(248, 232)
                       Me.tabPage1.Text = "Tab1"
                       Me.tabPage2.Text = "Tab2"
                       Me.tabPage3.Text = "Tab3"
                       Me.Size = New Size(300, 300)
                       Me.Controls.AddRange(New Control() {Me.tabControl1})
                       ' Selects tabPage1 using SelectedIndex.
                       Me.tabControl1.SelectedIndex = 1
                       ' Shows ToolTipText when the mouse passes over tabs.
                       Me.tabControl1.ShowToolTips = True
            
                   End Sub</code></coderef>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.BorderStyle">
            <summary>
            Specifies the border style for the tab control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.FixedSingleBorderColor">
            <summary>
            Specifies the border color when the BorderStyle is FixedSingle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.Alignment">
            <summary>
            Gets or sets the area of the control (for example,
            along the top) where the tabs are aligned.
            </summary>
            <value>One of the TabAlignment values. The default is Top.</value>
            <remarks>
            <para>When a value other than Top is specified, <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ThemesEnabled"/>
            will be set to false.</para>
            </remarks>
            <example>
            Take a look at <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property reference for sample code on how to initialize a TabControlAdv programatically.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.VerticalAlignment">
            <summary>
            Specifies whether tabs are aligned to the top, bottom or based on the RightToLeft property when aligned vertically. 
            </summary>
            <value>One of the TabVerticalAlignment values. The default is Default.</value>
            <remarks>
            <para>This property can be used to force the tabs to align to the top or bottom of the control irrespective
            of the RightToLeft setting, when aligned vertically.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.BackgroundImage">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.BackgroundImage"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ForeColor">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.ForeColor"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ItemSize">
            <summary>
            Gets or sets the size of the control's tabs.
            </summary>
            <value>A Size object that represents the size of the
            tabs. The default automatically sizes the tabs to fit
            the icons and labels on the tabs.</value>
            <remarks>
            To change the Width of the tab, the SizeMode property must be set to Fixed.
            The Height however will be set irrespective of the SizeMode.
            </remarks>
            <example>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabGap">
            <summary>
            Specifies the space between tabs in Single Line Mode.
            </summary>
            <value>The space between the tabs in pixels. Default value is 0.</value>
            <example>
            Take a look at <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property reference for sample code on how to initialize a TabControlAdv programatically.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.Multiline">
            <summary>
            Gets or sets a value indicating whether more than one 
            row of tabs can be displayed.
            </summary>
            <value>true if more than one row of tabs can be displayed; otherwise, false. The default is false.</value>
            <remarks>If Multiline is false, only one row of tabs 
            is displayed - even if all the tabs do not fit in the 
            available space. In that case, however, scroll buttons 
            are displayed that allow the user to navigate to the 
            undisplayed tabs. <para>If the Multiline property is changed 
            to true while the SizeMode property is set to ShrinkToFit
            the SizeMode property is automatically reset to 
            Normal.</para></remarks>
            <example>
            Take a look at <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property reference for sample code on how to initialize a TabControlAdv programatically.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.KeepSelectedTabInFrontRow">
            <summary>
            Specifies whether the selected tab should be moved to the front row when in multiline mode.
            </summary>
            <value>
            true to move to front row; false otherwise.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.SizeMode">
            <summary>
            Indicates how tabs are sized.
            </summary>
            <value>One of the <see cref="T:Syncfusion.Windows.Forms.Tools.TabSizeMode"/> values. The default is Normal.</value>
            <example>
            Take a look at <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property reference for sample code on how to initialize a TabControlAdv programatically.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.Padding">
            <summary>
            		/// Indicates how much extra space should 
            be added around the text/image in the tab.
            </summary>
            <value>A Point structure representing the padding along the
            X and Y directions in pixels.</value>
            <example>
            Take a look at <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property reference for sample code on how to initialize a TabControlAdv programatically.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabPanelBackColor">
            <summary>
            Background Color of the tab panel and tabs. The tab's Color will be overriden by individual Tab BackColor in the <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdv"/> instance, if any.
            </summary>
            <value>The Color value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.Font">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.Font"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ActiveTabFont">
            <summary>
            Gets or sets the font of the text displayed by the active tab.
            </summary>
            <value>The Font object to apply to the text displayed 
            by the control. The default is the value of the Font property.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ThemesEnabled">
            <summary>
            Specifies whether XP Themes (visual styles) should be used for this control when
            available.
            </summary>
            <remarks>
            <para>XP Themes are allowed only when <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.Alignment"/>
            is set to Top. Setting this property to true will reset the alignment to top.</para>
            <para>
            Themes are also used only by the "3D" <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> setting.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ActiveTabColor">
            <summary>
            Color of the active Tabs. Will be overriden by any individual Tab BackColor in the <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdv"/> instance, if any.
            </summary>
            <value>The Color value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.InactiveTabColor">
            <summary>
            Color of the inactive Tabs. Will be overriden by any individual Tab BackColor in the <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdv"/> instance, if any.
            </summary>
            <value>The Color value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ImageList">
            <summary>
            Gets or sets the images to display on the control's tabs.
            </summary>
            <value>An ImageList that specifies the images to display on the tabs.</value>
            <remarks>To display an image on a tab, set the ImageIndex property of that 
            TabPageAdv. The ImageIndex acts as the index into the ImageList.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.SelectedIndex">
            <summary>
            The zero based index of the currently selected item. Returns -1 if no tabs are available.
            </summary>
            <value>The 0-based index of the currently-selected tab page. The default is -1, which is also the value if no tab page is selected.</value>
            <example>
            Take a look at <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property reference for sample code on how to initialize a TabControlAdv programatically.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.SelectedTab">
            <summary>
            Specifies the currently selected tab page.
            </summary>
            <value>The currently-selected TabPageAdv. Default value is null.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TextAlignment">
            <summary>
            Determines the horizontal text alignment of the Tab within the layout rectangle.
            </summary>
            <value>One of the StringAlignment values. Default is StringAlignment.Center.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TextLineAlignment">
            <summary>
            Determines the vertical line alignment of the Text in the Tab in the layout rectangle.
            </summary>
            <value>One of the StringAlignment values. Default is StringAlignment.Center.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ImageAlignmentR">
            <summary>
            The relative alignment of the Image with respect to the text.
            </summary>
            <value>One of the RelativeImageAlignment values. Default is RelativeImageAlignment.LeftOfText.</value>
            <example>
            Take a look at <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property reference for sample code on how to initialize a TabControlAdv programatically.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.RotateTextWhenVertical">
            <summary>
            Specifies that the text in the tabs will be rotated to draw horizontally when the 
            tab strip is aligned to the left or right border.
            </summary>
            <value>true to rotate it when aligned vertically. false if not. Default is false.</value>
            <example>
            Take a look at <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property reference for sample code on how to initialize a TabControlAdv programatically.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.HotTrack">
            <summary>
            Indicates whether the tabs change in appearance when the mouse passes over them.
            </summary>
            <value>true to turn on hot-tracking; false otherwise.
            Default is false.</value>
            <example>
            Take a look at <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property reference for sample code on how to initialize a TabControlAdv programatically.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.FocusOnTabClick">
            <summary>
            Specifies whether or not the Control should take focus when one of the tabs is clicked.
            </summary>
            <remarks>
            Note that this will however still set focus on the tab control when the user tabs
            around to set focus on different controls. You should then use the TabStop property to
            prevent focus on tab.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.SwitchPagesForDialogKeys">
            <summary>
            Specifies whether or not the Control should switch between tab pages when the user enters 
            certain keys like Ctrl+Tab or Ctrl+Shift+Tab.
            </summary>
            <value>true to switch; false otherwise. Default is true.</value>
            <remarks>
            <para>When true, the Control will also process Up, Down, Left and Right keys (if it has focus) and the 
            Ctrl+PageDown and Ctrl+PageUp keys to shift between the tab pages appropriately.</para>
            <para>Ctrl+Tab and Ctrl+Page* keys will be processed by the tab control even
            when the focus is within one of the children in the tab pages. Also if the tab control
            is within an MDI Child Form, the default behavior of Ctrl+Tab keys switching
            the MDI child windows will be broken.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ShowToolTips">
            <summary>
            Specifies whether tooltips should be shown for tabs that have their tooltips set.
            </summary>
            <value>true to turn on tooltips; false otherwise. Default is false.</value>
            <example>
            Take a look at <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property reference for sample code on how to initialize a TabControlAdv programatically.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.UserMoveTabs">
            <summary>
            Specifies whether users can change tab position within 
            the tab control by drag and drop.
            </summary>
            <value>true to allow users to move tabs; false otherwise. Default is false.</value>
            <example>
            Take a look at <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabStyle"/> property reference for sample code on how to initialize a TabControlAdv programatically.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ScrollIncrement">
            <summary>
            Specify whether to Scroll in tabs or pages.
            </summary>
            <value>One of the ScrollIncrement values.
            Default is ScrollIncrement.Tab.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.ScrollButtons">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Forms.ScrollButtons"/> Control instance representing the scroll control used in the tab panel strip.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.Text">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.Text"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.DisplayRectangle">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.DisplayRectangle"/>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabControlAdv.ControlCollection">
            <summary>
            Contains a list of Control instances.
            </summary>
            <remarks>This collection makes sure that the TabControlAdv's
            Controls list will get popuplated with only TabPageAdv objects.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ControlCollection.#ctor(Syncfusion.Windows.Forms.Tools.TabControlAdv)">
            <summary>
            Creates an instance of the TabControlAdv.ControlCollection class.
            </summary>
            <param name="tabControl">The TabControlAdv object whose
            tab page collection this list will hold.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.ControlCollection.AddRange(System.Windows.Forms.Control[])">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.ControlCollection.AddRange(System.Windows.Forms.Control[])"/>
            </summary>
            <param name="controls"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabPageAdv">
            <summary>
            Represents a single tab page in a <see cref="T:Syncfusion.Windows.Forms.Tools.TabControlAdv"/>.
            </summary>
            <example>
             The following example creates a <see cref="T:Syncfusion.Windows.Forms.Tools.TabControlAdv"/> with one TabPageAdv object.
             <para>Use the Syncfusion.Windows.Forms.Tools namespace for this example.</para>
             <code lang="C#">
             public Form1()
             {
            	this.tabControl1 = new TabControlAdv();
            	
            	// Invokes the TabPage() constructor to create the tabPage1 object.
            	this.tabPage1 = new Syncfusion.Windows.Forms.Tools.TabPageAdv();
            	this.tabControl1.Controls.AddRange(new Control[] {
            	         this.tabPage1});
            	this.tabControl1.Location = new Point(25, 25);
            	this.tabControl1.Size = new Size(250, 250);
            	this.ClientSize = new Size(300, 300);
            	this.Controls.AddRange(new Control[] {
            	        this.tabControl1});
            }
            </code>
            <code lang="VB">
            Public Sub New()
            	Me.tabControl1 = New TabControlAdv()
            	' Invokes the TabPage() constructor to create the tabPage1 object.
            	Me.tabPage1 = New Syncfusion.Windows.Forms.Tools.TabPageAdv()
            	Me.tabControl1.Controls.AddRange(New Control() {Me.tabPage1})
            	Me.tabControl1.Location = New Point(25, 25)
            	Me.tabControl1.Size = New Size(250, 250)
            	Me.ClientSize = New Size(300, 300)
            	Me.Controls.AddRange(New Control() {Me.tabControl1})
            End Sub 'New
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.#ctor(Syncfusion.Windows.Forms.Tools.ITabData,Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties)">
            <summary>
            Creates a new instance of the TabPageAdv class with its tab data and default properties.
            </summary>
            <param name="tabData">The data for this tab.</param>
            <param name="tabPanelDefaultProperties">The default properties for this tab.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.#ctor">
            <summary>
            Creates a new instance of the TabPageAdv class.
            </summary>
            <example>
             The following example creates a TabControlAdv with one TabPageAdv object. 
             The ctor constructor instantiates tabPage1.
             <para>Use the Syncfusion.Windows.Forms.Tools namespaces for this example.</para>
             <code>
             public void MyTabs()
             {
             	this.tabControl1 = new TabControlAdv();
             	// Invokes the TabPageAdv() constructor to create the tabPage1 object.
             	this.tabPage1 = new Syncfusion.Windows.Forms.ToolsTabPageAdv();
             	this.tabControl1.Controls.Add(tabPage1);
             	this.Controls.Add(tabControl1);
             }
             
             public Form1()
             {
             	MyTabs();
             }
             </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.#ctor(System.String)">
            <summary>
            Creates a new instance of the TabPageAdv class, specifies
            the text for the tab.
            </summary>
            <param name="label">The text for the tab.</param>
            <example>
            This example creates a TabControlAdv with a TabPageAdv object. 
            The ctor constructor accepts the myTabPage string as Text for tabPage1.
             <para>Use the Syncfusion.Windows.Forms.Tools namespaces for this example.</para>
             <code>
             public void MyTabs()
             {
             	this.tabControl1 = new TabControlAdv();
             	string tabPageName = "myTabPage";
             	
             	// Invokes the TabPageAdv() constructor to create the tabPage1 object.
             	this.tabPage1 = new Syncfusion.Windows.Forms.Tools.TabPageAdv(tabPageName);
             	
             	this.tabControl1.Controls.Add(tabPage1);
             	this.Controls.Add(tabControl1);
             }
             
             public Form1()
             {
             	MyTabs();
             }
             </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.CreateDefaultTabData">
            <summary>
            Called to create the default <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/>
            for this TabPageAdv.
            </summary>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/> instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.CreateControlsInstance">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.CreateControlsInstance"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.ToString">
            <summary>
            Overridden. See <see cref="M:System.Object.ToString"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.ShouldSerializeTabFont">
            <summary>
            Specifies whether or not the current value of the <see cref="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.TabFont"/> property is to be serialized.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.ResetTabFont">
            <summary>
            Reset the <see cref="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.TabFont"/> property to its default value.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.ShouldSerializeTabForeColor">
            <summary>
            Specifies whether or not the current value of the <see cref="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.TabForeColor"/> property is to be serialized.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.ResetTabForeColor">
            <summary>
            Reset the <see cref="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.TabForeColor"/> property to its default value.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.ShouldSerializeTabBackColor">
            <summary>
            Specifies whether or not the current value of the <see cref="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.TabBackColor"/> property is to be serialized.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.ResetTabBackColor">
            <summary>
            Reset the <see cref="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.TabBackColor"/> property to its default value.
            </summary>
            <remarks>
            You typically use this method if you are either creating a designer for the Control or creating your own control incorporating this Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.Anchor">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.Anchor"/>.
            </summary>
            <remarks>Anchoring TabPageAdv instance is disabled.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.Dock">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.Dock"/>.
            </summary>
            <remarks>Docking TabPageAdv instance is disabled.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.Enabled">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.Enabled"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.TabEnabled">
            <summary>
            Specifies whether or not to enable the tab.
            </summary>
            <value>true to enable; false otherwise</value>
            <remarks>
            If disabled, the tab will be drawn disabled and the user will not be able to select
            the tab page through the mouse or key board. You can however select a tab programatically
            using the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.SelectedIndex"/> or <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.SelectedTab"/> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.TabIndex">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.TabIndex"/>.
            </summary>
            <remarks>TabIndex property for the TabPageAdv instance is disabled.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.TabStop">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.TabStop"/>.
            </summary>
            <remarks>TabStop property for the TabPageAdv instance is disabled.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.Visible">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.Visible"/>.
            </summary>
            <remarks>Visible property for the TabPageAdv instance is disabled.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.ToolTipText">
            <summary>
            Gets or sets the ToolTip text for this tab.
            </summary>
            <value>The ToolTip text for this tab.</value>
            <remarks>This tab page belongs to a TabControlAdv instance. 
            The ToolTip text appears when the user moves the mouse 
            over the tab - if the ShowToolTips property of the 
            TabControlAdv is true. For more information on ToolTips, 
            see the <see cref="T:System.Windows.Forms.ToolTip"/> class.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.ImageIndex">
            <summary>
            Gets or sets the index to the image displayed on this tab.
            </summary>
            <remarks>
            The zero-based index to the image in the TabControlAdv.ImageList 
            that appears on the tab. The default is -1, which signifies no image.
            <para>
            The ImageIndex points to an image in the TabControlAdv 
            object's associated ImageList.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.TabVisible">
            <summary>
            Specifies whether or not to show a particular tab.
            </summary>
            <value>true to show the tab; false otherwise.</value>
            <remarks>
            <para>When the tab is made invisible, you can still show the tab page by setting the appropriate
            <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.SelectedIndex"/> programatically.</para>
            <para>
            In fact, you can hide all the tabs and operate the tab like a Wizard. But also note that 
            Essential Tools provides a separate WizardControl for that purpose.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.Text">
            <summary>
            Overridden. Gets or sets the text to display on the tab.
            </summary>
            <value>The text to display on the tab.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.TabFont">
            <summary>
            The font used to display text in the tab.
            </summary>
            <value>The Font object.</value>
            <remarks>This tab page belongs to a TabControlAdv instance. 
            The Font specified here will be used when rendering the 
            associated tab in the TabControlAdv.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.TabBackColor">
            <summary>
            Background Color of this Tab. Will override the Active Tab and Inative Tab Colors.
            </summary>
            <remarks>This tab page belongs to a TabControlAdv instance. 
            The Color specified here will be used when rendering the 
            associated tab in the TabControlAdv.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.TabForeColor">
            <summary>
            Fore Color of this Tab. Default is SystemColors.WindowText.
            </summary>
            <remarks>This tab page belongs to a TabControlAdv instance. 
            The Color specified here will be used when rendering the 
            associated tab in the TabControlAdv. The setting will not affect the Controls in the tab page.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdv.ThemesEnabled">
            <summary>
            Specifies whether or not themes should be used to draw this tab page.
            </summary>
            <value>
            true if enabled; false otherwise.
            </value>
            <remarks>
            <para>
            By default, the value for this property is inherited from the parent TabControlAdv.
            You can explicitly set it to false if you want to turn off themed drawing of the background of this
            tab page.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabPageAdv.ControlCollection">
            <summary>
            Contains the collection of controls that the TabPage uses.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdv.ControlCollection.AddRange(System.Windows.Forms.Control[])">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.ControlCollection.AddRange(System.Windows.Forms.Control[])"/>.
            </summary>
            <param name="controls"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection">
            <summary>
            Contains a collection of TabPageAdv objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.#ctor(Syncfusion.Windows.Forms.Tools.TabPanelData,System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection"/> class.
            </summary>
            <param name="tabPanelData">A <see cref="T:Syncfusion.Windows.Forms.Tools.TabPanelData"/> instance.</param>
            <param name="parent">The parent tab control.</param>
            <param name="tabPanelDefaultProperties">An instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.MoveTabPage(System.Int32,System.Int32)">
            <summary>
            Lets you move tab pages around without removing and re-inserting them.
            </summary>
            <param name="oldTabPos">The old position.</param>
            <param name="newTabPos">The new position.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.MoveTabPageInternal(System.Int32,System.Int32)">
            <summary>
            Lets you move tab pages around without removing and re-inserting them.
            </summary>
            <param name="oldTabPos">The old position.</param>
            <param name="newTabPos">The new position.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.GetTabPageAdvOfTabData(Syncfusion.Windows.Forms.Tools.TabPageAdvCollection,Syncfusion.Windows.Forms.Tools.ITabData)">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdv"/> instance of the specified <see cref="T:Syncfusion.Windows.Forms.Tools.ITabData"/>.
            </summary>
            <param name="collection">The collection to search.</param>
            <param name="tabData">The ITabData instance.</param>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdv"/> instance, can be null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.GetEnumerator">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.GetEnumerator"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.RemoveAt(System.Int32)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)"/>.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.Remove(System.Object)">
            <summary>
            This method ensures that the obj argument is of type TabPageAdv.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.Insert(System.Int32,System.Object)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.Clear">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.Clear"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sort is disabled for this collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverse is disabled for this collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            InsertRange is disabled for this collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.AddRange(System.Collections.ICollection)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.SetRange(System.Int32,System.Collections.ICollection)">
            <summary>
            SetRange is disabled for this collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.Add(Syncfusion.Windows.Forms.Tools.TabPageAdv)">
            <summary>
            Adds a TabPageAdv to the collection.
            </summary>
            <param name="value">The TabPageAdv to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.Contains(Syncfusion.Windows.Forms.Tools.TabPageAdv)">
            <summary>
            Determines whether a specified tab page is in the collection.
            </summary>
            <param name="page">The TabPageAdv to locate in the collection. </param>
            <returns>true if the specified TabPageAdv is in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.IndexOf(Syncfusion.Windows.Forms.Tools.TabPageAdv)">
            <summary>
            Returns the index of the specified tab page in the collection.
            </summary>
            <param name="page">The TabPageAdv to locate in the collection.</param>
            <returns>The 0-based index of the tab page; -1 if it cannot be found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.Remove(Syncfusion.Windows.Forms.Tools.TabPageAdv)">
            <summary>
            Removes a TabPageAdv from the collection.
            </summary>
            <param name="value">The TabPageAdv to remove.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPageAdvCollection.Item(System.Int32)">
            <summary>
            Gets or sets a TabPageAdv in the collection. 
            In C#, this property is the indexer for the 
            TabPageAdvCollection class.
            </summary>
            <param name="index">The 0-based index of the tab page to get or set.</param>
            <value>The TabPageAdv at the specified index.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabControlExt">
            <summary>
            The TabControlExt type will soon be replaced with the TabControlAdv for consistency in 
            Control naming in our library. 
            Please replace all occurances of TabControlExt with TabControlAdv in your app.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SelectedIndexChangingEventArgs">
            <summary>
            Contains information about the <see cref="E:Syncfusion.Windows.Forms.Tools.TabControlAdv.SelectedIndexChanging"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SelectedIndexChangingEventArgs.#ctor(System.Int32)">
            <summary>
            Creates a new instance of this class with the specifed parameters.
            </summary>
            <param name="newSelectedIndex">The new selected index that will be set.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SelectedIndexChangingEventArgs.NewSelectedIndex">
            <summary>
            Returns the new selected tab index that is going to be set in the tab control.
            </summary>
            <example>
            You can get access to the corresponding <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdv"/> using the <see cref="P:Syncfusion.Windows.Forms.Tools.TabControlAdv.TabPages"/>
            property, as follows:
            <code lang="C#">
            private void tabControlAdv1_SelectedIndexChanging(object sender, Syncfusion.Windows.Forms.Tools.SelectedIndexChangingEventArgs args)
            {
            	TabPageAdv newPage = this.tabControlAdv1.TabPages[args.NewSelectedIndex];
            	if(newPage == this.tab1)
            	{
            		MessageBox.Show("Cannot select tab page 1");
            		args.Cancel = true;
            	}
            }
            </code>
            <code lang="VB">
            Private  Sub tabControlAdv1_SelectedIndexChanging(ByVal sender As Object, ByVal args As Syncfusion.Windows.Forms.Tools.SelectedIndexChangingEventArgs)
            	Dim NewPage As TabPageAdv =  Me.tabControlAdv1.TabPages(args.NewSelectedIndex) 
            	If NewPage = Me.tab1 Then
            		MessageBox.Show("Cannot select tab page 1")
            		args.Cancel = True
            	End If
            End Sub
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabPageExt">
            <summary>
            The TabPageExt type will soon be replaced with the TabPageAdv for consistency in 
            Control naming in our library. 
            Please replace all occurances of TabPageExt with TabPageAdv in your app.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabPanelProperty3D">
            <summary>
            Represents the default tab properties for the <see cref="T:Syncfusion.Windows.Forms.Tools.TabRenderer3D"/> 
            tab style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelProperty3D.GetOverlapSize(System.Drawing.SizeF)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.GetOverlapSize(System.Drawing.SizeF)"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelProperty3D.DrawLeftToRight">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DrawLeftToRight"/>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabRenderer3D">
            <summary>
            The tab renderer that implements 3D tabs look-and-feel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabRenderer3D.OVERLAPX">
            <summary>
            The default horizontal overlap.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabRenderer3D.OVERLAPY">
            <summary>
            The default vertical overlap.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer3D.#ctor(Syncfusion.Windows.Forms.Tools.ITabControl,Syncfusion.Windows.Forms.Tools.ITabPanelRenderer)">
            <summary>
            Creates a new instance of the TabRenderer3D class.
            </summary>
            <param name="parent">The tab control parent.</param>
            <param name="panelRenderer">The <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer"/> parent.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer3D.GetOverlapSize(System.Drawing.SizeF)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.GetOverlapSize(System.Drawing.SizeF)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer3D.AdjustBoundsAndGraphicsForAlignment(System.Drawing.Graphics,System.Drawing.RectangleF,System.Windows.Forms.TabAlignment)">
            <summary>
            Adjusts the bounds and graphics based on alignment.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer3D.GetPolygonFromBounds(System.Drawing.RectangleF)">
            <summary>
            Gets the polygonal border of the tab from the bounds.
            </summary>
            <param name="bounds">The tab's bounds.</param>
            <returns>The polygonal border.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer3D.GetShadePolygonFromBounds(System.Drawing.RectangleF)">
            <summary>
            Gets the polygonal shade border of the tab from the bounds.
            </summary>
            <param name="bounds">The tab's bounds.</param>
            <returns>The polygonal border.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer3D.DrawBackground(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawBackground(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer3D.DrawBorders(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawBorders(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer3D.DrawInterior(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawInterior(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabRenderer3D.TabPanelPropertyExtender">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties"/> 
            instance that provides default properites for this renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabRenderer3D.TabStyleName">
            <summary>
            The unique name of this tab renderer.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabPanelPropertyWorkbookMode">
            <summary>
            Represents the default tab properties for the <see cref="T:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode"/> 
            tab style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelPropertyWorkbookMode.GetOverlapSize(System.Drawing.SizeF)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.GetOverlapSize(System.Drawing.SizeF)"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelPropertyWorkbookMode.DefaultActiveTabColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DefaultActiveTabColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)"/>
            </summary>
            <param name="panelData"></param>
            <param name="tabControl"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelPropertyWorkbookMode.DefaultActiveTabFont(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DefaultActiveTabFont(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)"/>
            </summary>
            <param name="panelData"></param>
            <param name="tabControl"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabPanelPropertyWorkbookMode.DrawLeftToRight">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DrawLeftToRight"/>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode">
            <summary>
            The tab renderer that implements workbook mode tabs look-and-feel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode.OVERLAPX">
            <summary>
            The default horizontal overlap.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode.OVERLAPY">
            <summary>
            The default vertical overlap.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode.#ctor(Syncfusion.Windows.Forms.Tools.ITabControl,Syncfusion.Windows.Forms.Tools.ITabPanelRenderer)">
            <summary>
            Creates a new instance of the TabRendererWorkbookMode class.
            </summary>
            <param name="parent">The tab control parent.</param>
            <param name="panelRenderer">The <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer"/> parent.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode.GetOverlapSize(System.Drawing.SizeF)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.GetOverlapSize(System.Drawing.SizeF)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode.HitTest(System.Drawing.PointF)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.HitTest(System.Drawing.PointF)"/>.
            </summary>
            <param name="mousePosition"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode.GetPolygonFromBounds(System.Drawing.RectangleF)">
            <summary>
            Gets the polygonal border of the tab from the bounds.
            </summary>
            <param name="bounds">The tab's bounds.</param>
            <returns>The polygonal border.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode.GetCurrentBounds">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.GetCurrentBounds"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode.DrawBackground(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawBackground(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode.DrawBorders(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawBorders(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode.DrawInterior(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawInterior(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode.TabStyleName">
            <summary>
            The unique name of this tab renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabRendererWorkbookMode.TabPanelPropertyExtender">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties"/> 
            instance that provides default properites for this renderer.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabPanelProperty2D">
            <summary>
            Represents the default tab properties for the <see cref="T:Syncfusion.Windows.Forms.Tools.TabRenderer2D"/> 
            tab style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelProperty2D.DefaultTabPanelBackgroundColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DefaultTabPanelBackgroundColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelProperty2D.GetOverlapSize(System.Drawing.SizeF)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.GetOverlapSize(System.Drawing.SizeF)"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelProperty2D.DefaultInactiveTabColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DefaultInactiveTabColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabPanelProperty2D.DefaultActiveTabFont(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties.DefaultActiveTabFont(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)"/>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabRenderer2D">
            <summary>
            The tab renderer that implements 2D tabs look-and-feel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabRenderer2D.buttonBorderColors">
            <summary>
            Specifies the default border colors for the 4 borders.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer2D.BorderColors(Syncfusion.Windows.Forms.Tools.TabRenderer2D.BorderSide,System.Windows.Forms.TabAlignment)">
            <summary>
            Gets the border color given the border and the alignment.
            </summary>
            <param name="border">The <see cref="T:Syncfusion.Windows.Forms.Tools.TabRenderer2D.BorderSide"/>.</param>
            <param name="curAlign">The <see cref="T:System.Windows.Forms.TabAlignment"/>.</param>
            <returns>The Color for the border.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabRenderer2D.OVERLAPX">
            <summary>
            The default horizontal overlap.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer2D.#ctor(Syncfusion.Windows.Forms.Tools.ITabControl,Syncfusion.Windows.Forms.Tools.ITabPanelRenderer)">
            <summary>
            Creates a new instance of the TabRenderer2D class.
            </summary>
            <param name="parent">The tab control parent.</param>
            <param name="panelRenderer">The <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer"/> parent.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer2D.GetOverlapSize(System.Drawing.SizeF)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.GetOverlapSize(System.Drawing.SizeF)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer2D.DrawBackground(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawBackground(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer2D.DrawBorders(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawBorders(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabRenderer2D.DrawInterior(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabRendererBase.DrawInterior(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabRenderer2D.TabStyleName">
            <summary>
            The unique name of this tab renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabRenderer2D.TabPanelPropertyExtender">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties"/> 
            instance that provides default properites for this renderer.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabRenderer2D.BorderSide">
            <summary>
            Used internally to represent the borders.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.OneNoteStyleRenderer">
            <summary>
            This tab renderer implements the Office 2003 OneNoteStyle look-and-feel
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.OneNoteStyleRenderer.DefaultOverlapSizeX">
            <summary>
            The default horizontal overlap.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRenderer.#ctor(Syncfusion.Windows.Forms.Tools.ITabControl,Syncfusion.Windows.Forms.Tools.ITabPanelRenderer)">
            <summary>
            Creates a new instance of the TabRenderer3D class.
            </summary>
            <param name="parent">The tab control parent.</param>
            <param name="panelRenderer">The <see cref="T:Syncfusion.Windows.Forms.Tools.ITabPanelRenderer"/> parent.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRenderer.GetOverlapSize(System.Drawing.SizeF)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRenderer.GetCurrentBounds" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRenderer.GetInteriorBounds(System.Drawing.RectangleF,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRenderer.HitTest(System.Drawing.PointF)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRenderer.DrawBackground(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRenderer.DrawBorders(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRenderer.DrawInterior(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)" -->
        <member name="P:Syncfusion.Windows.Forms.Tools.OneNoteStyleRenderer.TabPanelPropertyExtender">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Forms.Tools.ITabDefaultProperties"/> 
            instance that provides default properites for this renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.OneNoteStyleRenderer.TabStyleName">
            <summary>
            The unique name of this tab renderer.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.OneNoteStyleRendererProperty">
            <summary>
            Represents the default tab properties for the <see cref="T:Syncfusion.Windows.Forms.Tools.OneNoteStyleRenderer"/> 
            tab style.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRendererProperty.GetOverlapSize(System.Drawing.SizeF)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRendererProperty.DefaultActiveTabColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRendererProperty.DefaultInactiveTabColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRendererProperty.DefaultTabPanelBackgroundColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRendererProperty.DefaultFixedSingleBorderColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRendererProperty.OnPaintPanelBackground(Syncfusion.Windows.Forms.Tools.ITabControl,System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Rectangle)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleRendererProperty.IsBackgroundSolid" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.OneNoteStyleRendererProperty.DrawLeftToRight" -->
        <member name="T:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabPanelProperty">
            <summary>
            Represents the default tab properties for the <see cref="T:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabsRenderer"/> 
            tab style.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabPanelProperty.GetOverlapSize(System.Drawing.SizeF)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabPanelProperty.DefaultActiveTabColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabPanelProperty.DefaultInactiveTabColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabPanelProperty.DefaultTabPanelBackgroundColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabPanelProperty.DefaultFixedSingleBorderColor(Syncfusion.Windows.Forms.Tools.ITabPanelData,Syncfusion.Windows.Forms.Tools.ITabControl)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabPanelProperty.OnPaintPanelBackground(Syncfusion.Windows.Forms.Tools.ITabControl,System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Rectangle)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabPanelProperty.IsBackgroundSolid" -->
        <member name="T:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabsRenderer">
            <summary>
            This tab renderer implements the Office 2003 OneNoteStyle vertical flat tabs look-and-feel
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabsRenderer.GetOverlapSize(System.Drawing.SizeF)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabsRenderer.HitTest(System.Drawing.PointF)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabsRenderer.DrawBackground(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabsRenderer.GetBorderPathFromBounds(System.Drawing.RectangleF,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabsRenderer.DrawBorders(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabsRenderer.DrawInterior(Syncfusion.Windows.Forms.Tools.DrawTabEventArgs)" -->
        <member name="P:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabsRenderer.TabPanelPropertyExtender">
            <summary>
            Internal property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.OneNoteStyleFlatTabsRenderer.TabStyleName">
            <summary>
            Internal property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CheckedNodesColection">
            <summary>
            this collection contains checked notes in treeView. use Add/Remove methods
            to add/remove nodes. Theese methods will check/uncheck proceed nodes 
            automatically. Use Clear method to delete and uncheck all nodes from 
            collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CheckedNodesColection.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
            <remarks>This collection is always read-only. But you can still add/remove nodes.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CheckedNodesColection.Add(System.Object)">
            <summary>
            Adds node and all it's subnodes to collection
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CheckedNodesColection.Remove(System.Object)">
            <summary>
            Removes node and all it's subnodes from collection
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CheckedNodesColection.Clear">
            <summary>
            Clears collection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CheckedNodesColection.ResolveNode(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)">
            <summary>
            add node to or remove from checked nodes collection, and proceess the same
            way all node's subtree
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CheckedNodesColection.RemoveNodes(Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection)">
            <summary>
            Removes checked nodes in specified collection from list of checked nodes
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CheckedNodesColection.AddNodes(Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection)">
            <summary>
            Adds checked nodes from collection to list of checked nodes
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CheckedNodesColection.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvPart">
            <summary>
            This class holds information about the location and size of the node parts(eg plusminus,checkbox).
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv">
            <summary>
            The TreeNodeAdv represents a node in a <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/>. It contains information about the specific node like text, background style and other settings.
            </summary>
            <remarks>
            <p>The <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Nodes"/> collection holds all the child <b>TreeNodeAdv</b> objects assigned to the current 
            <b>TreeNodeAdv</b>. You can add, remove, or clone a <b>TreeNodeAdv</b>; when doing so, all child tree 
            nodes are added, removed, or cloned. Each <b>TreeNodeAdv</b> can contain a collection of other 
            <b>TreeNodeAdv</b> objects. This can make it difficult to determine where you are in the 
            <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/> when iterating through the collection. To determine your location in a tree 
            structure, use the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.FullPath"/> property. The <b>FullPath</b> string can be parsed using the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.PathSeparator"/> string value to determine where a <b>TreeNodeAdv</b> label begins and ends.
            </p>
            <p>The <b>TreeNodeAdv</b> label is set by setting the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Text"/> 
            property explicitly. The alternative is to create the tree node using one of 
            the <b>TreeNodeAdv</b> constructors that has a string parameter that represents 
            the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Text"/> property.</p>
            <p>You can specify images for the node via the <see cref="!:NodeStyle.LeftImageIndices"/>,
            <see cref="!:NodeStyle.OpenImgIndex"/>, <see cref="!:NodeStyle.ClosedImgIndex"/>,
            <see cref="!:NodeStyle.NoChildrenImgIndex"/> and <see cref="!:NodeStyle.RightImageIndices"/> properties.
            </p>
            <p>The order in which the tree node's contents are drawn is as follows:
            <list type="number">
            <item><description>Checkbox</description></item>
            <item><description>Option Buttons</description></item>
            <item><description>Left images</description></item>
            <item><description>State image</description></item>
            <item><description>Node Label</description></item>
            <item><description>Right images</description></item>
            </list>
            The "State image" will be one of <b>OpenImgIndex</b>, <b>ClosedImgIndex</b> and <b>NoChildrenImgIndex</b>.
            </p>
            <p>
            Selecting specific tree nodes and iterating through the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Nodes"/> collection can be 
            achieved by using the following property values: <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.FirstNode"/>, 
            <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.LastNode"/>, <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.NextNode"/>, <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.PrevNode"/>, <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.NextVisibleNode"/>, 
            <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.PrevVisibleNode"/>. Assign the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> object returned 
            by one of aforementioned properties to the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SelectedNode"/> property to select that 
            tree node in the <b>TreeViewAdv</b> control.
            </p>
            <p>
            Tree nodes can be expanded to display the next level of child tree nodes. 
            The user can expand the tree node by pressing the plus (+) button next to the 
            TreeNodeAdv, if one is displayed, or you can expand the TreeNodeAdv by calling the 
            <see cref="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Expand"/> method. To expand all child tree node levels in the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Nodes"/> 
            collection, call the <see cref="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.ExpandAll"/> method. You can collapse the child 
            TreeNodeAdv level by calling the <see cref="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.CollapseAll"/> method, or the user can 
            press the minus (-) button next to the TreeNodeAdv, if one is displayed. You can 
            also alternate the TreeNode between the expanded and collapsed states using the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Expanded"/> property.
            </p>
            </remarks>
            <example>
            <p>
             The following example displays customer information in a <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/> 
             control. The root tree nodes display customer names, and the child tree 
             nodes display the order numbers assigned to each customer. In this 
             example, 1,000 customers are displayed with 15 orders each. The 
             repainting of the <b>TreeViewAdv</b> is suppressed by using the <see cref="!:TreeViewAdv.BeginUpdate"/> 
             and <see cref="!:TreeViewAdv.EndUpdate"/> methods, and a wait Cursor is displayed while the 
             <b>TreeViewAdv</b> creates and paints the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> objects. This example 
             assumes you have a Customer object that can hold a collection of Order 
             objects. It also assumes that you have created an instance of a 
             <b>TreeViewAdv</b> control on a Form.
            </p>
            <code lang="C#">
            // Create a new ArrayList to hold the Customer objects.
            private ArrayList customerArray = new ArrayList(); 
            
            private void FillMyTreeView()
            {
            	// Add customers to the ArrayList of Customer objects.
            	for(int x=0; x!=1000; x++)
            	{
            		customerArray.Add(new Customer("Customer" + x.ToString()));
            	}	
            	// Add orders to each Customer object in the ArrayList.
            	foreach(Customer customer1 in customerArray)
            	{
            		for(int y=0; y!=15; y++)
            		{
            			customer1.CustomerOrders.Add(new Order("Order" + y.ToString()));    
            		}
            	}
            	
            	// Display a wait cursor while the TreeNodeAdvs are being created.
            	Cursor.Current = new Cursor("C:\\Cursors\\MyWait.cur");
            	// Clear the TreeViewAdv each time the method is called.
            	treeViewAdv1.Nodes.Clear();
            	// Add a root TreeNodeAdv for each Customer object in the ArrayList.
            	foreach(Customer customer2 in customerArray)
            	{
            		treeViewAdv1.Nodes.Add(new TreeNodeAdv(customer2.CustomerName));
            		// Add a child treenode for each Order object in the current Customer object.
            		foreach(Order order1 in customer2.CustomerOrders)
            		{
            			treeViewAdv1.Nodes[customerArray.IndexOf(customer2)].Nodes.Add(
            				new TreeNodeAdv(customer2.CustomerName + "." + order1.OrderID));
            		}
            	}
            	// Reset the cursor to the default for all controls.
            	Cursor.Current = Cursors.Default;
            }
            </code>
            <code lang="VB">
            ' Create a new ArrayList to hold the Customer objects.
            Private customerArray As New ArrayList()
            Private Sub FillMyTreeView()
            	' Add customers to the ArrayList of Customer objects.
            	Dim x As Integer
            	For x = 0 To 999
            		customerArray.Add(New Customer("Customer" + x.ToString()))
            	Next x
            	
            	' Add orders to each Customer object in the ArrayList.
            	Dim customer1 As Customer
            	For Each customer1 In customerArray
            		Dim y As Integer
            		For y = 0 To 14
            			customer1.CustomerOrders.Add(New Order("Order" + y.ToString()))
            		Next y
            	Next customer1
            	
            	' Display a wait cursor while the TreeNodeAdvs are being created.
            	Cursor.Current = New Cursor("C:\Cursors\MyWait.cur")
            	
            	' Clear the TreeViewAdv each time the method is called.
            	treeViewAdv1.Nodes.Clear()
            	
            	' Add a root TreeNodeAdv for each Customer object in the ArrayList.
            	Dim customer2 As Customer
            	For Each customer2 In customerArray
            		treeViewAdv1.Nodes.Add(New TreeNodeAdv(customer2.CustomerName))
            		
            		' Add a child TreeNodeAdv for each Order object in the current Customer object.
            		Dim order1 As Order
            		For Each order1 In customer2.CustomerOrders
            			treeViewAdv1.Nodes(customerArray.IndexOf(customer2)).Nodes.Add( _
            				New TreeNodeAdv(customer2.CustomerName + "." + order1.OrderID))
            		Next order1
            	Next customer2
            	
            	' Reset the cursor to the default for all controls.
            	Cursor.Current = System.Windows.Forms.Cursors.Default
            	
            	' Begin repainting the TreeView.
            	treeViewAdv1.EndUpdate()
            	End Sub 'FillMyTreeView
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.c_nDrawTextFlags">
            <summary>
            Inflate offset for drawing selection rectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.textLocationXRel">
            <summary>
            Horizontal offset of text 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.textWidth">
            <summary>
            Width of node text 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.nodeXRel">
            <summary>
            Position of node with indents in pixels
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.childMaxXChanged(System.Int32)">
            <summary>
            Called when the child maxX is changed.
            </summary>
            <param name="childMax">the child's maxX</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Remove">
            <summary>
            Removes itself from the parent node, if there is any.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.GetNodeCount(System.Boolean)">
            <summary>
            Returns the number of child tree nodes.
            </summary>
            <param name="includeSubTrees"><b>true</b> if the resulting count includes all tree 
            nodes indirectly rooted at this tree node; otherwise, <b>false</b>. </param>
            <returns>The number of child tree nodes assigned to the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Nodes"/> collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.OnCheckStateChanged(System.EventArgs)">
            <summary>
            Raises the CheckStateChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnCheckStateChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnCheckStateChanged in a derived
            class, be sure to call the base class's OnCheckStateChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.#ctor">
            <overloaded>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> class.
            </overloaded>
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> class with the specified label text.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.#ctor(System.String,Syncfusion.Windows.Forms.Tools.TreeNodeAdv[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> class 
            with the specified label text and child tree nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Sort">
            <overloaded>
            Sorts the tree nodes.
            </overloaded>
            <summary>
            Sorts the tree nodes with the current 
            <see cref="!:NodeStyle.SortOrder"/> and <see cref="!:NodeStyle.SortType"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Sort(Syncfusion.Windows.Forms.Tools.TreeNodeAdvSortType)">
            <summary>
            Sorts the tree nodes with the specified sort type and the current
            <see cref="!:NodeStyle.SortOrder"/>.
            </summary>
            <param name="sortType">One of the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvSortType"/> value.</param>
            <remarks>This will also set the value in the <see cref="!:NodeStyle.SortOrder"/> to the
            specified sort type.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Move(Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection)">
            <overloaded>
            Moves this node to a different collection.
            </overloaded>
            <summary>
            Moves the node to the end of the specified collection.
            </summary>
            <param name="newNodesCollection">
            A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection"/> to which this node will move.
            </param>
            <remarks>
            <para>A node can be positioned to any other TreeNodeAdvCollection in the same tree or in a different TreeViewAdv control.</para>
            <para>Note: All of the descendants of the node will move along with it.</para>
            <para>Note: A node cannot be moved to one of it's own Descendants.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Move(Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection,System.Int32)">
            <summary>
            Moves the node to a new collection at the specified index.
            </summary>
            <param name="newNodesCollection">
            A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection"/> to which this node will move.</param>
            <param name="index">
            The new index of the node in the new collection.
            </param>
            <remarks>
            Moving a node by index will ensure that the node ends up at the index 
            specified. Note that the node will first be removed from its existing
            collection and then added to the specified collection at the specified index.
            If the source collection and destination collection are the same, make sure
            to take into account the above semantics while specifying the index, or
            use the Move override that lets you specify a relative position.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Move(Syncfusion.Windows.Forms.Tools.TreeNodeAdv,Syncfusion.Windows.Forms.Tools.NodePositions)">
            <summary>
            Moves the node to a specified position in relation to the specified 
            "relative node".
            </summary>
            <param name="relativeNode">The "relative node" that determines this node's new position.</param>
            <param name="nodePosition">Specifies where this node will be moved in relation to the "relative node". </param>
            <remarks>
            <para>A node can be positioned relative to any other node in the same tree or even a different TreeViewAdv Control.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.IsParent(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)">
            <summary>
            Specifies whether the current node is an direct or indirect child of the specified node.
            </summary>
            <param name="targetNode">The node that is to be tested for ancestory.</param>
            <returns>true if the targetNode is a parent of this node. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Clone">
            <summary>
            Creates a clone of this node.
            </summary>
            <returns>The clone of the node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.BringIntoView">
            <summary>
            Will expand parent nodes to make this node visible and also scroll
            the tree such that this node is brought into view.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Expand">
            <summary>
            Expands the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.ExpandAll">
            <summary>
            Expands this node and all the subnodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.CollapseAll">
            <summary>
            Collapses this node and all it's children.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.GetNodeTextSize(System.Drawing.Graphics,System.Drawing.Font)">
            <summary>
            Calculates width of string which must be drawn with specified font.
            </summary>
            <param name="g">Context device for drawing.</param>
            <param name="f">Specified font.</param>
            <returns>Width of specified string in pixel.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.DrawText(Syncfusion.Windows.Forms.Tools.TreeViewAdv,Syncfusion.Windows.Forms.Tools.TreeNodeAdvPaintEventArgs)">
            <summary>
            
            </summary>
            <param name="tvaTree"></param>
            <param name="eaEventArgs"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.DrawFocusRect(System.Drawing.Graphics,Syncfusion.Windows.Forms.Tools.TreeViewAdv)">
            <summary>
            Method will draw dotted border around selected node.
            This will be used to fast drawing when TreeCtrl lost focus.
            </summary>
            <param name="g">Device context needed for drawing.</param>
            <param name="tvaTree">Node's parent.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.HasNode(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)">
            <summary>
            Indicates if node is contained in in it's nodes collection of in it's subnodes nodes collection.
            </summary>
            <param name="node"></param>
            <returns>true if node is contained.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.GetPath(System.String)">
            <summary>
            Gets the path of the node.
            </summary>
            <param name="separator">The separator string.</param>
            <returns>the path of the node.</returns>
            <remarks>
            <p>You can also use the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.FullPath"/> property to get the full path
            with the path seperator specified in the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.PathSeparator"/>
            property.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.RecalculateMaxX">
            <summary>
            Be very discreet about calling this, as it could cause performance problems.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.RecalculateAllDimensions">
            <summary>
            Recalculates the dimensions of all the UI elements in this node and it's children.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.PartsPadX">
            <summary>
            Returns the horizontal padding used between the different parts of the tree node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.NodeStyle">
            <summary>
            Contains information about the node's appearance and state.
            </summary>
            <remarks>This property exposes the node's style information store.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.ChildStyle">
            <summary>
            Contains information about the immediate child-nodes' appearance and state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Font">
            <summary>
            The font of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.TextColor">
            <summary>
            The Color of the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Background">
            <summary>
            The background of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Text">
            <summary>
            The text of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.HelpText">
            <summary>
            The help text of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Height">
            <summary>
            The height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.ShowCheckBox">
            <summary>
            Indicates if the checkbox of the node is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.ShowOptionButton">
            <summary>
            Inidcates if the optionbutton of the node is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.ShowPlusMinus">
            <summary>
            Indicates if the plusminus of the node is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.SortOrder">
            <summary>
            Indicates the sort order of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.SortType">
            <summary>
            Indicates the sort type of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Comparer">
            <summary>
            Indicates the <see cref="T:System.Collections.IComparer"/> object that compares two nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.CompareOptions">
            <summary>
            Indicates the compare options used in the sorting of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.CheckState">
            <summary>
            Indicates the checkState of the node.
            </summary>
            <remarks>
            <p>Note that setting this property will fire the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeCheck"/>
            event. If you do not want this event to be fired, you can access the tree's 
            internal data structure as follows:</p>
            <code lang="C#">
            treeNodeAdv.NodeStyle.CheckState = CheckState.Checked;
            </code>
            <code lang="VB">
            treeNodeAdv.NodeStyle.CheckState = CheckState.Checked
            </code>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.BaseStyle">
            <summary>
            The base style for the node from which to inherit.
            </summary>
            <remarks>The specified base style should be available in the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BaseStyles"/>
            collection.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Tag">
            <summary>
            Gets or sets the object that contains data about the tree node.
            </summary>
            <value>
            An <see cref="T:System.Object"/> that contains data about the tree node. The default is a null reference (Nothing in Visual Basic).
            </value>
            <remarks>
            <p>Any Object derived type may be assigned to this property. If this property is 
            being set through the Windows Forms designer, only text may be assigned.</p>
            <p>When the tree node is cloned, if this object is cloneable (implements ICloneable
            interface) then it will be.</p>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.LeftImageIndices">
            <summary>
            The image indices of the images to be drawn on the left of the node's text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.RightImageIndices">
            <summary>
            The imageindexes of the images  to be drawn on the right of the node's text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.NoChildrenImgIndex">
            <summary>
            The imageindex indicating the image in the StateImageList where the node has no children.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.ClosedImgIndex">
            <summary>
            Indicates the imageindex in the StateImageList where the node is not expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.OpenImgIndex">
            <summary>
            Indicates the imageindex in the StateImageList where the node is expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.ThemesEnabled">
            <summary>
            Indicates if the node's controls will be themed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.InteractiveCheckBox">
            <summary>
            Indicates if the node will have an interactive checkbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.ExpandedOnce">
            <summary>
            Indicates if the node has been expanded at least once.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Culture">
            <summary>
            Indicates the culture of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.IsEditing">
            <summary>
            Indicates if the node is in editing state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.IsSelected">
            <summary>
            Indicates if the node is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.IsActiveNode">
            <summary>
            Indicates if the node is the current active node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.NodeX">
            <summary>
            The horizontal distance between the tree border and the beginning
            of the node's drawing bounds.
            </summary>
            <remarks>This property returns a valid value only when queried from
            an owner draw paint event like <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterNodePaint"/>.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.LeftImagesX">
            <summary>
            The horizontal distance between the tree border and the beginning
            of the node's left images.
            </summary>
            <remarks>This property returns a valid value only when queried from
            an owner draw paint event like <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterNodePaint"/>.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.StateImageX">
            <summary>
            The horizontal distance between the tree border and the beginning
            of the node's state image.
            </summary>
            <remarks>This property returns a valid value only when queried from
            an owner draw paint event like <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterNodePaint"/>.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.RightImagesX">
            <summary>
            The horizontal distance between the tree border and the beginning
            of the node's right images.
            </summary>
            <remarks>This property returns a valid value only when queried from
            an owner draw paint event like <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterNodePaint"/>.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.CheckBoxX">
            <summary>
            The horizontal distance between the tree border and the beginning
            of the node's check box.
            </summary>
            <remarks>This property returns a valid value only when queried from
            an owner draw paint event like <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterNodePaint"/>.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.OptionButtonX">
            <summary>
            The horizontal distance between the tree border and the beginning
            of the node's option button.
            </summary>
            <remarks>This property returns a valid value only when queried from
            an owner draw paint event like <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterNodePaint"/>.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.CheckBox">
            <summary>
            Returns a <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvPart"/> corresponding to the check box of a tree node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.OptionButton">
            <summary>
            Returns a <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvPart"/> corresponding to the option button part of a tree node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Checked">
            <summary>
            Indicates if the node's checkbox is checked.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Enabled">
            <summary>
            Specifies if the node is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.EnabledButtons">
            <summary>
            Specifies if the buttons in the node are enabled.
            </summary>
            <value>true to enable the buttons. False otherwise.</value>
            <remarks>The check box and option buttons can be disabled keeping the rest of the node enabled
            using this property.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.EnsureDefaultOptionedChild">
            <summary>
            Specifies if the first child should be marked as <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Optioned"/> and this node's <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.OptionedChild"/> if none of the other children is Optioned in a parent node.
            </summary>
            <value>True to ensure a default optioned child. False otherwise.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Optioned">
            <summary>
            Indicates if the node's option button is checked.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.HasChildren">
            <summary>
            Indicates if the node has child nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.MaxX">
            <summary>
            Represents the maximum width of all the children and subchildren of this given node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.FirstNode">
            <summary>
            Gets the first child tree node in the tree node collection.
            </summary>
            <value>The first child TreeNodeAdv in the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Nodes"/> collection</value>
            <remarks>
            The <b>FirstNode</b> is the first child TreeNodeAdv in the 
            <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection"/> stored in the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Nodes"/> property of 
            the current tree node. If the <see cref="T:System.Windows.Forms.TreeNode"/> has no child tree node, the 
            <b>FirstNode</b> property returns a null reference (Nothing in Visual Basic).
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.LastNode">
            <summary>
            Gets the last child tree node in the tree node collection.
            </summary>
            <value>The last child TreeNodeAdv in the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Nodes"/> collection</value>
            <remarks>
            The <b>LastNode</b> is the last child TreeNodeAdv in the 
            <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection"/> stored in the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Nodes"/> property of 
            the current tree node. If the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> has no child tree node, the 
            <b>LastNode</b> property returns a null reference (Nothing in Visual Basic).
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.PrevNode">
            <summary>
            Gets the previous sibling tree node.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> that represents the previous sibling tree node.</value>
            <remarks>
            The <b>PrevNode</b> is the previous sibling <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> in the 
            <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection"/> stored in the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.Nodes"/> 
            property of the tree node's parent <b>TreeNodeAdv</b>. If there is no previous 
            tree node, the <b>PrevNode</b> property returns a null reference (Nothing in 
            Visual Basic).
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.PrevVisibleNode">
            <summary>
            Gets the previous visible tree node.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> that represents the previous 
            visible tree node.</value>
            <remarks>
            The <b>PrevVisibleNode</b> can be a child, sibling, or a tree node from 
            another branch. If there is no previous tree node, the <b>PrevVisibleNode</b> 
            property returns a null reference (Nothing in Visual Basic).
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.PrevSelectableNode">
            <summary>
            Gets the previous selectable tree node.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> that represents the previous 
            selectable tree node.</value>
            <remarks>
            The <b>PrevSelectableNode</b> can be a child, sibling, or a tree node from 
            another branch. If there is no previous tree node, the <b>PrevSelectableNode</b> 
            property returns a null reference (Nothing in Visual Basic).
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.NextNode">
            <summary>
            Gets the next sibling tree node.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> that represents the next sibling tree node.</value>
            <remarks>
            The <b>NextNode</b> is the next sibling <b>TreeNodeAdv</b> in the 
            <see cref="T:System.Windows.Forms.TreeNodeCollection"/> stored in the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Nodes"/> 
            property of the tree node's parent <b>TreeNodeAdv</b>. If there is no next 
            tree node, the <b>NextNode</b> property returns a null reference (Nothing in 
            Visual Basic).
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.NextVisibleNode">
            <summary>
            Gets the next visible tree node.
            </summary>
            <value>
            A TreeNodeAdv that represents the next visible tree node.
            </value>
            <remarks>
            The <b>NextVisibleNode</b> can be a child, sibling, or a tree node from 
            another branch. If there is no next tree node, the <b>NextVisibleNode</b> property 
            returns a null reference (Nothing in Visual Basic).
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.NextSelectableNode">
            <summary>
            Gets the next selectable tree node.
            </summary>
            <value>
            A TreeNodeAdv that represents the next selectable tree node.
            </value>
            <remarks>
            The <b>NextSelectableNode</b> can be a child, sibling, or a tree node from 
            another branch. If there is no next tree node, the <b>NextSelectableNode</b> property 
            returns a null reference (Nothing in Visual Basic).
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.OptionedChild">
            <summary>
            Indicates the child node who's option button is checked.
            </summary>
            <value>
            A TreeNodeAdv that represents the next visible tree node.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Bounds">
            <summary>
            Gets the bounds of the tree node.
            </summary>
            <value>
            The <see cref="T:System.Drawing.Rectangle"/> that represents the bounds of the tree node.
            </value>
            <remarks>
            The coordinates are relative to the upper left corner of the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/> control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.TextBounds">
            <summary>
            Indicates the bounds of the text area of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.TextAndImageBounds">
            <summary>
            Indicates the bounds of the left images, state images, text area and the right images of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.IsVisible">
            <summary>
            Gets a value indicating whether the tree node is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.PlusMinus">
            <summary>
            Returns a <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvPart"/> corresponding to the plus-minus part of a tree node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Parent">
            <summary>
            Gets the parent tree node of the current tree node, if there is any.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> that represents the parent of the current 
            tree node.</value>
            <remarks>
            If this is the top most node in the tree, the Parent property returns the
            TreeViewAdv's <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.Root"/> node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Index">
            <summary>
            Gets the position of the tree node in the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Parent"/>'s tree nodes collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Level">
            <summary>
            Gets the level of the node.
            </summary>
            <remarks>
            Specifies how deep a node is in the tree. The top-most visible nodes belong
            to level 1. The <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.Root"/> node is level 0.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.TreeView">
            <summary>
            Gets the parent tree view that the tree node is assigned to.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/> that represents the parent tree view that 
            the tree node is assigned to.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.FullPath">
            <summary>
            Gets the path from the root tree node to the current tree node.
            </summary>
            <value>The path from the root tree node to the current tree node.</value>
            <remarks>
            <p>You can also use the more flexible <see cref="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.GetPath(System.String)"/> method to
            get the path with a specific path seperator.</p>
            <p>The path consists of the labels of all of the tree nodes that must be 
            navigated to get to this tree node, starting at the root tree node. The node 
            labels are separated by the delimiter character specified in the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.PathSeparator"/> property of the TreeViewAdv control that 
            contains this node. For example, if the delimiter character of the tree view 
            control named "Location" is set to the backslash character, (\), the <b>FullPath</b> 
            property value is "Country\Region\State".</p>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Nodes">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> objects assigned to the 
            current tree node.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection"/> that represents the tree nodes assigned 
            to the current tree node.
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Nodes"/> property can hold a collection of other <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> 
            objects. Each of the tree node in the collection has a <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Nodes"/> property 
            that can contain its own <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection"/>. This nesting of 
            tree nodes can make it difficult to navigate a tree structure. The <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.FullPath"/> 
            property makes it easier to determine your location in a tree.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Expanded">
            <summary>
            Gets or sets the expanded state of a tree node.
            </summary>
            <value>true if the tree node is in the expanded state; otherwise, false.
            </value>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.CheckStateChanged">
            <summary>
            Occurs when the check state of the node changes.
            </summary>
            <remarks>
            <para>This event will be fired when the CheckedState property of the node has changed or when a new node has been Optioned.</para>
            <para>You could alternatively listen to the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterCheck"/>
            event of the tree which will be called when the CheckState is changing for any node in the tree.
            If you want to cancel the check state change, then listen to 
            <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeCheck"/> of the tree.</para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvSortType">
            <summary>
            Specifies the different sort types that can be specified in the <see cref="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Sort"/> method.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeNodeAdvSortType.Text">
            <summary>
            Sorts by text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeNodeAdvSortType.Tag">
            <summary>
            Sorts by the tag value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeNodeAdvSortType.CheckBox">
            <summary>
            Sorts by the check box value.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.NodePositions">
            <summary>
            Specifies the node positions in a node collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo">
            <summary>
            Contains appearance and behavior information regarding the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/>s.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.Empty">
            <summary>
            An empty style object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.#ctor">
            <summary>
            Initalizes a new style object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.#ctor(Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo)">
            <summary>
            Initalizes a new style object and copies all data from an existing style object.
            </summary>
            <param name="style">The style object that contains the original data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.#ctor(Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoStore)">
            <summary>
            Initalizes a new style object and associates it with an existing <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoStore"/>.
            </summary>
            <param name="store">A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoStore"/> that holds data for this <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo"/>.
            All changes in this style object will saved in the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoStore"/> object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.#ctor(Syncfusion.Styles.StyleInfoIdentityBase)">
            <summary>
            Initalizes a new style object and associates it with an existing <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.#ctor(Syncfusion.Styles.StyleInfoIdentityBase,Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoStore)">
            <summary>
            Initalizes a new style object and associates it with an existing <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo"/>.
            </param>
            <param name="store">A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoStore"/> that holds data for this <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo"/>.
            All changes in this style object will saved in the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.GetNode">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> for this style or null if style is used outside a grid model.
            </summary>
            <returns>The <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> this style belongs to or null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.CreateSubObjectIdentity(Syncfusion.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.GetDefaultStyle">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.NodeIdentity">
            <summary>
            Holds identity information such as TreeNode for the current <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.Store">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoStore"/> object that holds all the data for this style object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.Default">
            <summary>
            Returns a <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo"/> with defauult settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.Font">
            <summary>
            The font of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.TextColor">
            <summary>
            The Color of the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.BaseStyle">
            <summary>
            The base style for the node from which to inherit.
            </summary>
            <remarks>The specified base style should be available in the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BaseStyles"/>
            collection.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.Background">
            <summary>
            The background of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.Text">
            <summary>
            The text of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.HelpText">
            <summary>
            The help text of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.DisplayMember">
            <summary>
            The diplay member of the data bound to the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.Height">
            <summary>
            The height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.ShowCheckBox">
            <summary>
            Indicates if the checkbox of the node is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.InteractiveCheckBox">
            <summary>
            Indicates if the node will have an interactive checkbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.Tag">
            <summary>
            The tag of the node. Can be used to store aditional information for the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.ShowPlusMinus">
            <summary>
            Indicates if the plusminus of the node is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.ShowOptionButton">
            <summary>
            Inidcates if the optionbutton of the node is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.LeftImageIndices">
            <summary>
            The image indices of the images to be drawn on the left of the node`s text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.RightImageIndices">
            <summary>
            The image indices of the images  to be drawn on the right of the node`s text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.NoChildrenImgIndex">
            <summary>
            The imageindex indicating the image in the StateImageList where the node has no children.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.OpenImgIndex">
            <summary>
            Indicates the imageindex in the StateImageList where the node is expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.ClosedImgIndex">
            <summary>
            Indicates the imageindex in the StateImageList where the node is not expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.ThemesEnabled">
            <summary>
            Indicates if the node`s controls will be themed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.SortType">
            <summary>
            Indicates the sort type of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.SortOrder">
            <summary>
            Indicates the sort order of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.Culture">
            <summary>
            Indicates the culture of the node used while sorting.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.Comparer">
            <summary>
            Indicates the <see cref="T:System.Collections.IComparer"/> object that compares two nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.CompareOptions">
            <summary>
            Indicates the compare options used in the sorting of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.Enabled">
            <summary>
            Specifies if the node is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.EnabledButtons">
            <summary>
            Specifies if the buttons in the node are enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.EnsureDefaultOptionedChild">
            <summary>
            Specifies if the first child should be marked as <see cref="!:Optioned"/> if none of the other children is Optioned in a parent node.
            </summary>
            <value>True to ensure a default optioned child. False otherwise.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo.CheckState">
            <summary>
            Indicates the checkState of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeViewAdvCancelableSelectionEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeSelect"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeViewAdvNodeEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeExpand"/> event of the TreeViewAdv control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeViewAdvCancelableNodeEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeExpand"/> event of the TreeViewAdv control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeViewAdvBeforeCheckEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeCheck"/> event of the TreeViewAdv control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvBeforeSelectEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeSelect"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeViewAdvAction">
            <summary>
            Specifies the action that raised a TreeViewAdv event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeViewAdvAction.ByKeyboard">
            <summary>
            The event was caused by a keystroke.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeViewAdvAction.ByMouse">
            <summary>
            The event was caused by a mouse operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeViewAdvAction.Collapse">
            <summary>
            The event was caused by the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> collapsing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeViewAdvAction.Expand">
            <summary>
            The event was caused by the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> expanding.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeViewAdvAction.Unknown">
            <summary>
            The action that caused the event is unknown.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> objects.
            </summary>
            <remarks>
            The <see cref="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection.Add(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)"/>, <see cref="!:Remove"/>, and <see cref="!:RemoveAt"/> methods 
            enable you to add and remove individual tree nodes from the collection. You can 
            also use the <see cref="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection.AddRange(Syncfusion.Windows.Forms.Tools.TreeNodeAdv[])"/> or <see cref="!:Clear"/> methods to 
            add or remove all the tree nodes from the collection.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection.#ctor">
            <summary>
            Creates a new instance of the collection.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection.Add(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)">
            <summary>
            Adds a <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> to the collection.
            </summary>
            <param name="node">The <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> to add.</param>
            <returns>The position of the added node in the list.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection.AddRange(Syncfusion.Windows.Forms.Tools.TreeNodeAdv[])">
            <summary>
            Adds an array of TreeNodeAdv objects to the collection.
            </summary>
            <param name="items">An array of <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> objects to add to the collection.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection.Sort" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection.Sort(System.Windows.Forms.SortOrder)">
            <summary>
            Sorts the collection using the specified sort order.
            </summary>
            <param name="order">One of the <see cref="T:System.Windows.Forms.SortOrder"/> entries.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollection.Item(System.Int32)">
            <summary>
            Gets or sets a reference to the TreeNodeAdv at the specified index location in the
            collection.
            In C#, this property is the indexer for the TreeNodeAdvCollection class.
            </summary>
            <param name="index">The location of the TreeNodeAdv in the collection.</param>
            <value>The reference to the TreeNodeAdv.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SelectedNodesCollection">
            <summary>
            Specifies the list of <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/>s currently selected in a <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/>.
            </summary>
            <remarks>
            <p>This collection contains references to all selected nodes in the <b>TreeViewAdv</b>. 
            Adding a <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> to this collection will select the node. Removing a node from this collection will deselect the node.</p>
            <p>Whenever a node is selected/deselected, either by user action or in code, 
            it is automatically added/removed from the <b>SelectedNodes</b> collection.</p>
            <p>This collection is read-only, which means you can add and remove elements but cannot change
            the existing elements.</p>
            <p>You can listen to new selections being added to this collection via the collection's
            <see cref="E:Syncfusion.Collections.ArrayListExt.CollectionChanged"/> event handler
            or listen to the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/>'s <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeSelect"/> event.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SelectedNodesCollection.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
            <remarks>This collection is always read-only. But you can still add/remove nodes.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.SelectedNodesCollection.AddHandlers(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.SelectedNodesCollection.Clone" -->
        <member name="P:Syncfusion.Windows.Forms.Tools.SelectedNodesCollection.Item(System.Int32)">
            <summary>
            Returns a node at the specified index.
            </summary>
            <remarks>Note that you cannot change the entry at a particular index.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCollectionEditor">
            <summary>
            Summary description for TreeNodeAdvCollectionEditor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvBaseStylesEditor">
            <summary>
            Summary description for TreeNodeAdvBaseStylesEditor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvConverter">
            <summary>
            Summary description for TreeNodeAdvConverter.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvPaintEventArgs">
            <summary>
            Event args that are passed in the DrawNode event of the TreeViewAdv control. 
            Contains information about the appearance of the node and the location and sizes of different parts of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvPaintBackgroundEventArgs.BrushInfo">
            <summary>
            The BrushInfo with which the background will be painted by default, if you don't 
            mark this event as handled.
            </summary>
            <remarks>You can optionally change the properties of this BrushInfo object 
            or provide a new BrushInfo without
            marking this event as handled <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvPaintBackgroundEventArgs.Handled"/>.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoStore">
            <summary>
            Summary description for TreeViewAdvStyleInfoStore.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvStyleInfoIdentity.Dispose">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvStyleInfoIdentity.#ctor(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)">
            <summary>
            Call this constructor only to initialize ChildStyles. Assumption is made in GetBaseStyles
            that this is called only for ChildStyles.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvStyleInfoIdentity.GetBaseStyles(Syncfusion.Styles.IStyleInfo)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvStyleInfoIdentity.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvStyleInfoIdentity.OnStyleChanged(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoIdentity.Dispose">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoIdentity.GetBaseStyles(Syncfusion.Styles.IStyleInfo)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoIdentity.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfoIdentity.OnStyleChanged(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv">
            <summary>
            The TreeViewAdv control is an advanced tree control that surpasses the functionality and look of the standard TreeView control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeViewAdv.m_highlightedNode">
            <summary>
            Node which must be highlighted like parent for dragging.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.Tools.TreeViewAdv.m_bAllowDropStubWorks" -->
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeViewAdv.m_bKeepDottedSelection">
            <summary>
            Value which indicates if control must draw dotted rectangle around 
            selected node then it has no focus.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeViewAdv.m_bKeepDragCapturePoint">
            <summary>
            Value which indicates if cue image should be drawn 
            at a distance below the mouse cursor while draging or not 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.WndProc(System.Windows.Forms.Message@)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.Syncfusion#Windows#Forms#IProvideCustomContextMenuPositionalInformation#GetMenuPositionForKeyboardInvoke">
            <summary>
            Implement this interface to support keyboard based (Shift+F10) context menu 
            invocation. The context menu will then appear near the selected node.
            </summary>
            <remarks>The PopupMenu in the XPMenus framework will then call this method to
            determine the location for popup.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnThemeChanged(System.EventArgs)">
            <summary>
            Raises the ThemeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnThemeChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnThemeChanged in a derived
            class, be sure to call the base class's OnThemeChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnBorderStyleChanged">
            <summary>
            Raises the BorderStyleChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnBorderStyleChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBorderStyleChanged in a derived
            class, be sure to call the base class's OnBorderStyleChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnBorder3DStyleChanged">
            <summary>
            Raises the Border3DStyleChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorder3DStyleChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBorder3DStyleChanged 
            in a derived class, be sure to call the base class's 
            OnBorder3DStyleChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnBorderSingleChanged">
            <summary>
            Raises the BorderSingleChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorderSingleChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBorderSingleChanged 
            in a derived class, be sure to call the base class's 
            OnBorderSingleChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnBorderColorChanged">
            <summary>
            Raises the BorderColorChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorderColorChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBorderColorChanged 
            in a derived class, be sure to call the base class's 
            OnBorderColorChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnGradientBackgroundChanged">
            <summary>
            Raises the GradientBackgroundChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnGradientBackgroundChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnGradientBackgroundChanged 
            in a derived class, be sure to call the base class's 
            OnGradientBackgroundChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnVerticalGradientChanged">
            <summary>
            Raises the VerticalGradientChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnVerticalGradientChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnVerticalGradientChanged 
            in a derived class, be sure to call the base class's 
            OnVerticalGradientChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnGradientColorsChanged">
            <summary>
            Raises the GradientColorsChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnGradientColorsChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnGradientColorsChanged 
            in a derived class, be sure to call the base class's 
            OnGradientColorsChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnBorderSidesChanged">
            <summary>
            Raises the BorderSidesChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorderSidesChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OmBorderSidesChanged 
            in a derived class, be sure to call the base class's 
            OnBorderSidesChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ResetBackColor" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" -->
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeViewAdv.m_lastButtonDownPoint">
            <summary>
            Point to remember last click-point.
            NOTE : it will be set at OnMouseDown and null
             ( set to Point.Empty ) at OnMouseUp.
             ( need to fix issue # 180 )
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeViewAdv.checkedNodes">
            <summary>
            Collection contains checked nodes in tree
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeginEdit(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)">
            <summary>
            Begins the editing of the specified node.
            </summary>
            <param name="node">The node to edit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeginEdit">
            <summary>
            Begins the editing of the selected node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.EndEdit(System.Boolean)">
            <summary>
            Saves or Cancels the editing of the selected node.
            </summary>
            <param name="cancel">true to cancel editing; false to save changes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.EndEdit">
            <summary>
            Forces the end of the editing of the selected node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnNodeEditorValidateString(Syncfusion.Windows.Forms.Tools.TreeNodeAdvCancelableEditEventArgs)">
            <summary>
            Raises the NodeEditorValidateString event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnNodeEditorValidateString method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnNodeEditorValidateString in a derived
            class, be sure to call the base class's OnNodeEditorValidateString method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnNodeEditorValidating(Syncfusion.Windows.Forms.Tools.TreeNodeAdvCancelableEditEventArgs)">
            <summary>
            Raises the NodeEditorValidating event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnNodeEditorValidating method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnNodeEditorValidating in a derived
            class, be sure to call the base class's OnNodeEditorValidating method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnNodeEditorValidated(Syncfusion.Windows.Forms.Tools.TreeNodeAdvEditEventArgs)">
            <summary>
            Raises the NodeEditorValidated event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnNodeEditorValidated method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnNodeEditorValidated in a derived
            class, be sure to call the base class's OnNodeEditorValidated method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnBeforeEdit(Syncfusion.Windows.Forms.Tools.TreeNodeAdvBeforeEditEventArgs)">
            <summary>
            Raises the BeforeEdit event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnBeforeEdit method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBeforeEdit in a derived
            class, be sure to call the base class's OnBeforeEdit method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.RaiseItemDrag(System.Windows.Forms.ItemDragEventArgs)">
            <summary>
            Will call the <see cref="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)"/> to raise the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ItemDrag"/> event.
            </summary>
            <param name="e">An ItemDragEventArgs that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)">
            <summary>
            Raises the ItemDrag event.
            </summary>
            <param name="e">An ItemDragEventArgs that contains the event data.</param>
            <remarks>
            <para>The OnItemDrag method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnItemDrag in a derived
            class, be sure to call the base class's OnItemDrag method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnNodeBackgroundPaint(Syncfusion.Windows.Forms.Tools.TreeNodeAdvPaintBackgroundEventArgs)">
            <summary>
            Raises the NodeBackgroundPaint event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnNodeBackgroundPaint method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnNodeBackgroundPaint in a derived
            class, be sure to call the base class's OnNodeBackgroundPaint method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnBeforeNodePaint(Syncfusion.Windows.Forms.Tools.TreeNodeAdvPaintEventArgs)">
            <summary>
            Raises the BeforeNodePaint event.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvPaintEventArgs"/> that contains the event data.</param>
            <remarks>
            <para>The OnBeforeNodePaint method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBeforeNodePaint in a derived
            class, be sure to call the base class's OnBeforeNodePaint method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnAfterNodePaint(Syncfusion.Windows.Forms.Tools.TreeNodeAdvPaintEventArgs)">
            <summary>
            Raises the AfterNodePaint event.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvPaintEventArgs"/> that contains the event data.</param>
            <remarks>
            <para>The OnAfterNodePaint method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnAfterNodePaint in a derived
            class, be sure to call the base class's OnAfterNodePaint method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnBeforeExpand(Syncfusion.Windows.Forms.Tools.TreeViewAdvCancelableNodeEventArgs)">
            <summary>
            Raises the BeforeExpand event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnBeforeExpand method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBeforeExpand in a derived
            class, be sure to call the base class's OnBeforeExpand method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnBeforeCollapse(Syncfusion.Windows.Forms.Tools.TreeViewAdvCancelableNodeEventArgs)">
            <summary>
            Raises the BeforeCollapse event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnBeforeCollapse method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBeforeCollapse in a derived
            class, be sure to call the base class's OnBeforeCollapse method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnAfterExpand(Syncfusion.Windows.Forms.Tools.TreeViewAdvNodeEventArgs)">
            <summary>
            Raises the AfterExpand event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnAfterExpand method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnAfterExpand in a derived
            class, be sure to call the base class's OnAfterExpand method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnAfterCollapse(Syncfusion.Windows.Forms.Tools.TreeViewAdvNodeEventArgs)">
            <summary>
            Raises the AfterCollapse event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnAfterCollapse method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnAfterCollapse in a derived
            class, be sure to call the base class's OnAfterCollapse method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnAfterSelect(System.EventArgs)">
            <summary>
            Raises the AfterSelect event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnAfterSelect method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnAfterSelect in a derived
            class, be sure to call the base class's OnAfterSelect method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnAfterCheck(Syncfusion.Windows.Forms.Tools.TreeNodeAdvEventArgs)">
            <summary>
            Raises the AfterCheck event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvEventArgs"/> that contains the event data.</param>
            <remarks>
            <para>The OnAfterCheck method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnAfterCheck in a derived
            class, be sure to call the base class's OnAfterCheck method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnAfterInteractiveChecks(Syncfusion.Windows.Forms.Tools.TreeNodeAdvEventArgs)">
            <summary>
            Raises the AfterInteractiveChecks event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvEventArgs"/> that contains the event data.</param>
            <remarks>
            <para>The OnAfterInteractiveChecks method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnAfterInteractiveChecks in a derived
            class, be sure to call the base class's OnAfterInteractiveChecks method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnBeforeSelect(Syncfusion.Windows.Forms.Tools.TreeViewAdvCancelableSelectionEventArgs)">
            <summary>
            Raises the BeforeSelect event.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdvCancelableSelectionEventArgs"/> that contains the event data.</param>
            <remarks>
            <para>The OnBeforeSelect method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBeforeSelect in a derived
            class, be sure to call the base class's OnBeforeSelect method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnBeforeCheck(Syncfusion.Windows.Forms.Tools.TreeNodeAdvBeforeCheckEventArgs)">
            <summary>
            Raises the BeforeCheck event.
            </summary>
            <param name="e">An <see cref="!:TreeViewAdvBeforeCheckEventArgs"/> that contains the event data.</param>
            <remarks>
            <para>The OnBeforeCheck method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBeforeCheck in a derived
            class, be sure to call the base class's OnBeforeCheck method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ResetNoChildrenImgIndex">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NoChildrenImgIndex"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ResetClosedImgIndex">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ClosedImgIndex"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ResetOpenImgIndex">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OpenImgIndex"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ResetShowOptionButtons">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ShowOptionButtons"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ResetShowPlusMinus">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ShowPlusMinus"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ResetInteractiveCheckBoxes">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.InteractiveCheckBoxes"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ResetShowCheckBoxes">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ShowCheckBoxes"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SetSelectedNode(System.Collections.ArrayList,System.Collections.ArrayList,Syncfusion.Windows.Forms.Tools.TreeViewAdvAction,System.Boolean,System.Boolean)">
            <summary>
            This method is used internally the tree control to add and remove selected nodes. This
            method will fire the appopriate selection events to let the user cancel the selection, etc.
            </summary>
            <param name="nodesToAdd">The nodes to add.</param>
            <param name="nodesToRemove">The nodes to remove.</param>
            <param name="action">Specifies what kind of action triggered this call.</param>
            <param name="fireEvent">Specifies whether selection events should be fired before and after this selection change.</param>
            <param name="forceRemove">Specifies if the specified nodes to be removed from selection will be removed even if the user
            cancelled the selection change the BeforeSelect event handler.</param>
            <returns>Returns true if the selection changed; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ResetItemHeight">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ItemHeight"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.CreateAccessibilityInstance">
            <override/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnEnter(System.EventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SetDefaultSelectionOnEnter">
            <summary>
            Will select a default node (the first visible one) if the tree did not
            have anything focused.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnGotFocus(System.EventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnLostFocus(System.EventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.#ctor">
            <summary>
            Creates a new TreeViewAdv control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.Print">
            <summary>
            Begins the printing process of the TreeViewAdv.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.GetDraggedNodesBitmap">
            <summary>
            Returns a <see cref="T:System.Drawing.Bitmap"/> that contains the image of the dragged nodes
            with it's state image.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> instance when there is atleast
            one selected node. Null otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.GetSelectedNodesRectangle(System.Drawing.Rectangle[],Syncfusion.Windows.Forms.Tools.TreeNodeAdv[])">
            <summary>
            Will return the smallest rectangle enclosing the selected region of all the nodes specified.
            </summary>
            <param name="rects">The individual rectangles representing each node.</param>
            <param name="tnas">The nodes whose selected region is to be included in the resultant rect.</param>
            <returns>The bounding Rectangle.</returns>
            <remarks>The node's text and left images will be included in the rectangles.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.DrawVerticalLines(System.Drawing.Graphics,Syncfusion.Windows.Forms.Tools.TreeNodeAdv,Syncfusion.Windows.Forms.Tools.TreeNodeAdv,System.Int32,System.Int32)">
            <summary>
            Draws the vertical lines of the tree.
            </summary>
            <param name="g">Graphics</param>
            <param name="node">Node to draw the vertical lines to.</param>
            <param name="rowIndex">the RowIndex of the node.</param>
            <param name="lastNode">The Last Visible Node Row Index for comparing if in the node iteration nodes have passed it.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnPaint(System.Windows.Forms.PaintEventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.PointToNode(System.Drawing.Point)">
            <summary>
            Returns the tree node at the specified point in client co-ords.
            </summary>
            <param name="pt">The point in client co-ords.</param>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NodeToPoint(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)">
            <summary>
            Returns the location of the tree node in client co-ords.
            </summary>
            <param name="node">The <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> whose location you need.</param>
            <returns>A <see cref="T:System.Drawing.Point"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.GetHeightOfRows(System.Int32,System.Int32)">
            <summary>
            Returns the total height of the rows from the specified start to end.
            </summary>
            <param name="start">The top row.</param>
            <param name="end">The bottom row.</param>
            <returns>The total height.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NodeToRectangle(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)">
            <summary>
            Returns the rectangular area in which the tree node will be drawn.
            </summary>
            <param name="node">A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/>.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.RowIndexToNode(System.Int32)">
            <summary>
            Returns the tree node at the specified row index.
            </summary>
            <param name="rowIndex">The row index.</param>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NodeToRowIndex(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)">
            <summary>
            Returns the row index of a tree node.
            </summary>
            <param name="node">A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/>.</param>
            <returns>The row index.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.CancelMode">
            <summary>
            Call this method to cancel any current mouse based selection and edit mode.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnVScrollBarValueChanged(System.Object,System.EventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnHScrollBarValueChanged(System.Object,System.EventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnWindowScrolled(Syncfusion.Windows.Forms.ScrollWindowEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnSizeChanged(System.EventArgs)">
            <override/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.GetNodeFromPath(System.String)">
            <summary>
            Returns a node from the specified path. Make sure that the path does not end with a separator when calling this.
            </summary>
            <param name="path">The path of the node.</param>
            <returns>The node that has the specified path.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.GetPathFromNode(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)">
            <summary>
            Returns the path of the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnDoubleClick(System.EventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SetSelectionBaseNode(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnFontChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ExtendSelectionTo(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)">
            <summary>
            Extend the selection to the specified node.
            </summary>
            <param name="selNode">A TreeNodeAdv.</param>
            <remarks>This method will not do anything if the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SelectionMode"/>
            property is set to <b>TreeSelectionMode.Single</b>.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ExtendSelectionTo(Syncfusion.Windows.Forms.Tools.TreeNodeAdv,System.Boolean)">
            <summary>
            Extend the selection to the specified node.
            </summary>
            <param name="selNode">A TreeNodeAdv.</param>
            <param name="removeCurrentMultipleSelection">Specifies whether or not any current selection should be removed.</param>
            <remarks>This method will not do anything if the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SelectionMode"/>
            property is set to <b>TreeSelectionMode.Single</b>.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnMouseLeave(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
            <summary>
            Begins a drag-and-drop operation.
            Added by lucas in order to resolve problem 169.
            </summary>
            <param name="data">The data to drag.</param>
            <param name="allowedEffects">One of the DragDropEffects values.</param>
            <returns>A value from the DragDropEffects enumeration that
             represents the final effect that was performed
             during the drag-and-drop operation.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnMouseHover(System.EventArgs)">
            <override/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnSetCursor(System.Windows.Forms.Message@)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnDragEnter(System.Windows.Forms.DragEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnDragLeave(System.EventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <override/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnDragDrop(System.Windows.Forms.DragEventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ProcessDialogKey(System.Windows.Forms.Keys)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.IsInputKey(System.Windows.Forms.Keys)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <override/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.IsInputChar(System.Char)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OnUpdatingChanged(System.EventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.MeasureDisplayStringSize(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            <summary>
            Returns the width required to draw the text specified using the font specified.
            </summary>
            <param name="graphics">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="text">The text that is to be drawn.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> using which to draw.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.CollapseAll">
            <summary>
            Collapses all the tree nodes.
            </summary>
            <remarks>
            <p>The CollapseAll method collapses all the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> 
            objects, including all the child tree nodes, that are in the 
            <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/> control.</p>
            <p>The state of a <b>TreeNodeAdv</b> persists. For example, suppose that 
            a parent tree node is expanded. If the child tree nodes were not 
            previously collapsed, they will appear in their previously-expanded 
            state. Calling the <b>CollapseAll</b> method ensures that all the tree nodes 
            appear in the collapsed state.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ExpandAll">
            <summary>
            Expands all the tree nodes.
            </summary>
            <remarks>
            <p>The <b>ExpandAll</b> method expands all the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> 
            objects, including all the child tree nodes, that are in the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/> 
            control.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.GetNodeCount(System.Boolean)">
            <summary>
            Retrieves the number of tree nodes, optionally including those in all 
            subtrees, assigned to the tree view control.
            </summary>
            <param name="includeSubTrees"><b>true</b> to count the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> 
            items that the subtrees contain; otherwise, false. </param>
            <returns>The number of tree nodes, optionally including those in all subtrees, assigned to the tree view control.</returns>
            <remarks>
            If includeSubTrees is <b>true</b>, the result is the number of all the tree nodes in the entire tree structure.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.EnsureVisible(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)">
            <summary>
            Scrolls the control so that the specified node becomes visible.
            </summary>
            <param name="node">The node that requires visibility.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.EnsureVisible(Syncfusion.Windows.Forms.Tools.TreeNodeAdv,System.Boolean)">
            <summary>
            Scrolls the control so that the specified node becomes visible and 
            optionally force it to be the top-most visible node.
            </summary>
            <param name="node">The node that is to be scrolled.</param>
            <param name="showOnTop">true to force it to be the the top-most visible node; false to just scroll it into view.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.GetNodeAtPoint(System.Int32,System.Int32)">
            <summary>
            Returns the node at the specified location.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>The node at the point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.GetNodeAtPoint(System.Drawing.Point)">
            <summary>
            Returns the node at the specified location.
            </summary>
            <param name="pt"></param>
            <returns>The node at the point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.GetNodeAtPoint(System.Drawing.Point,System.Boolean)">
            <summary>
            Returns the node at the specified location.
            </summary>
            <param name="pt">Location.</param>
            <param name="textBounds">Indicates if the testing will be done using the bounds of the text, not the whole bounts of the node.</param>
            <returns>The node at the point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.GetNodeAtPoint(System.Drawing.Point,System.Boolean,System.Boolean)">
            <summary>
            Returns the node at the specified location.
            </summary>
            <param name="pt">Location.</param>
            <param name="textBounds">Indicates if the testing will be done using the bounds of the text, not the whole bounts of the node.</param>
            <param name="textOrImageBounds">Indicates if the testing will be done using the bounds of the images and text, 
            not the whole bounts of the node.</param>
            <returns>The node at the point.</returns>
            <remarks>If both the textBounds and textOrImageBounds params are false then the testing will be done on the 
            whole node.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.GetNodeAtPointEx(System.Drawing.Point)">
            <summary>
            Returns node at specified point.  
            </summary>
            <param name="pt">Specified point.</param>
            <returns>Node at specified point if exist, otherwise null.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.KeepDottedSelection">
            <summary>
            Gets or sets value which indicates if control must draw dotted rectangle around 
            selected node then it has no focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.KeepDragCapturePoint">
            <summary>
            Gets or sets value which indicates if cue image should be drawn 
            at a distance below the mouse cursor while draging or not. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.IgnoreThemeBackground">
            <summary>
            Indicates if the control will ignore the theme's background color and draw 
            the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BackgroundColor"/> instead when <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ThemesEnabled"/> is true.
            </summary>
            <value>true to ignore theme background; false otherwise. Default is false.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.CreateParams" -->
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ThemesEnabled">
            <summary>
            Indicates if the control and it's parts should be drawn themed.
            </summary>
            <value>true to enable themes; false otherwise. Default is false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BorderSides">
            <summary>
            Indicates the border sides of the control that will be drawn.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.Border3DSide"/> values. Default is Border3DSide.All.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BackColor" -->
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BackgroundColor">
            <summary>
            The background color, gradient and other styles can be set through 
            this property. This will override the BackColor setting.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/> provides this property to enable specialized
            custome gradient backgrounds.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BorderColor">
            <summary>
            Indicates the color of the 2D border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BorderSingle">
            <summary>
            Indicates the 2D border style.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.ButtonBorderStyle"/> values. Default is ButtonBorderStyle.Solid.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BorderStyle">
            <summary>
            Indicates the border style of the control.
            </summary>
            <value>One of the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BorderStyle"/> values. Default is BorderStyle.Fixed3D.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.Border3DStyle">
            <summary>
            Indicates the style of the 3D border.
            </summary>
            <value>One of the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.Border3DStyle"/> values. Default is Border3DStyle.Sunken.</value>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ItemDrag">
            <summary>
            Occurs when the user begins a drag of one or more items in the tree view control.
            </summary>
            <remarks>
            <p>The <b>Item</b> property in the argument is an array of TreeViewAdv nodes that
            are currently selected.</p>
            <p>
            You can choose to intiate a ole drag-and-drop operation in this event handler.
            </p>
            </remarks>
            <example>
            To initiate a ole drag-drop in this event handler:
            <code lang = "C#">
            // TreeViewAdv.ItemDrag event listener
            private void treeViewAdv1_ItemDrag(object sender, System.Windows.Forms.ItemDragEventArgs e)
            {
            	// Begin a drag and drop operation of the selected nodes (or some other data).
            	TreeNodeAdv[] nodes = e.Item as TreeNodeAdv[];
            	DragDropEffects result = this.DoDragDrop(nodes, DragDropEffects.Copy | DragDropEffects.Move);
            	// more app logic based on result...
            }
            </code>
            <code lang = "VB">
            ' TreeViewAdv.ItemDrag event listener
            Private Sub treeViewAdv1_ItemDrag(ByVal sender As Object, ByVal e As System.Windows.Forms.ItemDragEventArgs) Handles treeViewAdv2.ItemDrag
            	' Begin a drag and drop operation of the selected nodes (or some other data).
            	Dim nodes As TreeNodeAdv() = CType(e.Item, TreeNodeAdv())
            	Dim result As DragDropEffects = Me.DoDragDrop(nodes, DragDropEffects.Copy Or DragDropEffects.Move)
            	' more app logic based on result...
            End Sub 'treeViewAdv1_ItemDrag '
            </code>
            <para>Also take a look at our ..\Tools\Samples\Tree Package\TreeViewAdvDragDrop
            sample for more information on how to turn on drag-drop cues.</para>
            </example>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NodeEditorValidateString">
            <summary>
            Occurs when the text entered by the user changes in the Node editor control.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NodeEditorValidating">
            <summary>
            Occurs before the newly entered text by the user in the Node editor gets stored.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NodeEditorValidated">
            <summary>
            Occurs after the newly entered text by the user in the Node editor get stored.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeEdit">
            <summary>
            Occurs before a node gets into edit mode.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeNodePaint">
            <summary>
            Fired before a node is being painted when the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OwnerDrawNodes"/> property is set to true.
            </summary>
            <remarks>
            Handle this event when you want to draw the node yourself. If you set the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvPaintEventArgs.Handled"/> property to true the TreeViewAdv assumes that you have drawn all the contents of the node and no additional drawing will be done by the TreeViewAdv.
            If you leave it to false the TreeViewAdv will automatically draw the usual contents of the node. Do not draw the background of the node here. Otherwise it will draw over the vertical line. Use the NodeBackgroundPaint for painting the background.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterNodePaint">
            <summary>
            Fired after a node is being painted when the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OwnerDrawNodes"/> property is set to true.
            </summary>
            <remarks>
            This event is ideal for custom drawing portions of the node in additon to the default drawing.
            The HandledXXX properties of the event args can be ignored for this event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NodeBackgroundPaint">
            <summary>
            Fired to draw the background of a node if the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OwnerDrawNodesBackground"/> property is set.
            </summary>
            <remarks>
            Handle this event when you want to draw the background of the node yourself.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeSelect">
            <summary>
            Occurs before a node is selected.
            </summary>
            <remarks>
            The collection in the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdvSelectionEventArgs.SelectedNodes"/> property is 
            both read-only and fixed size.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeCheck">
            <summary>
            Occurs before a node's checkbox is checked.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterSelect">
            <summary>
            Occurs after a node is selected.
            </summary>
            <remarks>
            You can determine the selected node using the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SelectedNode"/> property.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterCheck">
            <summary>
            Occurs after a node is checked.
            </summary>
            <remarks>
            <para>This event will be fired when the node's <see cref="!:TreeNodeAdv.CheckedState"/> property has changed or when a new 
            node has been <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Optioned"/>.</para>
            <para>You could alternatively listen to the individual node's 
            <see cref="E:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.CheckStateChanged"/> event.</para>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterInteractiveChecks">
            <summary>
            Occurs after one or more node's CheckState has changed due to <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.InteractiveCheckBox"/> setting.
            </summary>
            <remarks>
            <para>When <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.InteractiveCheckBox"/> is turned on in a parent node, changing the parent's <see cref="!:TreeNodeAdv.CheckedState"/> or one
            of it's children's will cause the CheckStates of the parent and the child nodes to be updated appropriately.
            This event will be fired at the end of all these updates.</para>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeExpand">
            <summary>
            Occurs before a node is expanded.
            </summary>
            <remarks>
            Handle this event when you want to do some processing of the specified node before it's expanded.
            Use this event when you set the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.LoadOnDemand"/> property to true to add child nodes to the specified node before it is expanded.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeCollapse">
            <summary>
            Occurs before a node is collapsed.
            </summary>
            <remarks>
            Handle this event when you want to do some processing of the specified node before it's collapsed.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterExpand">
            <summary>
            Occurs after a node is expanded.
            </summary>
            <remarks>
            Handle this event when you want to do some processing of the specified node after it's expanded.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterCollapse">
            <summary>
            Occurs after a node is collapsed.
            </summary>
            <remarks>
            Handle this event when you want to do some processing of the specified node after it's collapsed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ShowDragNodeCue">
            <summary>
            Specifies whether a alpha blended image of the selected nodes
            should be drawn beside the cursor during drag and drop.
            </summary>
            <value>
            <para>True to show a alpha blended image; false otherwise. Default is true.</para>
            <para>You could customize the style in which nodes are drawn in the above image by 
            adding a "DragNodeCueStyle" style to the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BaseStyles"/> collection.</para>
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.HelpTextControl">
            <summary>
            The helptext control of the TreeViewAdv.
            </summary>
            <remarks>This is the control used to display the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.HelpText"/> of the nodes.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ToolTipControl">
            <summary>
            The tooltip control of the TreeViewAdv.
            </summary>
            <remarks>
            This is the control used to display the tooltip for the nodes when the text of the nodes are partially visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SelectedNodeForeColor">
            <summary>
            Indicates the text color of the selected node.
            </summary>
            <value>Default is a system color.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.InactiveSelectedNodeForeColor">
            <summary>
            Indicates the text color of the selected node when not focused.
            </summary>
            <value>Default is a system color.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SelectedNodeBackground">
            <summary>
            Indicates the background of the selected node.
            </summary>
            <value>Default is based on a system color.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.InactiveSelectedNodeBackground">
            <summary>
            Indicates the background of the selected node when the control is not focused.
            </summary>
            <value>Default is based on a system color.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.DragOnText">
            <summary>
            Indicates if the drag-drop operation will occur only if the node is dragged on the text area.
            </summary>
            <value>Default is true.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NoChildrenImgIndex">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.StateImageList"/> index value of the image that is displayed when a tree node has no children.
            </summary>
            <value>An index into the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.StateImageList"/>. Default is 0.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ClosedImgIndex">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.StateImageList"/> index value of the image that is displayed when a tree node is collapsed.
            </summary>
            <value>An index into the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.StateImageList"/>. Default is 1.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OpenImgIndex">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.StateImageList"/> index value of the image that is displayed when a tree node is expanded.
            </summary>
            <value>An index into the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.StateImageList"/>. Default is 2.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.StateImageList">
            <summary>
            Indicates the imagelist that holds images to be drawn based on the state of the node.
            </summary>
            <remarks>The <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OpenImgIndex"/>, <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ClosedImgIndex"/> and
            <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NoChildrenImgIndex"/> properties refer to an image inside this list.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.RightImageList">
            <summary>
            Indicates the imagelist that holds images to be drawn on the right of the node.
            </summary>
            <remarks>The <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.RightImageIndices"/> will then indicate
            which images are to be drawn in the node.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.LeftImageList">
            <summary>
            Indicates the imagelist that holds images to be drawn on the left of the node.
            </summary>
            <remarks>The <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.LeftImageIndices"/> will then indicate
            which images are to be drawn in the node.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.TransparentControls">
            <summary>
            Indicates if the controls (eg PlusMinus) will have a transparent background.
            Setting this property slows down drawing of the TreeViewAdv control.
            </summary>
            <value>Default is false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.EnsureVisibleSelectedNode">
            <summary>
            Indicates if the selected node will be brought to view by scrolling, if necessary.
            </summary>
            <value>Default is true.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SelectionMode">
            <summary>
            Indicates the selection mode for the tree.
            </summary>
            <value>Default is <b>TreeSelectionMode.Single</b>.</value>
            <remarks>
            Note that setting this property does not affect the current selection state.
            For example, if the current selection includes multiple nodes and this property gets set
            to <b>TreeSelectionMode.Single</b>, then the <see cref="!:SelectionNodes"/>
            will not be cleared to show a single selection.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BaseStyles">
            <summary>
            Contains a collection of base styles used in the tree.
            </summary>
            <value>A Hashtable of style names vs styles. The style names are of type string and
            the styles are of type <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvStyleInfo"/>.</value>
            <remarks>
            This collection holds the standard style that specifies the global node settings
            for all the nodes (is named "Standard"), the node level styles for nodes at specific levels (should use the
            convention "NodeLevelX") and other custom base styles. Also when you specify a style named
            "DragNodeCueStyle" that style will be applied on the nodes before preparing the 
            drag-cue bitmap during drag-and-drop, a feature that can be turned on using the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ShowDragNodeCue"/> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.StandardStyle">
            <summary>
            Specifies the standard style that all the nodes inherit from, by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AddSeparatorAtEnd">
            <summary>
            Indicates if the <see cref="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.GetPath(System.String)"/> method adds a separator at the end of the path string returned.
            </summary>
            <value>Default is false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.GutterSpace">
            <summary>
            Indicates the space left on the left side of the control.
            </summary>
            <value>Default is 3.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.LabelEdit">
            <summary>
            Gets or sets a value indicating whether the label text of the tree nodes can be edited.
            </summary>
            <value>true if the label text of the tree nodes can be edited; otherwise, false. The default is false.</value>
            <remarks>
            The <see cref="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeginEdit(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)"/> method will let you begin editing a node
            programatically irrespective of this setting.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OwnerDrawNodes">
            <summary>
            Indicates if the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeNodePaint"/> and <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterNodePaint"/> events will be fired before drawing a node.
            </summary>
            <value>Default value is false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.OwnerDrawNodesBackground">
            <summary>
            Indicates if the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NodeBackgroundPaint"/> event will be fired before drawing a node's background.
            </summary>
            <value>Default value is false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.LoadOnDemand">
            <summary>
            Specifies if the tree should follow the load-on-demand paradigm.
            </summary>
            <value>Default value is false.</value>
            <remarks>
            <para>When set to true, all the nodes will have the plus-minus set to visible to begin with. 
            You should then handle the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeExpand"/> event of the nodes and add subnodes to the respective nodes.
            The tree will then keep or hide the plus-minus based on whether or not children were added.</para>
            <para>This provides you a way to delay loading nodes in trees until the user initiates a node expand.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.Printing">
            <summary>
            Indicates if the TreeViewAdv is printing.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.PrintDocument">
            <summary>
            The PrintDocument of the TreeViewAdv.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ShowOptionButtons">
            <summary>
            Indicates if the nodes will have an option button.
            </summary>
            <value>Default value is false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.IsEditing">
            <summary>
            Indicates if the selected node is in editing mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.PathSeparator">
            <summary>
            Indicates the separator string that splits the path of a node. 
            Call <see cref="!:GetPath"/> to get the path of the specified node.
            </summary>
            <value>Default value is "\".</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ShowPlusMinus">
            <summary>
            Indicates if the plus minus controls are visible.
            </summary>
            <value>Default value is true.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ShowLines">
            <summary>
            Indicates if the tree lines are visible.
            </summary>
            <value>Default value is true.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ShowRootLines">
            <summary>
            Gets or sets a value indicating whether lines are drawn between the tree nodes that are at the root of the tree view.
            </summary>
            <value>Default value is true.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.Indent">
            <summary>
            Indicates the indent of the child nodes from the parent node.
            </summary>
            <value>Default value is 19.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.HotTracking">
            <summary>
            Indicates if the nodes will have a hot tracked appearance when the mouse cursor is hovering over them.
            </summary>
            <value>Default value is false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AllowMouseBasedSelection">
            <summary>
            Indicates multiple nodes can be selected with mouse down and drag.
            </summary>
            <value>Default value is false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SelectedNodes">
            <summary>
            Indicates the selected nodes of the TreeViewAdv.
            </summary>
            <remarks>Use this property only when <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SelectionMode"/> property
            lets you select multiple nodes. Otherwise, use <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SelectedNode"/> to get the single selected node.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.CheckedNodes">
            <summary>
            Indicates the checked nodes of the TreeViewAdv.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.HideSelection">
            <summary>
            Indicates if the TreeViewAdv will hide it's selected nodes when not focused.
            </summary>
            <value>True to hide selection; false otherwise. Default value is true.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.FullRowSelect">
            <summary>
            Indicates if the complete row will be highlighted when a node is selected.
            </summary>
            <value>Default value is false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.LineColor">
            <summary>
            Indicates the color of the tree lines.
            </summary>
            <value>Default is Color.Gray.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.LineStyle">
            <summary>
            Indicates the line style of the tree lines.
            </summary>
            <value>Default value is DashStyle.Dot.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AllowKeyboardSearch">
            <summary>
            Gets/sets a value to indicate if keyboard based searching should be allowed.
            </summary>
            <value>Default value is true.</value>
            <remarks>
            When set to true, the users can key in char keys to browse to the next node that begins with
            that character(s). Multiple characters entered in succession will be assumed to be part of the
            same word, so search will be performed on that substring. Search will be restricted to 
            <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.IsVisible"/> and <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdv.Expanded"/> nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.InteractiveCheckBoxes">
            <summary>
            Indicates if the state of the parent node's checkbox is based on the checkstate of it's child nodes' checkboxes.
            </summary>
            <value>Default value is false.</value>
            <remarks>
            If all child nodes are checked the parent node is also checked. The same with unchecked.
            If some child nodes are checked and some are unchecked then the parent node will have an indeterminate state.
            If the CheckState of the parent node is set by code or by clicking on it the state of all subnodes will be set to that state.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ShowCheckBoxes">
            <summary>
            Indicates if check boxes will be shown for the ndoes.
            </summary>
            <value>Default value is false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SelectedNode">
            <summary>
            Indicates the selected node of the TreeViewAdv.
            </summary>
            <remarks>
            <para>The tree fires the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeSelect"/> event to let you cancel the change 
            and <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterSelect"/> event to notify you of a new selected node.</para>
            <para>Use to <see cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SelectedNodes"/> property when multi-node selection is turned on.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.SelectionBaseNode">
            <summary>
            The base node, based on which multiple selection will be performed.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> instance or null if there is no such node.</value>
            <remarks>
            This node will be consulted while extending the selection in a multi-select
            scenario via user interaction or when calling the <see cref="M:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ExtendSelectionTo(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)"/> method.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.ItemHeight">
            <summary>
            Indicates the default height of the nodes.
            </summary>
            <value>Default value is dependant on the control's font height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.Root">
            <summary>
            Specifies the root node of the TreeViewAdv.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.Nodes">
            <summary>
            Indicates the top-level nodes collection of the TreeViewAdv.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.RMouseDownNode">
            <summary>
            Indicates the node on which the user did a right-mouse down.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> instance.</value>
            <remarks>
            <para>This property will return a non-null value only when the user
            has his mouse down or when the context menu is being shown for the tree.</para>
            <para>Use this property in your context-menu's popup event to determine on which
            node the user had right-clicked. However, do not use this property in a context menu
            item's Click property as this would be set to null by then. If the user right-clicked in the empty region then
            this property will return null.</para>
            <para>
            When the user instead used the keyboard to invoke the context menu (via Shift+F10)
            then this property will return the current selected node and the
            menu will also appear beside the selected node.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AllowIncreaseSmallChange">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.VScroll">
            <summary>
            Overriden. Enables or disables vertical scrollbar. This property will be set/reset by the tree as and when required.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.HScroll">
            <summary>
            Overriden. Enables or disables horizontal scrollbar. This property will be set/reset by the tree as and when required.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.HScrollPos">
            <summary>
            The position of the Horizontal scrollbar
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.VScrollPos">
            <summary>
            The position of the Vertical scrollbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.TopVisibleNode">
            <summary>
            Gets the first fully-visible tree node in the tree view control.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> that represents the first fully-visible 
            tree node in the tree view control.</value>
            <remarks>
            Initially, the <b>TopVisibleNode</b> returns the first root tree node, which is 
            located at the top of the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/>. However, if the user has scrolled 
            the contents, another tree node might be at the top.
            <seealso cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.TopVisibleNode"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.VisibleCount">
            <summary>
            Gets the number of tree nodes that can be fully visible in the tree view 
            control.
            </summary>
            <value>
            The number of <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> items that can be fully visible in 
            the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/> control.
            </value>
            <remarks>
            The <b>VisibleCount</b> value can be greater than the number of tree nodes 
            in the tree view. The value is calculated by dividing the height of the 
            client window by the height of a tree node item. The result is the total 
            number of <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> objects that the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/> is 
            capable of displaying within its current dimensions.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.LastVisibleNode">
            <summary>
            Gets the last visible node.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> instance.</value>
            <remarks><seealso cref="P:Syncfusion.Windows.Forms.Tools.TreeViewAdv.TopVisibleNode"/></remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.AfterCheck"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvEventArgs">
            <summary>
            Provides data for the TreeViewAdv selection events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.TreeNodeAdv)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="node">A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.TreeNodeAdv,Syncfusion.Windows.Forms.Tools.TreeViewAdvAction)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="node">A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> instance.</param>
            <param name="action">A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdvAction"/> type.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvEventArgs.Action">
            <summary>
            Specifies the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdvAction"/> associated with the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvEventArgs.Node">
            <summary>
            Specifies the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> associated with the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvEditEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NodeEditorValidated"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCancelableEditEventHandler">
            <summary>
            <p>Represents the method that handles the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NodeEditorValidateString"/> 
            and <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NodeEditorValidating"/> event.</p>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCancelableEditEventArgs">
            <summary>
            Provides data for the cancelable validatation events in the TreeViewAdv.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvEditEventArgs">
            <summary>
            Provides data for the editing events in the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvEditEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.TreeNodeAdv,System.String)">
            <summary>
            Creates a new instance of the TreeNodeAdvEditEventArgs.
            </summary>
            <param name="node">A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> instance.</param>
            <param name="label">The label for the node.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvEditEventArgs.Label">
            <summary>
            Specifies the label for the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvEditEventArgs.Node">
            <summary>
            Specifies the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> that is currently being edited.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCancelableEditEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.TreeNodeAdv,System.String)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="node">A <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/> instance.</param>
            <param name="label">The new text for the node.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCancelableEditEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the event should be canceled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCancelableEditEventArgs.ContinueEditing">
            <summary>
            Specifies whether editing should end now.
            </summary>
            <value>This property is consulted only when <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvCancelableEditEventArgs.Cancel"/> is set to true.
            If you Cancel the operation and if this property is set
            to false, editing mode will end; otherwise editing mode will be preserved.
            Default is true.</value>
            <remarks>
            <p>This property will be ignored by the 
            <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NodeEditorValidateString"/> event.</p>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeViewAdvBeforeEditEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeEdit"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvBeforeEditEventArgs">
            <summary>
            Provides data for the <see cref="!:TreeNodeAdv.BeforeEdit"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeNodeAdvBeforeEditEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.TreeNodeAdv,System.Windows.Forms.TextBox)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="node">Specifies the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/>.</param>
            <param name="textBox">A <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvBeforeEditEventArgs.TextBox"/> instance.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvBeforeEditEventArgs.Node">
            <summary>
            Specifies the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdv"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvBeforeEditEventArgs.TextBox">
            <summary>
            Specifies the <see cref="P:Syncfusion.Windows.Forms.Tools.TreeNodeAdvBeforeEditEventArgs.TextBox"/> that is used to edit the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvPaintEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.BeforeNodePaint"/> event of the TreeViewAdv control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeNodeAdvPaintBackgroundEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdv.NodeBackgroundPaint"/> event of the TreeViewAdv control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeSelectionMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeSelectionMode.Single">
            <summary>
            Lets you select one node at a time.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeSelectionMode.MultiSelectSameLevel">
            <summary>
            Lets you select multiple nodes within the same level.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeSelectionMode.MultiSelectAll">
            <summary>
            Lets you select multiple nodes across all levels.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeViewAdvBaseStylesEditorForm">
            <summary>
            Summary description for TreeViewAdvBaseStylesEditorForm.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvBaseStylesEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvBaseStylesEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeViewDropPositions">
            <summary>
            Specifies the position where a drop can occur during drag-and-drop.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.QueryAllowedPositionsEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.QueryAllowedPositionsForNode"/>
            event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.QueryAllowedPositionsEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.TreeNodeAdv,Syncfusion.Windows.Forms.Tools.TreeViewDropPositions,Syncfusion.Windows.Forms.Tools.TreeViewDropPositions)">
            <summary>
            Creates a new instnance of the class.
            </summary>
            <param name="highLightNode">The node over which the mouse is during drag-and-drop.</param>
            <param name="highlightPosition">The computed drop-position.</param>
            <param name="allowedPositions">The allowed drop-positions.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.QueryAllowedPositionsEventArgs.ShowSelectionHighlight">
            <summary>
            Specifies whether or not the drag over node should be drawn with the selection highlight.
            </summary>
            <value>true to show the highlight; false otherwise. Default is true.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.QueryAllowedPositionsEventArgs.HighlightNode">
            <summary>
            Returns the current highlight-node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.QueryAllowedPositionsEventArgs.NewDropPosition">
            <summary>
            Returns the computed drop position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.QueryAllowedPositionsEventArgs.AllowedPositions">
            <summary>
            Specifies the allowed drop-positions.
            </summary>
            <remarks>Change this value if the want the prevent drop in the
            <see cref="P:Syncfusion.Windows.Forms.Tools.QueryAllowedPositionsEventArgs.NewDropPosition"/>.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker">
            <summary>
            TreeViewAdv Drag and Drop UI helper class.
            </summary>
            <remarks>
            <p>Use this class (will be referred to as "tracker" below) only when you want to support dropping adjacent (above or below) to a node.
            Otherwise simply listen to the <see cref="E:System.Windows.Forms.Control.DragOver"/> and <see cref="E:System.Windows.Forms.Control.DragDrop"/> events and provide/use the <see cref="!:System.Windows.Forms.DropEffect"/>.
            When used this tracker will draw indicators above or below a node while dragging an item
            over the node. The tracker need to be updated as shown below in the DragXXX events.</p>
            <p>
            The usage semantics for the tracker is as follows:
            </p>
            <list type="number">
            <item><description>Create an instance of this class and listen to the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.QueryAllowedPositionsForNode"/> event.</description></item>
            <item><description>In the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/>'s <b>DragOver</b> event update the highlight node with a call to the
            <see cref="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.SetHighlightNode(Syncfusion.Windows.Forms.Tools.TreeNodeAdv,System.Drawing.Point)"/> method.</description></item>
            <item><description>In the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/>'s <b>DragLeave</b> event clear the highlight node with a call to the
            <see cref="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.ClearHighlightNode"/> method.</description></item>
            <item><description>In the <see cref="E:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.QueryAllowedPositionsForNode"/> event handler, specify 
            whether a computed adjacent position should be allowed.</description></item>
            <item><description>In the <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/>'s <b>DragDrop</b> event get the highlight-node
            and the drop-position from the tracker and insert the new node(s) accordingly.</description></item>
            </list>
            </remarks>
            <example>
            Please take a look at our sample in the ..\Essential Tools\Samples\Tree Package\TreeViewAdvDragDrop folder
            for more information.
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.#ctor(Syncfusion.Windows.Forms.Tools.TreeViewAdv)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="tree">The <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/> instance where drag-and-drop will occur.</param>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.ClearHighlightNode">
            <summary>
            Clears the current highlight node setting.
            </summary>
            <remarks>Call this method from the TreeViewAdv's <b>DragLeave</b> and <b>DragDrop</b>(after
            you get the highlight information from the tracker class) events.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.SetHighlightNode(Syncfusion.Windows.Forms.Tools.TreeNodeAdv,System.Drawing.Point)">
            <summary>
            Lets you specify the node over which the mouse is currently hovering during drag-drop.
            </summary>
            <param name="highlightNode">The new highlight node.</param>
            <param name="ptInTree">The point in tree where the mouse is in the tree view's client co-ords.</param>
            <remarks>
            Call this method from the TreeViewAdv's <b>DragOver</b> method.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.QueryAllowedPositionsForNode">
            <summary>
            Occurs before drawing a highlight indicators above or below a node. 
            </summary>
            <remarks>You can listen to this event and prevent drawing highlights 
            for some specific nodes.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.EdgeSensitivity">
            <summary>
            This property will soon be replaced by the 
            <see cref="!:EdgeSensitiviyOnTop"/> and <see cref="!:EdgeSensitiviyAtBottom"/>
            properties, please use them instead.
            </summary>
            <value>Default is 0.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.EdgeSensitivityOnTop">
            <summary>
            Specifies a height for the top edge of a node while dragging over.
            </summary>
            <value>Default is -1.</value>
            <remarks>
            <p>
            By default (when value is negative), the top 1/3 of the node will be considered the top edge.
            This value will be used
            when you allow dropping before a node via the <see cref="P:Syncfusion.Windows.Forms.Tools.QueryAllowedPositionsEventArgs.AllowedPositions"/>
            property. Set this to 0 if you never want to drop on top of a node.
            </p>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.EdgeSensitivityAtBottom">
            <summary>
            Specifies a height for the bottom edge of a node while dragging over.
            </summary>
            <value>Default is -1.</value>
            <remarks>
            <p>
            By default (when value is negative), the bottom 1/3 of the node will be considered the bottom edge.
            This value will be used
            when you allow dropping below a node via the <see cref="P:Syncfusion.Windows.Forms.Tools.QueryAllowedPositionsEventArgs.AllowedPositions"/>
            property. Set this to 0 if you never want to drop below a node.
            </p>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.HotTrackDragOverNode">
            <summary>
            Specifies whether or not the drag over node should be drawn with the selected background.
            </summary>
            <default>True to draw selected; false otherwise. Default is true.</default>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.HighlightNode">
            <summary>
            The node over which the mouse is hovering for drop.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.DropPosition">
            <summary>
            The computed drop-position around the highlight node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TreeViewAdvDragHighlightTracker.WaitTimeBeforeExpand">
            <summary>
            Specifies the time interval after which a node will be expanded on mouse 
            hover during drag and drop.
            </summary>
            <value>Time in milliseconds. Default is 750.</value>
            <remarks>
            If you do not want a node to expand
            on drag over, set this value to -1.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.QueryAllowedPositionsEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:TreeViewAdv.QueryAllowedPositionsForNode"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TreeViewAdvEditorForm">
            <summary>
            Summary description for TreeViewAdvEditorForm.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TreeViewAdvEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TreeViewAdvEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.TreeViewAdvDesigner.OnMouseDown(System.Windows.Forms.MouseEventArgs)" -->
        <member name="T:Syncfusion.Windows.Forms.Tools.DomainUpDownExt">
            <summary>
            Extends the DomainUpDown to provide XP Look and Feel.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.NumericUpDownExt"/>
            <remarks>
            Take a look at the <see cref="P:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.ThemesEnabled"/> and
            <see cref="P:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.ThemedBorder"/> properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.DomainUpDownExt"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.OnTextBoxResize(System.Object,System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.OnHandleCreated(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.OnFontChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.UpdateHeight">
            <summary>
            Updates the height of the Control to the preferred height based on settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.PositionControls">
            <summary>
            Positions child controls based on settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.OnThemeChanged(System.EventArgs)">
            <summary>
            Raises the ThemeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnThemeChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnThemeChanged in a derived
            class, be sure to call the base class's OnThemeChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.OnBorder3DStyleChanged(System.EventArgs)">
            <summary>
            Raises the Border3DStyleChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorder3DStyleChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBorder3DStyleChanged 
            in a derived class, be sure to call the base class's 
            OnBorder3DStyleChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.OnBorderColorChanged(System.EventArgs)">
            <summary>
            Raises the BorderColorChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorderColorChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBorderColorChanged 
            in a derived class, be sure to call the base class's 
            OnBorderColorChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.OnBorderSidesChanged(System.EventArgs)">
            <summary>
            Raises the BorderSidesChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorderSidesChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OmBorderSidesChanged 
            in a derived class, be sure to call the base class's 
            OnBorderSidesChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.BorderSides">
            <summary>
            Indicates the border sides of the control that will be drawn in 3D mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.BorderColor">
            <summary>
            Indicates the color of the 2D border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.Border3DStyle">
            <summary>
            Indicates the style of the 3D border.
            </summary>
            <remarks>
            This style is used when the BorderStyle is Fixed3D and when XP Themed drawing is disabled.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.MaxLength">
            <summary>
            Gets or Sets the maximum length of the text that can be entered into the editable portion of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.CreateParams">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.UpDownAlign">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.BorderStyle">
            <override/>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.ThemeChanged">
            <summary>
            This event will be fired when the ThemesEnabled property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.ThemesEnabled">
            <summary>
            Specifies whether XP Themes (visual styles) should be used for this control when
            available.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.ThemedBorder">
            <summary>
            Specifies whether or not you want themed border around the control when themes are enabled.
            </summary>
            <remarks>
            This property is used only when the <see cref="P:Syncfusion.Windows.Forms.Tools.DomainUpDownExt.ThemesEnabled"/> property is set.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.NumericUpDownExt">
            <summary>
            Extends the NumericUpDown to provide XP Look and Feel.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DomainUpDownExt"/>
            <remarks>
            Take a look at the <see cref="P:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.ThemesEnabled"/> and
            <see cref="P:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.ThemedBorder"/> properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.NumericUpDownExt"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.OnTextBoxResize(System.Object,System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.OnHandleCreated(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.OnFontChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.UpdateHeight">
            <summary>
            Updates the height of the Control to the preferred height based on settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.PositionControls">
            <summary>
            Positions child controls based on settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.OnThemeChanged(System.EventArgs)">
            <summary>
            Raises the ThemeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnThemeChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnThemeChanged in a derived
            class, be sure to call the base class's OnThemeChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.OnBorder3DStyleChanged(System.EventArgs)">
            <summary>
            Raises the Border3DStyleChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorder3DStyleChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBorder3DStyleChanged 
            in a derived class, be sure to call the base class's 
            OnBorder3DStyleChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.OnBorderColorChanged(System.EventArgs)">
            <summary>
            Raises the BorderColorChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorderColorChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBorderColorChanged 
            in a derived class, be sure to call the base class's 
            OnBorderColorChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.OnBorderSidesChanged(System.EventArgs)">
            <summary>
            Raises the BorderSidesChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorderSidesChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OmBorderSidesChanged 
            in a derived class, be sure to call the base class's 
            OnBorderSidesChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.BorderSides">
            <summary>
            Indicates the border sides of the control that will be drawn in 3D mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.BorderColor">
            <summary>
            Indicates the color of the 2D border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.Border3DStyle">
            <summary>
            Indicates the style of the 3D border.
            </summary>
            <remarks>
            This style is used when the BorderStyle is Fixed3D and when XP Themed drawing is disabled.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.MaxLength">
            <summary>
            Gets or Sets the maximum length of the text that can be entered into the editable portion of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.CreateParams">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.UpDownAlign">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.BorderStyle">
            <override/>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.ThemeChanged">
            <summary>
            This event will be fired when the ThemesEnabled property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.ThemesEnabled">
            <summary>
            Specifies whether XP Themes (visual styles) should be used for this control when
            available.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.ThemedBorder">
            <summary>
            Specifies whether or not you want themed border around the control when themes are enabled.
            </summary>
            <remarks>
            This property is used only when the <see cref="P:Syncfusion.Windows.Forms.Tools.NumericUpDownExt.ThemesEnabled"/> property is set.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Wizard">
            <summary>
            The base class for wizard-like controls.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Wizard.EndInit">
            <summary>
            Called by the designer when the control is created for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Wizard.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Wizard.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Wizard.AddPage(Syncfusion.Windows.Forms.Tools.WizardPage)">
            <summary>
            Adds the specified page to the wizard.
            </summary>
            <param name="page">The <see cref="T:Syncfusion.Windows.Forms.Tools.WizardPage"/> to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Wizard.RemovePage">
            <summary>
            Remoevs the selectedPage.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Wizard.RemovePage(Syncfusion.Windows.Forms.Tools.WizardPage)">
            <summary>
            Removes the specified page.
            </summary>
            <param name="page">The <see cref="T:Syncfusion.Windows.Forms.Tools.WizardPage"/> to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Wizard.NextPage">
            <summary>
            Selects the nect page.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Wizard.PreviousPage">
            <summary>
            Selects the previous page.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Wizard.PageContainer">
            <summary>
            The Panel based class that holds the pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Wizard.CardLayout">
            <summary>
            The CardLayout component used to switch between the pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Wizard.WizardPages">
            <summary>
            The array that holds the pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Wizard.SelectedPage">
            <summary>
            The selected page.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.WizardControl">
            <summary>
            The WizardControl is a Control derived class that enables the creation of wizard applications. The manipulation of the WizardPages is easy through the designer verbs that are available to the user and it`s properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControl.OnEndInit">
            <summary>
            Initializes the dynamic controls used in the wizard.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControl.RemovePanels">
            <summary>
            Destroys the controls used in the wizard.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControl.OnBeforeNext(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the BeforeNext event.
            </summary>
            <param name="e">A CancelEventArgs that lets you cancel the action.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBeforeNext method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBeforeNext 
            in a derived class, be sure to call the base class's 
            OnBeforeNext method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControl.OnBeforeBack(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the BeforeBack event.
            </summary>
            <param name="e">A CancelEventArgs that lets you cancel the action.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBeforeBack method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBeforeBack 
            in a derived class, be sure to call the base class's 
            OnBeforeBack method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControl.OnBeforeFinish(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the BeforeFinish event.
            </summary>
            <param name="e">A CancelEventArgs that lets you cancel the action.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBeforeFinish method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBeforeFinish 
            in a derived class, be sure to call the base class's 
            OnBeforeFinish method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControl.HelpButton">
            <summary>
            Gets the Help button of the WizardControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControl.FinishButton">
            <summary>
            Gets the Finish button of the WizardControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControl.NextButton">
            <summary>
            Gets the Next button of the WizardControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControl.BackButton">
            <summary>
            Gets the Back button of the WizardControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControl.CancelButton">
            <summary>
            Gets the Cancel button of the WizardControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControl.Description">
            <summary>
            Gets/Sets label that shows the description of the curent page.
            </summary>
            <remarks>
            <p>The specified Label, if not a child of the BannerPanel will then be made a
            child of the BannerPanel.</p>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControl.Title">
            <summary>
            Gets/Sets label that shows the title of the curent page.
            </summary>
            <remarks>
            <p>The specified Label, if not a child of the BannerPanel will then be made a
            child of the BannerPanel.</p>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControl.WizardPages">
            <summary>
            The array that holds the pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControl.Banner">
            <summary>
            Gets/Sets PictureBox that shows the Banner Image of the Wizard.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControl.BannerPanel">
            <summary>
            Gets/Sets the Banner Panel of the WizardControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControl.WizardPageContainer">
            <summary>
            Gets/Sets the PageContainer of the WizardControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControl.GridBagLayout">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.Tools.GridBagLayout"/> used to layout the different
            controls in the WizardControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControl.SelectedWizardPage">
            <summary>
            Specifies the selected wizard control page.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.WizardControl.BeforeNext">
            <summary>
            Occurs before the Next button is clicked.
            </summary>
            <remarks>You can validate the current <see cref="P:Syncfusion.Windows.Forms.Tools.WizardControl.SelectedPage"/> and cancel the next button click, if necessary.</remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.WizardControl.BeforeBack">
            <summary>
            Occurs before the Back button is clicked.
            </summary>
            <remarks>You can validate the current <see cref="P:Syncfusion.Windows.Forms.Tools.WizardControl.SelectedPage"/> and cancel the back button click, if necessary.</remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.WizardControl.BeforeFinish">
            <summary>
            Occurs before the Finish button is clicked.
            </summary>
            <remarks>You can validate the current <see cref="P:Syncfusion.Windows.Forms.Tools.WizardControl.SelectedPage"/> and cancel the finish button click, if necessary.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.WizardButton.OnClick(System.EventArgs)" -->
        <member name="T:Syncfusion.Windows.Forms.Tools.WizardControlDesigner">
            <summary>
            Summary description for WizardControlDesigner.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.WizardDesigner">
            <summary>
            Summary description for WizardControlDesigner.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.WizardControlPage">
            <summary>
            The WizardControlPage is used with the WizardControl.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.WizardPage">
            <summary>
            The WizardControlPage is used with the WizardControl.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WizardPage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.WizardPage.SettingsChanged">
            <summary>
            Fired when the settings (Title or LayoutName) of the page are changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.WizardPage.PageLoad">
            <summary>
            Occurs when this page has been selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardPage.LayoutName">
            <summary>
            The name of the page as seen by the Wizard. Used with the SelectedPage property of the Wizard.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardPage.Title">
            <summary>
            The title of the page. Appears in the Title Label of the Wizard.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.WizardControlPage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControlPage.RaiseCancelClick">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.WizardControlPage.CancelClick"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControlPage.RaiseBackClick">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.WizardControlPage.BackClick"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControlPage.RaiseNextClick">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.WizardControlPage.NextClick"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControlPage.RaiseFinishClick">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.WizardControlPage.FinishClick"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControlPage.RaiseValidatePage(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.WizardControlPage.ValidatePage"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControlPage.RaiseHelpClick">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.WizardControlPage.HelpClick"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.WizardControlPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.WizardControlPage.CancelClick">
            <summary>
            Occurs to notify that the cancel button was clicked.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.WizardControlPage.BackClick">
            <summary>
            Occurs to notify that the back button was clicked.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.WizardControlPage.NextClick">
            <summary>
            Occurs to notify that the next button was clicked.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.WizardControlPage.FinishClick">
            <summary>
            Occurs to notify that the finish button was clicked.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.WizardControlPage.HelpClick">
            <summary>
            Occurs to notify that the help button was clicked.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.WizardControlPage.ValidatePage">
            <summary>
            Occurs to validate a page before a new page is selected.
            </summary>
            <remarks>You can validate this page
            and cancel new page selection, if necessary.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.Description">
            <summary>
            The description of the page. Appears in the Description Label of the BannerPanel of the WizardControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.FullPage">
            <summary>
            Determines if the BannerPanel of the WizardControl is hidden when this page is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.CancelOverFinish">
            <summary>
            Determines if the Cancel button is positioned over the Finish button.
            </summary>
            <remarks>This will override the <see cref="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.FinishVisible"/> setting if true.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.HelpVisible">
            <summary>
            Determines if the Help button is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.HelpEnabled">
            <summary>
            Determines if the Help button is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.FinishVisible">
            <summary>
            Determines if the Finish button is visible.
            </summary>
            <remarks>This will be overridden by the <see cref="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.CancelOverFinish"/> property.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.FinishEnabled">
            <summary>
            Determines if the Finish button is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.NextVisible">
            <summary>
            Determines if the Next button is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.NextEnabled">
            <summary>
            Determines if the Next button is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.BackVisible">
            <summary>
            Determines if the Back button is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.BackEnabled">
            <summary>
            Determines if the Back button is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.CancelVisible">
            <summary>
            Determines if the Cancel button is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.WizardControlPage.CancelEnabled">
            <summary>
            Determines if the Cancel button is enabled.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.WizardContainer">
            <summary>
            The WizardContainer is used with the WizardControl. It holds a collection of WizardPage controls.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.WizardPageSelectEventArgs">
            <summary>
            Summary description for WizardPageSelectEventArgs.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPTaskPane">
            <summary>
            The XPTaskPane is a WordXP like control that you can see on the right when you start Microsoft Word XP.
            It is a wizard based class.
            You can easily Add/Remove pages using the designer verbs in the designer or by calling the AddPage/RemovePage methods of the base class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskPane.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskPane.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskPane.OnEndInit">
            <summary>
            Called by the Designer when the control is first created.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskPane.DesignerClick(System.Drawing.Point)">
            <summary>
            Called by the designer when the user clicks in the next or back buttons.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskPane.TaskPanePageContainer">
            <summary>
            Gets/Sets the PageContainer of the XPTaskPane.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskPane.Header">
            <summary>
            The Header Panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskPane.HeaderLabel">
            <summary>
            The Header Title-Label.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskPane.HeaderLeftToolbar">
            <summary>
            The Header's left XPToolBar control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskPane.HeaderRightToolbar">
            <summary>
            The Header's right XPToolBar control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskPane.HeaderMenuItem">
            <summary>
            The Header's dropdown menu (<see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/>).
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPTaskPage">
            <summary>
            The Panel based XPTaskPage.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPTaskPaneDesigner">
            <summary>
            The XPTaskPane Designer.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPTaskBar">
            <summary>
            Represents a Windows XP like task menu panel.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>
            <remarks>
            <para>An XPTaskBar is a Panel that can display a set of command items 
            (<see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItem"/>) or frequently
            used features (like "Search", "Advanced Search", etc) in Panels, that
            can be classified, contained and displayed within one or more command boxes 
            (<see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>).
            The command boxes themselves can be expanded and collapsed by the user, to show or hide its set of
            command items and optionally a child Panel.</para>
            <para>This task bar panel can be used to provide quick and easy shortcuts to commonly
            used commands and features.</para>
            <para>To enable themes support in XP turn on the <see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.ThemesEnabled"/> property.</para>
            <para>This is the look-and-feel used in the Windows XP Control Panel Window.</para>
            </remarks>
            <example>
            The following example creates a <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBar"/> with 2 <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>s and few <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItem"/>s.
            <para>Use the Syncfusion.Windows.Forms.Tools namespace for this code.</para>
            <coderef file="\Tools\Samples\GroupBar Package\XPTaskBar\CS\Form1.cs" name="Initializing XPTaskBar" lang="C#"><code lang="C#">
            		XPTaskBarBox taskBarBox1 = new XPTaskBarBox();
            		taskBarBox1.HeaderBackColor = Color.Blue;
            		taskBarBox1.ImageList = this.imageList1;
            		taskBarBox1.Text = "Header Text";
            		taskBarBox1.ItemBackColor = Color.WhiteSmoke;
            		taskBarBox1.Items.Add(new XPTaskBarItem("Item 1", Color.Black, 0, "Tag1"));
            		taskBarBox1.Items.Add(new XPTaskBarItem("Item 2", Color.Black, 0, "Tag2"));
            		taskBarBox1.ItemClick += new XPTaskBarItemClickHandler(xpTaskBarBox_ItemClick);
            
            		XPTaskBarBox taskBarBox2 = new XPTaskBarBox();
            		taskBarBox2.HeaderBackColor = Color.Blue;
            		taskBarBox2.ImageList = this.imageList1;
            		taskBarBox2.Text = "Another Header Text";
            		taskBarBox2.ItemBackColor = Color.WhiteSmoke;
            		taskBarBox2.Items.Add(new XPTaskBarItem("Item 3", Color.Black, 0, "Tag3"));
            		taskBarBox2.ItemClick += new XPTaskBarItemClickHandler(this.xpTaskBarBox_ItemClick);
            
            		this.xpTaskBar1.Controls.Add(taskBarBox1);
            		this.xpTaskBar1.Controls.Add(taskBarBox2);</code></coderef>
            <coderef file="\Tools\Samples\GroupBar Package\XPTaskBar\VB\Form1.vb" name="Initializing XPTaskBar" lang="VB"><code lang="VB">
                       Dim taskBarBox1 As XPTaskBarBox
                       taskBarBox1 = New XPTaskBarBox()
                       taskBarBox1.HeaderBackColor = Color.Blue
                       taskBarBox1.ImageList = Me.imageList1
                       taskBarBox1.Text = "Header Text"
                       taskBarBox1.ItemBackColor = Color.WhiteSmoke
                       taskBarBox1.Items.Add(New XPTaskBarItem("Item 1", Color.Black, 0, "Tag1"))
                       taskBarBox1.Items.Add(New XPTaskBarItem("Item 2", Color.Black, 0, "Tag2"))
                       AddHandler taskBarBox1.ItemClick, New XPTaskBarItemClickHandler(AddressOf taskMenuBox_ItemClick)
                       
                       Dim taskBarBox2 As XPTaskBarBox
                       taskBarBox2 = New XPTaskBarBox()
                       taskBarBox2.HeaderBackColor = Color.Blue
                       taskBarBox2.ImageList = Me.imageList1
                       taskBarBox2.Text = "Another Header Text"
                       taskBarBox2.ItemBackColor = Color.WhiteSmoke
                       taskBarBox2.Items.Add(New XPTaskBarItem("Item 3", Color.Black, 0, "Tag3"))
                       AddHandler taskBarBox2.ItemClick, New XPTaskBarItemClickHandler(AddressOf taskMenuBox_ItemClick)
                       
                       Me.xpTaskBar1.Controls.Add(taskBarBox1)
                       Me.xpTaskBar1.Controls.Add(taskBarBox2)</code></coderef>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.#ctor">
            <summary>
            Creates a new instance of the XPTaskBar class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.SetNeedLayout(System.Boolean)">
            <summary>
            Marks its child positions to be dirty.
            </summary>
            <param name="needLayout">true to mark it as dirty; false otherwise.</param>
            <remarks>
            This is an advanced method used internally.
            This method will invalidate the Control, which will result in a Paint message in whose handler
            the Layout method will be called to layout the children.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.Layout(System.Drawing.Graphics)">
            <summary>
            Lays out its children.
            </summary>
            <param name="g">The Graphics object based on which to determine the sizes and positions.</param>
            <remarks>
            <para>Note that the XPTaskBar control follows a different Layout pattern from a usual Windows Forms Control.
            When requested a Layout by the default Windows Forms Layout event, this Control will only mark its
            child positions as dirty and recalculate its child positions when a subsequent Paint event occurs,
            with a call to this Layout method. This technique is followed to reduce flicker.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.OnUpdateFlowLayoutBeforeLayout">
            <summary>
            This method gets called every time before the XPTaskBarBoxes get laid out
            by the <see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.FlowLayout"/> component.
            </summary>
            <remarks>
            <para>You shouldn't have to override this method typically. Do so when you need a 
            different layout logic than the default one. When overriding this method, make sure to call the base class. The
            base class will set up the margins and bounds for the layout.</para>
            <para>The FlowLayout component used internally can be accessed using the FlowLayout property.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)"/>.
            </summary>
            <param name="levent"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.LayoutTaskBarBoxes">
            <summary>
            Internal method used to layout the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>s.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.XPTaskBar.OnControlAdded(System.Windows.Forms.ControlEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.XPTaskBar.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.SaveBoxExpandedStates">
            <summary>
            Saves the expanded state of the child task bar boxes in the Isolated Storage.
            </summary>
            <remarks>
            <p>Call this method whenever you want to save the current expanded state of 
            the task bar boxes in the Isolated Storage.</p>
            <p>Note that you do not have to call this method to persist state. You could 
            use the <see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.AutoPersistStates"/> property instead.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.SaveBoxExpandedStates(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Saves the expanded state of the child task bar boxes 
            into the specified serializer.
            </summary>
            <param name="serializer">A <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <remarks>
            <p>Call this method whenever you want to save the current expanded state of 
            the task bar boxes in a custom location (instead of the default Isolated Storage).</p>
            <p>Note that you do not have to call this method to persist state. You could 
            use the <see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.AutoPersistStates"/> property instead.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.LoadBoxExpandedStates">
            <summary>
            Loads the expanded state of the child task bar boxes from the Isolated Storage.
            </summary>
            <remarks>
            <p>Call this method whenever you want to load the saved expanded states of 
            the task bar boxes from the Isolated Storage.</p>
            <p>Note that you do not have to call this method to persist state. You could 
            use the <see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.AutoPersistStates"/> property instead.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.LoadBoxExpandedStates(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Loads the expanded state of the child task bar boxes from the specified AppStateSerializer.
            </summary>
            <param name="serializer">A <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <returns>true if loaded successfully; false otherwise.</returns>
            <remarks>
            <p>Call this method whenever you want to load the saved expanded states of 
            the task bar boxes from a specific location.</p>
            <p>Note that you do not have to call this method to persist state. You could 
            use the <see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.AutoPersistStates"/> property instead.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.ApplyDeserializedStates(System.Collections.Hashtable)">
            <summary>
            Applies the deserialized expanded state information on the current task bar boxes.
            </summary>
            <param name="htStates">A <see cref="T:System.Collections.Hashtable"/> instance.</param>
            <remarks>
            This method will be called to apply the persisted expanded-state of the
            task bar boxes. The hash table should contain text-boolean pairs indicating
            the text of the task bar box and it's collapsed state (true for collapsed, false for expanded).
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.VerticalLayout">
            <summary>
            Specifies whether the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>s should be aligned vertically
            or horizontally in this control.
            </summary>
            <value>true to align vertically, one below the other; false to align horizontally.
            Default is true.</value>
            <remarks>
            When you set this property to false, you should typically also set the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.ColWidthOnHorizontalAlignment"/> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.AutoPersistStates">
            <summary>
            Automatically persists the collapsed state of the child boxes.
            </summary>
            <value>true to persist the expanded state every time the control is disposed; false otherwise. 
            Default is true.</value>
            <remarks>
            <p>When this property is true, the expanded states of the child task bar boxes are
            cached as the users expands/collapses them and when this control is disposed, the cached
            state is persisted in the Isolated Storage.</p>
            <p>
            When the app loads again and when child task bar boxes are added to this control,
            the saved state is reapplied on the task bar boxes.
            </p>
            <p>
            State is saved in the Isolated Storage of the system, scoped by the current user identity.
            </p>
            <p>You can also optionally, explicitly control the persitent store and/or
            the time of persistence via explicit calls to <see cref="!:"/>LoadBoxExpandedStates
            and <see cref="M:Syncfusion.Windows.Forms.Tools.XPTaskBar.SaveBoxExpandedStates"/> methods.</p>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.ColWidthOnHorizontalAlignment">
            <summary>
            Specifies the width for each column when in horizontal alignment mode.
            </summary>
            <value>
            Default is 100.
            </value>
            <remarks>
            This property will be used when the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>s are aligned
            horizontally, by setting the <see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.VerticalLayout"/> property to false.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.DefaultSize">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.NeedLayout">
            <summary>
            Internal method, not to be used directly.
            </summary>
            <remarks>
            <para>
            Specifies whether or not this Control's content needs to be laid out.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.HeaderImageList">
            <summary>
            Specifies the ImageList that will be used to draw the header images in the individual <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>.
            </summary>
            <value>An <see cref="T:System.Windows.Forms.ImageList"/> instance. Default is null.</value>
            <remarks>
            This ImageList will automatically be used by the child <b>XPTaskBarBox</b> instances.
            You can override this behavior by setting a different ImageList in the <see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ImageList"/> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.ThemesEnabled">
            <summary>
            Specifies whether XP Themes (visual styles) should be used for this control when
            available.
            </summary>
            <remarks>
            <para>This property will also affect the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>
            children's themes usage.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.FlowLayout">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.FlowLayout"/> component used
            to manage the layout of the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>s inside this control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItemClickArgs">
            <summary>
            Provides data for the XPTaskBarBox's <see cref="E:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ItemClick"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarItemClickArgs.#ctor(Syncfusion.Windows.Forms.Tools.XPTaskBarItem)">
            <summary>
            Creates a new instance of the XPTaskBarBox class.
            </summary>
            <param name="item">The item that was clicked.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarItemClickArgs.XPTaskBarItem">
            <summary>
            The item that was clicked.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItemClickHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ItemClick"/>
            event in the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name=" e">An <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItemClickArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProvideBrushEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ProvideItemsBackgroundBrush"/>
            and <see cref="E:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ProvideHeaderBackgroundBrush"/> event.
            </summary>
            <remarks>
            If the bounds can be represented by a Rectangle then the
            Bounds property will have a valid value. If it cannot be
            represented by a Rectangle then the Path property will have a
            valid value.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProvideBrushEventArgs.#ctor(System.Drawing.Rectangle,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Creates an instance of the ProvideBrushEventArgs class.
            </summary>
            <param name="bounds">The bounds for which a brush is requested.</param>
            <param name="path">The GraphicsPath for which a brush is requested.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideBrushEventArgs.Bounds">
            <summary>
            Specifies the bounds for which a brush is requested.
            </summary>
            <value>The Rectangle specifying the bounds.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideBrushEventArgs.Path">
            <summary>
            Specifies the GraphicsPath for which a brush is requested.
            </summary>
            <value>A GraphicsPath object.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideBrushEventArgs.Brush">
            <summary>
            Specifies the Brush that will be used to draw the specified
            Bounds or Path.
            </summary>
            <value>A Brush object.</value>
            <remarks>The event handler should set this property for it
            to be used while drawing the specified bounds.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProvideBrushEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ProvideItemsBackgroundBrush"/>
            and <see cref="E:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ProvideHeaderBackgroundBrush"/> in the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.ProvideBrushEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox">
            <summary>
            Represents a task bar box within the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBar"/>.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBar"/>
            <remarks>
            <para>The <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/> contains
            a header and a content area. </para>
            <para>The content area further contains 2 portions.
            The first portion(Task-List portion) shows a list of clikable tasks represented by the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItem"/>s.
            The second portion(Panel portion) shows a <see cref="T:System.Windows.Forms.Panel"/> in the content area, if there is a child Panel
            added to the child Controls list. Note that the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/> can
            contain only one Panel. If you try to add more than one Panel to the <see cref="P:System.Windows.Forms.Control.Controls"/> list,
            an exception will be thrown.</para>
            <para>This control is XP Themes aware and if themes support is turned ON
            (<see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.ThemesEnabled"/> property set to true), will draw
            the header and the content portion using themes in XP. Optinally, you can owner draw
            the header portion and the content portion with a
            custom brush to create a Windows XP task menu look-and-feel in other platforms.</para>
            </remarks>
            <example>
            Take a look at the XPTaskBar class reference for an example on how to use this class.
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.m_bShowToolTip">
            <summary>
            Indicates is tooltip shown or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.m_bFirstMouseMove">
            <summary>
            Show tooltip for last mouse move.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.m_toolTip">
            <summary>
            Tooltip control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.InitializeToolTip">
            <summary>
            Tooltip initialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ProcessShowToolTip">
            <summary>
            Shows tooltip for active XpTaskBarItem if necessary.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.GetItemAtPoint(System.Drawing.Point)">
            <summary>
            Retrives XPTaskBarItem item at point.
            </summary>
            <param name="pt">Point ( in screen coordinates ) to get item from.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.SimulateThemedPaintingForNonDefaultThemes">
            <summary>
            Specifies whether themed drawing should be simulated for color schemes other than the default blue.
            </summary>
            <remarks>This is necessary because the themes api uses the blue color scheme to draw
            the background colors for all theme colors. Turn this off if you want to use the blue color scheme for
            all the other color schemes.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.AnimationDelayInMilliSeconds">
            <summary>
            Specifies the animation delay when the task box is opened/closed. Default is 50ms.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.AnimationPositions">
            <summary>
            Specifies the total animation positions. Default is 10.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.#ctor">
            <summary>
            Creates a new instance of the XPTaskBarBox.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.SetNeedLayout(System.Boolean)">
            <summary>
            Marks this task bar box's position and size as dirty.
            </summary>
            <param name="needLayout">true to make dirty; false otherwise.</param>
            <remarks>Internal property. You do not have to call this property directly.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.Layout(System.Drawing.Graphics)">
            <summary>
            Lays out its itesm.
            </summary>
            <param name="g">The Graphics object based on which to determine the sizes and positions.</param>
            <remarks>
            <para>Note that the XPTaskBarBox control follows a different Layout pattern from a usual Windows Forms Control.
            When requested a Layout by the default Windows Forms Layout event, this Control will only mark its
            child positions as dirty and recalculate its child positions when a subsequent Paint event occurs,
            with a call to this Layout method. This technique is followed to reduce flicker.</para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnHandleCreated(System.EventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Overrides default layout behavior.
            </summary>
            <param name="levent"></param>
            <remarks>
            This control will delay laying out itself and its children until the next paint message.
            To force a layout call the <see cref="!:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.Layout(Graphics g)"/> method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.AttachChildPanel(System.Windows.Forms.Panel)">
            <summary>
            Called when a child <see cref="T:System.Windows.Forms.Panel"/> gets added to this Control.
            </summary>
            <param name="childPanel">A <see cref="T:System.Windows.Forms.Panel"/> instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.DetachChildPanel(System.Windows.Forms.Panel)">
            <summary>
            Called when the child Panel gets removed from this Control.
            </summary>
            <param name="childPanel">The <see cref="T:System.Windows.Forms.Panel"/> instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.UpdateChildPanelBounds(System.Int32)">
            <summary>
            Called to update the child panel's bounds, based on the current settings and layout.
            </summary>
            <param name="top">The top location for the Panel.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnProvideHeaderBackGroundBrush(Syncfusion.Windows.Forms.Tools.ProvideBrushEventArgs)">
            <summary>
            Raises the ProvideHeaderBackgroundBrush event.
            </summary>
            <param name="args">A ProvideBrushEventArgs instance
            containing data regarding this event.</param>
            <remarks>Raising an event invokes the event handler
            through a delegate. <para>The OnProvideHeaderBackGroundBrush method also
            allows derived classes to handle the event without
            attaching a delegate. This is the preferred technique
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnProvideHeaderBackGroundBrush
            in a derived class, be sure to call the base class's
            OnProvideHeaderBackGroundBrush method so that registered
            delegates receive the event.</para>
            </remarks>
            <example>
            Take a look at the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBar"/> class reference for an example of this event handler
            that uses a gradient brush to draw the header's background.
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnProvideItemsBackGroundBrush(Syncfusion.Windows.Forms.Tools.ProvideBrushEventArgs)">
            <summary>
            Raises the ProvideItemsBackgroundBrush event.
            </summary>
            <param name="args">A ProvideItemsBackgroundBrush instance
            that contains data related to this event.</param>
            <remarks>Raising an event invokes the event handler
            through a delegate. For more information, see Raising
            an Event. <para>The OnProvideItemsBackGroundBrush method also
            allows derived classes to handle the event without
            attaching a delegate. This is the preferred technique
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnProvideItemsBackGroundBrush
            in a derived class, be sure to call the base class's
            OnProvideItemsBackGroundBrush method so that registered
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnCollapsedStateChanged(System.EventArgs)">
            <summary>
            Raises the CollapsedStateChanged event.
            </summary>
            <param name="args">A EventArgs instance
            that contains data related to this event.</param>
            <remarks>Raising an event invokes the event handler
            through a delegate. For more information, see Raising
            an Event. <para>The OnCollapsedStateChanged method also
            allows derived classes to handle the event without
            attaching a delegate. This is the preferred technique
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnCollapsedStateChanged
            in a derived class, be sure to call the base class's
            OnCollapsedStateChanged method so that registered
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ResetHeaderBackColor">
            <summary>
            Resets the header back color to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ShouldSerializeHeaderBackColor">
            <summary>
            Gets a value indicating whether the HeaderBackColor has a value different from its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ResetItemBackColor">
            <summary>
            Resets the item back color to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ShouldSerializeItemBackColor">
            <summary>
            Gets a value indicating whether the ItemBackColor has a value different from its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.GetPreferredHeight">
            <summary>
            Gets the preferred height for this box.
            </summary>
            <returns>The height in pixels.</returns>
            <remarks>Internally used by the XPTaskBar while laying out these controls.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.GetHeaderButtonSize">
            <summary>
            Gets the size of the expand/collapse button.
            </summary>
            <returns>The Size of the button.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ExpandContent">
            <summary>
            Expands the content area of this task bar box, if collapsed, with animation.
            </summary>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.CollapseContent(System.Boolean)"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ExpandContent(System.Boolean)">
            <summary>
            Expands the content area of this task bar box, if collapsed.
            </summary>
            <param name="useAnimation">Specifies whether to use animation while expanding.</param>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.CollapseContent(System.Boolean)"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.CollapseContent(System.Boolean)">
            <summary>
            Collapses the content area of this task bar box, if expanded.
            </summary>
            <param name="useAnimation">Specifies whether to use animation while collapsing.</param>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ExpandContent"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.CollapseContent">
            <summary>
            Collapses the content area of this task bar box, if expanded, with animation.
            </summary>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ExpandContent"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnBeforeAnimation(System.EventArgs)">
            <summary>
            Raises the BeforeAnimation event.
            </summary>
            <param name="e">A EventArgs that contains the event data.</param>
            <returns>true if there were listeners; false otherwise.</returns>
            <remarks>Raising an event invokes the event handler
            through a delegate. For more information, see Raising
            an Event. <para>The OnBeforeAnimation method also
            allows derived classes to handle the event without
            attaching a delegate. This is the preferred technique
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnBeforeAnimation
            in a derived class, be sure to call the base class's
            OnBeforeAnimation method so that registered
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnAfterAnimation(System.EventArgs)">
            <summary>
            Raises the AfterAnimation event.
            </summary>
            <param name="e">A EventArgs that contains the event data.</param>
            <returns>true if there were listeners; false otherwise.</returns>
            <remarks>Raising an event invokes the event handler
            through a delegate. For more information, see Raising
            an Event. <para>The OnAfterAnimation method also
            allows derived classes to handle the event without
            attaching a delegate. This is the preferred technique
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnAfterAnimation
            in a derived class, be sure to call the base class's
            OnAfterAnimation method so that registered
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnFontChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.UpdatePreferredHeight(System.Drawing.Graphics)">
            <summary>
            Advanced method to aid customization.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.UpdateExpanderButtonPosition">
            <summary>
            Advanced method to aid customization.
            </summary>
            <remarks>
            <para>
            Updates the expander button position based on the current box dimensions.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.DetermineItemsRectHeight(System.Drawing.Graphics)">
            <summary>
            Advanced method to aid customization.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context.</param>
            <returns>The height for the items area.</returns>
            <remarks>
            <para>
            Called by <see cref="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.UpdatePreferredHeight(System.Drawing.Graphics)"/>
            to determine the height for the items area.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.DetermineHeaderHeight(System.Drawing.Graphics)">
            <summary>
            Advanced method to aid customization.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context.</param>
            <returns>The height for the header portion.</returns>
            <remarks>
            <para>
            Called by <see cref="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.UpdatePreferredHeight(System.Drawing.Graphics)"/>
            to determine the height for the header area.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.GetPrefferedHeightForText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Int32,System.Boolean)">
            <summary>
            Advanced method to aid customization.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="text">The text for which to determine the height.</param>
            <param name="width">The available width.</param>
            <returns>The preferred height.</returns>
            <remarks>
            <para>
            Called
            to determine the required height for the specified text given the available width.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.GetHeaderRect">
            <summary>
            The Rectangle representing the header.
            </summary>
            <returns>A Rectangle instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.GetItemsRect">
            <summary>
            The Rectangle representing the Items area
            </summary>
            <returns>A Rectangle instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.DrawItems(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draw the items portion of the task bar box.
            </summary>
            <param name="ea">The PaintEventArgs containing information about this Paint event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.DrawHeader(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draw the header portion of the task bar box.
            </summary>
            <param name="ea">The PaintEventArgs containing information about this Paint event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.GetHeaderTextBounds">
            <summary>
            Returns the header text bounds.
            </summary>
            <returns>A Rectangle in the XPTaskBarBox client area.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.HitTest(System.Drawing.Point)">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItem"/> at the specified point on the client.
            </summary>
            <param name="mousePoint">The <see cref="T:System.Drawing.Point"/> representing the client co-ords.</param>
            <returns>The XPTaskBarItem at the specified point. Null if none is found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnEnter(System.EventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnLeave(System.EventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnGotFocus(System.EventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnLostFocus(System.EventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.IsInputKey(System.Windows.Forms.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ToggleContentVisibility(System.Boolean)">
            <summary>
            Toggles the collapsed/expanded state of the box.
            </summary>
            <param name="useAnimation">Specifies whether or not to use animation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnItemClick(Syncfusion.Windows.Forms.Tools.XPTaskBarItemClickArgs)">
            <summary>
            Raises the ItemClick event.
            </summary>
            <param name="args">A XPTaskBarItemClickArgs instance
            containing data regarding this event.</param>
            <remarks>Raising an event invokes the event handler
            through a delegate. <para>The OnItemClick method also
            allows derived classes to handle the event without
            attaching a delegate. This is the preferred technique
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnItemClick
            in a derived class, be sure to call the base class's
            OnItemClick method so that registered
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.PerformItemClick(Syncfusion.Windows.Forms.Tools.XPTaskBarItem)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ItemClick"/> event for the specified <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItem"/>.
            </summary>
            <param name="item">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItem"/> instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnMouseLeave(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.OnTextChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.GetHeaderBorderPath">
            <summary>
            Returns the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object representing the
            header border.
            </summary>
            <returns>The GraphicsPath object.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ShowToolTip">
            <summary>
            Indicates is tooltip shown or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.Collapsed">
            <summary>
            Specifies the state of the task bar box.
            </summary>
            <value>true if collapsed; false otherwise. Default is false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ExpanderButton">
            <summary>
            Specifies the button in the header used to collapse, expand the task bar box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.PADX">
            <summary>
            The horizontal padding provided in pixels between contents of the header and the header's left and right borders.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.PADY">
            <summary>
            The vertical padding provided in pixels between contents of the header and the header's top and bottom borders.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.NeedLayout">
            <summary>
            Specifies whether or not it's dimensions have changed, requiring a fresh layout.
            </summary>
            <remarks>
            Internal property. You do not have to call this property directly.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.DefaultSize">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.Items">
            <summary>
            Specifies the list of <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItem"/>s.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItemsCollection"/> object.
            </value>
            <remarks>
            You can add, remove, inserts <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItem"/>s into this collection.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ShowCollapseButton">
            <summary>
            Specifies whether to show or hide the expand-collapse button in the header.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ChildPanel">
            <summary>
            Gets the current child <see cref="T:System.Windows.Forms.Panel"/>, if any.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.PreferredChildPanelHeight">
            <summary>
            Specifies the preferred height required to draw the child Panel.
            </summary>
            <remarks>
            <para>
            This will be the height set on the child Panel.
            The Panel's width will be automatically set based on the avaialble width for the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>.
            </para>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ProvideHeaderBackgroundBrush">
            <summary>
            Occurs when the header portion of the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/> gets drawn.
            </summary>
            <remarks>
            This event allows you to provide a Brush with which the
            back ground of the header will get drawn. This event will not be fired when
            XP Themes is set to be used to render the header.
            </remarks>
            <example>
            <coderef file="\Tools\Samples\GroupBar Package\XPTaskBar\CS\Form1.cs" name="XPTaskBar brush provider" lang="C#"><code lang="C#">
            	private void xpTaskBarBox_ProvideHeaderBackgroundBrush(object sender, Syncfusion.Windows.Forms.Tools.ProvideBrushEventArgs args)
            	{
            		// Blend settings
            		float[] relativeIntensities = {0.0f, 0.0f, 1.0f};
            		float[] relativePositions   = {0.0F, 0.5f, 1.0F};
            		Blend blend = new Blend();
            		blend.Factors = relativeIntensities;
            		blend.Positions = relativePositions;
            
            		XPTaskBarBox box = sender as XPTaskBarBox;
            
            		// Header back brush
            		LinearGradientBrush lgBrush = new LinearGradientBrush(args.Bounds,
            			Color.White, box.HeaderBackColor, 0, true);
            		lgBrush.Blend = blend;
            		args.Brush = lgBrush;
            	}
            
            	private void xpTaskBarBox_ProvideItemsBackgroundBrush(object sender, Syncfusion.Windows.Forms.Tools.ProvideBrushEventArgs args)
            	{
            		// Blend settings
            		float[] relativeIntensities = {0.0f, 0.0f, 1.0f};
            		float[] relativePositions   = {0.0F, 0.5f, 1.0F};
            		Blend blend = new Blend();
            		blend.Factors = relativeIntensities;
            		blend.Positions = relativePositions;
            
            		// Items back brush
            		LinearGradientBrush lgBrush = new LinearGradientBrush(args.Bounds,
            			Color.WhiteSmoke, Color.Silver, 91, false);
            		lgBrush.Blend = blend;
            		args.Brush = lgBrush;
            	}</code></coderef>
            <coderef file="\Tools\Samples\GroupBar Package\XPTaskBar\VB\Form1.vb" name="XPTaskBar brush provider" lang="VB"><code lang="VB">
                   Private Sub xpTaskBarBox_ProvideHeaderBackgroundBrush(ByVal sender As Object, ByVal args As ProvideBrushEventArgs)
            
                       ' Blend settings
                       Dim relativeIntensities() As Single
                       relativeIntensities = New Single() {0.0!, 0.0!, 1.0!}
                       Dim relativePositions() As Single
                       relativePositions = New Single() {0.0!, 0.5!, 1.0!}
                       Dim blend As Blend
                       blend = New Blend()
                       blend.Factors = relativeIntensities
                       blend.Positions = relativePositions
                       Dim box As XPTaskBarBox
                       box = CType(sender, XPTaskBarBox)
                       ' Header back brush
                       Dim lgBrush As LinearGradientBrush
                       lgBrush = New LinearGradientBrush(args.Bounds, Color.White, box.HeaderBackColor, 0, True)
                       lgBrush.Blend = blend
                       args.Brush = lgBrush
            
                   End Sub
                   Private Sub xpTaskBarBox_ProvideItemsBackgroundBrush(ByVal sender As Object, ByVal args As ProvideBrushEventArgs)
            
                       ' Blend settings
                       Dim relativeIntensities() As Single
                       relativeIntensities = New Single() {0.0!, 0.0!, 1.0!}
                       Dim relativePositions() As Single
                       relativePositions = New Single() {0.0!, 0.5!, 1.0!}
                       Dim blend As Blend
                       blend = New Blend()
                       blend.Factors = relativeIntensities
                       blend.Positions = relativePositions
                       ' Items back brush
                       Dim lgBrush As LinearGradientBrush
                       lgBrush = New LinearGradientBrush(args.Bounds, Color.WhiteSmoke, Color.Silver, 91, False)
                       lgBrush.Blend = blend
                       args.Brush = lgBrush
            
                   End Sub</code></coderef>
            </example>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.CollapsedStateChanged">
            <summary>
            Occurs after the box has been collapsed or expanded.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ProvideItemsBackgroundBrush">
            <summary>
            Occurs when the content portion of the XPTaskBarBox gets drawn.
            </summary>
            <remarks>
            This event allows you to provide a Brush with which the
            back ground of the content portion will be drawn. This event will not be fired
            when XP Themes is set to be used for drawing the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>.
            </remarks>
            <example>
            <coderef file="\Tools\Samples\GroupBar Package\XPTaskBar\CS\Form1.cs" name="XPTaskBar brush provider" lang="C#"><code lang="C#">
            	private void xpTaskBarBox_ProvideHeaderBackgroundBrush(object sender, Syncfusion.Windows.Forms.Tools.ProvideBrushEventArgs args)
            	{
            		// Blend settings
            		float[] relativeIntensities = {0.0f, 0.0f, 1.0f};
            		float[] relativePositions   = {0.0F, 0.5f, 1.0F};
            		Blend blend = new Blend();
            		blend.Factors = relativeIntensities;
            		blend.Positions = relativePositions;
            
            		XPTaskBarBox box = sender as XPTaskBarBox;
            
            		// Header back brush
            		LinearGradientBrush lgBrush = new LinearGradientBrush(args.Bounds,
            			Color.White, box.HeaderBackColor, 0, true);
            		lgBrush.Blend = blend;
            		args.Brush = lgBrush;
            	}
            
            	private void xpTaskBarBox_ProvideItemsBackgroundBrush(object sender, Syncfusion.Windows.Forms.Tools.ProvideBrushEventArgs args)
            	{
            		// Blend settings
            		float[] relativeIntensities = {0.0f, 0.0f, 1.0f};
            		float[] relativePositions   = {0.0F, 0.5f, 1.0F};
            		Blend blend = new Blend();
            		blend.Factors = relativeIntensities;
            		blend.Positions = relativePositions;
            
            		// Items back brush
            		LinearGradientBrush lgBrush = new LinearGradientBrush(args.Bounds,
            			Color.WhiteSmoke, Color.Silver, 91, false);
            		lgBrush.Blend = blend;
            		args.Brush = lgBrush;
            	}</code></coderef>
            <coderef file="\Tools\Samples\GroupBar Package\XPTaskBar\VB\Form1.vb" name="XPTaskBar brush provider" lang="VB"><code lang="VB">
                   Private Sub xpTaskBarBox_ProvideHeaderBackgroundBrush(ByVal sender As Object, ByVal args As ProvideBrushEventArgs)
            
                       ' Blend settings
                       Dim relativeIntensities() As Single
                       relativeIntensities = New Single() {0.0!, 0.0!, 1.0!}
                       Dim relativePositions() As Single
                       relativePositions = New Single() {0.0!, 0.5!, 1.0!}
                       Dim blend As Blend
                       blend = New Blend()
                       blend.Factors = relativeIntensities
                       blend.Positions = relativePositions
                       Dim box As XPTaskBarBox
                       box = CType(sender, XPTaskBarBox)
                       ' Header back brush
                       Dim lgBrush As LinearGradientBrush
                       lgBrush = New LinearGradientBrush(args.Bounds, Color.White, box.HeaderBackColor, 0, True)
                       lgBrush.Blend = blend
                       args.Brush = lgBrush
            
                   End Sub
                   Private Sub xpTaskBarBox_ProvideItemsBackgroundBrush(ByVal sender As Object, ByVal args As ProvideBrushEventArgs)
            
                       ' Blend settings
                       Dim relativeIntensities() As Single
                       relativeIntensities = New Single() {0.0!, 0.0!, 1.0!}
                       Dim relativePositions() As Single
                       relativePositions = New Single() {0.0!, 0.5!, 1.0!}
                       Dim blend As Blend
                       blend = New Blend()
                       blend.Factors = relativeIntensities
                       blend.Positions = relativePositions
                       ' Items back brush
                       Dim lgBrush As LinearGradientBrush
                       lgBrush = New LinearGradientBrush(args.Bounds, Color.WhiteSmoke, Color.Silver, 91, False)
                       lgBrush.Blend = blend
                       args.Brush = lgBrush
            
                   End Sub</code></coderef>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.BackgroundImage">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.BackgroundImage"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.HeaderBackColor">
            <summary>
            Gets or Set the background color with which the header will be drawn.
            </summary>
            <value>A Color value representing the header back color.</value>
            <remarks>
            <para>This setting will be ignored when XP Themes is set to be used for drawing
            the header.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.HeaderFont">
            <summary>
            Gets or Set the text font with which the header text will be drawn.
            </summary>
            <value>A Font value. Default is the Font property with Bold setting.</value>
            <remarks>This will be ignored when <see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ThemesEnabled"/> is set to true.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.FocusOnClick">
            <summary>
            Specifies whether or not the control should take focus when the user click the header or an item.
            </summary>
            <value>true to take focus; false otherwise. Default is true.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ItemBackColor">
            <summary>
            Gets or Sets the Color with which the Items portion of the XPTaskBarBox will be drawn.
            </summary>
            <value>The Color value with which the Items portion will be drawn.</value>
            <para>This setting will be ignored when XP Themes is set to be used for drawing
            the content portion.</para>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ImageList">
            <summary>
            Gets or Sets the ImageList which contains the images with which the <see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.Items"/> and the header will be drawn.
            </summary>
            <value>An ImageList instance containing the images.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.HeaderImageList">
            <summary>
            Specifies the ImageList that will be used to draw the header image.
            </summary>
            <value>An <see cref="T:System.Windows.Forms.ImageList"/> instance. Default is the
            value from the parent <see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBar.HeaderImageList"/> property.</value>
            <remarks>
            This ImageList will automatically be picked up from the parent <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBar"/> instance.
            You can override this behavior by setting a different ImageList in this property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.HeaderImageIndex">
            <summary>
            Specifies the index into the <see cref="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.HeaderImageList"/>.
            </summary>
            <remarks>
            The zero-based index to the image in the XPTaskBarBox.HeaderImageList
            The default is -1, which signifies no image.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.PreferredHeight">
            <summary>
            Gets the preferrred height for this Control with the current settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.Parent">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBar"/> parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ThemesEnabled">
            <summary>
            Reflects the corresponding property in the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBar"/>
            parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.AnimationDelay">
            <summary>
            Set the AnimationDelay for the XPTaskBarBox.
            </summary>
            <remarks>
            Set this property to a different value if the AnimationDelay for this
            XPTaskBarBox is to be different. By default this is set to <see cref="F:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.AnimationDelayInMilliSeconds"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.AnimationPositionsCount">
            <summary>
            Set the AnimationPositions count for the XPTaskBarBox.
            </summary>
            <remarks>
            Set this property to a different value if the AnimationPositions count for this
            XPTaskBarBox is to be different. By default this is set to <see cref="F:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.AnimationPositions"/>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.ItemClick">
            <summary>
            The event that gets thrown when the user clicks on an item.
            </summary>
            <remarks>
            The XPTaskBarItemClickArgs contains a reference to the XPTaskBarItem that was clicked.
            </remarks>
            <example>
            <coderef file="\Tools\Samples\GroupBar Package\XPTaskBar\CS\Form1.cs" name="XPTaskBar Click Handler" lang="C#"><code lang="C#">
            	private void xpTaskBarBox_ItemClick(object sender, Syncfusion.Windows.Forms.Tools.XPTaskBarItemClickArgs e)
            	{
            		this.aboutDrawingLabel.BorderStyle = BorderStyle.None;
            		this.aboutLable.BorderStyle = BorderStyle.None;
            		this.aboutItemsLabel.BorderStyle = BorderStyle.None;
            
            		switch(e.XPTaskBarItem.Tag as string)
            		{
            			case "about":
            				this.aboutLable.BorderStyle = BorderStyle.FixedSingle;
            				break;
            			case "about items":
            				this.aboutItemsLabel.BorderStyle = BorderStyle.FixedSingle;
            				break;
            			case "about drawing":
            				this.aboutDrawingLabel.BorderStyle = BorderStyle.FixedSingle;
            				break;
            			case "aboutSyncfusion":
            				this.ShowAboutDialog();
            				break;
            		}
            	}</code></coderef>
            <coderef file="\Tools\Samples\GroupBar Package\XPTaskBar\VB\Form1.vb" name="XPTaskBar Click Handler" lang="VB"><code lang="VB">
                   Private Sub xpTaskBarBox_ItemClick(ByVal sender As Object, ByVal e As XPTaskBarItemClickArgs)
            
                       Me.aboutDrawingLabel.BorderStyle = BorderStyle.None
                       Me.aboutLable.BorderStyle = BorderStyle.None
                       Me.aboutItemsLabel.BorderStyle = BorderStyle.None
                       Select Case CType(e.XPTaskBarItem.Tag, String)
                           Case "about"
                               Me.aboutLable.BorderStyle = BorderStyle.FixedSingle
                               'End Section
                           Case "about items"
                               Me.aboutItemsLabel.BorderStyle = BorderStyle.FixedSingle
                               'End Section
                           Case "about drawing"
                               Me.aboutDrawingLabel.BorderStyle = BorderStyle.FixedSingle
                               'End Section
                           Case "aboutSyncfusion"
                               Me.ShowAboutDialog()
                               'End Section
                       End Select
            
                   End Sub</code></coderef>
            </example>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.BeforeAnimation">
            <summary>
            This event gets called before the box expands or collapses.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.AfterAnimation">
            <summary>
            This event gets called after the box expands or collapses.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.HeaderHit">
            <summary>
            Specifies whether or not the mouse is currently over the header portion.
            </summary>
            <value>True to indicate the mouse is over the header; false otherwise.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarBox.HitItem">
            <summary>
            Specifies the current <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItem"/> on which the mouse is on.
            </summary>
            <value>An XPTaskBarItem instance.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItemsCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItem"/>s.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarItemsCollection.Item(System.Int32)">
            <summary>
            Gets or sets a reference to the XPTaskBarItem at the specified index location in the
            XPTaskBarItemsCollection object.
            In C#, this property is the indexer for the XPTaskBarItemsCollection class.
            </summary>
            <param name="index">The location of the XPTaskBarItem in the
            XPTaskBarItemsCollection collection.</param>
            <value>The reference to the XPTaskBarItem.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPTaskBarItem">
            <summary>
            Represents an item in the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBarBox"/>.
            </summary>
            <example>
            Take a look at the <see cref="T:Syncfusion.Windows.Forms.Tools.XPTaskBar"/> class reference for an example of the usage of this class.
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarItem.OnPropertyChanged(Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="args">An SyncfusionPropertyChangedEventArgs that contains the event data.</param>
            <remarks>
            The OnPropertyChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            <para>Notes to Inheritors:  When overriding OnPropertyChanged in a derived
            class, be sure to call the base class's OnPropertyChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarItem.#ctor">
            <summary>
            Creates a new instnce of the XPTaskBarItem class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarItem.#ctor(System.String,System.Drawing.Color,System.Int32,System.String)">
            <summary>
            Creates a new instance of the XPTaskBarItem class and
            sets its text, fore color, imageIndex, and specifies
            whether or not it is a hyper link.
            </summary>
            <param name="text">The text of the item.</param>
            <param name="foreColor">The fore color for the item.</param>
            <param name="imageIndex">The index into the XPTaskBarBox's ImageList.</param>
            <param name="tag">A tag object that you can set for convenience.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPTaskBarItem.#ctor(System.String,System.Drawing.Color,System.Int32,System.Object,System.String)">
            <summary>
            Creates a new instance of the XPTaskBarItem class and
            sets its text, fore color, imageIndex, tag and specifies
            whether or not it is a hyper link.
            </summary>
            <param name="text">The text of the item.</param>
            <param name="foreColor">The fore color for the item.</param>
            <param name="imageIndex">The index into the XPTaskBarBox's ImageList.</param>
            <param name="tag">A tag object that you can set for convenience.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPTaskBarItem.PropertyChanged">
            <summary>
            Occurs when one of the XPTaskBarItem's property has changed.
            </summary>
            <remarks>
            This event may not be thrown for some of the properties
            in BarItem. Take a look at the property's documentation
            to confirm whether this event will be thrown for a property.
            <para>This event will also be raised when it's associated
            MainBarManager's value changes too.</para></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarItem.ToolTip">
            <summary>
            Contains text for tooltip. Empty string or null value means no tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarItem.Text">
            <summary>
            Specifies the item's text.
            </summary>
            <value>A string value.</value>
            <remarks><para>Changing this property's value will throw the PropertyChanged event.</para></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarItem.ImageIndex">
            <summary>
            Specifies an index into the ImageList in the corresponding XPTaskBarBox.
            </summary>
            <value>A zero-based index that represents the position
            in the ImageList control (assigned to the ImageList
            property of the XPTaskBarBox) where the image is located. The default is -1.</value>
            <remarks><para>Changing this property's value will throw the PropertyChanged event.</para></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarItem.Parent">
            <summary>
            Returns the XPTaskBarBox that this item is part of.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarItem.ForeColor">
            <summary>
            Gets or sets the foreground color (typically the color
            of the text) property of the XPTaskBarItem.
            </summary>
            <value>
            A Color that represents the foreground color. The default is
            Color.Empty.
            </value>
            <remarks><para>Changing this property's value will throw the PropertyChanged event.</para></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPTaskBarItem.Tag">
            <summary>
            Gets or sets the object that contains data about the item.
            </summary>
            <value>
            An Object that contains data about the control.
            The default is a null reference (Nothing in Visual Basic).
            </value>
            <remarks>
            Any type derived from the Object class can be assigned
            to this property. If the Tag property is set through
            the Windows Forms designer, only text may be assigned.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ExpanderButton">
            <summary>
            Specifies the button that is drawn on a XPTaskBarBox header help expand/collapse it.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ExpanderButton.Bounds">
            <summary>
            Specifies the bounds of the button in the XPTaskBarBox's client Rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ExpanderButton.ExpandedState">
            <summary>
            Specifies whether the button is expanded or collapsed.
            </summary>
            <value>true for expanded state; false for collapsed.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteDesigner">
            <summary>
            This is a designer for the AutoComplete control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteDesigner.dvRefreshColumns">
            <summary>
            Designer verb for adding a button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteDesigner.dvcVerbs">
            <summary>
            The collection of designer verbs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteDesigner.#ctor">
            <summary>
            Initializes a new instance of the ButtonEditDesigner class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteDesigner.HandleRefreshColumns(System.Object,System.EventArgs)">
            <summary>
            Handle the AddButton 
            </summary>
            <param name="sender">The designer.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Overrides initialize.  Here we add an event handler to the selection service.
            Notice that we are very careful not to assume that the selection service is
            available.  It is entirely optional that a service is available and you should
            always degrade gracefully if a service could not be found.
            </summary>
            <param name="component">The AutoComplete control that is being designed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteDesigner.InitializeNonDefault">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteDesigner.Dispose(System.Boolean)">
            <summary>
            Overrides Dispose.  Here we remove our handler for the selection changed
            event.  With designers, it is critical that they clean up any events they
            have attached.  Otherwise, during the course of an editing session many
            designers may get created and never destroyed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteDesigner.HandleSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the SelectionChanged event of the Selection service.
            </summary>
            <param name="sender">The selection service</param>
            <param name="e">EventArgs with the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteDesigner.UpdateAutoCompleteSelection(System.ComponentModel.Design.ISelectionService)">
            <summary>
            Update the current selection.
            </summary>
            <param name="ss">The ISelectionService object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            Adjusts the set of properties the component exposes through a TypeDescriptor.
            </summary>
            <param name="properties">An IDictionary that contains the properties for the class of the component. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteDesigner.RemovePropertyBrowsable(System.ComponentModel.IComponent,System.String[],System.Collections.IDictionary)">
            <summary>
            Remove a set of properties.
            </summary>
            <param name="control">The control to which the changes apply.</param>
            <param name="strcolln">The array of property names to exclude.</param>
            <param name="properties">Contains the properties for the class of the component.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteDesigner.Verbs">
            <summary>
            The designer verbs collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.ComboBoxAutoCompleteDesigner.dvRefreshColumns">
            <summary>
            Designer verb for adding a button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.ComboBoxAutoCompleteDesigner.dvcVerbs">
            <summary>
            The collection of designer verbs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ComboBoxAutoCompleteDesigner.#ctor">
            <summary>
            Initializes a new instance of the ButtonEditDesigner class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ComboBoxAutoCompleteDesigner.HandleRefreshColumns(System.Object,System.EventArgs)">
            <summary>
            Handle the AddButton 
            </summary>
            <param name="sender">The designer.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ComboBoxAutoCompleteDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Overrides initialize.  Here we add an event handler to the selection service.
            Notice that we are very careful not to assume that the selection service is
            available.  It is entirely optional that a service is available and you should
            always degrade gracefully if a service could not be found.
            </summary>
            <param name="component">The AutoComplete control that is being designed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ComboBoxAutoCompleteDesigner.InitializeNonDefault">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ComboBoxAutoCompleteDesigner.Dispose(System.Boolean)">
            <summary>
            Overrides Dispose.  Here we remove our handler for the selection changed
            event.  With designers, it is critical that they clean up any events they
            have attached.  Otherwise, during the course of an editing session many
            designers may get created and never destroyed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ComboBoxAutoCompleteDesigner.HandleSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the SelectionChanged event of the Selection service.
            </summary>
            <param name="sender">The selection service</param>
            <param name="e">EventArgs with the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ComboBoxAutoCompleteDesigner.UpdateAutoCompleteSelection(System.ComponentModel.Design.ISelectionService)">
            <summary>
            Update the current selection.
            </summary>
            <param name="ss">The ISelectionService object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ComboBoxAutoCompleteDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            Adjusts the set of properties the component exposes through a TypeDescriptor.
            </summary>
            <param name="properties">An IDictionary that contains the properties for the class of the component. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ComboBoxAutoCompleteDesigner.RemovePropertyBrowsable(System.ComponentModel.IComponent,System.String[],System.Collections.IDictionary)">
            <summary>
            Remove a set of properties.
            </summary>
            <param name="control">The control to which the changes apply.</param>
            <param name="strcolln">The array of property names to exclude.</param>
            <param name="properties">Contains the properties for the class of the component.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Design.ComboBoxAutoCompleteDesigner.Verbs">
            <summary>
            The designer verbs collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.BarManagerDesigner">
            <summary>
            Summary description for BarManagerDesigner.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.ButtonEditChildButtonDesigner">
            <summary>
            Extends the design time capabilities of <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEditChildButton"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ButtonEditChildButtonDesigner.#ctor">
            <summary>
            Initializes a new instance of the ButtonEditChildButtonDesigner class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ButtonEditChildButtonDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            Adjusts the set of properties the component exposes through a TypeDescriptor.
            </summary>
            <param name="properties">An IDictionary that contains the properties for the class of the component.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ButtonEditChildButtonDesigner.RemovePropertyBrowsable(System.Windows.Forms.Control,System.String[],System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="strcolln"></param>
            <param name="properties"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.ButtonEditDesigner">
            <summary>
            Extends design-time behavior for the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.ButtonEditDesigner.dvAddButton">
            <summary>
            Designer verb for adding a button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.ButtonEditDesigner.dvRemoveButton">
            <summary>
            Designer verb for removing a button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.ButtonEditDesigner.dvcVerbs">
            <summary>
            The collection of designer verbs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ButtonEditDesigner.#ctor">
            <summary>
            Initializes a new instance of the ButtonEditDesigner class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ButtonEditDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Prepares the designer to view, edit, and design the specified component.
            Overrides ComponentDesigner.Initialize
            </summary>
            <param name="component">The component for this designer.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ButtonEditDesigner.HandleComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
            <summary>
            Handle the ComponentChanged event of the IComponentChangeService.
            </summary>
            <param name="sender">The IComponentChange Service.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ButtonEditDesigner.OnAddButton(System.Object,System.EventArgs)">
            <summary>
            Handle the AddButton 
            </summary>
            <param name="sender">The designer.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ButtonEditDesigner.OnRemoveButton(System.Object,System.EventArgs)">
            <summary>
            Handle the RemoveButton verb
            </summary>
            <param name="sender">The designer.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Design.ButtonEditDesigner.Verbs">
            <summary>
            The designer verbs collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Design.ButtonEditDesigner.AssociatedComponents">
            <summary>
            Gets the collection of components associated with the designer.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.ButtonEditTypeEditor">
            <summary>
            UITypeEditor for <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ButtonEditTypeEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
               <para>
                  Gets a value indicating if this editor supports the painting of a representation
                  of an object's value.
               </para>
            </summary>
            <param name="context">
               An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to provide additional context information.
            </param>
            <returns>
               <para>
               <see langword="true"/> if PaintValue is implemented;
                  otherwise, <see langword="false"/> .
               </para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.ButtonEditTypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <overload>
               <para>Paints a representative value of the specified object to the specified canvas.</para>
            </overload>
            <summary>
               <para>Paints a representative value of the specified object to the
                  specified canvas.</para>
            </summary>
            <param name='value'>The object this type editor is to display the value of.</param>
            <param name='canvas'>A drawing canvas to paint the value's representation on.</param>
            <param name='rectangle'>A rectangle to paint the value within the boundaries of. </param>
            <remarks>
               <para> Painting will occur within the boundaries of the specified rectangle.</para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.CalculatorDesigner.dvWindowsStandard">
            <summary>
            Fields
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.CalculatorDesigner.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.CalculatorDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.CalculatorDesigner.OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.CalculatorDesigner.OnWindowsStandardLayout(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.CalculatorDesigner.OnFinancialLayout(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Design.CalculatorDesigner.Verbs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.CalculatorCultureEditor">
            <summary>
            Summary description for CurrencyCultureEditor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.CommandBarDesigner">
            <summary>
            Summary description for CommandBar Designer.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.CurrencyEditDesigner">
            <summary>
            Extends design-time behavior for the <see cref="T:Syncfusion.Windows.Forms.Tools.ButtonEdit"/> control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.CurrencyEditDesigner.#ctor">
            <summary>
            Initializes a new instance of the CurrencyEditDesigner class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.CurrencyEditDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Prepares the designer to view, edit, and design the specified component.
            Overrides ComponentDesigner.Initialize
            </summary>
            <param name="component">The component for this designer.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.CurrencyEditDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            Overrides PreFilterProperties and removes the properities 
            visible in the designer for the SplashControl
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.CurrencyEditDesigner.RemovePropertyBrowsable(System.Windows.Forms.Control,System.String[],System.Collections.IDictionary)">
            <summary>
            Helper function for removing a list of properties.
            </summary>
            <param name="control"></param>
            <param name="strcolln"></param>
            <param name="properties"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.DataColumnInfoConverter">
            <summary>
            TypeConverter for DataColumnInfo
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.DataColumnInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a value indicating whether this converter can convert an object to
            the given destination type using the context.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context. </param>
            <param name="destinationType">A <see cref="T:System.Type"/> object that represents the type to which you want to convert. </param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.DataColumnInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)"/>.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed. </param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteTargetConverter">
            <summary>
            TypeConverter for AutoCompleteTarget
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteTargetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a value indicating whether this converter can convert an object to
            the given destination type using the context.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context. </param>
            <param name="destinationType">A <see cref="T:System.Type"/> object that represents the type to which you want to convert. </param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.AutoCompleteTargetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)"/>.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed. </param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.DockingManagerDesigner">
            <summary>
            Summary description for DockingMgrDsgnr.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner">
            <summary>
            The designer for the SplashControl class. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner.dvDisplaySplash">
            <summary>
            Designer verb for previewing the Splash Form
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner.dvCancelSplash">
            <summary>
            Designer verb for canceling the Splash Form being
            previewed
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner.dvcVerbs">
            <summary>
            The designer verbd collection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner.customPanelLocation">
            <summary>
            For the preview splash verb
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner.customSplashUsed">
            <summary>
            Specifies if a custom splash panel is being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner.#ctor">
            <summary>
            Creates a new object of type SplashControlDesigner
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Overrides initialize.  Here we add an event handler to the selection service.
            Notice that we are very careful not to assume that the selection service is
            available.  It is entirely optional that a service is available and you should
            always degrade gracefully if a service could not be found.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner.HandlePreviewSplashEvent(System.Object,System.EventArgs)">
            <summary>
            Implementation for the verb PreviewSplash
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner.HandleCancelSplashEvent(System.Object,System.EventArgs)">
            <summary>
            Handler for the CancelSplash verb.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner.HandleSplashClosedEvent(System.Object,System.EventArgs)">
            <summary>
            Handler for the SplashClosed event
            </summary>
            <param name="sender">The splash form</param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            Overrides PreFilterProperties and removes the properities 
            visible in the designer for the SplashControl
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner.RemovePropertyBrowsable(System.ComponentModel.IComponent,System.String[],System.Collections.IDictionary)">
            <summary>
            Helper function for removing a list of properties.
            </summary>
            <param name="control"></param>
            <param name="strcolln"></param>
            <param name="properties"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Design.SplashControlDesigner.Verbs">
            <summary>
            The designer verbs collection
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CommandBarController">
            <summary>
            The CommandBarController acts as a central point of control for the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>s hosted on a form.
            </summary>
            <remarks>
            <p>
            The Essential Tools CommandBars framework implements a hosting environment that can be used for
            creating toolbars, statusbars and rebars similar to those that are present
            in the Microsoft Visual Studio.NET IDE and the Microsoft Office XP product suite.
            A CommandBar, similar to Win32/MFC control bars, is purely a container control that
            is responsible only for it's layout state and it is the client window, such as a ToolBar,
            StatusBar or any other Windows Forms control, that provides the CommandBar with it's
            functional identity.
            </p>
            <p>CommandBars have two basic states - a docked state and a floating state.
            In the docked state, the CommandBars are usually aligned along one of the borders
            (left, right, top or bottom) of the host form. Depending upon the preferences set,
            the bar can either take up an entire row as in the case of a menu, or share it's
            space with other bars within a particular row as with toolbars and rebars. By default,
            a docked CommandBar has a gripper and a drop-down button with a customizable click event.
            The gripper can be used to reposition the bar within a row, move it between rows and to drag
            it out of the frame and float as a separate window. In the docked mode, when the row
            width is adequate, the CommandBars are usually sized to their maximum length. However,
            reducing the frame width/height will, based on the user-setting, force the CommandBar to
            reduce in size while retaining the same height or wrap thereby increasing the bar height.
            The wrapping mode is particularly useful for toolbars and is fully customizable.
            In the floating state, the CommandBar is parented by a floating window
            that can dragged around the desktop. A floating CommandBar can be redocked to it's host
            by either double-clicking it or by dragging it over one of the edges of the host form.
            </p>
            <p>
            The CommandBarController class, as the name implies, serves as a form-scope controller for all the CommandBars.
            Attributes that are common across all CommandBars within a host form, such as the
            <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBarController.EnabledDockBorders"/> and <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBarController.PersistState"/>, are
            usually set on the CommandBarController instance. The CommandBarController implements
            the API and the requisite design-time support for creating and working with CommandBars.
            </p>
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"></seealso>
            <example>
            The sample code shows how to create and initialize a CommandBarController, create a CommandBar
            control that is initially docked to the top border of the form and hosts a Panel control, and finally add
            the CommandBar to the CommandBarController's collection.
            
            <coderef file="Tools\Samples\CommandBars Package\CommandBars\CS\DockedBarsForm.cs" name="CommandBars" lang="C#"><code lang="C#">
            	private void InitializeCommandBars()
            	{
            		// Create the CommandBarController
            		this.commandBarController1 = new Syncfusion.Windows.Forms.Tools.CommandBarController();
            		((System.ComponentModel.ISupportInitialize)(this.commandBarController1)).BeginInit();
            
            		// Set the CommandBarController's host form
            		this.commandBarController1.HostForm = this;
            		this.commandBarController1.PersistState = true;
            
            		// Create the CommandBar control
            		this.commandBarAddress = new Syncfusion.Windows.Forms.Tools.CommandBar();
            
            		// Set the CommandBar Layout/Behavior/Appearance attributes
            		this.commandBarAddress.DockBorder = Syncfusion.Windows.Forms.Tools.DockBorder.Top;
            		this.commandBarAddress.HideDropDownButton = true;
            		this.commandBarAddress.MaxLength = 400;
            		this.commandBarAddress.MinHeight = 26;
            		this.commandBarAddress.MinLength = 50;
            		this.commandBarAddress.Name = "commandBarAddress";
            		this.commandBarAddress.RowIndex = 1;
            		this.commandBarAddress.RowOffset = 1;
            		this.commandBarAddress.Text = "Address";
            
            		// Create the ComboBox control and add it to the CommandBars Controls collection
            		this.comboBox1 = new System.Windows.Forms.ComboBox();
            		this.commandBarAddress.Controls.AddRange(new System.Windows.Forms.Control[] {this.comboBox1});
            
            		// Add the CommandBar to the CommandBarController.CommandBars collection
            		this.commandBarController1.CommandBars.Add(this.commandBarAddress);
            
            		((System.ComponentModel.ISupportInitialize)(this.commandBarController1)).EndInit();
            	}</code></coderef>
            
            <coderef file="Tools\Samples\CommandBars Package\CommandBars\VB\DockedBarsForm.vb" name="CommandBars" lang="VB"><code lang="VB">
                   Private Sub InitializeCommandBars()
            
                       ' Create the CommandBarController
                       Me.commandBarController1 = New Syncfusion.Windows.Forms.Tools.CommandBarController(Me.components)
                       CType(Me.commandBarController1, System.ComponentModel.ISupportInitialize).BeginInit()
            
                       ' Set the CommandBarController's host form
                       Me.commandBarController1.HostForm = Me
                       Me.commandBarController1.PersistState = True
            
                       ' Create the CommandBar control
                       Me.commandBarAddress = New Syncfusion.Windows.Forms.Tools.CommandBar()
            
                       ' Set the CommandBar Layout/Behavior/Appearance attributes
                       Me.commandBarAddress.DockState = Syncfusion.Windows.Forms.Tools.CommandBarDockState.Top
                       Me.commandBarAddress.MaxLength = 400
                       Me.commandBarAddress.MinHeight = 26
                       Me.commandBarAddress.MinLength = 50
                       Me.commandBarAddress.Name = "commandBarAddress"
                       Me.commandBarAddress.RowIndex = 1
                       Me.commandBarAddress.RowOffset = 1
                       Me.commandBarAddress.Text = "Address"
            
                       ' Create the ComboBox control and add it to the CommandBars Controls collection
                       Me.comboBox1 = New System.Windows.Forms.ComboBox()
                       Me.commandBarAddress.Controls.AddRange(New System.Windows.Forms.Control() {Me.comboBox1})
            
                       ' Add the CommandBar to the CommandBarControllers CommandBars       // collection
                       Me.commandBarController1.CommandBars.Add(Me.commandBarAddress)
            
                       CType(Me.commandBarController1, System.ComponentModel.ISupportInitialize).EndInit()
            
                   End Sub</code></coderef>
            
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarController"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarController"/> and initializes it with the container.
            </summary>
            <param name="container">An object implementing the <see cref="T:System.ComponentModel.IContainer"/> interface to associate with this instance of the CommandBarController.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.SaveCommandBarState">
            <summary>
            Persists the current state of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> objects to IsolatedStorage.
            </summary>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.CommandBarController.LoadCommandBarState"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.SaveCommandBarState(Syncfusion.Runtime.Serialization.SerializeMode,System.Object)">
            <summary>
            Persists the current state of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> objects using the specified storage medium and location.
            </summary>
            <remarks>
            Writes the CommandBar state information onto the persistence medium specified by the
            <paramref name="mode"/> parameter and at the path specified by the <paramref name="persistpath"/> object.
            This method has been provided only to allow a higher degree of control over the
            serialization process. For normal state storage and retrieval it is highly recommended that
            you use the <see cref="M:Syncfusion.Windows.Forms.Tools.CommandBarController.SaveCommandBarState"/> and
            <see cref="M:Syncfusion.Windows.Forms.Tools.CommandBarController.LoadCommandBarState"/> methods.
            <para>
            This method will be removed in a future version. Please use the more flexible SaveCommandBarState(AppStateSerializer) variant, instead.
            </para>
            </remarks>
            <param name="mode">A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value describing the persistence medium.</param>
            <param name="persistpath">The name of the IsolatedStorage/INI/XML file or registry key in which the
            state information is to be persisted. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.SaveCommandBarState(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Persists the current state of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> objects using the specified <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/>.
            </summary>
            <remarks>
            Writes the CommandBar state information onto the persistence medium.
            This method has been provided only to allow a higher degree of control over the
            serialization process. For normal state storage and retrieval it is highly recommended that
            you use the <see cref="M:Syncfusion.Windows.Forms.Tools.CommandBarController.SaveCommandBarState"/> and
            <see cref="M:Syncfusion.Windows.Forms.Tools.CommandBarController.LoadCommandBarState"/> methods.
            </remarks>
            <param name="serializer">A reference to the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.LoadCommandBarState">
            <summary>
            Retrieves the persisted state of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> objects from Isolated Storage.
            </summary>
            <returns>TRUE if the load is successful. Else FALSE</returns>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.CommandBarController.SaveCommandBarState"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.LoadCommandBarState(Syncfusion.Runtime.Serialization.SerializeMode,System.Object)">
            <summary>
            Retrieves the persisted state of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> objects using the specified storage and location.
            </summary>
            <param name="mode">A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value describing the persistence medium.</param>
            <param name="persistpath">The name of the IsolatedStorage/INI/XML file or registry key containing the persisted information.</param>
            <returns>TRUE if the load is successful.</returns>
            <remarks>
            <para>Reads the CommandBar state information from the specified persistent store and
            applies the new state. This method has been provided only to allow a higher degree
            of  control over the serialization process. For normal state storage and retrieval
            it is highly recommended that you use the <see cref="M:Syncfusion.Windows.Forms.Tools.CommandBarController.SaveCommandBarState"/>
            and <see cref="M:Syncfusion.Windows.Forms.Tools.CommandBarController.LoadCommandBarState"/> methods.</para>
            <para>
            This method will be removed in a future version. Please use the more flexible LoadCommandBarState(AppStateSerializer) variant, instead.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.LoadCommandBarState(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Retrieves the persisted state of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> objects using the specified <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/>.
            </summary>
            <param name="serializer">An instance of AppStateSerializer, from which to load.</param>
            <returns>TRUE if the load is successful.</returns>
            <remarks>
            Reads the CommandBar state information from the specified persistent store and
            applies the new state. This method has been provided only to allow a higher degree
            of  control over the serialization process. For normal state storage and retrieval
            it is highly recommended that you use the <see cref="M:Syncfusion.Windows.Forms.Tools.CommandBarController.SaveCommandBarState"/>
            and <see cref="M:Syncfusion.Windows.Forms.Tools.CommandBarController.LoadCommandBarState"/> methods.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.LoadDesignerCommandBarState">
            <summary>
            Restores the default state of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> objects.
            </summary>
            <remarks>
            Loads the state set within the designer.
            </remarks>
            <returns>TRUE if the load is successful.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.RecalcLayout(Syncfusion.Windows.Forms.Tools.CommandBarDockBorder)">
            <summary>
            Forces a layout recalculation.
            </summary>
            <remarks>
            Forces a recalculation of all <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>s occupying by the
            state specified by the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarDockBorder"/> value.
            </remarks>
            <param name="style">A <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarDockBorder"/> value representing the CommandBar position.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.RecalcLayout(Syncfusion.Windows.Forms.Tools.CommandBar)">
            <summary>
            Forces a layout recalculation on the specified <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>.
            </summary>
            <param name="cbar">The CommandBar for which the layout is to be recalculated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.OnProvidePresistenceID(Syncfusion.Windows.Forms.ProvidePersistenceIDEventArgs)">
            <summary>
            Raises the ProvidePersisteceID event.
            </summary>
            <param name="args">
            An ProvidePersistenceIDEventArgs object containg data pertaining to this event.
            </param>
            <remarks>
            The OnProvidePresistenceID method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            <para>Notes to Inheritors:  When overriding OnProvidePresistenceID in a derived
            class, be sure to call the base class's OnProvidePresistenceID method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.BeginInit">
            <summary>
            Begins the initialization of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarController"/> component.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.EndInit">
            <summary>
            Ends the initialization of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarController"/> component.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.ComponentModel.Component.Dispose"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CommandBarController.ProvidePersisteceID">
            <summary>
            Lets you specify a unique ID used to distinguish the persistence information
            of different instances of your Form type.
            </summary>
            <remarks>
            The default persistence logic assumes that there will be only a single CommandBarController
            in an application. But that might not be the case if you have more than 1 MDI parent.
            In such cases, the persisted state of one MDI parent will get overridden by the other
            since the default logic doesn't distinguish these 2 different instances.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBarController.HostForm">
            <summary>
            Gets or sets the host form.
            </summary>
            <value>The Form that will host the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>s.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBarController.EnabledDockBorders">
            <summary>
            Gets or sets the edges of the form along which <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>s are allowed to dock.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarDockBorder"/> value specifying the dockable edges.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBarController.PersistState">
            <summary>
            Gets or sets a value indicating whether the application's CommandBars state should be persisted.
            </summary>
            <value>When TRUE the application's CommandBars state will be persisted. The default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBarController.CommandBars">
            <summary>
            Returns a reference to the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>s that belong to this CommandBarController.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarController.CommandBarsCollection"/> that contains the CommandBars in this
            CommandBarController.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBarController.ThemesEnabled">
            <summary>
            Specifies whether XP Themes (visual styles) should be used for CommandBars.
            </summary>
            <value>True to turn on themes; false otherwise.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBarController.Style">
            <summary>
            Specifies the visual style of the CommandBars.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.VisualStyle"/> value. Default is VisualStyle.OfficeXP.</value>
            <remarks>Note that this setting will be ignored when <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBarController.ThemesEnabled"/> is turned on and themes are available in the OS.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBarController.BackColor">
            <summary>
            Gets or sets the background color used to draw the host form's dockable regions.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the background color.</value>
            <remarks>
            The dockable region is the area along the <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBarController.HostForm"/>'s border
            on which the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>s are docked. The <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarController"/> uses the
            specified Color for drawing the Form's dockable regions.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CommandBarController.CommandBarsCollection">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> objects.
            </summary>
            <seealso cref="P:Syncfusion.Windows.Forms.Tools.CommandBarController.CommandBars"></seealso>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.CommandBarsCollection.#ctor(Syncfusion.Windows.Forms.Tools.CommandBarController)">
            <summary>
            Creates a new instance of the CommandBarsCollection class.
            </summary>
            <param name="cbctrlr"> The <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarController"/> that this collection belongs to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.CommandBarsCollection.Add(Syncfusion.Windows.Forms.Tools.CommandBar)">
            <summary>
            Adds a <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> to the collection.
            </summary>
            <param name="cbar"> The CommandBar to be added.</param>
            <returns> The total number of CommandBars present in the collection. </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.CommandBarsCollection.Remove(Syncfusion.Windows.Forms.Tools.CommandBar)">
            <summary>
            Removes the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> from the collection.
            </summary>
            <param name="cbar">The CommandBar to be removed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarController.CommandBarsCollection.Contains(Syncfusion.Windows.Forms.Tools.CommandBar)">
            <summary>
            Returns TRUE if the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> is present.
            </summary>
            <param name="cbar"> The CommandBar to locate in the collection.</param>
            <returns>TRUE if the CommandBar is present. Else FALSE.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBarController.CommandBarsCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> at the index.
            </summary>
            <value>The 0-based index of the CommandBar to get.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ICommandBarDesignerMouseHook">
            The CommandBar designer use this interface for communicating mousemove messages.
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ICommandBarSerializer">
            CommandBar serialization wrappers should implement the ICommandBarSerializer interface 
            along with ISerializable.
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CommandBarDockBorder">
            <summary>
            Specifies the edges of the host form along which <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>s may be docked.
            </summary>
            <remarks>
            The CommandBarDockBorder enumeration is used with the <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBarController.EnabledDockBorders"/>
            and <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBar.AllowedDockBorders"/> properties for specifying the host form edges along which
            <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>s may be docked.
            <p>
            This enumeration has the FlagsAttribute that allows a bitwise combination of its member values.
            </p>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarDockBorder.None">
            <summary>
            None of the host form's borders is enabled for docking.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarDockBorder.Top">
            <summary>
            The top edge is enabled for docking.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarDockBorder.Bottom">
            <summary>
            The bottom edge is enabled for docking.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarDockBorder.Left">
            <summary>
            The left edge is enabled for docking.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarDockBorder.Right">
            <summary>
            The right edge is enabled for docking.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CommandBarDockState">
            <summary>
            Provides state information for a <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>.
            </summary>
            <remarks>
            The CommandBarDockState enumeration is used with the <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBar.DockState"/>
            property for specifying the docked/floating state of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>.
            </remarks>
            <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBar.DockState"/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarDockState.None">
            <summary>
            The CommandBar is in an uninitialized state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarDockState.Top">
            <summary>
            The CommandBar is docked to the top border of the form.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarDockState.Bottom">
            <summary>
            The CommandBar is docked to the bottom border of the form.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarDockState.Left">
            <summary>
            The CommandBar is docked to the left border of the form.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarDockState.Right">
            <summary>
            The CommandBar is docked to the right border of the form.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarDockState.Float">
            <summary>
            The CommandBar is in a floating state.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CommandBarResizeType">
            <summary>
            Specifies the type of resizing that a <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> is undergoing.
            </summary>
            <remarks>
            The CommandBarResizeType enumeration is used by the <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarWrapping"/> event to provide
            information on the type of resizing.
            <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarWrapping"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarResizeType.None">
            <summary>
            No resizing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarResizeType.Top">
            <summary>
            A floating CommandBar is being resized with the top edge being used as the resize handle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarResizeType.Bottom">
            <summary>
            A docked/floating CommandBar is being resized with the bottom edge being used as the resize handle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarResizeType.Left">
            <summary>
            A floating CommandBar is being resized with the left edge being used as the resize handle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CommandBarResizeType.Right">
            <summary>
            A docked/floating CommandBar is being resized with the right edge being used as the resize handle.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CommandBarWrappingEventArgs">
            <summary>
             Provides information about the <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarWrapping"/> event.
            </summary>
             <remarks>
             CommandBarWrappingEventArgs is a custom event argument class used by the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> class
             for notifying users of wrap events and also for getting the new size of the CommandBar's client
             control during custom wrapping.
             </remarks>
             <seealso cref="T:Syncfusion.Windows.Forms.Tools.CommandBarWrappingEventHandler"/>.
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarWrappingEventArgs.#ctor(System.Drawing.Size,Syncfusion.Windows.Forms.Tools.CommandBarResizeType)">
            <summary>
            Creates a new instance of the CommandBarWrappingEventArgs class.
            </summary>
            <param name="clientsize">The current/proposed size of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>'s client control.</param>
            <param name="resizetype">A <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBarWrappingEventArgs.CommandBarResizeType"/> value specifying the type of resizing.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBarWrappingEventArgs.ClientSize">
            <summary>
            The current/proposed size of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>'s client control.
            </summary>
            <value>A Size value indicating the width and height for the CommandBar's client control.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBarWrappingEventArgs.CommandBarResizeType">
            <summary>
            The type of resizing taking place.
            </summary>
            <value>A <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBarWrappingEventArgs.CommandBarResizeType"/> value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CommandBarWrappingEventHandler">
            <summary>
            Delegate representing the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarWrapping"/> event.
            </summary>
            <param name="obj"> The source of the event.</param>
            <param name="arg"> A <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarWrappingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CommandBarStateChangingEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarStateChanging"/> event.
            </summary>
            <remarks>
            The CommandBarStateChangingEventArgs is a custom event argument class used by the
            <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarStateChanging"/> event for notifying subscribers
            that a <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>'s dock/float state is about to change.
            </remarks>
            <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarStateChangingEventHandler"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBarStateChangingEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.CommandBarDockState)">
            <summary>
            Creates an instance of the CommandBarStateChangingEventArgs class.
            </summary>
            <param name="state">A <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarDockState"/> value indicating the new state of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBarStateChangingEventArgs.NewDockState">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>'s new position.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarDockState"/> value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CommandBarStateChangingEventHandler">
            <summary>
            Delegate representing the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarStateChanging"/> event.
            </summary>
            <param name="obj"> The source of the event.</param>
            <param name="arg"> A <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarStateChangingEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CommandBar">
            <summary>
            Implements a container for creating dockable toolbar, statusbar and rebar type controls.
            </summary>
            <remarks>
            <p>
            The CommandBar class is a part of the Essential Tools CommandBars framework and allows
            Windows Forms developers to add to their applications dockable command bars similar to
            those that are present in the Microsoft Visual Studio.NET and Office XP environments.
            </p>
            <p>
            The CommandBar, similar to to the MFC/Win32 control bars, is a container control that primarily
            serves as a host for some other Windows Forms control. The CommandBar class implements the hosting
            and layout logic while the contained control provides the functional significance.
            </p>
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.CommandBarController"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.ResetFont">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBar.Font"/> property to it's default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.#ctor">
            <summary>
            Creates a new instance of the CommandBar class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.CalcCommandBarMaxLength(System.Int32)">
            <summary>
            Calculates the CommandBar's maximum length for the specified client width.
            </summary>
            <summary>
            Estimates the <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBar.MaxLength"/> value for the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> to
            host a client control of the specified width.
            </summary>
            <param name="nctrlwidth">The client control width.</param>
            <returns>The maximum length estimate.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.CalcChildControlBounds(System.Drawing.Size,Syncfusion.Windows.Forms.Tools.CommandBarDockState)">
            <summary>
            Calculates the client control bounds for the specified <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> size and dock position.
            </summary>
            <param name="szbar">The CommandBar size .</param>
            <param name="cdb">A <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarDockState"/> value.</param>
            <returns>The client control bounds.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.DrawDockedBackground(System.Drawing.Graphics)">
            <summary>
            Draws the background region of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> when in a docked state.
            </summary>
            <param name="gph"> A <see cref="T:System.Drawing.Graphics"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.DrawDockedForeground(System.Drawing.Graphics)">
            <summary>
            Draws the foreground region of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> when in a docked state.
            </summary>
            <param name="gph"> A <see cref="T:System.Drawing.Graphics"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.DrawFloatingBackground(System.Drawing.Graphics)">
            <summary>
            Draws the background region of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> when in a floating state.
            </summary>
            <param name="gph"> A <see cref="T:System.Drawing.Graphics"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.DrawFloatingForeground(System.Drawing.Graphics)">
            <summary>
            Draws the foreground region of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> when in a floating state.
            </summary>
            <param name="gph"> A <see cref="T:System.Drawing.Graphics"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnDoubleClick(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnMouseLeave(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnCommandBarWrapping(Syncfusion.Windows.Forms.Tools.CommandBarWrappingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarWrapping"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarWrappingEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnCommandBarDropDownClicked(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarDropDownClicked"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnCommandBarStateChanging(Syncfusion.Windows.Forms.Tools.CommandBarStateChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarStateChanging"/> event.
            </summary>
            <param name="arg">A <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarStateChanging"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnCommandBarStateChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarStateChanged"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.OnCommandBarUserClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarUserClosed"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandBar.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarWrapping">
            <summary>
            Occurs when the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> is being wrapped.
            </summary>
            <remarks>
            The CommandBarWrapping event is fired whenever the CommandBar is in the process of
            being wrapped. Handle this event for customizing the resizing/wrapping behavior
            of the CommandBar.
            <p>
            See <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarWrappingEventHandler"/> and <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarWrappingEventArgs"/> for
            more information.
            </p>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarDropDownClicked">
            <summary>
            Occurs when the dropdown button on a <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> is clicked.
            </summary>
            <remarks>
            The CommandBarDropDownClicked event is fired when the dropdown button on a
            <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> is clicked.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarStateChanging">
            <summary>
            Occurs when a <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>'s dock/float state is about to change.
            </summary>
            <remarks>
            The CommandBarStateChanging event is fired before a CommandBar's dock/float state changes.
            Handle this event to perform any custom processsing before state changes.
            <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarStateChangingEventHandler"/> and <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarStateChangingEventArgs"/>
            </remarks>
            <seealso cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarStateChanged"/>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarStateChanged">
            <summary>
            Occurs after a <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>'s dock/float state changes.
            </summary>
            <remarks>
            The CommandBarStateChanged event is fired after a CommandBar's dock/float state changes.
            Handle this event to perform any custom processsing required after a state change.
            </remarks>
            <seealso cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarStateChanging"/>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarUserClosed">
            <summary>
            Occurs when a floating <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> is hidden by the user.
            </summary>
            <remarks>
            The <see cref="E:Syncfusion.Windows.Forms.Tools.CommandBar.CommandBarUserClosed"/> event occurs when a floating CommandBar is hidden as a
            result of the user clicking the close button.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.DockState">
            <summary>
            Gets or sets the current dock or float state for the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarDockState"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.AllowedDockBorders">
            <summary>
            Gets or sets the edges of the Form along which the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> may be docked.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarDockBorder"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.RowOffset">
            <summary>
            Gets or sets the linear offset of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> within a row.
            </summary>
            <value> An integer value representing the row offset. </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.RowIndex">
            <summary>
            Gets or sets the index of the row/column for the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>.
            </summary>
            <value>A 0-based integer value representing the row index.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.MinLength">
            <summary>
            Gets or sets the minimum linear dimension of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>.
            </summary>
            <value>An integer value representing the minimum length.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.MaxLength">
            <summary>
            Gets or sets the maximum(ideal) linear dimension of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>.
            </summary>
            <value>An integer value representing the ideal length.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.MinHeight">
            <summary>
            Gets or sets the ideal lateral dimension of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>.
            </summary>
            <value>An integer value representing the minimum height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.IntegralHeight">
            <summary>
            Gets or sets the incremental step by which the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>'s lateral dimension increases when wrapped.
            </summary>
            <value>An integer value representing the incremental height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.ShowDockModeText">
            <summary>
            Gets or sets a flag indicating whether the text caption should be displayed on a docked <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>.
            </summary>
            <value>TRUE if the text is to be displayed. The default is TRUE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.HideGripper">
            <summary>
            Gets or sets a flag indicating whether the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>'s positioning gripper should be hidden.
            </summary>
            <value>TRUE if the gripper is to be hidden. The default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.HideChevron">
            <summary>
            Gets or sets a flag indicating whether the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> should be drawn without a chevron.
            </summary>
            <remarks>
            When a docked CommandBar is sized less than the <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBar.MaxLength"/> value, a
            chevron will normally be displayed on it's trailing edge.
            </remarks>
            <value>TRUE if the chevron is to be hidden. The default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.HideDropDownButton">
            <summary>
            Gets or sets a flag indicating whether the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>'s dropdown button should be hidden.
            </summary>
            <value>TRUE if the dropdown button is to be hidden. The default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.HideCloseButton">
            <summary>
            Gets or sets a flag indicating whether the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> will have a close button when floating.
            </summary>
            <value>TRUE if the close button is to be hidden. The default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.DockModeWrapping">
            <summary>
            Gets or sets a flag indicating whether the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> should wrap when docked.
            </summary>
            <remarks>
            Setting this property to TRUE will force a docked CommandBar to wrap when it's
            bounds are less than the <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBar.MaxLength"/> value.
            </remarks>
            <value>If TRUE the CommandBar will wrap. The default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.FloatModeWrapping">
            <summary>
            Gets or sets a flag indicating whether the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> should wrap when floating.
            </summary>
            <remarks>
            Setting this property to TRUE will force a floating <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> to wrap
            when it's bounds are less than the <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBar.MaxLength"/> value.
            </remarks>
            <value>If TRUE the CommandBar will wrap. The default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.OccupyFullRow">
             <summary>
             Gets or sets a flag indicating whether the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> should occupy the entire row when docked.
             </summary>
            <value>If TRUE the CommandBar will occupy the entire row. The default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.Floating">
            <summary>
            Returns the current dock/float state of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>.
            </summary>
            <value>TRUE if the CommandBar is floating.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.FloatBounds">
            <summary>
            Gets or sets the bounds of a floating <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>.
            </summary>
            <value>A Rectangle value that represents the float bounds of the CommandBar. </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.DisableFloating">
            <summary>
            Gets or sets a flag indicating whether the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> is allowed to float.
            </summary>
            <value>TRUE if floating is to be disallowed. The default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.DisableDocking">
            <summary>
            Gets or sets a flag indicating whether the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> is allowed to dock.
            </summary>
            <value>TRUE if docking is to be disallowed. The default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.AlwaysLeadingEdge">
            <summary>
            Gets or sets a flag indicating whether the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> is always docked to the leading edge.
            </summary>
            <value>TRUE to enforce leading edge docking. The default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.AlwaysTrailingEdge">
            <summary>
            Gets or sets a flag indicating whether the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> is always docked to the trailing edge.
            </summary>
            <value>TRUE to enforce trailing edge docking. The default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.Font">
            <summary>
            Gets or sets the font used to display text in the control.
            </summary>
            <value>A Font object.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.IsChevronVisible">
            <summary>
            Returns a value indicating whether the chevron is currently displayed.
            </summary>
            <value>TRUE if the chevron is visible; FALSE otherwise</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.PopupContainer">
            <summary>
            The PopupContainer control displayed when the dropdown button is clicked.
            </summary>
            <value>An instance of the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> class.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.PopupMenu">
            <summary>
            The PopupMenu is displayed when the dropdown button is clicked.
            </summary>
            <value>An instance of the <see cref="P:Syncfusion.Windows.Forms.Tools.CommandBar.PopupMenu"/> class.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.VLeft">
            <summary>
            Virtual Left property - used for layouting
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.VRight">
            <summary>
            Virtual Right property - used for layouting
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.VLocation">
            <summary>
            Virtual Location property - used for layouting
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CommandBar.VBounds">
            <summary>
            Virtual Bounds property - used for layouting
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CommandBarAccessibleObject">
            <summary>
            ControlAccessibleObject derived class that implements the Accessibility object for the CommandBar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CommandDockBar.Dispose(System.Boolean)">
            Clean up any resources being used.
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CommandBarForm">
              Form class that hosts the CommandBars in the floating state.
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CommandDockBarAccessibleObject">
            <summary>
            ControlAccessibleObject derived class that implements the Accessibility object for the CommandDockBar.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ControlBar">
            <summary>
            <p>
            A <see cref="T:Syncfusion.Windows.Forms.Tools.ControlBar"/> is a specialized implementation of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> class that 
            is used for hosting controls within the Essential Tools XPMenus Framework. A ControlBar can contain two controls - 
            the main control that occupies the ControlBar's client region and optionally, a <see cref="P:Syncfusion.Windows.Forms.Tools.ControlBar.CaptionControl"/> that is 
            displayed within the ControlBar's caption region. While just about any <see cref="T:System.Windows.Forms.Control"/> instance 
            can be used as the ControlBar's main client, the caption control position is normally occupied by single line controls such as a 
            ToolBar, TextBox or ComboBox. ControlBars thus function as full-featured docking windows that can be docked along 
            the host form's borders or floated as top-level windows, while following the layout limitations of the XPMenus toolbars.
            Examples of the ControlBar concept include the Microsoft Office 2003 TaskPane window.
            </p>
            <p>
            ControlBars are supported through the XPMenus framework and can be added to any form that has been initialized 
            with a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager"/>. Invoking the MainFrameBarManager's AddControlBar design-time verb will 
            create a new ControlBar and add it to the form. Dropping a control onto the ControlBar sets it as the ControlBar's main client. 
            To assign the caption control, drop control onto the ControlBar and set the <see cref="P:Syncfusion.Windows.Forms.Tools.ControlBar.CaptionControl"/> to reference it.
            </p>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ControlBar.#ctor">
            <summary>
            Creates a new instance of the ControlBar class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ControlBar.DrawDockedBackground(System.Drawing.Graphics)">
            <summary>
            Draws the background region of the <see cref="T:Syncfusion.Windows.Forms.Tools.ControlBar"/> when in a docked state.
            </summary>
            <param name="gph"> A <see cref="T:System.Drawing.Graphics"/> value.</param>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ControlBar.DrawDockedForeground(System.Drawing.Graphics)">
            <summary>
            Draws the foreground region of the <see cref="T:Syncfusion.Windows.Forms.Tools.ControlBar"/> when in a docked state.
            </summary>
            <param name="gph"> A <see cref="T:System.Drawing.Graphics"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ControlBar.DrawFloatingBackground(System.Drawing.Graphics)">
            <summary>
            Draws the background region of the <see cref="T:Syncfusion.Windows.Forms.Tools.ControlBar"/> when in a floating state.
            </summary>
            <param name="gph"> A <see cref="T:System.Drawing.Graphics"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ControlBar.DrawFloatingForeground(System.Drawing.Graphics)">
            <summary>
            Draws the foreground region of the <see cref="T:Syncfusion.Windows.Forms.Tools.ControlBar"/> when in a floating state.
            </summary>
            <param name="gph"> A <see cref="T:System.Drawing.Graphics"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ControlBar.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ControlBar.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ControlBar.ControlBarCaptionHeight">
            <summary>
            Gets or sets the height of the <see cref="T:Syncfusion.Windows.Forms.Tools.ControlBar"/> caption area.
            </summary>
            <value>An integer value representing the caption height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ControlBar.MinimumSize">
            <summary>
            Gets or sets the minimum extent to which the ControlBar can be sized.
            </summary>
            <value>A <see cref="T:System.Drawing.Size"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ControlBar.MaximumSize">
            <summary>
            Gets or sets the maximum extent to which the ControlBar can be sized.
            </summary>
            <value>A <see cref="T:System.Drawing.Size"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ControlBar.CaptionControl">
            <summary>
            Gets or sets the Control that is displayed in the CommandBar's caption region.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Control"/> instance.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AHTabControl">
            Summary description for AHTabControl.	
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockingStyle">
            <summary>
            Specifies the type of docking.
            </summary>
            <remarks>
            The DockingStyle enumeration is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> to convey
            and to get information about a dock operation. The DockingStyle value is always
            expressed relative to the dock target. For example, when a control is being
            docked to the main form and DockingStyle.Left is used, this implies that the
            control will be docked to the left border of the form and have a width equal to the specified
            width and a height equal to the form's client rectangle height.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DockingStyle.Left">
            <summary>
            The control is docked to the left edge of the parent control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DockingStyle.Right">
            <summary>
            The control is docked to the right edge of the parent control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DockingStyle.Top">
            <summary>
            The control is docked to the top edge of the parent control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DockingStyle.Bottom">
            <summary>
            The control is docked to the bottom edge of the parent control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DockingStyle.Tabbed">
            <summary>
            The control is docked as a tabbed window along with the dock target. This style
            is not applicable when the dock target is the host form.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DockingStyle.Fill">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ControllerChangedEventArgs">
            Custom Event argument class used for controller change notifcations. Parent Controller's, while being undocked,
            use this event argument to notify all child subscriber controllers of the new dock parent controller information.
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.IDraggable">
            All components that expect to be dragged will need to implement the IDraggable interface. This interface
            is used by the drag provider to provide drag services to the component.
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.IDockingManagerDesignerMouseHook">
            The DockingManager designer uses this interface for communicating mouse messages
            to the docked/floating controls.
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ITabFeedback">
            ITabFeedback is implemented by controls that allow tabbed docking/undocking. The FBProvider implementation
            uses the ITabFeedback methods to interact with controls, primarily dockhosts, during a tabbed docking
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockUtilities">
            Helper Recursive functions	
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockHost">
               The DockHost class implements a container for hosting a dockable control. Any control embedded in a 
               DockHost automatically avails of the docking frameworks functionality. The DockHost is responsible 
               for the frame, caption rect, docking/floating transitions etc., DockHosts interact with the 
               docking framework through the DockHostController class. DockHost classes are never directly exposed 
               to the users. Users are oblivious of the existence of the dockhost class and all programmatic interaction 
               occurs through the DockingManager instance. Calling DockControl/FloatControl on the dockingmanager will create a dockhost for the
               particular control and lay it out as per the configuration. 	
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockHost.Dispose(System.Boolean)">
            Clean up any resources being used.		
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockStateChangeEventArgs">
            <summary>
            Custom event argument class used for notifying users of dockstate changes.
            </summary>
            <remarks>
            The DockStateChangeEventArgs class is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> to
            provide event data for the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockStateChanging"/> and <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockStateChanged"/> events.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockStateChangeEventHandler"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockStateChangeEventArgs.#ctor(System.Windows.Forms.Control[])">
            <summary>
            Creates a new instance of the DockStateChangeEventArgs class.
            </summary>
            <param name="ctrls">The control(s) being docked/floated.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockStateChangeEventArgs.Controls">
            <summary>
            Gets the collection of controls undergoing the dockstate transfer.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockStateChangeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockStateChanging"/> and
            <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockStateChanged"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DockStateChangeEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockControlEventArgs">
            <summary>
            Custom event argument base class used for providing data for docking window events.
            </summary>
            <remarks>
            The DockControlEventArgs class is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> to
            provide event data for a dockable control.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockVisibilityChangedEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockActivationChangedEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.AutoHideAnimationEventArgs"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockStateUnavailableEventArgs"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockControlEventArgs.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a new instance of the DockControlEventArgs class.
            </summary>
            <param name="ctrl">The control undergoing the state change.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockControlEventArgs.Control">
            <summary>
            Gets the control undergoing the state change.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Control"/> value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockVisibilityChangedEventArgs">
            <summary>
            Custom event argument class used for notifying users of DockVisibility state changes.
            </summary>
            <remarks>
            The DockVisibilityChangedEventArgs class is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> to
            provide event data for the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockVisibilityChanged"/> event.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockVisibilityChangedEventHandler"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockControlEventArgs"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockVisibilityChangedEventArgs.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a new instance of the DockVisibilityChangedEventArgs class.
            </summary>
            <param name="ctrl">The control for which the DockVisibility state has changed.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockVisibilityChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockVisibilityChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DockVisibilityChangedEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockActivationChangedEventArgs">
            <summary>
            Custom event argument class used for notifying users of activation state changes.
            </summary>
            <remarks>
            The DockActivationChangedEventArgs class is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> to
            provide event data for the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockControlActivated"/> and
            <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockControlDeactivated"/> events.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockActivationChangedEventHandler"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockControlEventArgs"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockActivationChangedEventArgs.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a new instance of the DockActivationChangedEventArgs class.
            </summary>
            <param name="ctrl">The control for which the activation state has changed.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockActivationChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockControlActivated"/>
            and <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockControlDeactivated"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DockActivationChangedEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoHideAnimationEventArgs">
            <summary>
            Custom event argument class used for notifying users of the start/stop of an autohide animation.
            </summary>
            <remarks>
            The AutoHideAnimationEventArgs class is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> to
            provide event data for the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideAnimationStart"/> and
            <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideAnimationStop"/> events.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.AutoHideAnimationEventHandler"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockControlEventArgs"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoHideAnimationEventArgs.#ctor(System.Windows.Forms.Control,System.Windows.Forms.DockStyle,System.Drawing.Rectangle)">
            <summary>
            Creates a new instance of the AutoHideAnimationEventArgs class.
            </summary>
            <param name="ctrl">The control undergoing the autohide animation.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoHideAnimationEventArgs.DockBorder">
            <summary>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.HostForm"/> border along which the AutoHide tab is aligned.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.DockStyle"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoHideAnimationEventArgs.Bounds">
            <summary>
            The display bounds of the autohidden control.
            </summary>
            <value>A <see cref="T:System.Drawing.Rectangle"/> value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoHideAnimationEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideAnimationStart"/>
            and <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideAnimationStop"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="arg">An <see cref="T:Syncfusion.Windows.Forms.Tools.AutoHideAnimationEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DragAllowEventArgs">
            <summary>
            Custom cancellable event argument class used for the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DragAllow"/> event.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DragAllowEventHandler"/>
            <remarks>The <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> uses the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DragAllow"/> event to provide information
            about an impending drag operation and provides a chance to accept/cancel the drag.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DragAllowEventArgs.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a new instance of the DockAllowEventArgs class.
            </summary>
            <param name="ctrldrag">The control being dragged.</param>
            <param name="ctrltarget">The target control.</param>
            <param name="style">The dock style.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DragAllowEventArgs.Control">
            <summary>
            The control that is about to be dragged.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Control"/> instance representing the control that is about to be dragged.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DragAllowEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DragAllow"/> event.
            </summary>
            <param name="sender"> The source of the event.</param>
            <param name="arg"> A <see cref="T:Syncfusion.Windows.Forms.Tools.DragAllowEventArgs"/> value that provides the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockAllowEventArgs">
            <summary>
            Custom cancellable event argument class used for the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockAllow"/> event.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockAllowEventHandler"/>
            <remarks>The <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> uses the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockAllow"/> event to provide information
            about an impending dock operation and provides a chance to accept/cancel the
            dock based on the participating controls and the style.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockAllowEventArgs.#ctor(System.Windows.Forms.Control,System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.DockingStyle)">
            <summary>
            Creates a new instance of the DockAllowEventArgs class.
            </summary>
            <param name="ctrldrag">The control being dragged.</param>
            <param name="ctrltarget">The target control.</param>
            <param name="style">The dock style.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockAllowEventArgs.DragControl">
            <summary>
            The control being dragged.
            </summary>
            <value>A Control object that represents the control being dragged.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockAllowEventArgs.TargetControl">
            <summary>
            The dock target control.
            </summary>
            <value>A Control object that represents the target control for the dock.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockAllowEventArgs.DockStyle">
            <summary>
            The dock operation style.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.DockingStyle"/> value that represents the style of the dock
            operation.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockAllowEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockAllow"/> event.
            </summary>
            <param name="sender"> The source of the event.</param>
            <param name="arg"> A <see cref="T:Syncfusion.Windows.Forms.Tools.DockAllowEventArgs"/> value that provides the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockContextMenuEventArgs">
            <summary>
            Custom event argument class used by the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockContextMenu"/> event.
            </summary>
            <remarks>The <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> uses the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockContextMenu"/> event to
            allow users to modify the context menu displayed when a docking window's caption
            is right-clicked.
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockContextMenuEventHandler"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockContextMenuEventArgs.#ctor(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu)">
            <summary>
            Creates a new instance of the DockContextMenuEventArgs class.
            </summary>
            <param name="owner">The control displaying the menu.</param>
            <param name="menu">The menu being displayed.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockContextMenuEventArgs.Owner">
            <summary>
            Gets the control that is displaying the context menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockContextMenuEventArgs.ContextMenu">
            <summary>
            Gets or sets the context menu to be displayed.
            </summary>
            <value>An instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu"/> class.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockContextMenuEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockContextMenu"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DockContextMenuEventArgs"/> value that provides the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProvideGraphicsItemsEventArgs">
            <summary>
            Custom event argument class used for obtaining the Graphics objects used for rendering
            the caption of docked windows.
            </summary>
            <remarks>The <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> uses the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.ProvideGraphicsItems"/> event to
            obtain custom Graphics objects from the application to be used for drawing the caption area of docked windows.
            <p>
            NOTE: The main caption for floating windows is rendered by the Win32 system and cannot be customized.
            </p>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.ProvideGraphicsItemsEventHandler"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProvideGraphicsItemsEventArgs.#ctor(System.Windows.Forms.Control,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.ProvideGraphicsItemsEventArgs"/> class.
            </summary>
            <param name="ctrl">The dockable control for which the caption is being drawn.</param>
            <param name="bounds">The caption bounds.</param>
            <param name="active">The active/inactive state of the control.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideGraphicsItemsEventArgs.Control">
            <summary>
            Gets the dockable control for which the caption is being drawn.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Control"/> instance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideGraphicsItemsEventArgs.CaptionBounds">
            <summary>
            Gets the bounds of the caption.
            </summary>
            <remarks>A <see cref="T:System.Drawing.Rectangle"/> value.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideGraphicsItemsEventArgs.IsActiveCaption">
            <summary>
            Gets the active/inactive state of the docking window.
            </summary>
            <value>A Boolean value. TRUE if the window is active.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideGraphicsItemsEventArgs.CaptionBackground">
            <summary>
            Gets or sets the Brush to be used for drawing the caption background.
            </summary>
            <value>An instance of the <see cref="T:System.Drawing.Brush"/> class.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideGraphicsItemsEventArgs.CaptionForeground">
            <summary>
            Gets or sets the Color to be used for drawing the caption text and buttons.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideGraphicsItemsEventArgs.CaptionFont">
            <summary>
            Gets or sets the Font to be used for the caption text.
            </summary>
            <value>An instance of the <see cref="T:System.Drawing.Font"/> class.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProvideGraphicsItemsEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.ProvideGraphicsItems"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.ProvideGraphicsItemsEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockStateUnavailableEventArgs">
            <summary>
            Custom event argument class used for notifying users that dock state information does not exist for a control.
            </summary>
            <remarks>
            The DockStateUnavailableEventArgs class is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> to
            provide event data for the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockStateUnavailable"/> event.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockControlEventArgs"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockStateUnavailableEventArgs.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a new instance of the DockStateUnavailableEventArgs class.
            </summary>
            <param name="ctrl">The control for which the dock state information is not available.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockStateUnavailableEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockStateUnavailable"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DockStateUnavailableEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.InitializeControlOnLoadEventArgs">
            <summary>
            Custom event argument class used by the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> to notify that a previously persisted
            dockable control cannot be located during a <see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDockState"/> operation.
            </summary>
            <remarks>
            Applications can use the <see cref="!:InitializeControlOnLoadEvent"/> as a hint to create and initialize
            controls selectively based on the control set in the previously persisted docking layout.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.InitializeControlOnLoadEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of the InitializeControlOnLoadEventArgs class.
            </summary>
            <param name="ctrlname">The name of the control that the DockingManager is attempting to load.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.InitializeControlOnLoadEventArgs.ControlName">
            <summary>
            The <see cref="P:System.Windows.Forms.Control.Name"/> property of the control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.InitializeControlOnLoadEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.InitializeControlOnLoad"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.InitializeControlOnLoadEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TransferManagerEventArgs">
            <summary>
            Custom event argument class used for notifying users that a control is being transferred from
            it's current <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> to another manager.
            </summary>
            <remarks>
            The TransferManagerEventArgs class is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> to
            provide event data for the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.TransferringFromManager"/> and <see cref="!:TransferredToManager"/>
            events.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockControlEventArgs"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TransferManagerEventArgs.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a new instance of the TransferManagerEventArgs class.
            </summary>
            <param name="ctrl">The control whose <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> is undergoing the transfer.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TransferManagerEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.TransferringFromManager"/>
            and <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.TransferredToManager"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.TransferManagerEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockingManager">
            <summary>
            The DockingManager provides the functionality for creating and working with docking windows.
            </summary>
            <remarks>
            <p>
            The Essential Tools Docking Windows framework enables developers to add docking windows, similar
            to those found in the Microsoft Visual Studio.NET IDE, to their Windows Forms applications. At the
            most basic level a docking window may be defined as a control that attaches itself to a host form's
            border, is capable of being dragged around and docked to different edges within the form and can also be
            dragged off the host form and floated as an individual top-level window. The docking
            framework allows just about any child control on a form to be made into a fully qualified
            docking window. The framework, in addition to the core docking interactions, implements
            some highly advanced features such as multiple docking levels, nested docking, tabbed docking,
            tear-off tabs, autohide mode, state persistence etc., To facilitate the addition of these
            complex features, the DockingManager has a full-fledged WYSIWYG visual designer that enables
            developers to create the exact docking layout that they desire without having to write a single line of code.
            </p>
            <p>The DockingManager class is the central component of the Essential Tools Docking Windows implementation.
            The class coordinates and facilitates the multitude of complex interactions that take place between
            a dockable control and it's host form as well as between the dockable controls themselves.
            DockingManagers are form-centric and adding an instance of the component to a form makes the
            form into a 'dock-enabled' host. The DockingManager is implemented as an Extender Provider and
            upon adding it to a Form or UserControl, the controls that are immediate children of the container qualify for
            the docking services provided by the docking framework.
            </p>
            <p>
            The 'EnableDocking' (<see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetEnableDocking(System.Windows.Forms.Control,System.Boolean)"/>) extended property that the
            DockingManager adds to controls serves as the trigger for enabling/disabling a control as a dockable window.
            Upon setting the EnableDocking property, the control is enclosed within a dockable container and will be
            docked to a default border. The control can now be repositioned by dragging it around within the designer.
            The DockingManager persists the dock positions set during design time, ie., the dock state
            information, as a part of the application's resource and uses this persisted info when loading
            the application. Thus the DockingManager implements a true WYSIWYG visual designer. There is also
            a simple and intuitive API available for programmatic manipulation of the docking windows.
            </p>
            </remarks>
            <example>
            The sample code shows how to create and setup a simple docking windows layout constituting
            of a ListBox control docked to the left side of the form and having a width of 175 unites, a second
            ListBox that is docked as a tab within the first ListBox, a TreeView control that is docked to the form's
            right border, has a width of 150 units and starts off in the AutoHide mode, and a
            CheckedListBox control that is initially a floating window.
            <p>
            NOTE: The layout initialization code shown here is required only when docking windows is being used programmatically.
            When using the designer, the layout state will automatically be written to the application's resource file.
            </p>
            <coderef file="Tools\Samples\Docking Package\DockingWindows\SimpleCode\cs\Form1.cs" name="DockingWindows" lang="C#"><code lang="C#">
            	private void InitializeDockingWindows()
            	{
            		// Create the DockingManager instance and set this form as the host form.
            		this.dockingManager = new Syncfusion.Windows.Forms.Tools.DockingManager(this.components);
            		this.dockingManager.BeginInit();
            		this.dockingManager.HostForm = this;
            
            		// Disable state persistence
            		this.dockingManager.PersistState = false;
            		// Enable display of the default context menus
            		this.dockingManager.EnableContextMenu = true;
            		// Set the imagelist that will provide the icons for the docking windows.
            		this.dockingManager.ImageList = this.ilDocking;
            
            		// Dock listbox1 to the left border of the form and with an initial
            		// width of 175 units.
            		// NOTE - Calling DockControl() on a control for the first time,
            		// will initialize it as a docking window. This is the equivalent of
            		// the DockingManager.SetEnableDocking() call.
            		this.dockingManager.DockControl(this.listBox1, this,
            			Syncfusion.Windows.Forms.Tools.Syncfusion.Windows.Forms.Tools.DockingStyle.Left, 175);
            		// Set the text to be displayed in the dockingwindow caption
            		this.dockingManager.SetDockLabel(this.listBox1, "ListBox 1");
            		// The image index used for this control
            		this.dockingManager.SetDockIcon(this.listBox1, 0);
            
            		// Now dock listbox2 as a tab onto listbox1
            		this.dockingManager.DockControl(this.listBox2, this.listBox1,
            			Syncfusion.Windows.Forms.Tools.Syncfusion.Windows.Forms.Tools.DockingStyle.Tabbed, 175);
            		this.dockingManager.SetDockLabel(this.listBox2, "ListBox 2");
            		this.dockingManager.SetDockIcon(this.listBox2, 1);
            
            		// Dock the treeView to the right border of the form with a width of 150.
            		this.dockingManager.DockControl(this.treeView1, this, Syncfusion.Windows.Forms.Tools.DockingStyle.Right, 150);
            		// Set treeView1 to start off in the AutoHide position.
            		this.dockingManager.SetAutoHideMode(this.treeView1, true);
            		this.dockingManager.SetDockLabel(this.treeView1, "TreeView");
            		this.dockingManager.SetDockIcon(this.treeView1, 2);
            
            		// Set checkedListBox1 to be initially in a floating position.
            		Rectangle rcfrm = this.Bounds;
            		this.dockingManager.FloatControl(this.checkedListBox1,
            			new Rectangle(rcfrm.Right+25,rcfrm.Bottom-250,175,300));
            		this.dockingManager.SetDockLabel(this.checkedListBox1, "Checked ListBox");
            		this.dockingManager.SetDockIcon(this.checkedListBox1, 3);
            		this.dockingManager.EndInit();
            	}</code></coderef>
            
            
            <coderef file="Tools\Samples\Docking Package\DockingWindows\SimpleCode\VB\Form1.vb" name="DockingWindows" lang="VB"><code lang="VB">
                   Private Sub InitializeDockingWindows()
            
                       ' Create the DockingManager instance and set this form as the host form.
                       Me.dockingManager = New Syncfusion.Windows.Forms.Tools.DockingManager(Me.components)
                       Me.dockingManager.BeginInit()
                       Me.dockingManager.HostForm = Me
            
                       ' Disable state persistence
                       Me.dockingManager.PersistState = False
                       ' Enable display of the default context menus
                       Me.dockingManager.EnableContextMenu = True
                       ' Set the imagelist that will provide the icons for the docking windows.
                       Me.dockingManager.ImageList = Me.ilDocking
            
                       ' Dock listbox1 to the left border of the form and with an initial
                       ' width of 175 units.
                       ' NOTE - Calling DockControl() on a control for the first time,
                       ' will initialize it as a docking window. This is the equivalent of
                       ' the DockingManager.SetEnableDocking() call.
                       Me.dockingManager.DockControl(Me.listBox1, Me, Syncfusion.Windows.Forms.Tools.Syncfusion.Windows.Forms.Tools.DockingStyle.Left, 175)
                       ' Set the text to be displayed in the dockingwindow caption
                       Me.dockingManager.SetDockLabel(Me.listBox1, "ListBox 1")
                       ' The image index used for this control
                       Me.dockingManager.SetDockIcon(Me.listBox1, 0)
            
                       ' Now dock listbox2 as a tab onto listbox1
                       Me.dockingManager.DockControl(Me.listBox2, Me.listBox1, Syncfusion.Windows.Forms.Tools.Syncfusion.Windows.Forms.Tools.DockingStyle.Tabbed, 175)
                       Me.dockingManager.SetDockLabel(Me.listBox2, "ListBox 2")
                       Me.dockingManager.SetDockIcon(Me.listBox2, 1)
            
                       ' Dock the treeView to the right border of the form with a width of 150.
                       Me.dockingManager.DockControl(Me.treeView1, Me, Syncfusion.Windows.Forms.Tools.DockingStyle.Right, 150)
                       ' Set treeView1 to start off in the AutoHide position.
                       Me.dockingManager.SetAutoHideMode(Me.treeView1, True)
                       Me.dockingManager.SetDockLabel(Me.treeView1, "TreeView")
                       Me.dockingManager.SetDockIcon(Me.treeView1, 2)
            
                       ' Set checkedListBox1 to be initially in a floating position.
                       Dim rcfrm As Rectangle
                       rcfrm = Me.Bounds
                       Me.dockingManager.FloatControl(Me.checkedListBox1, New Rectangle((rcfrm.Right + 25), (rcfrm.Bottom - 250), 175, 300))
                       Me.dockingManager.SetDockLabel(Me.checkedListBox1, "Checked ListBox")
                       Me.dockingManager.SetDockIcon(Me.checkedListBox1, 3)
                       Me.dockingManager.EndInit()
            
                   End Sub</code></coderef>
            
            </example>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockingClientPanel"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnProvidePresistenceID(Syncfusion.Windows.Forms.ProvidePersistenceIDEventArgs)">
            <summary>
            Raises the ProvidePersistenceID event.
            </summary>
            <param name="args">
            An ProvidePersistenceIDEventArgs object containg data pertaining to this event.
            </param>
            <remarks>
            The OnProvidePresistenceID method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            <para>Notes to Inheritors:  When overriding OnProvidePresistenceID in a derived
            class, be sure to call the base class's OnProvidePresistenceID method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.ResetDockTabHeight">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.DockTabHeight"/> property to it's default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.ResetDockTabFont">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.DockTabFont"/> property to it's default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.ResetAutoHideTabHeight">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideTabHeight"/> property to it's default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.ResetAutoHideTabFont">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideTabFont"/> property to it's default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> and initializes it with the container.
            </summary>
            <param name="container">An object implementing the <see cref="T:System.ComponentModel.IContainer"/> interface to associate with this instance of the DockingManager.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.DockControl(System.Windows.Forms.Control,System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.DockingStyle,System.Int32)">
            <summary>
            Docks the control to the specified dock-enabled parent control.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.DockingStyle"/> value provides the docking information and size.
            The interpretation of the dockstyle and nsize values depends upon the context of
            the dock operation.
            </remarks>
            <param name="ctrl"> The control to be docked. </param>
            <param name="parent"> The parent control that will host the new control. This can be
            the <see cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.HostForm"/> or any other dock-enabled control. </param>
            <param name="dockstyle"> A <see cref="T:Syncfusion.Windows.Forms.Tools.DockingStyle"/> value that specifies the dock type\position.</param>
            <param name="nsize"> Specifies the docked bounds for the control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.LockDockPanelsUpdate">
            <summary>
            Locks panels repainting
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.UnlockDockPanelsUpdate">
            <summary>
            Unlocks panels repainting
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.FloatControl(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            Sets the control as a separate floating window.
            </summary>
            <remarks>
            Floats the control as a resizable frame using the coordinates and bounds specified by the rcscreen parameter.
            </remarks>
            <param name="ctrl"> The control to be floated.</param>
            <param name="rcscreen"> The bounds for the floating parent frame.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetAutoHideMode(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Transfers the dockable control into or out of the autohide mode.
            </summary>
            <param name="ctrl"> The dock-enabled control.</param>
            <param name="bautohide"> If TRUE the control is set in the autohide mode.
            Else out of it. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.DockControlInAutoHideMode(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.DockingStyle,System.Int32)">
            <summary>
            Initializes the control as a docking window and sets it to be in the autohide mode.
            </summary>
            <param name="ctrl">The control instance.</param>
            <param name="border">The host container edge along which the control will be autohidden.</param>
            <param name="size">The autohide window size.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.GetAutoHideMode(System.Windows.Forms.Control)">
            <summary>
            Returns a boolean value indicating the autohide mode of the control.
            </summary>
            <param name="ctrl"> The dockable control for which the autohide mode is being queried.</param>
            <returns> TRUE if the control is in autohide.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.IsFloating(System.Windows.Forms.Control)">
            <summary>
            Returns a boolean indicating the dock/float state of the dockable control.
            </summary>
            <param name="ctrl"> The control for which the dock/float state is being queried.</param>
            <returns> TRUE if the control is floating.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.RecalcHostFormLayout">
            <summary>
            Forces the host form to recalculate it's layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SaveDockState">
            <summary>
            Saves the current dockstate to Isolated Storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SaveDockState(Syncfusion.Runtime.Serialization.SerializeMode,System.Object)">
            <summary>
            Saves the current dockstate information to the specified persistence medium.
            </summary>
            <param name="mode"> A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value.</param>
            <param name="persistpath"> Specifies the name of an IsolatedStorage/INI/XML file or a registry key to
            which the persistence information will be written.</param>
            <remarks>
            Writes the docking windows information to the persistence medium specified by the
            <paramref name="mode"/> parameter and at the path specified by the <paramref name="persistpath"/> object.
            This method has been provided only to allow a higher degree of control over the
            serialization process. For normal state storage and retrieval it is advisable to
            use the <see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.SaveDockState"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDockState"/>
            methods.
            <para>
            This method will be removed in a future version. Please use the more flexible SaveDockState(AppStateSerializer) variant, instead.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SaveDockState(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Saves the current dockstate information to the specified <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/>.
            </summary>
            <param name="serializer">A reference to the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <remarks>
            Writes the docking windows information to the persistence medium.
            This method has been provided only to allow a higher degree of control over the
            serialization process. For normal state storage and retrieval it is advisable to
            use the <see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.SaveDockState"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDockState"/>
            methods.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SaveDockState(Syncfusion.Runtime.Serialization.AppStateSerializer,System.Windows.Forms.Control)">
            <summary>
            Saves the dockstate information for the specified dockable control.
            </summary>
            <param name="serializer">A reference to the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <remarks>
            Takes a snapshot of the control's current dock state in the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/>'s layout and serializes this information
            to the persistence medium set in the AppStateSerializer.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.SaveDockState"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDockState"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDockState">
            <summary>
            Reads the persisted dockstate from the Isolated Storage.
            </summary>
            <returns>TRUE if the read is successful.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDockState(Syncfusion.Runtime.Serialization.SerializeMode,System.Object)">
            <summary>
            Reads a previously serialized dockstate.
            </summary>
            <param name="mode"> A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value.</param>
            <param name="persistpath">The name of the IsolatedStorage/INI/XML file or the
            registry key containing the  persisted dockstate information.</param>
            <returns>TRUE if the load is successful.</returns>
            <remarks>
            Reads the dockstate information from the specified persistent store and applies the new state.
            This method has been provided only to allow a higher degree of control over the
            serialization process. For normal state storage and retrieval it is advisable to
            use the <see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.SaveDockState"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDockState"/>
            methods.
            <para>
            This method will be removed in a future version. Please use the more flexible LoadCommandBarState(AppStateSerializer) variant, instead.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDockState(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Reads a previously serialized dockstate.
            </summary>
            <param name="serializer">A reference to the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <returns>TRUE if the load is successful.</returns>
            <remarks>
            Reads the dockstate information from the specified persistent store and applies the new state.
            This method has been provided only to allow a higher degree of control over the
            serialization process. For normal state storage and retrieval it is advisable to
            use the <see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.SaveDockState"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDockState"/>
            methods.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDockState(Syncfusion.Runtime.Serialization.AppStateSerializer,System.Windows.Forms.Control)">
            <summary>
            Reads a previously serialized dockstate for the specified dockable control and applies the new state.
            </summary>
            <param name="serializer">A reference to the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <returns>TRUE if the load is successful.</returns>
            <remarks>
            When attempting to read from the store, the LoadDockState method first attempts to locate persisted data pertaining to this
            control from the stored dockstate information for the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/>'s full control set and failing that looks for
            dockstate information that is exclusive to the control.
            <seealso cref="!:DockingMangaer.SaveDockState()"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDockState"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDesignerDockState">
            <summary>
            Restores the dockstate to that set within the visual designer.
            </summary>
            <returns>TRUE if the load is successful.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.GetDockVisibility(System.Windows.Forms.Control)">
            <summary>
            Gets the docking window's visibility state.
            </summary>
            <remarks>
            A control's DockVisibility indicates whether the control is currently 'closed' or is
            an active participant in the interactions within the current set of docking windows.
            This is different from the Control.Visible property as a dockable control that is not
            visibile may still be a part of the docking implementation such as when it is in the
            autohide or tabbed docking modes.
            </remarks>
            <param name="ctrl"> The control for which the DockVisibility is to be queried.</param>
            <returns> TRUE if the control is a part of the current dock set. FALSE if it has been closed.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetDockVisibility(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the docking window's visibility state.
            </summary>
            <remarks>
            A control's DockVisibility indicates whether the control is currently 'closed' or is
            an active participant of the interactions within the current set of docking windows.
            This is different from the Control.Visible property as a dockable control that is not
            visibile may still be a part of the docking implementation such as when it is in the
            autohide or tabbed docking modes.
            </remarks>
            <param name="ctrl"> The control for which the DockVisibility is to be set.</param>
            <param name="bvisible"> If TRUE the control will be a part of the current dockset. Else
            the control will be closed. Clicking the 'X' button sets the DockVisibility to be false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetAsMDIChild(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Transfers a dockable control to or from an MDI child window state.
            </summary>
            <param name="ctrl">The dockable window to be transferred.</param>
            <param name="bsetmdi">TRUE to set the control as an MDI child. FALSE to restore to the dockable state.</param>
            <remarks>
            This method is valid only when the form hosting the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> is an MDIContainer.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.ActivateControl(System.Windows.Forms.Control)">
            <summary>
            Activates the specified dockable control.
            </summary>
            <param name="ctrl">The control instance.</param>
            <remarks>
            If the control is in the AutoHide mode or is part of a tabbed docking group, then invoking
            this method will bring the control to the fore and set focus to it.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.HideAutoHiddenControl">
            <summary>
            Hides the locked autohidden control.
            </summary>
            <remarks>
            If an autohidden control is visible and in the locked mode, then invoking this method will
            unlock and hideItem the control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetControlSize(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Sets a new size for the dockable control.
            </summary>
            <param name="ctrl">The docked/floating control.</param>
            <param name="newsize">Specifies the new size of the control.</param>
            <remarks>
            The SetControlSize method changes the dimensions of the docked control by displacing the
            horizontal/vertical splitter that is closest to the particular control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetControlMinimumSize(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Specifies the minimum width and height to which the dockable control can be resized to.
            </summary>
            <param name="ctrl">The docking window.</param>
            <param name="minsize">A <see cref="T:System.Drawing.Size"/> value specifiying the minimum bounds. The default value is Size.Empty.</param>
            <remarks>
            <para>
            The SetControlMinimumSize method is a part of the DockingManager's programmatic API and is not exposed by
            the docking windows designer. The application should invoke this method for each dock-enabled control that
            requires a set minimum size. The best place to call this method is from a handler for the
            <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.NewDockStateEndLoad"/> event.
            </para>
            <para>
            Please note that the control's minimum bounds are only a hint. While the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> will
            enforce the set extents far as possible, layout constraints may at times force it to overrun the minimum size.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.GetControlMinimumSize(System.Windows.Forms.Control)">
            <summary>
            Gets the minimum bounds specified for the dockable control.
            </summary>
            <param name="ctrl">The docking window.</param>
            <returns>A <see cref="T:System.Drawing.Size"/> value indicating the minimum bounds. The default value is Size.Empty.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetAutoHideButtonToolTip(System.String)">
            <summary>
            Sets the auto hide button's tooltip.
            </summary>
            <param name="text">Tooltip text.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.GetAutoHideButtonToolTip">
            <summary>
            Gets the auto hide button's tooltip.
            </summary>
            <returns>An <see cref="T:System.String"/> auto hide button's tooltip.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetCloseButtonToolTip(System.String)">
            <summary>
            Sets the close button's tooltip.
            </summary>
            <param name="text">Tooltip text.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.GetCloseButtonToolTip">
            <summary>
            Gets the close button's tooltip.
            </summary>
            <returns>A <see cref="T:System.String"/> close button's tooltip.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.AddToTargetManagersList(Syncfusion.Windows.Forms.Tools.DockingManager)">
            <summary>
            Adds the DockingManager to the target providers list belonging to the current manager.
            </summary>
            <param name="dockingmgr">The DockingManager to be added to the target list.</param>
            <remarks>
            Specifying a DockingManager as a target provider by adding it to another DockingManager's target list
            allows controls from the source manager to be dragged and docked onto the docking layout hosted
            by the target manager.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.RemoveFromTargetManagersList(Syncfusion.Windows.Forms.Tools.DockingManager)"/>
            <seealso cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.TransferringFromManager"/>
            <seealso cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.TransferredToManager"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.RemoveFromTargetManagersList(Syncfusion.Windows.Forms.Tools.DockingManager)">
            <summary>
            Removes the DockingManager from the target providers list belonging to the current manager.
            </summary>
            <param name="dockingmgr">The DockingManager to be removed from the target list.</param>
            <remarks>
            Specifying a DockingManager as a target provider by adding it to another DockingManager's target list
            allows controls from the source manager to be dragged and docked onto the docking layout hosted
            by the target manager.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.AddToTargetManagersList(Syncfusion.Windows.Forms.Tools.DockingManager)"/>
            <seealso cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.TransferringFromManager"/>
            <seealso cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.TransferredToManager"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.BeginInit">
            <summary>
            Begins the initialization of the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> component.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.EndInit">
            <summary>
            Ends the initialization of the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> component.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnImageListChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.ImageListChanged"/> event.
            </summary>
            <param name="arg">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnDragAllow(Syncfusion.Windows.Forms.Tools.DragAllowEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DragAllow"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DragAllowEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnDockAllow(Syncfusion.Windows.Forms.Tools.DockAllowEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockAllow"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DockAllowEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnDockStateChanging(Syncfusion.Windows.Forms.Tools.DockStateChangeEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockStateChanging"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DockStateChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnDockStateChanged(Syncfusion.Windows.Forms.Tools.DockStateChangeEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockStateChanged"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DockStateChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnDockVisibilityChanged(Syncfusion.Windows.Forms.Tools.DockVisibilityChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockVisibilityChanged"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DockVisibilityChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnDockControlActivated(Syncfusion.Windows.Forms.Tools.DockActivationChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockControlActivated"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DockActivationChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnDockControlDeactivated(Syncfusion.Windows.Forms.Tools.DockActivationChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockControlDeactivated"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DockActivationChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnAutoHideAnimationStart(Syncfusion.Windows.Forms.Tools.AutoHideAnimationEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideAnimationStart"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.AutoHideAnimationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnAutoHideAnimationStop(Syncfusion.Windows.Forms.Tools.AutoHideAnimationEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideAnimationStop"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.AutoHideAnimationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnNewDockStateBeginLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.NewDockStateBeginLoad"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnNewDockStateEndLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.NewDockStateEndLoad"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnDragFeedbackStart(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DragFeedbackStart"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnDragFeedbackStop(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DragFeedbackStop"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnProvideGraphicsItems(Syncfusion.Windows.Forms.Tools.ProvideGraphicsItemsEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.ProvideGraphicsItems"/> event.
            </summary>
            <param name="arg">A <see cref="!:DockingManager.ProvideGraphicsItemsEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnDockStateUnavailable(Syncfusion.Windows.Forms.Tools.DockStateUnavailableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockStateUnavailable"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DockStateUnavailableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnInitializeControlOnLoad(Syncfusion.Windows.Forms.Tools.InitializeControlOnLoadEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.InitializeControlOnLoad"/> event.
            </summary>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.InitializeControlOnLoadEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnTransferringFromManager(Syncfusion.Windows.Forms.Tools.TransferManagerEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.TransferringFromManager"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.TransferManagerEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnTransferredToManager(Syncfusion.Windows.Forms.Tools.TransferManagerEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.TransferredToManager"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.TransferManagerEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.OnDockContextMenu(Syncfusion.Windows.Forms.Tools.DockContextMenuEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockContextMenu"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.DockContextMenuEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.ComponentModel.Component.Dispose"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.GetEnableDocking(System.Windows.Forms.Control)">
            <summary>
            Determines whether the control is a docking window.
            </summary>
            <param name="ctrl">The control to be queried.</param>
            <returns>TRUE if the control is a docking window. Else FALSE</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetEnableDocking(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Enables or disables the control as a docking window.
            </summary>
            <param name="ctrl">The control instance.</param>
            <param name="value">If TRUE the control is set as a docking window. FALSE to disable a dock-enabled control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetDockLabel(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the text to be displayed in the docking window caption.
            </summary>
            <param name="ctrl">The dock-enabled control.</param>
            <param name="strtext">A String value representing the text caption.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.GetDockLabel(System.Windows.Forms.Control)">
            <summary>
            Gets the text displayed in the docking window caption.
            </summary>
            <param name="ctrl">The dock-enabled control.</param>
            <returns>A String value representing the text caption.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetDockIcon(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Sets the index of the image associated with the docking window.
            </summary>
            <param name="ctrl">The dock-enabled control.</param>
            <param name="index">A 0-based index into the <see cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.ImageList"/> property value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetDockIcon(System.Windows.Forms.Control,System.Drawing.Icon)">
            <summary>
            Sets the Image associated with the docking window.
            </summary>
            <param name="ctrl">The dock enabled control.</param>
            <param name="image">The <see cref="T:System.Drawing.Icon"/> representing the docking window.</param>
            <remarks>
            This overloaded version of the <see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetDockIcon(System.Windows.Forms.Control,System.Int32)"/> method is normally used only
            in combination with the the <see cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.ControlScopeImages"/> property. Setting ControlScopeImages to
            TRUE signifies that dockable controls will provide their own images objects during initialization and the
            scope of these images will be restricted to the control's existence as a docking window.
            <seealso cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.ControlScopeImages"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.GetDockIcon(System.Windows.Forms.Control)">
            <summary>
            Gets the index of the image associated with the docking window.
            </summary>
            <param name="ctrl">The dock-enabled control.</param>
            <returns>A 0-based index into the <see cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.ImageList"/> property value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetFloatOnly(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the control as a non-dockable float-only window.
            </summary>
            <param name="ctrl">The dock-enabled control.</param>
            <param name="bfloating">TRUE to disable docking.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.GetFloatOnly(System.Windows.Forms.Control)">
            <summary>
            Gets a flag indicating whether the control is a non-dockable float-only docking window.
            </summary>
            <param name="ctrl">The dock-enabled control.</param>
            <returns>TRUE if the control is a float-only docking window.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetAutoHideButtonVisibility(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the visibility state for the docking window's autohide button.
            </summary>
            <param name="ctrl">The dock-enabled control.</param>
            <param name="bvisible">TRUE to display the autohide button. The default is TRUE.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.GetAutoHideButtonVisibility(System.Windows.Forms.Control)">
            <summary>
            Gets the visibility state for the docking window's autohide button.
            </summary>
            <param name="ctrl">The dock-enabled control.</param>
            <returns>TRUE if the autohide button is displayed. The default is TRUE.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetCloseButtonVisibility(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the visibility state for the docking window's close button.
            </summary>
            <param name="ctrl">The dock-enabled control.</param>
            <param name="bvisible">TRUE to display the close button. The default is TRUE.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingManager.GetCloseButtonVisibility(System.Windows.Forms.Control)">
            <summary>
            Gets the visibility state for the docking window's close button.
            </summary>
            <param name="ctrl">The dock-enabled control.</param>
            <returns>TRUE if the close button is displayed. The default is TRUE.</returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.ImageListChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.ImageList"/> property changes.
            </summary>
            <remarks>
            The ImageListChanged event occurs when a new imagelist is assigned to the DockingManager.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.DragAllow">
            <summary>
            The DragAllow event occurs when a docking window is about to be dragged.
            </summary>
            <remarks> The DragAllow event is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> to provide
            information about an upcoming drag operation. The drag can be cancelled by
            setting the event argument's Cancel property.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockAllow">
            <summary>
            The DockAllow event occurs when a docking window is dragged over a potential dock target.
            </summary>
            <remarks> The DockAllow event is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> to provide
            information about a dock operation that is in progress. The dock can be cancelled by
            setting the event argument's Cancel property.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockStateChanging">
            <summary>
            The DockStateChanging event occurs just before a dock operation takes place.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockStateChanged">
            <summary>
            The DockStateChanged event occurs immediately after a dock operation.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockVisibilityChanged">
            <summary>
            The DockVisibilityChanged event occurs after a control's DockVisibility state has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockControlActivated">
            <summary>
            The DockControlActivated event occurs when a dockable control gets activated.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockControlDeactivated">
            <summary>
            The DockControlDeactivated event occurs when a dockable control gets deactivated.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideAnimationStart">
            <summary>
            The AutoHideAnimationStart event occurs just before the start of an autohide animation.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideAnimationStop">
            <summary>
            The AutoHideAnimationStop event occurs immediately after the end of an autohide animation.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockContextMenu">
            <summary>
            The DockContextMenu event occurs when the right mouse button is clicked over a docking window's caption.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.NewDockStateBeginLoad">
            <summary>
            The NewDockStateBeginLoad event occurs just before a new dock state is loaded.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.NewDockStateEndLoad">
            <summary>
            The NewDockStateEndLoad event occurs immediately after a new dock state has been loaded.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.DragFeedbackStart">
            <summary>
            The DragFeedbackStart event occurs just before the start of feedback of a drag operation.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.DragFeedbackStop">
            <summary>
            The DragFeedbackStop event occurs immediately after the end of feedback of a drag operation.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.ProvideGraphicsItems">
            <summary>
            The ProvideGraphicsItems event occurs whenever a dockable control's caption needs to be painted.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.ProvidePersistenceID">
            <summary>
            Lets you specify a unique ID used to distinguish the persistence information
            of different instances of the Form type.
            </summary>
            <remarks>
            The default persistence logic assumes that applications will have only unique instances of top-level Forms.
            In applications that deviate from this normal and have multiple instances of the same top-level form, the
            persisted state of one Form will be overridden by another as the default logic makes no attempt to distinguish between
            the multiples. The ProvidePersistenceID event allows users' to workaround this particular condition, by permitting
            unique identifiers to be assigned for each instance of the Form.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockStateUnavailable">
            <summary>
            The DockStateUnavailable event occurs if serialized information is not available for a dockable control when loading a persisted dock state.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> fires this event when it cannot find any persistence information for a dockable control when
            loading a saved dock state. The particular control's DockVisibility property will be set to FALSE and the control hidden.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.InitializeControlOnLoad">
            <summary>
            The InitializeControlOnLoad event occurs when the DockingManager is not able to locate a control during
            a <see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDockState"/> call.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> fires this event when it is unable to find a previously persisted control
            during a <see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.LoadDockState"/> operation. Applications can use this event as a hint to create and initialize
            controls selectively based on the control set present in the previously persisted docking layout.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.TransferringFromManager">
            <summary>
            The TransferringFromManager event occurs when a dockable control hosted by this <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> is about
            to be transferred to the docking layout hosted by some other DockingManager.
            </summary>
            <remarks>
            <seealso cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.TransferredToManager"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.AddToTargetManagersList(Syncfusion.Windows.Forms.Tools.DockingManager)"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.RemoveFromTargetManagersList(Syncfusion.Windows.Forms.Tools.DockingManager)"/>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DockingManager.TransferredToManager">
            <summary>
            The TransferredToManager event occurs after a dockable control that previously belonged to some other
            DockingManager has been transferred to the docking layout hosted by this <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/>.
            </summary>
            <remarks>
            <seealso cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.TransferringFromManager"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.AddToTargetManagersList(Syncfusion.Windows.Forms.Tools.DockingManager)"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.RemoveFromTargetManagersList(Syncfusion.Windows.Forms.Tools.DockingManager)"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.DockLayoutStream">
            A MemoryStream containing the dockstate information set by the visual designer.
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.PersistState">
            <summary>
            Gets or sets a value indicating whether the application's docking windows state should be persisted.
            </summary>
            <value>When TRUE the application's dock state will be persisted; the default is FALSE.</value>
            <remarks>
            When this property is set to TRUE, the application's dock state will be persisted upon application exit
            and restored during the subsequent launch.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.PersistKey">
            <summary>
            Returns the key used for serialzing the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> state information.
            </summary>
            <value>A String value.</value>
            <remarks>
            This method can be overridden to provide a custom serialization key.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.HostForm">
            <summary>
            The form hosting the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> and all the associated dockable controls.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.Form"/> that will host the docking windows.</value>
            <remarks>
            This property references the form containing the DockingManager and all the dockable controls.
            A form can contain only a single instance of the DockingManager.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.HostControl">
            <summary>
            The Control hosting the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> and all the associated dockable controls.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.Control"/> that will host the docking windows.</value>
            <remarks>
            This property references the Control containing the DockingManager and all the dockable controls.
            A Control can contain only a single instance of the DockingManager.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.ImageList">
            <summary>
            Gets or sets the imagelist containing the image objects used by the dockable controls.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.ImageList"/> containing the images associated with the various docking windows.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.ControlScopeImages">
            <summary>
            Gets or sets a value indicating whether controls will provide their own images.
            </summary>
            <value>A boolean value; the default is FALSE.</value>
            <remarks>
            Setting the ControlScopeImages property to TRUE denotes that dockable controls will furnish the actual Image
            objects during initialization using the <see cref="M:Syncfusion.Windows.Forms.Tools.DockingManager.SetDockIcon(System.Windows.Forms.Control,System.Int32)"/> overload that accepts an Icon
            parameter and these images will be bound to the control's lifetime as a docking window. This contrasts with the
            default implementation where the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/> references an <see cref="!:System.Drawing.ImageList"/>
            object and controls merely provide the index to an Image in the ImageList.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideEnabled">
            <summary>
             Gets or sets a value indicating whether the autohide feature is enabled.
            </summary>
            <value>A boolean value. When FALSE the autohide feature is disabled; the default is TRUE </value>
            <remarks>
            When this property is TRUE, all docked windows will contain an autohide button that can be
            used to set/unset the particular control to/from the autohide mode.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.CloseEnabled">
            <summary>
             Gets or sets a value indicating whether the close button is present in docking windows.
            </summary>
            <value>A boolean value. When FALSE the close button is hidden; the default is TRUE.</value>
            <remarks>
            When this property is TRUE, all docking windows will contain a close button that can be
            used to hideItem the particular control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.EnableContextMenu">
            <summary>
             Gets or sets a value indicating whether a context menu is displayed.
            </summary>
            <value>A boolean value. When FALSE the context menu is not displayed; the default is TRUE.</value>
            <remarks> When this property is true, clicking the right mouse button over the caption area of a
            docking window will display a context menu. The menu can be tailored by handling
            the <see cref="E:Syncfusion.Windows.Forms.Tools.DockingManager.DockContextMenu"/> event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.HostFormClientBorder">
            <summary>
             Gets or sets a value indicating whether a border is drawn around the host form's client rectangle.
            </summary>
            <value>When FALSE the border is hidden; the default is TRUE.</value>
            <remarks>When this property is TRUE, the <see cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.HostForm"/>'s available client
            rectangle is enveloped by a single-line border. The border will not be drawn if the form is
            an MDIContainer or if it contains a <see cref="T:Syncfusion.Windows.Forms.Tools.DockingClientPanel"/> control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.Controls">
            <summary>
            Returns an enumerator that can iterate through the list of dockable controls.
            </summary>
            <value>A <see cref="T:System.Collections.IEnumerator"/> for the control list.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.ActiveControl">
            <summary>
            Returns the last active docking window.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Control"/> value. Null if no window has been activated yet.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.DockToFill">
            <summary>
            Gets or sets a value indicating whether docked control will occupy the form's full client region.
            </summary>
            <value>A boolean value; the default is FALSE.</value>
            <remarks>
            When the DockToFill property is set to TRUE, controls are docked such that they occupy the
            host form's entire available client region.
            <p>
            The DockToFill option should not be set when the host form is an MDIContainer or if it contains an instance of the
            <see cref="T:Syncfusion.Windows.Forms.Tools.DockingClientPanel"/> control.
            </p>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.DisallowFloating">
            <summary>
            Gets or sets a value indicating whether control are allowed to be floated.
            </summary>
            <value>A boolean value; the default is FALSE.</value>
            <remarks>
            When the DisallowFloating property is set to TRUE, controls may be moved around
            and docked within the form or other dockable controls, but are not allowed to be floated.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.MDIActivatedVisibility">
            <summary>
            Enables/disables MDI child activation triggered floating control visibility.
            </summary>
            <value>A boolean value; the default is TRUE.</value>
            <remarks>
            When the MDIActivatedVisibility property is enabled floating controls associated with <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/>s hosted in
            MDI child forms will be shown only when the particular form is the active MDI child. When the MDI child loses activation
            all floating windows tied to the DockingManager will be hidden.
            <p>
            NOTE: This property applies only when the DockingManager is hosted, either directly or indirectly through a ContainerControl, in an MDI child form.
            </p>
            <seealso cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.HostActivatedVisibility"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.HostActivatedVisibility">
            <summary>
            Binds floating control visibility state to the host control's visibility.
            </summary>
            <value>A boolean value; the default is TRUE.</value>
            <remarks>
            When the HostActivatedVisibility property is enabled floating controls associated with a <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/>
            hosted in a ContainerControl will be shown only when the host control is visible. Hiding the host control will
            automatically hide all floating windows tied to that control.
            <p>
            NOTE: This property applies only when the DockingManager is hosted in a ContainerControl.
            </p>
            <seealso cref="P:Syncfusion.Windows.Forms.Tools.DockingManager.MDIActivatedVisibility"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.ThemesEnabled">
            <summary>
            Specifies whether XP Themes(visual styles) should be used for the docking windows.
            </summary>
            <value>True to turn on themes; false otherwise.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideInterval">
            <summary>
            Specifies the interval between mouse movement across an autohide tab and showing or hiding the control.
            </summary>
            <value>An integer value specifying the time in milliseconds.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.FreezeResizing">
            <summary>
            Determines whether docked and floating windows can be resized using the medial splitters.
            </summary>
            <value>Resizing is disabled when TRUE; the default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.ShowCaption">
            <summary>
             Specifies whether to paint panel's caption.
            </summary>
            <value>Boolean value. Default value is True. </value>
            
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.FullCaptionsInAutoHideMode">
            <summary>
             Specifies whether to show full autohide tabgroup's page caption.
            </summary>
            <value>Boolean value. Default value is FALSE. </value>
            
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.DockTabHeight">
            <summary>
             Gets or sets the height of the tab control used in tabbed docking groups.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.DockTabFont">
            <summary>
             Gets or sets the Font for the tab control used in tabbed docking groups.
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideTabHeight">
            <summary>
             Gets or sets the height of the autohide tab control.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.AutoHideTabFont">
            <summary>
             Gets or sets the font for the autohide tab control.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.RightToLeft">
            <summary>
            Returns the current RTL setting based on the host control's setting.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingManager.ShowToolTips">
            <summary>
            Gets the visibility state for docking panel button's tooltip.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ITabbedMDIChildForm">
            <summary>
            Defines an interface through which a child <see cref="T:System.Windows.Forms.Form"/>
            will get notifications from a <see cref="T:Syncfusion.Windows.Forms.Tools.TabbedMDIManager"/> regarding certain events.
            </summary>
            <remarks>
            <para>
            You should implement this interface when you want to customize certain features in the
            <b>TabbedMDIManager</b>. You can customize the context menu that pops up when the user
            right clicks on the tab, for example.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabbedMDIChildForm.OnAttachTabbedMDI(Syncfusion.Windows.Forms.Tools.TabbedMDIManager)">
            <summary>
            Called when a <see cref="T:Syncfusion.Windows.Forms.Tools.TabbedMDIManager"/> is attached to the main form.
            </summary>
            <param name="manager">The <b>TabbedMDIManager</b>.</param>
            <remarks>
            This will also get called when a new child form implementing this interface is being created and
            added to a mdi parent bound to a <b>TabbedMDIManager</b>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabbedMDIChildForm.OnDetachTabbedMDI(Syncfusion.Windows.Forms.Tools.TabbedMDIManager)">
            <summary>
            Called to indicate that the <b>TabbedMDIManager</b> is being detached from the mdi parent.
            </summary>
            <param name="manager">The <b>TabbedMDIManager</b>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabbedMDIChildForm.OnTabContextMenuPopup(Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem)">
            <summary>
            Called before the context menu is shown when the user right-clicks on a tab.
            </summary>
            <param name="contextMenuParentItem">The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> 
            representing the context menu.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabbedMDIChildForm.OnTabContextMenuClosed(Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem)">
            <summary>
            Called after the context menu is shown when the user right-clicks on a tab.
            </summary>
            <param name="contextMenuParentItem">The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> 
            representing the context menu.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabbedMDIChildForm.OnMdiChildAddedToTabHost(Syncfusion.Windows.Forms.Tools.TabHost,System.Int32)">
            <summary>
            Called when the mdi child has been added to a new <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/>.
            </summary>
            <param name="tabHost">The <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> to which the mdi child Form was added to.</param>
            <param name="tabIndex">The tab index representing the mdi child Form in the tab control.</param>
            <remarks>Use the <see cref="P:Syncfusion.Windows.Forms.Tools.TabHost.MDITabPanel"/> property to get a reference to the tab control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ITabbedMDIChildForm.GetCustomTabText(System.Boolean@)">
            <summary>
            Lets you provide a custom text for the tab.
            </summary>
            <param name="validValueReturned">Set this "out" param to true
            if you intend to provide a custom tab text, or else set it to false.</param>
            <returns>A string value that will be the corresponding tab's text,
            if you intend to return a valid value; or else return value will be ignored.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ITabbedMDIChildForm.AllowUserDrag">
            <summary>
            Specifies whether or not user can drag and drop the tab corresponding to this
            mdi child in the tabbed mdi.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DockTabController.m_nHitTab">
            <summary>
            Variable indicating last hit tab button of tab control
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DragFBProvider">
             Provides feedback while dragging dockhosts and floating frames.
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DockingClientPanel">
            <summary>
            Represents a Panel derived control for use with the Essential Tools Docking Windows framework.
            </summary>
            <remarks>
            The DockingClientPanel is a subclass of the <see cref="T:System.Windows.Forms.Panel"/> control and implements
            a docking layout aware container that may be used for hosting the non-dockable controls on the Form or ContainerControl
            that houses the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/>. By virtue of it being aware of the docking layout, the DockingClientPanel's
            bounds are automatically repositioned or resized when the container's client area changes during the course
            of docking/undocking operations. Controls placed on the DockingClientPanel can thus avail of it's static boundary for
            implementing any required layout management.
            <p>
            NOTE: The DockingClientPanel should not be used in MDIContainer forms as the equivalent functionality is provided by
            the MDIClient window.
            </p>
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.DockingManager"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingClientPanel.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingClientPanel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingClientPanel.OnParentChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingClientPanel.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingClientPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DockingClientPanel.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingClientPanel.SizeToFit">
            <summary>
            Gets or sets a value indicating whether the control is sized to fill
            the form's client area.
            </summary>
            <value>A boolean value. During runtime this is always TRUE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DockingClientPanel.BorderStyle">
            <summary>
            Gets or sets the border style of the <see cref="T:Syncfusion.Windows.Forms.Tools.DockingClientPanel"/> control.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.BorderStyle"/> value. The default is BorderStyle.FixedSingle.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MDITabPanel">
            <summary>
            The tab control used to render a tab group in a tabbed MDI UI managed by the 
            <see cref="T:Syncfusion.Windows.Forms.Tools.TabbedMDIManager"/>.
            </summary>
            <remarks>
            <para>
            To access this tab control, override <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CreateMDITabPanel"/> (you can provide
            a custom derived class, if necessary) 
            and/or <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.InitMDITabPanel(Syncfusion.Windows.Forms.Tools.MDITabPanel)"/>.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.#ctor(Syncfusion.Windows.Forms.Tools.TabbedMDIManager)">
            <summary>
            Creats a new instance of the MDITabPanel class
            </summary>
            <param name="manager">The corresponding <see cref="T:Syncfusion.Windows.Forms.Tools.TabbedMDIManager"/> instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.IsHosting(System.Windows.Forms.Form)">
            <summary>
            Specifies whether or not a mdi child Form is "hosted" within this tab control.
            </summary>
            <param name="mdiChild">A mdi child Form.</param>
            <returns>true if the Form is part of this tab control; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.OnMouseLeave(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.TabControlAdv.OnSelectedIndexChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.AddMdiChild(System.Windows.Forms.Form,System.Int32,System.String)">
            <summary>
            Adds a mdi child Form to this tab control (tab group).
            </summary>
            <param name="mdiChild">The Form to add.</param>
            <param name="imageIndex">The image index representing the icon for the tab.</param>
            <param name="tooltip">The tooltip for the tab.</param>
            <remarks>
            <para>
            This method will be called to add a mdi child Form to the tab group represented
            by this tab control.
            </para>
            <para>
            To access or provide a custom tab page, override the <see cref="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.CreateTab(Syncfusion.Windows.Forms.Tools.MDIChildTabData,Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.CreateTab(Syncfusion.Windows.Forms.Tools.MDIChildTabData,Syncfusion.Windows.Forms.Tools.ITabPanelDefaultProperties)">
            <summary>
            Creats a new tab in the tab group.
            </summary>
            <param name="tabData">The data for this tab.</param>
            <param name="defaultProps">Default properties of this tab.</param>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdv"/> instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.RemoveMdiChild(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Removes the tab page corresponding to the mdi child Form.
            </summary>
            <param name="mdiChild">The mdi child Form.</param>
            <param name="removeFromHashtable">Internal flag.</param>
            <returns>true if successfully removed; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.GetTabPageAdvFromForm(System.Windows.Forms.Form)">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdv"/> of a given mdi child Form.
            </summary>
            <param name="mdiChild">The mdi child Form.</param>
            <returns>The <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdv"/> instance associated with this Form. Can be null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDITabPanel.GetSelectedForm">
            <summary>
            Gets the selected mdi child Form in this tab group.
            </summary>
            <returns>A child <see cref="T:System.Windows.Forms.Form"/> instance.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MDIChildTabData">
            <summary>
            Represents the <see cref="T:Syncfusion.Windows.Forms.Tools.TabData"/> associated with each tab in a tabbed MDI tab control (tab group).
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDIChildTabData.#ctor(Syncfusion.Windows.Forms.Tools.ITabPanelData,System.Windows.Forms.Form,Syncfusion.Windows.Forms.Tools.TabbedMDIManager)">
            <summary>
            Creates a new instance of the MDIChildTabData.
            </summary>
            <param name="tabPanelData">The tab panel data.</param>
            <param name="mdiChild">The corresponding child form.</param>
            <param name="manager">The corresponding <see cref="T:Syncfusion.Windows.Forms.Tools.TabbedMDIManager"/></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MDIChildTabData.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MDIChildTabData.MdiChild">
            <summary>
            Returns the mdi child Form associated with this tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MDIChildTabData.Text">
            <summary>
            Returns the text for the Tab.
            </summary>
            <remarks>
            <para>
            This override, always returns the associated form's Text property.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MDIChildTabData.ImageIndex">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.TabData.ImageIndex"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabbedMDIManager">
            <summary>
            Represents the class that manages the tabbed mdi.
            </summary>
            <remarks>
            <para>The TabbedMDIManager enables a tabbed look and feel for the MDI children in its
            MDI client area popularized in Visual Studio.Net(r). This can be accomplished
            without having to make any changes to the MDI parent or the MDI child.</para>
            <para>
            It also supports horizontal and vertical tab groups and supports dragging the mdi children
            into and away from the groups.
            </para>
            <para>You can also merge items to the Context Menu provided by the TabbedMDIManager.</para>
            <para>Note that when you attach a TabbedMDIManager to your MDI parent, you should use
            the TabbedMDIManager's <see cref="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MdiChildren"/> property instead of the MDI parent's MDIChildren
            property. This is because the tabs manager, introduces additional mdi children into the
            mdi client that are not part of your application. For the same reason you should also use the <see cref="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MdiListMenuItem"/> property
            to auto-insert mdi child windows into a <see cref="T:System.Windows.Forms.MenuItem"/> instead of the <see cref="P:System.Windows.Forms.MenuItem.MdiList"/> property.
            This however, is not necessary when you use XPMenus.</para>
            <para>The TabbedMDIManager also automatically stores the user's preferences in the isolated storage with respect
            to the tab group alignment, number of tab groups and their sizes. Note that this persisted state is reapplied
            on the exisiting mdi children, the next time you call <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.AttachToMdiContainer(System.Windows.Forms.Form)"/>. So, this pattern requires 
            you to instantiate all the mdi children before you call AttachToMdiContainer in your app.</para>
            <para>Take a look at <see cref="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MdiListMenuItem"/>
            for some sample code that deals with issues like displaying the mdi children in the MDI Windows menu, etc.</para>
            <para>
            You can optionally, programatically control the number of tab groups and which tab group
            a Form gets associated with using the <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MoveActiveDocTo(Syncfusion.Windows.Forms.Tools.TabHost)"/>, <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MoveToNextTabGroup"/>,
            <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MaximizeTabGroup(Syncfusion.Windows.Forms.Tools.TabHost)"/> and other methods.
            </para>
            <para>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> is the form that hosts each tab group. The <see cref="T:Syncfusion.Windows.Forms.Tools.MDITabPanel"/>
            is the tab control that is used to draw the tab group.
            </para>
            </remarks>
            <example>
            Initializing the tabbed MDI layout is simple. In your Form Load handler:
            <code lang="C#">
            this.tabbedMDIManager = new TabbedMDIManager();
            this.tabbedMDIManager.AttachToMdiContainer(this);
            </code>
            <code lang="VB">
            Me.tabbedMDIManager = New TabbedMDIManager()
            Me.tabbedMDIManager.AttachToMdiContainer(Me)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.bDisposed">
            <summary>
            Indicates if object was disposed or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.IsValidTabHost(Syncfusion.Windows.Forms.Tools.TabHost)">
            <summary>
            Tells whether the TabHost specified is still in use in the TabbedMDIManager.
            </summary>
            <param name="tabHost">The <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> to validate.</param>
            <returns>true if the TabHost is still in use; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.SetTabGroupWeights(System.Int32[])">
            <summary>
            Lets you specify the weights for the tab groups when allocating 
            the available space between them.
            </summary>
            <param name="weights">An array of integers.</param>
            <remarks>
            <para>
            An integer array with the same count as the current number of tab groups. The sum
            of these weights should be greater than 1.
            </para>
            <para>
            Use <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MaximizeTabGroup(Syncfusion.Windows.Forms.Tools.TabHost)"/> to take a tab group take all the available area.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MaximizeTabGroup(Syncfusion.Windows.Forms.Tools.TabHost)">
            <summary>
            Call this method to make the tab group hosted in the specified <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/>
            occupy the maximum space.
            </summary>
            <param name="tabGroupHost">A <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> instance.</param>
            <remarks>
            <para>
            Use <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.SetTabGroupWeights(System.Int32[])"/> to specifiy unique weights for each tab group.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.SetTooltip(System.Windows.Forms.Form,System.String)">
            <summary>
            Specify a tooltip for the tab associated with the specified Form.
            </summary>
            <param name="mdiChild">The mdi child Form.</param>
            <param name="tooltip">The tooltip string.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.GetTooltip(System.Windows.Forms.Form)">
            <summary>
            Returns the tooltip specified for a Form.
            </summary>
            <param name="mdiChild">The Form whose tooltip is required.</param>
            <returns>The corresponding tooltip string.</returns>
            <remarks>
            <para>This method returns the tooltip text set using a previous call to <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.SetTooltip(System.Windows.Forms.Form,System.String)"/>.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.OnTabControlAdding(Syncfusion.Windows.Forms.Tools.TabbedMDITabControlEventArgs)">
            <summary>
            Fires the <see cref="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlAdding"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.OnTabControlAdded(Syncfusion.Windows.Forms.Tools.TabbedMDITabControlEventArgs)">
            <summary>
            Fires the <see cref="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlAdded"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.OnTabControlRemoving(Syncfusion.Windows.Forms.Tools.TabbedMDITabControlEventArgs)">
            <summary>
            Fires the <see cref="!:TabControlRemoving"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CanCreateNewHorizontalGroup">
            <summary>
            Specifies whether a new horizontal tab group can be created, off the active child form.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CreateNewHorizontalGroup">
            <summary>
            Creates a new horizontal tab group, moving the active child form to that group.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CanCreateNewVerticalGroup">
            <summary>
            Specifies whether a new vertical tab group can be created, off the active child form.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CreateNewVerticalGroup">
            <summary>
            Creates a new vertical tab group, moving the active mdi child to that group.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CanMoveToPreviousTabGroup">
            <summary>
            Specifies whether the current active form can be moved to the previous tab group.
            </summary>
            <returns>true if possible; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MoveToPreviousTabGroup">
            <summary>
            Moves the current active mdi child to its previous tab group, if any.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CanMoveToNextTabGroup">
            <summary>
            Specifies whether the current active form can be moved to the next tab group.
            </summary>
            <returns>true if possible; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MoveToNextTabGroup">
            <summary>
            Moves the current active mdi child to its next tab group, if any.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.GetTabHostFromForm(System.Windows.Forms.Form)">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> given a mdi child Form.
            </summary>
            <param name="mdiChild">A mdi child Form instance.</param>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> that hosts the mdi child Form.
            Will return null if the mdi child Form is not found.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.GetTabPageAdvFromForm(System.Windows.Forms.Form)">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdv"/> given a mdi child Form.
            </summary>
            <param name="mdiChild">A mdi child Form instance.</param>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Tools.TabPageAdv"/> that hosts the mdi child Form.
            Will return null if the mdi child Form is not found or not associated with a tab page.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MoveActiveDocTo(Syncfusion.Windows.Forms.Tools.TabHost)">
            <summary>
            Lets you move the active form to the specified tab group.
            </summary>
            <param name="tabHost">The <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> representing the tab group.</param>
            <remarks>
            Use the <see cref="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabGroupHosts"/> property to get the current list of <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/>s.
            </remarks>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MoveDocTo(System.Windows.Forms.Form,Syncfusion.Windows.Forms.Tools.TabHost)"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MoveDocTo(System.Windows.Forms.Form,Syncfusion.Windows.Forms.Tools.TabHost)">
            <summary>
            Lets you move a child form to the specified tab group.
            </summary>
            <param name="form">The child Form.</param>
            <param name="tabHost">The <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> representing the tab group.</param>
            <remarks>
            Use the <see cref="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabGroupHosts"/> property to get the current list of <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/>s.
            </remarks>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MoveActiveDocTo(Syncfusion.Windows.Forms.Tools.TabHost)"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MakeSingleTabGroup">
            <summary>
            Consolidates the child forms in different tab groups into a single tab group.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.ContextMenu_NewHorz(System.Object,System.EventArgs)">
            <summary>
            The event handler for the "New Horizontal Tab Group" menu item.
            </summary>
            <param name="sender">The event source.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.ContextMenu_Cancel(System.Object,System.EventArgs)">
            <summary>
            The event handler for the "Cancel" menu item.
            </summary>
            <param name="sender">The event source.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.ContextMenu_Close(System.Object,System.EventArgs)">
            <summary>
            The event handler for the "Close" menu item.
            </summary>
            <param name="sender">The event source.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.ContextMenu_NewVert(System.Object,System.EventArgs)">
            <summary>
            The event handler for the "New Vertical Tab Group" menu item.
            </summary>
            <param name="sender">The event source.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.ContextMenu_MovePrev(System.Object,System.EventArgs)">
            <summary>
            The event handler for the "Move Previous" menu item.
            </summary>
            <param name="sender">The event source.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.ContextMenu_MoveNext(System.Object,System.EventArgs)">
            <summary>
            The event handler for the "Move Next" menu item.
            </summary>
            <param name="sender">The event source.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.InitMDITabPanel(Syncfusion.Windows.Forms.Tools.MDITabPanel)">
            <summary>
            Intializes the tab control representing a tab group.
            </summary>
            <param name="tabPanel">A <see cref="T:Syncfusion.Windows.Forms.Tools.TabControlAdv"/> derived instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CreateMDITabPanel">
            <summary>
            Creates and returns a MDITabPanel.
            </summary>
            <returns>A reference to a MDITabPanel control.</returns>
            <remarks>
            <para>
            MDITabPanel is a TabControlAdv derived class used internally by TabbedMDIManager. You
            can use this instance just as you would any TabControlAdv instance.
            </para>
            <para>
            You can customize the tab being drawn by providing a custom MDITabPanel derived
            tab or modifiying the properties of the MDITabPanel instance returned by the base class.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.OnMdiChildRemoved(System.Windows.Forms.Form)">
            <summary>
            Called when a mdi child Form gets removed.
            </summary>
            <param name="form">The mdi child Form.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.#ctor">
            <summary>
            Creats a new instance of the TabbedMDIManager.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.LoadTabGroupStates">
            <overload>
            Reads the tab group state information from a persistence medium.
            </overload>
            <summary>
            Reads the tab group states from the Isolated Storage.
            </summary>
            <returns>TRUE if the read is successful.</returns>
            <remarks>
            <para>
            This method loads and applies the saved tab group states on the currently
            loaded child Forms. Note that the loaded state information is not cached to be
            applied to child Forms that might be created later. 
            </para>
            <para>
            This method is automatically
            called by the <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.AttachToMdiContainer(System.Windows.Forms.Form)"/> method. You could optionally call this 
            method or it's other overloaded variants to load the tab group states at a different time.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.LoadTabGroupStates(Syncfusion.Runtime.Serialization.SerializeMode,System.Object)">
            <summary>
            Reads a previously serialized tab group states.
            </summary>		
            <param name="mode"> A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value.</param>
            <param name="persistpath">The name of the IsolatedStorage/INI/XML file or the 
            registry key containing the  persisted tab group information.</param>
            <returns>TRUE if the load is successful.</returns>
            <remarks>
            <para>
            Reads the tab groups information from the specified persistent store and applies the new state. 
            This method has been provided only to allow a higher degree of control over the 
            serialization process. For normal state storage and retrieval it is advisable to 
            use the <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.SaveTabGroupStates"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.LoadTabGroupStates"/> 
            methods.
            </para>
            <para>
            This method will be removed in a future version. Please use the more flexible LoadTabGroupStates(AppStateSerializer) variant, instead.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.LoadTabGroupStates(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Reads a previously serialized tab group states.
            </summary>		
            <param name="serializer">A reference to the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <returns>TRUE if the load is successful.</returns>
            <remarks>
            <para>
            Reads the tab groups information from the specified persistent store and applies the new state. 
            This method has been provided only to allow a higher degree of control over the 
            serialization process. Note that the <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.LoadTabGroupStates"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.SaveTabGroupStates"/>
            methods get called automatically when you enable/disable tabbed mdi.
            </para>
            <para>
            You could also cosider using the other overloaded variant <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.LoadTabGroupStates"/>
            that loads the information from the Isolated Storage.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.SaveTabGroupStates">
            <overload>
            Saves the current tab groups information into a persistence medium.
            </overload>
            <summary>
            Saves the current tab group states to Isolated Storage.
            </summary>
            <remarks>
            <para>
            Calling this method saves the current tab group states in Isolated Storage.
            </para>
            <para>
            This method is also called by the <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.DetachFromMdiContainer(System.Windows.Forms.Form,System.Boolean)"/> method
            to save the tag group states while disabling tabbed mdi. You could call this or any
            of it's overloaded variants to explicitly save the state at any specific time.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.SaveTabGroupStates(Syncfusion.Runtime.Serialization.SerializeMode,System.Object)">
            <summary>
            Saves the current tab groups information to the specified persistence medium.
            </summary>
            <param name="mode"> A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value.</param>
            <param name="persistpath"> Specifies the name of an IsolatedStorage/INI/XML file or a registry key to  
            which the persistence information will be written.</param>
            <remarks>
            Writes the mdi tab groups information to the persistence medium specified by the 
            <paramref name="mode"/> parameter and at the path specified by the <paramref name="persistpath"/> object.
            This method has been provided only to allow a higher degree of control over the 
            serialization process. For normal state storage and retrieval it is advisable to 
            use the <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.SaveTabGroupStates"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.LoadTabGroupStates"/> 
            methods.
            <para>
            This method will be removed in a future version. Please use the more flexible SaveTabGroupStates(AppStateSerializer) variant, instead.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.SaveTabGroupStates(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Saves the current tab groups information to the specified persistence medium.
            </summary>
            <param name="serializer">A reference to the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <remarks>
            <para>
            Writes the mdi tab groups information to the persistence medium.
            This method has been provided only to allow a higher degree of control over the 
            serialization process. Note that the <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.LoadTabGroupStates"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.SaveTabGroupStates"/>
            methods get called automatically when you enable/disable tabbed mdi.
            </para>
            <para>
            You could also consider calling the other overloaded variant <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.SaveTabGroupStates"/>
            that stores the tab group informtion in Isolated Storage.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.DetachFromMdiContainer(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Detaches an Mdi parent from the TabbedMDIManager.
            </summary>
            <param name="mdiContainer">The mdi parent to be detached that was previously
            attached through AttachToMdiContainer.</param>
            <param name="setCascade">if true, will layout mdi children in cascade mode after
            detaching itself; if false, it will not not layout the mdi children after detaching itself.</param>
            <remarks>
            <para>
            This will remove all references to the Mdi parent and resume default Mdi behavior.
            </para>
            <para>
            This method will also save the current tab group state in Isolated Storage.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            This will be called after the controls and forms are done processing the ProcessCmdKey.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.AttachToMdiContainer(System.Windows.Forms.Form)">
            <summary>
            Attaches an Mdi parent to the TabbedMDIManager.
            </summary>
            <param name="mdiContainer">The Mdi parent to attach to.</param>
            <remarks>
            <para>
            This will attach the TabbedMDIManager to the Mdi parent and invoke tabbed look-and-feel
            in the Mdi client area. You should typically do this in the mdi container's constructor
            or in the Form Load event.
            </para>
            <para>
            This method will also call <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.LoadTabGroupStates"/> to load and apply
            the saved tab group states on the loaded child Forms. Note that this loaded state
            will not be cached to be applied on child Forms that might be loaded in a later stage.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.AddMdiChild(System.Windows.Forms.Form,Syncfusion.Windows.Forms.Tools.TabHost)">
            <summary>
            Called to add a form to a tab host.
            </summary>
            <param name="mdiChild">The form to add.</param>
            <param name="tabHost">The destination <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CreateTabHost">
            <summary>
            Called to create a <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> to host a tab group (in a tab control).
            </summary>
            <returns>A new <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.InitTabHost(Syncfusion.Windows.Forms.Tools.TabHost,System.Int32)">
            <summary>
            Called to initialize the <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> as soon as it gets created.
            </summary>
            <param name="tabHost">The <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> to initialize.</param>
            <param name="tabGroupIndex">The tab group index which this tab host will represent.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CancelSplitterOperation">
            <summary>
            Cancels the pending splitter operation
            </summary>
            <returns>true if successful; false if nothing was canceled.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CancelOperation">
            <summary>
            Cancels a pending operation. Dragging the splitters, for example.
            </summary>
            <returns>true if successful; false if nothing was canceled.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.ValidateFocusedChildForm">
            <summary>
            Validates the active child form.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CausesFormValidation">
            <summary>
            Specifies whether or not the active child form will be validated before activating
            a new child form.
            </summary>
            <value>
            true to perform validation before switching the active child form; false otherwise. Default is false.
            </value>
            <remarks>
            <para>
            The default mdi behavior is to let you switch child forms even if validation
            fails for the active form. This is the default behavior in the TabbedMDIManager as well.</para>
            <para>
            When this property is turned on and if validation failed on the active form, 
            the user cannot click on a tab or use Ctrl+Tab keys to activate a new page.
            However, note that the active child form can still be changed programatically.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.ContextMenuItem">
            <summary>
            Specifies the Context menu that will be used along with the default tab context menu
            when the user right-clicks on a tab.
            </summary>
            <value>A ContextMenu instance.</value>
            <remarks>
            <para>TabbedMDIManager uses our XP Menus classes for its context menu.</para>
            <para>Using this you can add additional menu items to the context menu that pops up
            when a user clicks on a tab.</para>
            <para>This menu will be merged with the default tab context menu. The items
            in the default tab menu have a merge order of 10. Using the appropriate merge
            order you can insert the custom items before or after the default items.</para>
            </remarks>
            <example>
            This example adds a custom context menu to the tabbed mdi manager.
            <coderef file="\Tools\Samples\Tabbed MDI Package\TabbedMDI\cs\mainform.cs" name="TabbedMDIManager: Setting the Context Menu" lang="C#"><code lang="C#">
                        // Append menus to the standard mdi tab context menu
                        ParentBarItem contextMenuItem = new ParentBarItem();
            
                        BarItem newDocItem = new BarItem();
                        newDocItem.Click += new System.EventHandler(this.addDoc1_Click);
                        newDocItem.Text = "Custom Item: Insert New Doc";
                        newDocItem.MergeOrder = 30;
                        contextMenuItem.Items.Add(newDocItem);
            
                        BarItem exitItem = new BarItem();
                        exitItem.Click += new System.EventHandler(this.FileExit_Clicked);
                        exitItem.Text = "CustomItem: Exit";
                        exitItem.MergeOrder = 30;
                        contextMenuItem.Items.Add(exitItem);
            
                        contextMenuItem.BeginGroupAt(newDocItem);
                        // Items in this ParentBarItem will be merged with the standard context menu ParentBarItem of the mdi tab.
                        tabbedMDIManager.ContextMenuItem = contextMenuItem;</code></coderef>
            <coderef file="\Tools\Samples\Tabbed MDI Package\TabbedMDI\vb\mainform.vb" name="TabbedMDIManager: Setting the Context Menu" lang="VB"><code lang="VB">
                       ' Append menus to the standard mdi tab context menu
                       Dim contextMenuItem As ParentBarItem
                       contextMenuItem = New ParentBarItem()
                       Dim newDocItem As BarItem
                       newDocItem = New BarItem()
                       AddHandler newDocItem.Click, New System.EventHandler(AddressOf addDoc1_Click)
                       newDocItem.Text = "Custom Item: Insert New Doc"
                       newDocItem.MergeOrder = 30
                       contextMenuItem.Items.Add(newDocItem)
                       Dim exitItem As BarItem
                       exitItem = New BarItem()
                       AddHandler exitItem.Click, New System.EventHandler(AddressOf FileExit_Clicked)
                       exitItem.Text = "CustomItem: Exit"
                       exitItem.MergeOrder = 30
                       contextMenuItem.Items.Add(exitItem)
                       contextMenuItem.BeginGroupAt(newDocItem)
                       ' Items in this ParentBarItem will be merged with the standard context menu ParentBarItem of the mdi tab.
                       tabbedMDIManager.ContextMenuItem = contextMenuItem</code></coderef>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MdiChildren">
            <summary>
            Returns the Mdi children of the associated Mdi parent
            </summary>
            <value>An array of Forms containing the Mdi children.</value>
            <remarks>
            Use this property instead of accessing the Mdi parent's MDIChildren property
            to get a list of Mdi children. This is necessary because the TabbedMDIManager inserts
            additional Mdi children that your application need not and should not access/modify.
            </remarks>
            <example>
            <coderef file="\Tools\Samples\Tabbed MDI Package\TabbedMDI\cs\mainform.cs" name="TabbedMDIManager: Getting the mdi children" lang="C#"><code lang="C#">
                        foreach(Form form in this.tabbedMDIManager.MdiChildren)
                        {
                            children += form.Text + "\r\n";
                        }</code></coderef>
            <coderef file="\Tools\Samples\Tabbed MDI Package\TabbedMDI\vb\mainform.vb" name="TabbedMDIManager: Getting the mdi children" lang="VB"><code lang="VB">
                       Dim form As Form
                       For Each form In Me.tabbedMDIManager.MdiChildren
                       ' Process form
                       Next</code></coderef>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CloseButtonColor">
            <summary>
            Returns close button color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabGroupHosts">
            <summary>
            Returns an array of <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> instances that contains 
            the tab control(see <see cref="T:Syncfusion.Windows.Forms.Tools.MDITabPanel"/>) used to draw a tab group.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CloseItem">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> representing
            the "Close" menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CancelItem">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> representing
            the "Cancel" menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MoveNextGroupItem">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> representing
            the "Move Next" menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MovePrevGroupItem">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> representing
            the "Move Previous" menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.NewHorzGroupItem">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> representing
            the "New Horizontal Tab Group" menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.NewVertGroupItem">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> representing
            the "New Vertical Tab Group" menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MdiParent">
            <summary>
            Gets the current mdi parent Form managed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlAdding">
            <summary>
            This event is fired to let you provide a custom tab control.
            </summary>
            <remarks>The <b>TabControl</b> property of the event args will be null when
            this event is called. You can provide a custom <see cref="T:Syncfusion.Windows.Forms.Tools.MDITabPanel"/> derived 
            class in this event's args.
            If you just have to set some properties on the tab control, then listen
            to the <see cref="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlAdded"/> event which will be called before
            creating the tab control.</remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlAdded">
            <summary>
            This event is fired to let you configure the tab control's 
            appearance and behavior.
            </summary>
            <remarks>
            If you have to provide a derived <see cref="T:Syncfusion.Windows.Forms.Tools.MDITabPanel"/> instance
            to the TabbedMDIManager, use the <see cref="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlAdding"/> event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlRemoved">
            <summary>
            This event is fired after a tab control in a tab group was removed.
            </summary>
            <remarks>
            You would typically listen to this event and unsusbcribe to the tab control events that
            you previously subscribed to in the <see cref="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlAdded"/> handler.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.UnLockingMdiClient">
            <summary>
            This event is fired to notify that the locked Mdi Client area is being unlocked.
            </summary>
            <remarks>
            <para>
            Somtimes the <see cref="T:Syncfusion.Windows.Forms.Tools.TabbedMDIManager"/> locks(prevents painting) the mdi client window for a short period 
            to avoid flicker as the tabbed mdi gets laid out.</para>
            <para>This happens in this version when a new mdi child form
            gets added to the mdi parent form and gets shown. The mdi client gets locked when the mdi child gets
            added and gets unlocked a while (100 ms) after the mdi child gets activated. This avoids unseemly 
            flicker when the new mdi child gets activated.
            </para>
            <para>
            Due to this locking you may not be able to perform certain operations in the <see cref="E:System.Windows.Forms.Form.MdiChildActivate"/>
            event like setting the focus on a child Control in the new mdi child form (since the Form is locked along with the mdi client).
            In fact, calling the child Form's <see cref="P:System.Windows.Forms.Control.CanFocus"/> property will return false when the mdiclient is being locked.
            You should instead perform such operation in this event handler.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.UseIconsInTabs">
            <summary>
            Specifies whether or not to use Icons in tabs.
            </summary>
            <value>True to use icons; false otherwise. Default is true.</value>
            <remarks>When true, the Tabs will get the Icon from the mdi child Form's Icon property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.Horizontal">
            <summary>
            Specifies how to align the tab groups.
            </summary>
            <value>true indicates the tab groups should be aligned Horizontally;
            false indicates vertical alignment. Default is true.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.AllowTabGroupCustomizing">
            <summary>
            Specifies whether or not the user can drag and drop tabs(child forms) from one tab group to another.
            </summary>
            <value>true to allow the user to customize the tab group settings; false otherwise.</value>
            <remarks>
            <para>
            If this property is true, the user will be allowed to create new tab groups and move 
            tabs (child forms) between tab groups through the context menus and simple drag and drop.
            </para>
            <para>
            If false, the creation and sizes of the tab groups can only be set programatically.
            </para>
            <para>
            This property also determines whether the tab group's settings are persisted for use
            across application instantiation. The state will be peristed only if this is set to true.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.ID">
            <summary>
            Lets you specify a unique ID to differentiate different instances of this class.
            </summary>
            <remarks>
            The runtime persisted information of this class will be scoped by this ID.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.ThemesEnabled">
            <summary>
            Specifies whether the tabs should be drawn XP themed.
            </summary>
            <value>true to draw themed; false otherwise. Default is false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.MdiListMenuItem">
            <summary>
            Specifies the menu item to which the MDI Children list should be added.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.MenuItem"/> to which the list should be added.</value>
            <remarks>
            <para>Use this property instead of the <see cref="P:System.Windows.Forms.MenuItem.MdiList"/> property.</para>
            <para>This is necessary because the tabbed mdi manager inserts additional
            mdi children that your user should not and need not be aware about.</para>
            <para>
            Note that when you use XP Menus in Essential Tools as your mdi container's main-menu
            then this property need not be set. You should instead use the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.MdiListBarItem"/> 
            in XP Menus to represent the mdi child windows list. XP Menus framework automatically handles
            the case when the mdi child windows layout is managed by the TabbedMDIManager.
            </para>
            </remarks>
            <example>
            The following example shows how to initialize the TabbedMDIManager with a Form that
            is a mdi container. It also sets a menu to be an mdi list (using the TabbedMDIManager.MdiListMenuItem
            property) and adds custom entries to the default tab context menu.
            <coderef file="\Tools\Samples\Tabbed MDI Package\TabbedMDI\cs\mainform.cs" name="Initializing TabbedMDIManager" lang="C#"><code lang="C#">
                   public MainForm() {
            
                       //
                       // Required for Windows Form Designer support
                       //
                       InitializeComponent();
            
                        tabbedMDIManager = new TabbedMDIManager();
                        //tabbedMDIManager.UseIconsInTabs = false;
            
                       //Add Window Menu
                       this.miWindow = mainMenu.MenuItems.Add("Window");
                       miWindow.MergeOrder = 10;
                       miWindow.MenuItems.Add("Cascade", new System.EventHandler(this.WindowCascade_Clicked));
                       miWindow.MenuItems.Add("Tile Horizontal", new System.EventHandler(this.WindowTileH_Clicked));
                       miWindow.MenuItems.Add("Tile Vertical", new System.EventHandler(this.WindowTileV_Clicked));
                       miWindow.MenuItems.Add("MDI Tabbed", new System.EventHandler(this.TabbedWindows_Clicked));
            
            			// Let the TabbedMDIManager insert the Mdi Child windows list
            			this.tabbedMDIManager.MdiListMenuItem = miWindow;
            			
                        // Append menus to the standard mdi tab context menu
                        ParentBarItem contextMenuItem = new ParentBarItem();
            
                        BarItem newDocItem = new BarItem();
                        newDocItem.Click += new System.EventHandler(this.addDoc1_Click);
                        newDocItem.Text = "Custom Item: Insert New Doc";
                        newDocItem.MergeOrder = 30;
                        contextMenuItem.Items.Add(newDocItem);
            
                        BarItem exitItem = new BarItem();
                        exitItem.Click += new System.EventHandler(this.FileExit_Clicked);
                        exitItem.Text = "CustomItem: Exit";
                        exitItem.MergeOrder = 30;
                        contextMenuItem.Items.Add(exitItem);
            
                        contextMenuItem.BeginGroupAt(newDocItem);
                        // Items in this ParentBarItem will be merged with the standard context menu ParentBarItem of the mdi tab.
                        tabbedMDIManager.ContextMenuItem = contextMenuItem;
                   }
            
                    // Convenient way to toggle TabbedMDI mode.
                    private bool TabbedMDIOn
                    {
                        get    {    return this.tabWindowsOn;    }
                        set
                        {
                            if(!(this.tabWindowsOn == value))
                            {
                                this.tabWindowsOn = value;
            
                                if(this.tabWindowsOn)
                                {
                                    this.tabbedMDIManager.AttachToMdiContainer(this);
                                }
                                else
                                {
                                    this.tabbedMDIManager.DetachFromMdiContainer(this, false); // false to not invoke the Cascade mode after detaching.
                                }
                            }
                        }
                    }
            
                   //Add a document
                   private void AddDocument(Form doc) {
                       doc.MdiParent = this;
                       doc.Show();
                   }
            
                    private void MainForm_Load(object sender, System.EventArgs e)
                    {
                        // Add 4 documents
                        this.addDoc1_Click(this, EventArgs.Empty);
                        this.addDoc1_Click(this, EventArgs.Empty);
                        this.addDoc1_Click(this, EventArgs.Empty);
                        this.addDoc1_Click(this, EventArgs.Empty);
            
                        // Turn on MDI Tabbed Documents mode.
                        // Call this after loading the mdi children to restore their previous state.
                        this.TabbedMDIOn = true;
                    }
            
                    private int document1Count = 0 ;
                    private void addDoc1_Click(object sender, System.EventArgs e)
                    {
                        document1Count++ ;
                        Document1 doc = new Document1("DocumentOne " + document1Count.ToString());
                        AddDocument(doc);
                    }
            
                   //Window-&gt;Cascade Menu item handler
                   protected void WindowCascade_Clicked(object sender, System.EventArgs e) {
                        this.TabbedMDIOn = false;
                       this.LayoutMdi(MdiLayout.Cascade);
                   }</code></coderef>
            <coderef file="\Tools\Samples\Tabbed MDI Package\TabbedMDI\vb\mainform.vb" name="Initializing TabbedMDIManager" lang="VB"><code lang="VB">
                   Public Sub New()
                       MyBase.New()
                       '
                       ' Required for Windows Form Designer support
                       '
                       InitializeComponent()
                       tabbedMDIManager = New TabbedMDIManager()
                       'tabbedMDIManager.UseIconsInTabs = false;
                       'Add Window Menu
                       Me.miWindow = mainMenu.MenuItems.Add("Window")
                       miWindow.MergeOrder = 10
                       miWindow.MenuItems.Add("Cascade", New System.EventHandler(AddressOf WindowCascade_Clicked))
                       miWindow.MenuItems.Add("Tile Horizontal", New System.EventHandler(AddressOf WindowTileH_Clicked))
                       miWindow.MenuItems.Add("Tile Vertical", New System.EventHandler(AddressOf WindowTileV_Clicked))
                       miWindow.MenuItems.Add("MDI Tabbed", New System.EventHandler(AddressOf TabbedWindows_Clicked))
                       
                       ' Let the TabbedMDIManager insert the Mdi Child windows list
            		   Me.tabbedMDIManager.MdiListMenuItem = miWindow
            		   
                       ' Append menus to the standard mdi tab context menu
                       Dim contextMenuItem As ParentBarItem
                       contextMenuItem = New ParentBarItem()
                       Dim newDocItem As BarItem
                       newDocItem = New BarItem()
                       AddHandler newDocItem.Click, New System.EventHandler(AddressOf addDoc1_Click)
                       newDocItem.Text = "Custom Item: Insert New Doc"
                       newDocItem.MergeOrder = 30
                       contextMenuItem.Items.Add(newDocItem)
                       Dim exitItem As BarItem
                       exitItem = New BarItem()
                       AddHandler exitItem.Click, New System.EventHandler(AddressOf FileExit_Clicked)
                       exitItem.Text = "CustomItem: Exit"
                       exitItem.MergeOrder = 30
                       contextMenuItem.Items.Add(exitItem)
                       contextMenuItem.BeginGroupAt(newDocItem)
                       ' Items in this ParentBarItem will be merged with the standard context menu ParentBarItem of the mdi tab.
                       tabbedMDIManager.ContextMenuItem = contextMenuItem
            
                   End Sub
                   ' Convenient way to toggle TabbedMDI mode.
                   Property TabbedMDIOn() As Boolean
                       Get
            
                           Return Me.tabWindowsOn
            
                       End Get
                       Set(ByVal Value As Boolean)
            
                           If (Not (Me.tabWindowsOn = Value)) Then
                               Me.tabWindowsOn = Value
                               If Me.tabWindowsOn Then
                                   Me.tabbedMDIManager.AttachToMdiContainer(Me)
                               Else
                                   Me.tabbedMDIManager.DetachFromMdiContainer(Me, False)
                               End If
                           End If
            
                       End Set
                   End Property
                   Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
            
                       MyBase.Dispose(disposing)
                       If (Not (components) Is Nothing) Then
                           components.Dispose()
                       End If
            
                   End Sub
                   Private Sub AddDocument(ByVal doc As Form)
            
                       doc.MdiParent = Me
                       doc.Show()
            
                   End Sub
                   Private Sub MainForm_Load(ByVal sender As Object, ByVal e As EventArgs)
            
                       ' Add 4 documents
                       Me.addDoc1_Click(Me, EventArgs.Empty)
                       Me.addDoc1_Click(Me, EventArgs.Empty)
                       Me.addDoc1_Click(Me, EventArgs.Empty)
                       Me.addDoc1_Click(Me, EventArgs.Empty)
                       ' Turn on MDI Tabbed Documents mode.
                       ' Call this after loading the mdi children to restore their previous state.
                       Me.TabbedMDIOn = True
            
                   End Sub
                   Private Sub addDoc1_Click(ByVal sender As Object, ByVal e As EventArgs)
            
                       document1Count = (document1Count + 1)
            
                       Dim doc As Document1
                       doc = New Document1(("DocumentOne " + document1Count.ToString))
                       AddDocument(doc)
            
                   End Sub
                   ' Window-&gt;Cascade Menu item handler
                   Protected Sub WindowCascade_Clicked(ByVal sender As Object, ByVal e As EventArgs)
            
                       Me.TabbedMDIOn = False
                       Me.LayoutMdi(MdiLayout.Cascade)
            
                   End Sub</code></coderef>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabHost">
            <summary>
            This class is the parent Form of a tabbed MDI tab control(tab group) managed by the 
            <see cref="T:Syncfusion.Windows.Forms.Tools.TabbedMDIManager"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabHost.#ctor(Syncfusion.Windows.Forms.Tools.TabbedMDIManager)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.TabHost"/> class.
            </summary>
            <param name="manager">The corresponding <see cref="T:Syncfusion.Windows.Forms.Tools.TabbedMDIManager"/> instance.</param>
            <remarks>
            <para>Meant to be used by the framework.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabHost.CreateMDITabPanel">
            <summary>
            Creates a <see cref="P:Syncfusion.Windows.Forms.Tools.TabHost.MDITabPanel"/> for use within this Form.
            </summary>
            <returns>A <see cref="P:Syncfusion.Windows.Forms.Tools.TabHost.MDITabPanel"/> instance.</returns>
            <remarks>
            <para>
            This method inturn uses <see cref="M:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.CreateMDITabPanel"/>
            to create the tab control.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabHost.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabHost.OnSizeChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabHost.AddMdiChild(System.Windows.Forms.Form,System.Int32,System.String)">
            <summary>
            Called to "host" a mdi child Form within this tab group.
            </summary>
            <param name="mdiChild">The mdi child form to host.</param>
            <param name="imageIndex">The image index containing the image for the corresponding tab.</param>
            <param name="tooltip">The tooltip for the tab.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabHost.SetTooltip(System.Windows.Forms.Form,System.String)">
            <summary>
            Specifies the tooltip for a contained Form.
            </summary>
            <param name="mdiChild">The Form.</param>
            <param name="tooltip">The tooltip.</param>
            <remarks>
            <para>This tooltip will be set on the Form's corresponding tab in its tab group.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabHost.RemoveMdiChild(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Removes the mdi child Form from this tab group.
            </summary>
            <param name="mdiChild">The child Form to remove.</param>
            <param name="removeFromHashtable">Internal flag.</param>
            <returns>true if the form was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabHost.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TabHost.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabHost.MDITabPanel">
            <summary>
            Returns the <see cref="P:Syncfusion.Windows.Forms.Tools.TabHost.MDITabPanel"/> tab control within this Form.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabHost.MdiChildAutoScaleBaseDim">
            <summary>
            Returns a value indicating the weight associated with this tab host 
            when allocating the available space between tab groups.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabbedMDITabControlEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlAdding"/>, 
            <see cref="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlAdded"/> and <see cref="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlRemoved"/> events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TabbedMDITabControlEventArgs">
            <summary>
            The event args for the <see cref="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlAdding"/>, 
            <see cref="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlAdded"/> and <see cref="E:Syncfusion.Windows.Forms.Tools.TabbedMDIManager.TabControlRemoved"/> events.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TabbedMDITabControlEventArgs.TabControl">
            <summary>
            The tab control instance that is being added or removed.
            </summary>
            <remove>You can set a custom instance only when the current value is null,
            otherwise an exception will be thrown.</remove>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItemRenderer.IsRTL">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.TextBoxBoundEventHandler">
            <summary>
            This event is triggered when the internal TextBox gets added to the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.TextBoxBoundEventArgs">
            <summary>
            Provides data for the TextBoxBoundEvent.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.DrawToolbarItemEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.DrawToolbarItem"/> event of the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="drawItemInfo">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.DrawToolbarItemEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarRenderer.SelectedItem">
            <summary>
            Returns the currently selected bar item in the corresponding toolbar.
            </summary>
            <value>This will return null if no bar item is currently selected.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal">
            <summary>
            Internal class used to renderer a toolbar or a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.#ctor">
            <summary>
            Creates a new instance of the BarControlInternal class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnThemeChanged(System.EventArgs)">
            <summary>
            Raises the ThemeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnThemeChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnThemeChanged in a derived
            class, be sure to call the base class's OnThemeChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)"/>.
            </summary>
            <param name="levent"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnParentChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)"/>.
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnGotFocus(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnMouseLeave(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnDoubleClick(System.EventArgs)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)"/>.
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnDragLeave(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)"/>.
            </summary>
            <param name="gfbevent"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.ProcessMnemonic(System.Char)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)"/>.
            </summary>
            <param name="charCode"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.Renderer">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.IBarRenderer"/> associated with this control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.Style">
            <summary>
            Specifies the visual style of this Control.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.VisualStyle"/> value. Default is VisualStyle.OfficeXP.</value>
            <remarks>Note that this setting will be ignored when <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.ThemesEnabled"/> is turned on and themes are available in the OS.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.BackColor" -->
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.IsRTL">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.ThemesEnabled">
            <summary>
            Specifies whether XP Themes (visual styles) should be used for this control when
            available.
            </summary>
            <value>True to turn on themes; false otherwise.</value>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.ThemeChanged">
            <summary>
            This event will be fired when the ThemesEnabled property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.PopupParent">
            <summary>
            Allows you to set a PopupParent to this control. Useful when hosting this in a PopupControlContainer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.LargeIcons">
            <summary>
            Specifies whether the icons should be drawn large.
            </summary>
            <remarks>
            Internal property, not to be used directly.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlInternal.Syncfusion#Windows#Forms#Tools#XPMenus#IBarControl#IsRightToLeft" -->
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem">
            <summary>
            Represents an individual item that can be displayed in a menu structure, a tool bar
            or a popup menu in the XP Menus framework.
            </summary>
            <remarks>
            <para>In order for the BarItem to be displayed, you must add it to the Items property of
            a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> (to appear in menus or context menus) or a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> (to appear in the
            tool bar). This is normally achieved via simple drag-and-drop during
            design-time. The BarItem will of course be rendererd differently based on whether it
            is part of a menu structure or the tool bar.</para>
            <para>The BarItem class provides properties that enable you to configure the
            appearance and functionality of a bar item. To display a check mark next
            to this bar item (when in a menu) or to give it a special Checked highlight
            (when in a tool bar), use the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Checked"/> property. You can use this feature to identify
            a bar item that is selected in a list of mutually exclusive bar items. For
            example, if you have a set of bar items for setting the color of text in a
            TextBox control, you can use the Checked property to identify which color is
            currently selected. </para><para>The <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Shortcut"/> property can be used to define a keyboard
            combination that can be pressed to select the bar item.</para>
            <para>You can enable partial menus behavior in bar items when they are contained within a
            <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> by setting the BarItem's <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.IsRecentlyUsedItem"/> property.</para>
            <para>In an MDI scenario, Bar items added to an MDI parent's MainMenu(BarStyle.IsMainMenu enabled in the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.BarStyle"/> property) and the MDI child's
            MainMenu will automatically be merged to create a consolidated menu structure.</para>
            </remarks>
            <example>
            Take a look at our XPMenus samples under the Tools\Samples\Menus Package folder
            for usage example.
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.m_disabledImage">
            <summary>
            Image object for drawing item in disabled mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.#ctor">
            <summary>
            Creates a new insatnce of the BarItem class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.#ctor(System.String)">
            <summary>
            Creates a new insatnce of the BarItem class and initializes its Text property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.#ctor(System.String,System.EventHandler)">
            <summary>
            Creates a new insatnce of the BarItem class and initializes its Text property and Click event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.#ctor(System.String,System.EventHandler,System.Windows.Forms.Shortcut)">
            <summary>
            Creates a new insatnce of the BarItem class and initializes its Text property, Click event and Shortcut.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler,System.EventHandler)">
            <summary>
            Creates a new insatnce of the BarItem class and initializes its
            merge type, merge order, shortcut, Text property, Click, Popup and Select event.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Dispose(System.Boolean)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Clone">
            <summary>
            Creates a clone of this BarItem instance.
            </summary>
            <returns>An object that has similar properties to this BarItem.</returns>
            <remarks>
            Creates a new instance of BarItem and calls the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)"/> method to copy over properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Copies the properties of this BarItem into the specified BarItem.
            </summary>
            <param name="barItem">The BarItem where the values should be copied to.</param>
            <remarks>
            The Manager property will not be copied over.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.PerformUpdateUI">
            <summary>
            Forces the BarItem to fire an UpdateUI event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.PerformClick">
            <summary>
            Forces the BarItem to fire an ItemClicked event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.PerformSelected">
            <summary>
            Forces the BarItem to fire a Selected event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.PerformUnselected">
            <summary>
            Forces the BarItem to fire a Unselected event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.OnDrawToolbarItem(Syncfusion.Windows.Forms.Tools.XPMenus.DrawToolbarItemEventArgs)">
            <summary>
            Raises the DrawToolbarItem event.
            </summary>
            <param name="eventArgs">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.DrawToolbarItemEventArgs"/> that contains the event data.</param>
            <returns>true if there were listeners; false otherwise.</returns>
            <remarks>Raising an event invokes the event handler
            through a delegate. For more information, see Raising
            an Event. <para>The OnDrawToolbarItem method also
            allows derived classes to handle the event without
            attaching a delegate. This is the preferred technique
            for handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnDrawToolbarItem
            in a derived class, be sure to call the base class's
            OnDrawToolbarItem method so that registered
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.OnPropertyChanged(Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="args">An SyncfusionPropertyChangedEventArgs that contains the event data.</param>
            <remarks>
            <para>The OnPropertyChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class. </para>
            <para>Notes to Inheritors:  When overriding OnPropertyChanged in a derived
            class, be sure to call the base class's OnPropertyChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.OnCanDragDrop(Syncfusion.Windows.Forms.Tools.XPMenus.CanDragDropEventArgs)">
            <summary>
            Raises the CanDragDrop event.
            </summary>
            <param name="args">An CanDragDropEventArgs that contains the event data.</param>
            <remarks>
            <para>The OnCanDragDrop method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class. </para>
            <para>Notes to Inheritors:  When overriding OnCanDragDrop in a derived
            class, be sure to call the base class's OnCanDragDrop method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.OnUpdateUI(System.EventArgs)">
            <summary>
            Raises the UpdateUI event.
            </summary>
            <param name="args">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnUpdateUI method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class. </para>
            <para>Notes to Inheritors:  When overriding OnUpdateUI in a derived
            class, be sure to call the base class's OnUpdateUI method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.OnProvideFontInfo(Syncfusion.Windows.Forms.Tools.XPMenus.ProvideFontInfoEventArgs)">
            <summary>
            Raises the ProvideFontInfo event.
            </summary>
            <param name="args">A ProvideFontInfoEventArgs that contains the event data.</param>
            <remarks>
            <para>The OnProvideFontInfo method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class. </para>
            <para>Notes to Inheritors:  When overriding OnProvideFontInfo in a derived
            class, be sure to call the base class's OnProvideFontInfo method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.OnContainmentChanged(Syncfusion.Windows.Forms.Tools.XPMenus.ContainmentChangedEventArgs)">
            <summary>
            Raises the ContainmentChanged event.
            </summary>
            <param name="args">An ContainmentChangedEventArgs that contains the event data.</param>
            <remarks>
            The OnContainmentChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            <para>Notes to Inheritors:  When overriding OnContainmentChanged in a derived
            class, be sure to call the base class's OnContainmentChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.OnItemClicked(System.EventArgs)">
            <summary>
            Raises the ItemClicked event.
            </summary>
            <param name="args">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnItemClicked method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnItemClicked in a derived
            class, be sure to call the base class's OnItemClicked method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.OnSelected(System.EventArgs)">
            <summary>
            Raises the Selected event.
            </summary>
            <param name="args">An EventArgs that contains the event data.</param>
            <remarks>
            The OnSelected method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            <para>Notes to Inheritors:  When overriding OnSelected in a derived
            class, be sure to call the base class's OnSelected method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.OnUnselected(System.EventArgs)">
            <summary>
            Raises the Unselected event.
            </summary>
            <param name="args">An EventArgs that contains the event data.</param>
            <remarks>
            The OnUnselected method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            <para>Notes to Inheritors:  When overriding OnUnselected in a derived
            class, be sure to call the base class's OnUnselected method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Click">
            <summary>
            Occurs when the menu item is clicked by the user.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Selected">
            <summary>
            Occurs when the user selects a BarItem during menu navigation using mouse or keyboard.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Unselected">
            <summary>
            Occurs when the item has be unselected during user navigation via mouse or keyboard.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.PropertyChanged">
            <summary>
            Occurs when a Property's value changes in this object.
            </summary>
            <remarks>
            This event may not be thrown for some of the properties
            in BarItem. Take a look at the property's documentation
            to confirm whether this event will be thrown for a property.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.ContainmentChanged">
            <summary>
            Occurs when a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> gets added to or removed from a
            <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/>
            or <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.CanDragDrop">
            <summary>
            Occurs when the BarItem gets dragged over a ParentBarItem(submenu) or a Bar(Tool Bar)
            during user-customization.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUI">
            <summary>
            Occurs if either the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUIOnAppIdle"/> or <see cref="!:UpdateUIMFCStyle"/>
            is on.
            </summary>
            <remarks>
            <para>
            You can update the state of the BarItems in the following ways:
            </para>
            <list type="number">
            <item><description><b>Neurotic Approach:</b> In this approach you change the
            state of the BarItem as and when the corresponding application state changes.
            This is what the XPMenus framework expects you to do by default and so
            it will not fire the UpdateUI event under any circumstances.</description></item>
            <item><description><b>Relaxed Approach:</b> The above neurotic approach is sometimes
            cumbersome as it's difficult to keep track of state changes in application and
            updating the UI state appropriately. So, the framework provides another alternative
            where you can update the BarItem states in a relaxed manner. There are 2 ways
            of updating the BarItems in the relaxed approach:
            <para>
            <b>1. Fast Updates:</b> If updating the BarItem states is a trivial operation
            then use this approach, which is also how MFC does it. In this approach
            the UpdateUI event will be called when the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> hosting
            this BarItem is dropped down, or when the BarItem is hosted in a toolbar and when
            the application goes into an Idle state, or when a shortcut correponding to this
            item is about to be processed. You can turn on this behavior through out the
            menu structure by setting the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.UpdateUIMFCStyle"/> to true.
            For <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar"/>s and <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/>s that are outside
            the scope of a BarManager set the <b>UpdateUIMFCStyle</b> property in those instances
            explicitly.
            </para>
            <para>
            <b>2. Slow Updates:</b> If updating the BarItem states is not a trivial operation
            then use this approach. In this approach you simply turn on the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUIOnAppIdle"/>
            property of the BarItem whose state has changed one or more times and the framework
            will then fire it's <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUI"/> event the next time the application goes
            into an idle state.
            </para>
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.ProvideFontInfo">
            <summary>
            Lets you provide a custom font for this bar item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.MergeType">
            <summary>
            Gets or sets a value indicating the behavior of this bar item when its
            bar is merged with another.
            </summary>
            <remarks>
            A MenuMerge value that represents the bar item's merge type.
            <para>The merge type of a bar item indicates how the bar item behaves
            when it has the same merge order as another bar item being merged.
            You can use merged menus/bars to create a consolidated menus/bars based on two or
            more existing menus/bars.</para>
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
            <example> The following example creates a BarItem with the MergeType and
            MergeOrder specified so that the bar item is added to the merged menu/bar at
            first position.
            <code lang="C#">
            public void InitMyFileMenu()
            {
            	// Set the MergeType to Add so that the bar item is added to the
            	// merged menu/bar.
            	barItem1.MergeType = MenuMerge.Add;
            	// Set the MergeOrder to 1 so that this bar item is placed lower
            	// in the merged menu/bar order.
            	barItem1.MergeOrder = 1;
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Customizable">
            <summary>
            Specifies whether or not this item will participate in user customization.
            </summary>
            <value>true to make it customizable; false otherwise. Default is true.</value>
            <remarks>
            When turned off, the item will still be visible and active in the
            menus/toolbars for normal click, mouse move actions. When the user opens
            the Customize dialog or when the does an Alt+Click on an item, all
            these items will become invisible in the menus/toolbars and also in
            the Customize dialog. When you Alt+Click on an item whose Customizable
            property is set to false, no Customization will start.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.MergeOrder">
            <summary>
            Gets or sets a value indicating the relative position of the bar item
            when it is merged with another.
            </summary>
            <remarks>
            <para>A zero-based index representing the merge order position for this bar item.
            The default is 0.</para>
            <para>The merge order of a bar item specifies the relative position that
            this bar item will assume if the parent item that the BarItem is
            contained in is merged with another.</para>
            <para>Changing this property's value will throw the
            <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.PropertyChanged"/> event.</para>
            <para>The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/>s in a main-menu bar (the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> with the BarStyle.IsMainMenu flag set)
            will appear in an order based on their MergeOrder value during runtime, irrespective of
            their order during design-time. This is because the main-menu is created by merging the
            main-menus of the mdi container form and the mdi children, if any.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.PaintStyle">
            <summary>
            Gets or sets a value indicating the painting style in which this bar item
            will be drawn when placed in a Menu or Bar.
            </summary>
            <remarks>
            A PaintStyle value that represents the bar item's paint style.
            <para>Take a look at the documentation for the PaintStyle enumeration
            for more information on the interpretation of each PaintStyle value.</para>
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Enabled">
            <summary>
            Gets or sets a value indicating whether the menu item is enabled.
            </summary>
            <remarks>
            True if the bar item is enabled; otherwise, false. The default is true.
            A BarItem that is disabled is displayed in a gray color to indicate its
            state. When a parent bar item is disabled, all child bar items are not
            displayed.
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
            <example>
            The following example creates an event handler for the Popup event
            for three bar items that handle cut, copy, and delete operations
            in an application. The event handler code enables or disables the
            bar items based on whether a specific TextBox control in the application,
            named textBox1, has text selected within it. This example assumes that
            three BarItem objects are created named menuItemCut,
            menuItemCopy, and menuItemDelete have been created.
            <code lang="C#">
            public void Popup(Object sender, EventArgs e)
            {
                // Determine if there is text selected in textBox1.
                if(textBox1.SelectedText == "")
                {
                    // Disable the menus since no text is selected in textBox1.
                    menuItemCut.Enabled = false;
                    menuItemCopy.Enabled = false;
                    menuItemDelete.Enabled = false;
                }
                else
                {
                    // Text is selected in textBox1, so enable menu items.
                    menuItemCut.Enabled = true;
                    menuItemCopy.Enabled = true;
                    menuItemDelete.Enabled = true;
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Checked">
            <summary>
            Determines whether the BarItem should be drawn with a Checked appearance.
            </summary>
            <remarks>
            When in a menu, a Check mark will be placed to the left of the item.
            When in a Command Bar this will be drawn with a selected background.
            <para>
            You can use the Checked property in combination with other bar items
            in a menu or tool bar to provide state for an application. For example, you can
            place a check mark on a bar item in a group of items to identify the
            size of the font to be displayed for the text in an application. You
            can also use the Checked property to identify the selected bar item
            in a group of mutually exclusive bar items.
            </para>
            <bold>   Note   </bold>This property will be ignored for parent bar items
            (ParentBarItem and DropDownBarItem).
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
            <example>
            The following example uses the Checked property to provide the state
            in an application. In this example, a group of bar items are used to
            specify the color for the text in an TextBox control. The event handler
            provided is used by the Click event of the three bar items. Each bar
            item specifies a text color, menuItemRed (Red), menuItemGreen (Green),
            or menuItemBlue (Blue). The event handler determines which bar item
            was clicked, places a checkmark to the selected bar item, and changes
            the text color of the form's TextBox control. The example assumes
            that the System.Drawing namespace has been added to the form that
            this code is placed in. The example also assumes that a TextBox has
            been added to the form that this example code is located in that is
            named textBox1.
            <code lang="C#">
            // The following event handler would be connected to three menu items.
            private void MyMenuClick(Object sender, EventArgs e)
            {
            	// Determine if clicked menu item is the Blue bar item.
            	if(sender == menuItemBlue)
            	{
            		// Set the checkmark for the menuItemBlue bar item.
            		menuItemBlue.Checked = true;
            		// Uncheck the menuItemRed and menuItemGreen bar items.
            		menuItemRed.Checked = false;
            		menuItemGreen.Checked = false;
            		// Set the color of the text in the TextBox control to Blue.
            		textBox1.ForeColor = Color.Blue;
            	}
            	else if(sender == menuItemRed)
            	{
            		// Set the checkmark for the menuItemRed bar item.
            		menuItemRed.Checked = true;
            		// Uncheck the menuItemBlue and menuItemGreen bar items.
            		menuItemBlue.Checked = false;
            		menuItemGreen.Checked = false;
            		// Set the color of the text in the TextBox control to Red.
            		textBox1.ForeColor = Color.Red;
            	}
            	else
            	{
            		// Set the checkmark for the menuItemGreen.
            		menuItemGreen.Checked = true;
            		// Uncheck the menuItemRed and menuItemBlue bar items.
            		menuItemBlue.Checked = false;
            		menuItemRed.Checked = false;
            		// Set the color of the text in the TextBox control to Blue.
            		textBox1.ForeColor = Color.Green;
            	}
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.ImageIndex">
            <summary>
            Gets or sets the index value of the image displayed in the BarItem
            </summary>
            <remarks>
            A zero-based index that represents the position in the ImageList
            control (assigned to the ImageList property) where the image is located.
            The default is -1.
            The ImageList (or the LargeImageList) and the ImageIndex property
            togather will be used to determine the image that will be drawn
            in the BarItem.
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.LargeImageList">
            <summary>
            Gets or sets the ImageList that contains the images to display in the
            BarItem when in LargeIcons mode.
            </summary>
            <remarks>
            An ImageList that stores the collection of Image objects.
            The default value is a null reference (Nothing in Visual Basic) or the
            BarManager's ImageList to which this BarItem is a part of.
            <para>Make sure to set the ImageSize of this property's ImageList to a
            larger size than the ImageList associated with the ImageList property.
            The recommended size for this LargeImageList is 32X32.</para>
            <para>
            The LargeImageList and the ImageIndex property togather will be used to
            determine the image that will be drawn in the BarItem if and only if this BarItem
            is parented to a BarManager and the LargeIcons property of the BarManager is
            set to TRUE.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.ImageList">
            <summary>
            Gets or sets the ImageList that contains the images to display in the
            BarItem.
            </summary>
            <remarks>
            An ImageList that stores the collection of Image objects.
            The default value is a null reference (Nothing in Visual Basic) or the
            BarManager's ImageList to which this BarItem is a part of.
            <para>
            The ImageList and the ImageIndex property togather will be used to
            determine the image that will be drawn in the BarItem. However, if
            the LargeIcons property of the BarManager this BarItem is part of is
            set to TRUE, the LargeImageList ImageList will be used rather than this
            ImageList property.
            </para>
            
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.DisabledImage">
            <summary>
            Gets or Sets Image painting while BrItem is disabled.
            </summary>
            <remarks>If this property is not set, corresponding active image will be
            drawn grayscaled if item is disabled.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Visible">
            <summary>
            Gets or sets a value indicating whether the bar item is visible.
            </summary>
            <remarks>
            true if the bar item will be made visible on the parnet menu/bar; otherwise, false.
            The default is true.
            <para>You can use this property to modify a menu structure without having to
            merge menus or disable menus. For example, if you want to hide a complete
            section of functionality from the menus for your application, you can hide
            them from the user by setting this property to false.</para>
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
            <example>
            The following example creates a bar item, sets the caption, assigns a
            shortcut key, makes the bar item visible, and shows the shortcut key display
            for the bar item. The example assumes a BarItem object has been created
            that is named barItem1.
            <code lang="C#">
            public void SetupMyMenuItem()
            {
            	// Set the caption for the bar item.
            	barItem1.Text = "New";
            	// Assign a shortcut key.
            	barItem1.Shortcut = Shortcut.CtrlN;
            	// Make the bar item visible.
            	barItem1.Visible = true;
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Tag">
            <summary>
            Gets or sets the object that is associated with this BarItem.
            </summary>
            <remarks>
            An object that is associated with this BarItem. The default
            value is a null reference (Nothing in Visual Basic).
            <para>Any type derived from the Object class can be assigned to this property.
            If the Tag property is set through the Windows Forms designer, only text may
            be assigned.</para>
            A common use for the Tag property is to store data that is closely associated with this item.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Text">
            <summary>
            Gets or sets a value indicating the caption of the bar item.
            </summary>
            <remarks>
            The text caption of the menu item.
            <para>When you specify a caption for your menu item with the text parameter,
            you can also specify an access key by placing an '&amp;' before the character
            to be used as the access key. For example, to specify the "F" in "File" as
            an access key, you would specify the caption for the menu item as "&amp;File".
            You can use this feature to provide keyboard navigation for your menus.</para>
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
            <example>
            The following example creates a bar item, sets the caption, assigns a
            shortcut key, makes the item visible, and shows the shortcut key display
            for the item. The example assumes a BarItem object has been created
            that is named barItem1.
            <code lang="C#">
            public void SetupMyMenuItem()
            {
            	// Set the caption for the bar item.
            	barItem1.Text = "New";
            	// Assign a shortcut key.
            	barItem1.Shortcut = Shortcut.CtrlN;
            	// Make the bar item visible.
            	barItem1.Visible = true;
            }
            </code>
            <code lang="VB">
            Public Sub SetupMyMenuItem()
            	' Set the caption for the bar item.
            	barItem1.Text = "New"
            	' Assign a shortcut key.
            	barItem1.Shortcut = Shortcut.CtrlN
            	' Make the bar item visible.
            	barItem1.Visible = True
            End Sub 'SetupMyMenuItem
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.ID">
            <summary>
            Specifies the BarItem's ID. Should be unique among all the BarItems in a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager"/>, if added to a BarManager.
            </summary>
            <value>A string representing the ID.</value>
            <remarks>
            A default value will be generated for this property based on the Text value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Tooltip">
            <summary>
            Specifies the tooltip for the item.
            </summary>
            <value>A string representing the tooltip.</value>
            <remarks>
            <para>
            Tooltips will be shown only when the item is in a toolbar (not in a dropdown submenu).
            When this tooltip text is empty, a tooltip will be synthesised based on the
            Text property and the Shortcut property.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.CategoryIndex">
            <summary>
            The Category under which this BarItem will be listed in the Customization Dialog.
            </summary>
            <remarks>
            <para>The CategoryIndex is used to categorize the BarItem in the Customization
            Dialog.</para>
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Shortcut">
            <summary>
            Gets or sets a value indicating the shortcut key associated
            with the menu item.
            </summary>
            <remarks>
            <para>One of the Shortcut values. The default is Shortcut.None.</para>
            <para>Shortcut keys provide a method for users to activate frequently
            used menu items in your menu system and to provide keyboard access to
            your application for those users who do not have access to a mouse or
            other pointer device.</para>
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
            <example>
             The following example creates a menu item, sets the caption, assigns
             a shortcut key, makes the menu item visible, and shows the shortcut
             key display for the menu item. The example assumes a BarItem
             object has been created that is named menuItem1.
             <para>
             <code lang = "C#">
             public void SetupMyMenuItem()
             {
                    // Set the caption for the menu item.
                    menuItem1.Text = "New";
                    // Assign a shortcut key.
                    menuItem1.Shortcut = Shortcut.CtrlN;
                    // Make the menu item visible.
                    menuItem1.Visible = true;
            }
            </code>
            <code lang="VB">
            Public Sub SetupMyMenuItem()
            	' Set the caption for the menu item.
            	menuItem1.Text = "New"
            	' Assign a shortcut key.
            	menuItem1.Shortcut = Shortcut.CtrlN
            	' Make the menu item visible.
            	menuItem1.Visible = True
            End Sub 'SetupMyMenuItem
             </code>
             </para>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.ShortcutText">
            <summary>
            Gets or sets the custom shortcut text that is to be used in displaying the menu item.
            </summary>
            <value>By default, this property will return a string based on the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Shortcut"/>
            property value. But if you specify a non-null value (including String.Empty) to this property that value
            will be returned.</value>
            <remarks>
            <p>To reset this property programatically, specify null. In design time select "Reset"
            from the context menu of the property grid entry of this property.</p>
            <p>This property is useful when you want to replace the default
            shortcut text (for example, "Ctrl+D0", displayed when Shortcut.Ctrl0 is the shortcut),
            with something else (say "Ctrl0", in the above example).
            </p>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Manager">
            <summary>
            The BarManager to which this BarItem will be parented to.
            </summary>
            <remarks>
            <para>Including this BarItem in a BarManager will allow it to be usable in a
            Form's Menus and tool bars. And also participate in the Customization feature
            enabled by the BarManager. Make sure that this BarItem has a unique text and category index before you add it to a manager.</para>
            <para>The BarItem can also be created and used outside of the context of
            BarManagers when used in a stand-alone PopupMenu. Take a look at the PopupMenu
            class reference for an example of how to create and use a stand-alone BarItem in a PopupMenu.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.IsRecentlyUsedItem">
            <summary>
            Gets or sets a value to indicate whether this bar item will appear in it's
            parent's partial menus list.
            </summary>
            <remarks>
            True to make this appear in partial menus; False to make it not appear.
            Default value is true.
            <para>When this value is true, the item will be always visible when it's parent menu is
            shown. </para>
            <para>If false, the item will appear only when the user expands the hidden portion of the
            partial parent menu (through the arrows at the bottom). Note that this assumes that the parent menu has
            its UsePartialMenus property set to true.
            Note that if the user selects this item then this value will be set to true
            for the period of RecentlyUsedItemResetDelay. Also, this property is meaningful
            only when this item is a child of another menu(ParentBarItem).</para>
            <para>If this is a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> then this value
            can be set to false only if all the children also have their
            corresponding property set to false.</para>
            <para>Changing this property's value will fire the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.PropertyChanged"/> event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUIOnAppIdle">
            <summary>
            Specifies whether the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUI"/> event should be fired in the next application
            idle event.
            </summary>
            <value>true to fire the UpdateUI event; false otherwise. Default is false.</value>
            <remarks>
            If this property is set to true, then this BarItem will listen to the
            <see cref="E:System.Windows.Forms.Application.Idle"/> event and then fire the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUI"/>
            event. It will continue doing this in the Application.Idle event handler until you turn
            off this property. Take a look at the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUI"/> event for more information
            on if and when you should use this pattern for your BarItem UI update.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUIRequired">
            <summary>
            This property is obsolete, please use the UpdateUIOnAppIdle instead.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.DrawImageMirrored">
            <summary>
            This property indicates if the bar item image should be drawn mirrored
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.DesignMode">
            <summary>
            Gets a value that indicates whether the Component is currently in design
            mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.CommandBarManager.PrepareToolbarListItem(Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem)">
            <summary>
            This method will be called to fill the ParentBarItem that represents the menu
            that drops down when right-clicking in the toolbar area.
            </summary>
            <param name="parent">The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> that represents the dropdown menu.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.UM_REMOVE_MAIN_MENU">
            <summary>
            WM_APP + 3
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.UM_RESTORE_MAIN_MENU">
            <summary>
            WM_APP + 4
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_iLocksCounter">
            <summary>
            Get quantity of required UnLock Redraw method calls for enabling
            window drawing. This counter allow to accumulate Locks/UnLocks and 
            greatly adjast logic.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_nwMdiClient">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_bRedrawLocked">
            <summary>
            True - redraw locked, otherwise false
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_wndMdiClient">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_mnuActiveChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_wndActiveChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_sbHilight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_sbMouseClick">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_systemMenu">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_bShowControlBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_ProcHandle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_MsgHookProc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_bChildMaximized">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_hwndChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_frmMain">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_ctrlCanvas">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_rcSysIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_rcControlBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.m_style">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.#cctor">
            <summary>
            Static constrcutor - initialize static members: Icons.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.GetIcon(System.String)">
            <summary>
            Extarct icon from resources
            </summary>
            <param name="resourceName">resource name</param>
            <returns>Instance of recovered icon</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.InitializeComponent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.AttachHook">
            <summary>
            Attach Hook whicy allow us easily to catch: MDI child maximization,
            MDI Child restore, MDI Child switching and etc.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.DetachHook">
            <summary>
            Detach hook on class destroy
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.MsgHook(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Our hook function in whcih we catch MDI childs actions
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.FindChildByHandle(System.IntPtr)">
            <summary>
            Method find by Handle corresponding MDI Child
            </summary>
            <param name="child">handle to check</param>
            <returns>Null - if nothing found, otherwise MDI Child form</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.BeginUpdate">
            <summary>
            Lock repainting of MainForm. After Locking window stop redrawing
            until UnLock action done. You can safely call BeginUpdate several
            times (but always must be correspondig code which will call EndUpdate),
            because we have internal counter which acuumulate calls. Several
            calls simply increase counter for UnLock methos EndUpdate.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.EndUpdate">
            <summary>
            UnLock repainting of MainForm. After UnLocking form Invalidation 
            will work. We have internal counter that is why each call of BeginUpdate
            must have corresponding EndUpdate method call, otherwise window redrawing
            will be in locked state till end of time.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.ForceRedrawCompletly">
            <summary>
            Force window invalidation. Window will redraw itself even if 
            repainting locked.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.ForceRedrawCaptionOnly">
            <summary>
            Invalidate only part of form - it Caption NonClient area.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.SetToolbarButtons(System.Windows.Forms.Form)">
            <summary>
            Update toolbar and set varaibles which indicate toolbar to show 
            control box buttons and sys menu icon
            </summary>
            <param name="activeChild">active child reference</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.RemoveToolbarButtons">
            <summary>
            Reset variables to state in which on toolbar drawed only barItems 
            without system menu and caption buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.GetMdiActiveChild(System.IntPtr@)">
            <summary>
            Method return handle of active MDI Child
            </summary>
            <param name="handle">handle of active MDI Childs</param>
            <returns>True - child is maximized, otherwise False</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.Style">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.ShowControlBox">
            <summary>
            Specifies whether or not the control box should be drawn with the minimize,maximize and close buttons.
            </summary>
            <value>trye to show the control box; false otherwise. Default is true.</value>
            <remarks>
            <p>If a child form's ControlBox property is set to false, then the control box buttons will be drawn
            inactive rather than hidden, in accordance with the .Net menus behavior.</p>
            <p>If you want to alter this behavior and instead want the control box to be hidden, set this property
            to false.</p>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.WndActiveChild">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.SystemMenu">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.SystemIconRect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.ControlBoxRect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.Canvas">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.MainForm">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.NeedMenuButtons">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.rcMinButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.rcRestoreButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.rcCloseButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.IsCanvasRTL">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.MinimizeButtonHidden">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.RestoreButtonHidden">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.CloseButtonHidden">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.MinimizeButtonDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.RestoreButtonDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.IsRedrawLocked">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.IsChildMaximized">
            <summary>
            
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider.NeedMenuButtonsChanged">
            <summary>
            Throws an event when the NeedMenuButtons property changes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MdiClientNativeWnd.m_owner">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiClientNativeWnd.#ctor(Syncfusion.Windows.Forms.Tools.XPMenus.MdiSysMenuProvider)">
            <summary>
            Default constructor. Set parent reference and Attach 
            NativeWindow subclassing to MDIClient.
            </summary>
            <param name="owner">reference on owner</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MdiClientNativeWnd.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Subclassing WndProc for MDIClient window. We skipp WM_MDISETMENU
            and WM_MDIREFRESHMENU messages for disabling MDI menus. On 
            WM_MDIACTIVATE and WM_MDINEXT we are locking redrawing to disable
            flicking of child forms.
            </summary>
            <param name="m">Message class</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.DragCursors">
            <summary>
            Summary description for Cursors.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.DropDownBarItem">
            <summary>
            A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> derived class that will drop down a <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> when the user
            clicks on it.
            </summary>
            <remarks>
            This <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> derived class allows you to show custom drop-downs from
            submenus, context menus and tool bars. Use the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.DropDownBarItem.PopupControlContainer"/> property to
            associate this item with a <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/>.
            <para>You can use this to display for example a Color picker drop-down (by placing a <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/>
            in a derived <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/>.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.DropDownBarItem.#ctor">
            <summary>
            Initializes a new instance of the DropDownBarItem class with default settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.DropDownBarItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DropDownBarItem class and sets its
            caption.
            </summary>
            <param name="text">The DropDownBarItem's caption.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.DropDownBarItem.#ctor(System.String,System.EventHandler)">
            <summary>
            Initializes a new instance of the DropDownBarItem class, sets its caption
            and event handler for the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Click"/> event of the DropDownBarItem.
            </summary>
            <param name="text">The DropDownBarItem's caption.</param>
            <param name="onClick">The event handler for the ItemClick event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.DropDownBarItem.#ctor(System.String,System.EventHandler,System.Windows.Forms.Shortcut)">
            <summary>
            Initializes a new instance of the DropDownBarItem class, sets its caption,
            event handler for the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Click"/> event and
            the Shortcut for this item.
            </summary>
            <param name="text">The DropDownBarItem's caption.</param>
            <param name="onClick">The event handler for the ItemClick event.</param>
            <param name="shortcut">The Shortcut for this item.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.DropDownBarItem.#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler,System.EventHandler)">
            <summary>
            Initializes a new instance of the DropDownBarItem class, sets its merge type,
            merge order, shortcut, caption, event handler for ItemClick, event handler
            for Popup and the event handler for Selected.
            </summary>
            <param name="mergeType">The item's <see cref="T:System.Windows.Forms.MenuMerge"/></param>
            <param name="mergeOrder">The item's merge order.</param>
            <param name="shortcut">The item's Shortcut.</param>
            <param name="text">The item's caption.</param>
            <param name="onClick">The handler for the ItemClick event.</param>
            <param name="onPopup">The handler for the Popup event.</param>
            <param name="onSelect">The handler for the Select event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.DropDownBarItem.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.DropDownBarItem.Clone">
            <summary>
            Creates a clone of this DropDownBarItem instance.
            </summary>
            <returns>An object that has similar properties to this DropDownBarItem.</returns>
            <remarks>
            Creates a new instance of DropDownBarItem and calls the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)"/> method to copy over properties.
            It does not copy over the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.DropDownBarItem.PopupControlContainer"/> property value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.DropDownBarItem.PopupControlContainer">
            <summary>
            Gets or Sets the PopupControlContainer that will be dropped down from this item when placed in a menu or toolbar.
            </summary>
            <remarks>
            A PopupControlContainer that represents the popup control associated
            with this Item.
            <para>
            This item will popup the specified PopupControlContainer when the user clicks
            on the drop-down portion of the bar item.
            </para>
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            <para>The set PopupControlContainer will be disposed when this DropDownBarItem is disposed.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.DropDownBarItem.ParentStyle">
            <summary>
            Gets or sets a value indicating the ParentStyle in which the menu will be
            drawn.
            </summary>
            <remarks>
            A ParentBarItemStyle value indicating the ParentStyle in which the menu
            will be drawn. The default value is ParentBarItemStyle.DropDown.
            <para>Take a look at the documentation for the ParentBarItemStyle enumeration
            for more information on the interpretation of each ParentBarItemStyle value.</para>
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem">
            <summary>
            Represents a bar item that provides the combo box functionality in the XP Menus framework.
            </summary>
            <remarks>
            <para>
            This item provides you the flat look combo-boxes in your menus and toolbars.
            The item can operate in either editable or listbox mode (controlled by the Editable property).
            The <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.TextBoxValue"/> represents the current Text in the text box selected by the user.
            </para>
            <para>
            When in list box mode, you can fill the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.ChoiceList"/> with the choices you want to provide the user.</para>
            <para>When in editable mode, you can turn on <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.AutoAppend"/> which will make the framework track and persist
            the entries made by the user and automatically append them to the choice list
            in the drop-down. Turning on AutoAppend will ignore the entries you made in the ChoiceList.
            The entries made by the user will be stored in the registry for reuse across applications. This entry will
            be associated with a custom AutoAppend category ID which will be synthesized based on the ComboBoxBarItem's text and CategoryID property.
            </para>
            <para>
            When in editable mode, a <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Click"/> event will be thrown when the user presses the Return key
            when in the TextBox or when the user selects an item from the drop-down.
            When in list box mode, an <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Click"/> event will be thrown when the user selects an
            item from the drop-down list box.
            </para>
            <para>
            Use the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.MinWidth"/> property to provide a minimum width the corresponding bar item should be drawn with.
            The actual width might be bigger than the provided MinWidth in some cases.
            </para>
            </remarks>
            <example>
            Take a look at our XPMenus samples under the Tools\Samples\Menus Package\ folder
            for usage example.
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.#ctor">
            <summary>
            Creates a new instance of the ComboBoxBarItem class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.OnInitListBox(Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItemInitListBoxEventArgs)">
            <summary>
            Raises the InitListBox event.
            </summary>
            <param name="args">An <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItemInitListBoxEventArgs"/> that contains the event data.</param>
            <remarks>
            <para>The OnInitListBox method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Notes to Inheritors:  When overriding OnInitListBox in a derived
            class, be sure to call the base class's OnInitListBox method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.Clone">
            <summary>
            Creates a clone of this ComboBoxBarItem instance.
            </summary>
            <returns>An object that has similar properties to this ComboBoxBarItem.</returns>
            <remarks>
            Creates a new instance of ComboBoxBarItem and calls the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)"/> method to copy over properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Copies the properties of this ComboBoxBarItem into the specified BarItem.
            </summary>
            <param name="barItem">The ComboBoxBarItem where the values should be copied to.</param>
            <remarks>
            This method will also call <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)"/> to copy over base class properties.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.MinWidth">
            <summary>
            Get or Set the Minimum width of this item when placed in a menu or toolbar.
            </summary>
            <value>
            The minimum width with which this item should be drawn.
            </value>
            <remarks><para>Changing this property will fire the PropertyChanged event.</para></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.MaxDropDownItems">
            <summary>
            Gets or sets the maximum number of items to be shown in the drop-down portion of the ComboBoxBarItem.
            </summary>
            <value>The maximum number of items of in the drop-down portion. The minimum for this property is 1 and the maximum is 100.</value>
            <exception cref="T:System.ArgumentException">The maxium number is set less than one or greater than 100.</exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.MinDropDownWidth">
            <summary>
            Specifies the width of the dropdown.
            </summary>
            <value>-1 indicates the dropdown width will be as wide as the combo.
            Default is -1. The width could be bigger if the combo's width is bigger.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.Editable">
            <summary>
            Gets or Sets a value indicating whether the user can edit the value in this item with a TextBox.
            </summary>
            <value>True to let the user edit the value through a TextBox. False to draw this in list box mode.
            <para>Changing this property will fire the PropertyChanged event.</para></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.AutoAppend">
            <summary>
            Gets or Sets a value indicating whether or not to automatically append items
            entered by the user in the TextBox into the drop-down list.
            </summary>
            <value>True to turn on auto append; flase otherwise.</value>
            <remarks>
            This property will be used only when in editable mode.
            <para>Changing this property will fire the PropertyChanged event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.ChoiceList">
            <summary>
            Returns the choice list for the user.
            </summary>
            <value>A StringCollection representing the choices available to the user.</value>
            <remarks>This collection will be reset when you turn-on AutoAppend and when in editable mode.
            <para>Changing this property will fire the PropertyChanged event.</para></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.TextBoxValue">
            <summary>
            Gets or Sets the value in the TextBox.
            </summary>
            <value>The string representing the value in the TextBox.</value>
            <remarks><para>Changing this property will fire the PropertyChanged event.</para></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.PersistTextBoxValue">
            <summary>
            Specifies whether or not the TextBoxValue should be persisted when the app. is shutdown.
            </summary>
            <value>true to persist; false otherwise. Default is false.</value>
            <remarks>This property need not be set when <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.AutoAppend"/> is true.
            When AutoAppend is turned on, the latest value will be persisted automatically.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.ListBox">
            <summary>
            Lets you specify a custom ListBox in the combo's dropdown.
            </summary>
            <value>A ListBox instance. Default is null.</value>
            <remarks>
            <para>The ListBox specified via this property will be used in the dropdown region
            of the combo. When no value is specified a default ListBox will be used.</para>
            <para>Changing this property will fire the PropertyChanged event.</para>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.InitListBox">
            <summary>
            This event optionally lets you customize the listbox before it's drop down.
            </summary>
            <remarks>
            <para>This event will be fired after the user clicks on the dropdown button and
            before the listbox is shown.</para>
            <para>Also if this combo is editable, then this event will also be fired when
            the user uses the keyboard to browse through the different items.</para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.StaticBarItem">
            <summary>
            Represents a bar item that could be used as a label for an adjacent bar item.
            </summary>
            <remarks>
            The StaticBarItem does not respond to user mouse click and move.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.StaticBarItem.#ctor">
            <summary>
            Creates a new instance of the StaticBarItem class with default settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.StaticBarItem.#ctor(System.String)">
            <summary>
            Creates a new insatnce of the StaticBarItem class and initializes its Text property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.StaticBarItem.Clone">
            <summary>
            Creates a clone of this StaticBarItem instance.
            </summary>
            <returns>An object that has similar properties to this StaticBarItem.</returns>
            <remarks>
            Creates a new instance of StaticBarItem and calls the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.StaticBarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)"/> method to copy over properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.StaticBarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Copies the properties of this StaticBarItem into the specified StaticBarItem.
            </summary>
            <param name="barItem">The StaticBarItem where the values should be copied to.</param>
            <remarks>
            The Tags will be copied over only if the actual objects are cloneable (implements IClonable).
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.StaticBarItem.FlatBorderColor">
            <summary>
            The Color of the flat border around this item when parented by a Bar (toolbar).
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value. Default is Color.Empty.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem">
            <summary>
            A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> derived class that expands into a list when shown.
            </summary>
            <remarks>
            <para>Use this class when you have to represent a dynamic list of <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/>s.
            When shown this bar item will be replaced by a numbered list of
            <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/>s based on the supplied <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.ChildCaptions"/> list and when one of the items gets
            clicked by the user a <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Click"/> event is thrown by this instance with the
            <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItemClickedEventArgs"/> args.</para>
            <para>This also means you should not use a ListBarItem in a tool bar. If you do so, you
            might see unpredictable behavior. The user will automatically be prevented from dropping a ListBarItem into a tool bar during customziation.</para>
            <para>Note that the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Click"/> event handler will be called with a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItemClickedEventArgs"/>
            argument containing data pertaining to the child item that was clicked. Which means you
            should cast the regular EventArgs argument into this type in your handler.</para>
            <para>A typical example is the Most Recently Used Files list. The framework also
            internally uses this to represent the MDI Child list(<see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.MdiListBarItem"/>).</para>
            </remarks>
            <example>
            Take a look at our XPMenus samples under the Tools\Samples\Menus Package folder
            for usage example.
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.#ctor">
            <summary>
            Creates an instance of the ListBarItem class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.OnBeforeExpand">
            <summary>
            Called before the item gets expanded by its parent.
            </summary>
            <remarks>
            This is a good place to fill the ChildCaptions list with appropriate values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.OnAfterExpand(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.AfterExpand"/> event.
            </summary>
            <value>The event args for the event.</value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.PostExpand(Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem,System.Int32,System.Int32)">
            <summary>
            Called after this item's parent expands this item.
            </summary>
            <param name="parent">The parent where this item is hosted.</param>
            <param name="firstChildIndex">The index into the parent representing the BarItem corresponding to the first item in the ChildCaptions list.</param>
            <param name="lastChildIndex">The index into the parent representing the BarItem corresponding to the last item in the ChildCaptions list.</param>
            <remarks>
            With the reference to the parent, you can insert items if necessary before the parent gets shown.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.UpdateCheckedStates">
            <summary>
            Use this to updated the checked state of the expanded list BarItems. This method
            is usable only when the ListBarItem is being shown in a submenu.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.Clone">
            <summary>
            Creates a clone of this ListBarItem instance.
            </summary>
            <returns>An object that has similar properties to this ListBarItem.</returns>
            <remarks>
            Creates a new instance of ListBarItem and calls the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)"/> method to copy over properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Copies the properties of this ListBarItem into the specified ListBarItem.
            </summary>
            <param name="barItem">The ListBarItem where the values should be copied to.</param>
            <remarks>
            The Tags will be copied over only if the actual objects are cloneable (implements IClonable).
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.BeforeExpand">
            <summary>
            Occurs before the expansion of the Captions into BarItems. This is a
            good place to delay-insert Captions into the ChildCaptions list.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.AfterExpand">
            <summary>
            Occurs after the expansion of the Captions into BarItems.
            </summary>
            <remarks>
            The handler for this event is a good place to access the expanded BarItems and set some properties on it.
            Note that these expanded items will be disposed when the parent menu is hidden.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.CheckedIndices">
            <summary>
            The items in the ChildCaptions list that should be marked as checked.
            </summary>
            <value>A list of indices into the ChildCaptions list.</value>
            <remarks>
            This list will be used to determine the Checked state of the expanded
            BarItems.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.UseNumberedList">
            <summary>
            Specifies whether or not to use numbers in the expanded list.
            </summary>
            <value>true to include numbers; false otherwise</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.ExpandedBarItems">
            <summary>
            Returns a list of expanded BarItems.
            </summary>
            <value>An ArrayList if the expanded BarItems are currently shown. Null (or Nothing) otherwise.</value>
            <remarks>This property will return a non-null value only when queried from
            the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.AfterExpand"/> event handler. It's recommended that you do not
            hold any references to the BarItems returned by this property.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.ChildCaptions">
            <summary>
            The captions for the expanded bar items.
            </summary>
            <value>Represents the StringCollection that will hold the list of captions.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem.Tags">
            <summary>
            List of Application specific values corresponding to the ChildCaptions entries.
            </summary>
            <value>The list that contains the application specific values.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.CanDragDropEventArgs">
            <summary>
            The class that represents the event arguments provided by the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.CanDragDrop"/>
            event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.CanDragDropEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates a new instance of the CanDragDropEventArgs class.
            </summary>
            <param name="destinationParent">The destination ParentBarItem or Bar.</param>
            <param name="cancel">The initial Cancel state.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.CanDragDropEventArgs.DestinationParent">
            <summary>
            Returns the parent into which a drag-drop is attempted.
            </summary>
            <value>This object could be a ParentBarItem or a Bar.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.ContainmentChangedEventArgs">
            <summary>
            The class that represents the event arguments
            for the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.ContainmentChanged"/>
            event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ContainmentChangedEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates a new instance of ContainmentChangedEventArgs.
            </summary>
            <param name="parent">The destination ParentBarItem or Bar.</param>
            <param name="inserted">Specifies whether the BarItem was inserted or removed.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ContainmentChangedEventArgs.Parent">
            <summary>
            Returns the new logical parent from which the BarItem was removed or into which the
            BarItem was inserted.
            </summary>
            <value>This object could be a ParentBarItem or a Bar.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ContainmentChangedEventArgs.Inserted">
            <summary>
             Specifies whether the BarItem has been inserted or removed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItemClickedEventArgs">
            <summary>
            The class that represents the event arguments in the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItem"/>'s
            <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Click"/>
            event.
            </summary>
            <remarks>
            <para>Note that the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Click"/> event handler will be called with a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItemClickedEventArgs"/>
            argument containing data pertaining to the child item that was clicked. Which means you
            should cast the regular EventArgs argument into a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItemClickedEventArgs"/> in your handler.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItemClickedEventArgs.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the ListBarItemClickedEventArgs class.
            </summary>
            <param name="indexClicked">An index into the corresponding ListBarItem's ChildCaptions list.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ListBarItemClickedEventArgs.IndexClicked">
            <summary>
            Returns an index into the ChildCaptions list, identifying the item that was clicked.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.ToolbarListBarItem">
            <summary>
            Represents the item that will expand to show the current list of toolbars and their visible states.
            </summary>
            <remarks>
            <para>You would typically use this item as a child in the "View" submenu in the main menu bar
            of a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager"/>.</para>
            <para>Users can show/hide toolbars through this submenu and also invoke the customization dialog.</para>
            </remarks>
            <example>
            Take a look at our XPMenus samples under the Tools\Samples\Menus Package folder
            for usage example.
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem">
            <summary>
            Represents the submenu that can be dropped down when part of a tool bar or another submenu in the XP Menus framework or when
            associated with a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu"/>.
            </summary>
            <remarks>
            <para>The <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.Items"/> property of this class lets you add <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/>s to this ParentBarItem.</para>
            <para>The <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.MergeItems(Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem)"/> function allows you to merge two ParentBarItems togather.</para>
            <para>You can turn on partial menus behavior by setting the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.UsePartialMenus"/> property to true.</para>
            <para>You can also make the ParentBarItem act like a Checked-ListBox by setting the
            <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.CloseOnClick"/> property to false.</para>
            <para>Note that when you call Dispose on the ParentBarItem object, it will not automatically dispose
            the BarItems in its Items collection. You will have to manually call Dispose on the children yourself, if necessary.</para>
            </remarks>
            <example>
            Take a look at our XPMenus samples under the Tools\Samples\Menus Package folder
            for usage example.
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.#ctor">
            <summary>
            Creates a new instance of the ParentBarItem class and sets it default values.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.#ctor(System.String)">
            <summary>
            Creates a new instance of the ParentBarItem class and sets it caption.
            </summary>
            <param name="text">The caption for this item.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.#ctor(System.String,System.Windows.Forms.Shortcut)">
            <summary>
            Creates a new instance of the ParentBarItem class, sets its caption and its Shortcut.
            </summary>
            <param name="text">The caption for this item.</param>
            <param name="shortcut">The Shortcut for this item.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler)">
            <summary>
            Creates a new instance of the ParentBarItem class,
            sets its merge type, merge order, Shortcut, caption, Popup event handler
            and the Selected event handler.
            </summary>
            <param name="mergeType">The item's <see cref="T:System.Windows.Forms.MenuMerge"/></param>
            <param name="mergeOrder">The item's merge order.</param>
            <param name="shortcut">The item's Shortcut.</param>
            <param name="text">The item's caption.</param>
            <param name="onPopup">The handler for the Popup event.</param>
            <param name="onSelect">The handler for the Selected event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.UpdateSeparatorIndices">
            <summary>
            Advanced property, meant for use by the design-time.
            </summary>
            <remarks>Do not use this property directly.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.ResetStyle">
            <summary>
            Lets you reset the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.Style"/> property.
            </summary>
            <remarks>Once you reset, the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.Style"/> property will then
            return a value based on the parent <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager"/>, if any.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Determines if the specified key is a Shortcut in any of the contained child <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> and
            if so fires it's Click event.
            </summary>
            <param name="key">The shortcut key.</param>
            <returns>true if shortcut processed; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.FindProcessableItemWithShortcut(System.Windows.Forms.Keys)">
            <summary>
            Finds a visible and enabled item whose <see cref="!:Shorcut"/> is set to the specified key.
            </summary>
            <param name="key">The shortcut key to search.</param>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> with the specified shortcut.</returns>
            <remarks>
            This method does a recursive search on all the child <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/>s as well.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.Clone">
            <summary>
            Creates a clone of this ParentBarItem instance.
            </summary>
            <returns>An object that has similar properties to this ParentBarItem.</returns>
            <remarks>
            Creates a new instance of ParentBarItem and calls the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)"/> method to copy over properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Copies the properties of this ParentBarItem into the specified ParentBarItem.
            </summary>
            <param name="barItem">The ParentBarItem where the values should be copied to.</param>
            <remarks>
            The Items list will be shallow copied over.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.BeginGroupAt(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Lets you specify a separator in the Items list. The separator will be
            just before the specified BarItem.
            </summary>
            <param name="barItem">A BarItem present in the Items list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.RemoveGroupAt(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            If there was a separator just before this BarItem, then it is removed.
            </summary>
            <param name="barItem">A BarItem present in the Items list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.IsGroupBeginning(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Tells you whether a separator is drawn just before the specified BarItem.
            </summary>
            <param name="barItem">A BarItem present in the Items list.</param>
            <returns>true if there is a separator, false if not.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.RemoveItem(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Removes an item from the Items list.
            </summary>
            <param name="item">The BarItem to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.OnPopupClosed(System.EventArgs)">
            <summary>
            Raises the PopupClosed event.
            </summary>
            <param name="args">An EventArgs that contains the event data.</param>
            <remarks>
            The OnPopupClosed method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            <para>Notes to Inheritors:  When overriding OnPopupClosed in a derived
            class, be sure to call the base class's OnPopupClosed method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.MergeItems(Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem)">
            <summary>
            Merges this <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> with another ParentBarItem.
            </summary>
            <param name="parentItemSrc">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> that is to be merged with this one.</param>
            <remarks>
            <para>Bar items with the same Text value are merged according to their MergeType
            and MergeOrder properties.  </para>
            <para>Menu merging of MDI parent and MDI children is handled automatically when the
            toolbars and the menu items follow the merge rules. </para> <para>You can use this method to merge two
            <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> objects (and their submenu items) into a single ParentBarItem.  Note that the
            menu items in the source ParentBarItems should already be added to the BarManager that contains the destination ParentBarItem.
            For example, you can call this method to merge
            the menu items of a File and Edit ParentBarItems into a single ParentBarItem
            that can then be associated with and displayed by a <para>PopupMenu</para>.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">The parentItemSrc cannot be the same as this object.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.OnPopup(System.EventArgs)">
            <summary>
            Raises the Popup event.
            </summary>
            <param name="args">An EventArgs that contains the event data.</param>
            <remarks>
            The OnPopup method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            <para>Notes to Inheritors:  When overriding OnPopup in a derived
            class, be sure to call the base class's OnPopup method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.OnBeforePopup(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the BeforePopup event.
            </summary>
            <param name="args">A CancelEventArgs that contains the event data.</param>
            <remarks>
            The OnBeforePopup method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            <para>Notes to Inheritors:  When overriding OnBeforePopup in a derived
            class, be sure to call the base class's OnBeforePopup method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.SeparatorIndices">
            <summary>
            Advanced property, meant for use by the design-time.
            </summary>
            <remarks>Do not use this property directly.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.UpdatedSeparatorPositions">
            <summary>
            Advanced property, meant for use by the design-time.
            </summary>
            <remarks>Do not use this property directly.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.UpdatedBarItemPositions">
            <summary>
            Advanced property, meant for use by the design-time.
            </summary>
            <remarks>Do not use this property directly.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.Items">
            <summary>
            Gets a value indicating the collection of BarItem objects associated
            with this ParentBarItem.
            </summary>
            <remarks>
            A BarItems collection that represents the list of BarItem objects
            stored in the menu.
            <para>You can use this property to obtain a reference to the list of bar items
            that are currently stored in the ParentBarItem. With the reference to the
            collection of bar items for the ParentBarItem (provided by this property),
            you can add and remove bar items, determine the total number of bar items,
            and clear the list of bar items from the collection.</para>
            <para>A ParentBarItem can be placed within a tool bar or within another
            ParentBarItem. It can also be associated with a PopupMenu to create context
            menus. All the above can be accomplished during design-time with simple drag
            and drop in the presence of a BarManager.</para>
            </remarks>
            <example>
            The following example code creates a context menu with three items and shows it.
            <code lang="C#">
            private void Form1_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e)
            {
                if(e.Button != MouseButtons.Right)
                        return;
            
                PopupMenu popup = new PopupMenu();
                ParentBarItem parentItem = new ParentBarItem();
            
                barItem1.Checked = true;
                barItem1.Click += new EventHandler(ItemClicked);
                barItem2.Click += new EventHandler(ItemClicked);
            
                barItem3.Click += new EventHandler(ItemClicked);
            
                parentItem.Items.Add(barItem1);
                parentItem.Items.Add(barItem2);
                parentItem.Items.Add(barItem3);
            
                popup.ParentBarItem = parentItem;
                popup.Show(this, new Point(e.X, e.Y));
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.Manager">
            <summary>
            Overridden. See <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.ParentStyle">
            <summary>
            Gets or sets a value indicating the ParentStyle in which the menu will be
            drawn.
            </summary>
            <remarks>
            A ParentBarItemStyle value indicating the ParentStyle in which the menu
            will be drawn. The default value is ParentBarItemStyle.Default.
            <para>Take a look at the documentation for the ParentBarItemStyle enumeration
            for more information on the interpretation of each ParentBarItemStyle value.</para>
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.Style">
            <summary>
            Specifies the visual style of the dropdown.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.VisualStyle"/> value. Default is <b>VisualStyle.OfficeXP</b>.</value>
            <remarks>Note that by default this value will be inherited from the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager"/>
            that contains this ParentBarItem. If this ParentBarItem is not parented by any BarManager, then
            you might have to set this style manually.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.CloseOnClick">
            <summary>
            Gets or sets a value indicating whether the menu should close when an item is selected.
            </summary>
            <remarks>
            <para>true if the menu should be closed when an item is selected; false otherwise.
            Default value is true.</para>
            <para>If set to true, the menu can only be closed by clicking elsewhere or
            by pressing the Esc key. This setting is useful to implement, for example,
            a Checked-List like behavior for the drop-down menus.</para>
            </remarks>
            <example>
            <para>The following example code creates a Checked-List like menu with three items.
            The item's Checked value will be toggled as the user selects it.</para>
            <code lang="C#">
            private void Form1_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e)
            {
                PopupMenu popup = new PopupMenu();
                ParentBarItem parentItem = new ParentBarItem();
                parentItem.CloseOnClick = false;
            
                barItem1.Checked = true;
                barItem1.Click += new EventHandler(ItemClicked);
                barItem2.Checked = true;
                barItem2.Click += new EventHandler(ItemClicked);
            
                barItem3.Checked = true;
                barItem3.Click += new EventHandler(ItemClicked);
            
                parentItem.Items.Add(barItem1);
                parentItem.Items.Add(barItem2);
                parentItem.Items.Add(barItem3);
            
                popup.ParentBarItem = parentItem;
                popup.Show(this, new Point(e.X, e.Y));
            }
            private void ItemClicked(object sender, EventArgs e)
            {
                BarItem itemClicked = sender as BarItem;
                itemClicked.Checked = !itemClicked.Checked;
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.UsePartialMenus">
            <summary>
            Gets or Sets a value indicating whether the ParentBarItem will first
            show a list of Recently Used Items and an Expand button when dropped down.
            </summary>
            <remarks>
            true to turn on partial menus; false otherwise. Default is false.
            <para>
            When in partial menus mode and when this menu is dropped down, it will hide the child BarItems
            that has the IsRecentlyUsedItem property set to false. When the user presses the Expand button
            then all the child bar items will be made visible. </para>
            <para>
            In addition if this ParentBarItem is parented to a BarManager, which in turn is associated with a Form,
            then the user's historical menu usage pattern will be reflected in the partial menus behavior.
            Which means any item that the user had selected in the past 90 days (or the value set
            in the BarManager's RecentlyUsedItemResetDelay property) will be marked as a recently used item.</para>
            <para>Also, if parented to a BarManager, the BarManager's UsePartialMenus property should be true
            in additon to this UsePartialMenus property for partial menus mode to be turned on in this submenu.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.IsRecentlyUsedItem">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.UpdateUIMFCStyle">
            <summary>
            Specifies whether the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUI"/> event should be fired mfc style for
            the bar items in this parent menu before the dropdown.
            </summary>
            <value>true to fire the UpdateUI event; false otherwise. Default is false.</value>
            <remarks>
            Take a look at the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUI"/> event for more information
            on if and when you should use this pattern for your BarItem UI update.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.Popup">
            <summary>
            Occurs before the submenu item's list of menu items is displayed.
            </summary>
            <remarks>
            This event only occurs when a menu item has submenu items to display.
            You can use this event handler to add, remove, enable, disable, check,
            or uncheck menu items based on the state of your application before
            they are displayed.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.PopupClosed">
            <summary>
            Occurs just after the menu item has closed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem.BeforePopup">
            <summary>
            Occurs before the submenu gets shown allowing you to cancel it.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.TextBoxBarItem.Clone">
            <summary>
            Creates a clone of this TextBoxBarItem instance.
            </summary>
            <returns>An object that has similar properties to this TextBoxBarItem.</returns>
            <remarks>
            Creates a new instance of TextBoxBarItem and calls the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.TextBoxBarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)"/> method to copy over properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.TextBoxBarItem.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Copies the properties of this TextBoxBarItem into the specified TextBoxBarItem.
            </summary>
            <param name="barItem">The TextBoxBarItem where the values should be copied to.</param>
            <remarks>
            The Items list will be shallow copied over.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> objects.
            </summary>
            <remarks>
            This class represents a collection of <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> objects stored in a BarManager,
            <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> or <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar"/>.
            </remarks>
            <example>
            Take a look at our XPMenus samples under the Tools\Samples\Menus Package folder
            for usage example.
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems.#ctor">
            <summary>
            The constructor that instantiates a BarItems class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems.#ctor(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem[])">
            <summary>
            The constructor instantiates a BarItems class and intializes it with
            the supplied array of BarItems.
            </summary>
            <param name="barItems">An array of BarItem(s).</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems.#ctor(Syncfusion.Windows.Forms.Tools.XPMenus.BarManager)">
            <summary>
            The constructor instantiates a BarItems class and sets its BarManager to
            the specified BarManager.
            </summary>
            <param name="manager">A BarManager instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems.AddRange(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem[])">
            <summary>
            Adds an array of BarItem objects to the collection.
            </summary>
            <param name="items">An array of <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> objects to add to the collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems.Add(System.Object)">
            <summary>
            Override. See <see cref="M:Syncfusion.Collections.ArrayListExt.Add(System.Object)"/>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems.IsValidItemID(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem,System.String)">
            <summary>
            Tests whether a BarItem will be unique when added to this list with the
            specified text and categoryID. A reference to the BarItem itself is passed
            so that the BarItem if already in the list will be ignored in the test for uniqueness.
            </summary>
            <param name="itemToValidate">The BarItem to validate for uniqueness.</param>
            <param name="newText">The Text value of the BarItem when it will get added to the list.</param>
            <returns>true if the BarItem will make a unique entry in the list; false if not.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems.FindItem(System.String)">
            <summary>
            Finds a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> in the list given it's ID.
            </summary>
            <param name="id">The BarItem's ID.</param>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> with the specified ID. Null, if not found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems.FindItem(System.String,System.Int32)">
            <summary>
            Finds a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> in the list given it's text and categoryIndex value.
            </summary>
            <param name="text">The BarItem's text value.</param>
            <param name="categoryIndex">The BarItem's category Index value.</param>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> with the specified text and categoryIndex. Null, if not found.</returns>
            <remarks>
            If there are multiple bar items with the same text and categoryindex value, then the BarItem returned will
            be one of those in random.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems.GetItemFromHotKey(System.Char)">
            <summary>
            Gets the BarItem that has this hotkey in the list, if any.
            </summary>
            <param name="hotkey">The hotkey for which to retrieve the BarItem.</param>
            <returns>The BarItem if found. null otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems.OnItemPropertyChanged(System.Object,Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Collections.ArrayListExt.OnItemPropertyChanged(System.Object,Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems.Item(System.Int32)">
            <summary>
            Gets or sets a reference to the BarItem at the specified index location in the
            BarItems object.
            In C#, this property is the indexer for the BarItems class.
            </summary>
            <param name="index">The location of the BarItem in the BarItems collection.</param>
            <value>The reference to the BarItem.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems.Item(Syncfusion.Windows.Forms.Tools.XPMenus.BarItemID)">
            <summary>
            Retrieves a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> based on it's BarItemId.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems.Manager">
            <summary>
            Gets or Sets the BarManager to which this collection will be associated with.
            </summary>
            <remarks>
            The BarManager to which this BarItems collection will be associated with.
            <para>
            When this Collection is associated with a BarManager, all the exisiting and any
            newly added BarItem child's Manager property will be reset to this Manager property.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.PaintStyle">
            <summary>
            Specifies the style in which the bar items will be painted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.PaintStyle.Default">
            <summary>
            By default the BarItem will be painted based on what they are parented by. In a
            main menu, only the text of the items will be drawn; in other tool bars only
            the image will be drawn; in a drop-down menu, both the image and text will be drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.PaintStyle.TextOnly">
            <summary>
            Image will be ignored in all the above cases.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.PaintStyle.TextOnlyInMenus">
            <summary>
            Image will be ignored only when the BarItem is in a drop-down menu.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.PaintStyle.ImageAndText">
            <summary>
            Both image and text will be drawn in all the above cases.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItemStyle">
            <summary>
            Specifies the appearance and behavior of a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/>.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> use this enum to determine whether to act like a drop-down parent
            or a submenu parent.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItemStyle.Default">
            <summary>
            The parent item will be drawn like a regular submenu item.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItemStyle.DropDown">
            <summary>
            The parent item will be drawn like a drop-down parent. The parent item itself
            will be clickable and the drop-down can be dropped down by an arrow to the right.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItemClickedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Click"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarItemClickedEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Creates an instance of the BarItemClickedEventArgs class.
            </summary>
            <param name="itemClicked">The BarItem that was clicked.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItemClickedEventArgs.ClickedBarItem">
            <summary>
            The BarItem that was just clicked.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItemClickedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.ItemClicked"/> event of the BarManager component in XP Menus framework.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItemClickedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.ContainmentChangedEventHandler">
            <summary>
            The event that will be thrown when a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> gets added or removed to a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> or <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/>
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ContainmentChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.CanDropEventHandler">
            <summary>
            The event that will be thrown when a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> gets dragged over a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/>(submenu) or a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/>(Tool Bar)
            during user-customization in the XP Menus framework.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.CanDragDropEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarStyle">
            <summary>
            Specifies the style in which a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/>(tool bar) will be drawn in the XP Menus framework.
            </summary>
            <remarks>
            <para>This enumeration has a FlagsAttribute attribute that allows a bitwise
            combination of its member values.</para>
            <para>The tool bars use this enum to specify their drawing style.</para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarStyle.None">
            <summary>
            No Style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarStyle.AllowQuickCustomizing">
            <summary>
            This will draw an arrow button to the right of the tool bar that will allow
            the user to drop-down a menu from which they can select hidden items, Add or Remove
            buttons and invoke the Customization dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarStyle.IsMainMenu">
            <summary>
            Marks this bar as the MainMenu. Setting this flag will force the bar to occupy the
            whole row irrespective of the MultiLine setting and enables MainMenu like keyboard
            and mouse based navigation. It also shows the Minimize/Maximize/Close buttons to the right
            and the System Menu to the left when a MDI child window is maximized.
            When there are more than one bars marked as IsMainMenu, the first setting is
            honored and the rest are ignored.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarStyle.MultiLine">
            <summary>
            Will wrap the bar into multiple rows when there isn't enough space in a row
            while docked or when the user resizes the floating bars.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarStyle.RotateWhenVertical">
            <summary>
            When this flag is set, the text in the bars will always be drawn horizontal
            irrespective of which border the bar is docked to. If not set, the text will be
            drawn vertical when the bars are docked to the left or right border.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarStyle.Visible">
            <summary>
            Lets you show or hide a bar.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarStyle.UseWholeRow">
            <summary>
            Will force the bar to take the whole row when docked to a form's border.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarStyle.DrawDragBorder">
            <summary>
            Will allow the user to drag the bar around, allowing him to move it within the
            dock border, dock to a different border or float it. If not set, the bar cannot be
            moved.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarStyle.IsStatusBar">
            <summary>
            Marks this Bar as the status bar. This will take the Bar to take the whole row
            and dock to the bottom of the app. When there are more than one bars marked as IsStatusBar,
            the first setting is honored and the rest are ignored. You can also not specify
            IsMainMenu and IsStatusBar for the same Bar. The IsMainMenu setting will take precedence.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarStyle.TextBelowImage">
            <summary>
            Specifies that the Text should be drawn below the image in this toolbar.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar">
            <summary>
            Represents and encapsulates the data required for a tool bar in the XP Menus framework.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar"/>
            <remarks>
            This class represents a tool bar's data structure.
            This has to be associated with a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager"/> instance
            to be displayed in the associated Form's command bar. This class is also used by the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar"/> class
            to represent a tool bar.
            </remarks>
            <example>
            Take a look at our XPMenus samples under the Tools\Samples\Menus Package folder
            for usage example.
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.OnPropertyChanged(Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="args">An SyncfusionPropertyChangedEventArgs that contains the event data.</param>
            <remarks>
            <para>The OnPropertyChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class. </para>
            <para>Notes to Inheritors:  When overriding OnPropertyChanged in a derived
            class, be sure to call the base class's OnPropertyChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.#ctor">
            <summary>
            Creates a new instance of the Bar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.#ctor(Syncfusion.Windows.Forms.Tools.XPMenus.BarManager)">
            <summary>
            Creates a new instance of the Bar class and
            associates it with a BarManager.
            </summary>
            <param name="manager">A BarManager instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.#ctor(Syncfusion.Windows.Forms.Tools.XPMenus.BarManager,System.Int32[])">
            <summary>
            Creates a new instance of the BarManager class and
            associates it with a BarManager.
            </summary>
            <param name="manager">A BarManager instance.</param>
            <param name="separatorIndices">An integer array of indices representing the positions where separators should be introduced.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.#ctor(Syncfusion.Windows.Forms.Tools.XPMenus.BarManager,System.String)">
            <summary>
            Creates a new instance of the BarManager class and
            associates it with a BarManager.
            </summary>
            <param name="manager">A BarManager instance.</param>
            <param name="barName">The Bar's name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.#ctor(Syncfusion.Windows.Forms.Tools.XPMenus.BarManager,System.String,Syncfusion.Windows.Forms.Tools.XPMenus.BarStyle,Syncfusion.Windows.Forms.Tools.XPMenus.BarItemsDesignTime,System.Int32[])">
            <summary>
            Creates a new instance of the BarManager class and
            associates it with a BarManager.
            </summary>
            <param name="manager">A BarManager instance.</param>
            <param name="barName">The Bar's name.</param>
            <param name="barStyle">The Bar's style.</param>
            <param name="barItemsDesignTime">A list of <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/>s.</param>
            <param name="separatorIndices">A list of indices representing the separator positions.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.UpdateSeparatorIndices">
            <summary>
            Advanced property, meant for use by the design-time.
            </summary>
            <remarks>Do not use this property directly.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.ClearSeparators">
            <summary>
            Removes all separators between bar items in the tool bar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.BeginGroupAt(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Lets you specify a separator in the Items list. The separator will be
            just before the specified BarItem.
            </summary>
            <param name="barItem">A BarItem present in the Items list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.RemoveGroupAt(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            If there was a separator just before this BarItem, then it is removed.
            </summary>
            <param name="barItem">A BarItem present in the Items list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.IsGroupBeginning(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Tells you whether a separator is drawn just before the specified BarItem.
            </summary>
            <param name="barItem">A BarItem present in the Items list.</param>
            <returns>true if there is a separator, false if not.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.RemoveItem(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Removes a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> from the BarItems list.
            </summary>
            <param name="item">The BarItem to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.MergeItems(Syncfusion.Windows.Forms.Tools.XPMenus.Bar)">
            <summary>
            Merges this <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> with another Bar.
            </summary>
            <param name="barSrc">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> that specifies
            the Bar to merge with this one.</param>
            <remarks>
            <para>Bar items with the same Text value are merged according to their MergeType
            and MergeOrder properties.  </para>
            <para>Menu merging of MDI parent and MDI children is handled automatically when the
            toolbars and the menu items follow the merge rules.</para> <para>You can use this method to manually merge two
            <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> objects (and their submenu items) into a single Bar. Note that the
            menu items in the source Bar should already be added to the BarManager that contains the destination Bar.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">The barSrc cannot be the same as this object.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.Clone">
            <summary>
            Creates a clone of this Bar instance.
            </summary>
            <returns>An object that has similar properties to this Bar.</returns>
            <remarks>
            Creates a new instance of Bar and calls the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.Bar)"/> method to copy over properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.Bar)">
            <summary>
            Copies the properties of this Bar into the specified Bar.
            </summary>
            <param name="bar">The Bar where the values should be copied to.</param>
            <remarks>
            The Items list will be shallow copied.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.Manager">
            <summary>
            Specifies the BarManager this is associated with,
            if any.
            </summary>
            <value>An instance of the BarManager object. Can be null.</value>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.PropertyChanged">
            <summary>
            Occurs when a Property's value changes in this object.
            </summary>
            <remarks>
            This event may not be thrown for some of the properties
            in BarItem. Take a look at the property's documentation
            to confirm whether this event will be thrown for a property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.UpdatedBarItemPositions">
            <summary>
            Advanced property, meant for use by the design-time.
            </summary>
            <remarks>Do not use this property directly.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.UpdatedSeparatorPositions">
            <summary>
            Advanced property, meant for use by the design-time.
            </summary>
            <remarks>Do not use this property directly.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.SeparatorIndices">
            <summary>
            Advanced property, meant for use by the design-time.
            </summary>
            <remarks>Do not use this property directly.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.BarName">
            <summary>
            Specifies the Bar's name.
            </summary>
            <value>The bar's name.</value>
            <remarks>
            <para>This will appear as the caption when the tool bar floats and in the
            customization dialog as the bar's identity. The names of
            these different Bars within the manager should be unique.</para>
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.MenuItemMergeOrder">
            <summary>
            Specifies the merge order for the corresponding menu item in the toolbar list popup menu.
            </summary>
            <remarks>
            The items in the context menu that shows up with the list of toolbars when right-clicked in the
            menu area and the items in the <see cref="!:ToolBarListBarItem"/> will be ordered based on this setting.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.BarStyle">
            <summary>
            Specifies the bar's style.
            </summary>
            <value>One of the BarStyle values.</value>
            <remarks>
            <para>The BarStyle will be used only when this bar is associated
            with a BarManager. </para>
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.AllowCustomizing">
            <summary>
            Specifies whether or not toolbar items can be dragged out and into this Bar by the user.
            </summary>
            <value>true to allow user customizing; false otherwise. Default is true.</value>
            <remarks>
            <para>Changing this property's value will fire the PropertyChanged event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.AllowItemsReorderOnShrunk">
            <summary>
            Specifies whether or not the bar items in this toolbar will be reordered
            when the toolbar is shrunk to show more bar items.
            </summary>
            <value>true to allow reordering; false otherwise. Default is true.</value>
            <remarks>
            <para>Changing this property's value will fire the PropertyChanged event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.AllowHiding">
            <summary>
            Specifies whether or not this toolbar can be hidden by the user during runtime.
            </summary>
            <value>true to allow user hiding; false otherwise. Default is true.</value>
            <remarks>
            <para>Changing this property's value will fire the PropertyChanged event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.Items">
            <summary>
            Specifies the BarItems list.
            </summary>
            <value>The BarItems collection.</value>
            <remarks>
            <para>You can add, remove and insert BarItems into this
            collection.</para>
            <para>Changing this property's value will throw the PropertyChanged event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.IDGenerator.GetNextID(System.String)">
            <summary>
            Generates the a new ID based on the provided ID.
            </summary>
            <param name="currentID">The ID based on which to generate the new ID.</param>
            <returns>The new ID.</returns>
            <remarks>
            If "File" is passed the new ID will be "File_1". If "File_1" is passed, the new ID will be "File_2", etc.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.IDGenerator.IsAutoGeneratedID(System.String)">
            <summary>
            Determines whether a specified ID could have been generated automatically.
            </summary>
            <param name="ID">The ID to analyze.</param>
            <returns>true if possibly auto generated; false otherwise.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItemInitListBoxEventHandler">
            <summary>
            Represents the method that can handle the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.InitListBox"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItemInitListBoxEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.ComboBoxBarItem.InitListBox"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.ProvideFontInfoEventHandler">
            <summary>
            Represents the method that can handle the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.ProvideFontInfo"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.ProvideFontInfoEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.ProvideFontInfo"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ProvideFontInfoEventArgs.Font">
            <summary>
            Gets or sets the corresponding Font object.
            </summary>
            <remarks>The Font object returned will be font that will be used by default. </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.MdiListBarItem">
            <summary>
            Represents the item that will expand to show the list of MDI Children in an MDI environment.
            </summary>
            <remarks>
            You would typically use this item as a child in the Window submenu in the main menu bar 
            of a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager"/>.
            When its parent is dropped down, this item will be replaced by the list of MDI children
            currently being shown and optionally a "Windows..." item to show the whole list when
            the number of children is more than 10 (or as specified in the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiListBarItem.MdiListSize"/> property.
            <para>When the user clicks on one of the entries, the corresponding mdi child will be activated.
            Clicking on the "Windows..." item will open a dialog where the users can see all the
            available MDI child windows.
            </para>
            </remarks>
            <example>
            Take a look at our XPMenus samples under the Tools\Samples\Menus Package\XPMenusMDI folder
            for usage example.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MdiListBarItem.MdiListSize">
            <summary>
            Specifies the number of mdi child links to be shown in the expanded list before the \"More Items\" BarItem.
            </summary>
            <value>Default is 10.</value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarCustomizationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarCustomizationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangedEventHanlder">
            <summary>
            Represents a method that will handle the <b>BarControlBindingChanged</b> event of a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangedArgs"/> object that contains the event data.</param>
            <seealso cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.BarControlBindingChanged"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangedArgs"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager">
            <summary>
            The MainFrameBarManager manages the application's main window's menus, tool bars 
            and the user customization capabilities in the XP Menus framework.
            </summary>
            <remarks>
            <para>Make sure to take a look at the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager"/>'s documentation before you start using 
            this derived class. </para>
            <para>You should associate an instance of this class with a Form that will be the main form
            in an MDI scenario or the single top-level form in an SDI scenario.</para>
            <para>Note that in an MDI scenario, optionally you can provide the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager"/> prior knowledge 
            of the all the child Form types that it might parent, in order that the menus and tool bars
            provide a seamless interface to the user even though they are part of different child Forms' BarManager.
            You do this via the MainFrameBarManager's <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.RegisterMdiChildTypes(System.Type[])"/> method.</para>
            <para>If you do not call the RegisterMdiChildTypes method, the child menus will be added/merged with the parent
            menus as and when the child forms are added to the mdi parent.</para>
            <para>When using this class in a SDI Form, it is recommended that you put all your Controls in the Form
            within a <see cref="T:System.Windows.Forms.Panel"/> with the <b>DockStyle.Fill</b> property set, 
            so that they resize as the menu's height changes. This is necessary because the menus occupy the Client area of the Form.
            This is not necessary if you are using this in a MDI Container (IsMdiContainer property set to true).</para>
            </remarks>
            <example>
            Take a look at our XPMenus samples under the Tools\Samples\Menus Package folder
            for usage example.
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager">
            <summary>
            The BarManager manages a Form's menus and tool bars and lets it participate in
            the user-customization feature.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ChildFrameBarManager"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager"/>
            <remarks>
            <para>The BarManager should contain a reference to all the BarItems (<see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.Items"/> property)
            that you intend to use in the associated Form's menu structure and the Tool Bars.
            The BarItems should have a unique ID.
            The BarManager also has a list of tool bars (<see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.Bars"/> property) associated with the Form.
            There is a "Customize" verb associated with the BarManager's designer which will allow
            you to design your Form's Menu structure and tool bars visually during 
            design-time without writing a single line of code. Use the "Activate Menus" verbs in the
            VS2003 designer in case the menus/toolbars don't respond to mouse clicks in the designer.
            </para>
            <para>The BarManager also allows you to set certain global settings like enabling 
            user-customization, enable partial menus, enable large icon mode for tool bars, etc.</para>
            <para>You don't normally use this class directly. You would instead use one of the
            following derived classes based on your Form type. Use a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager"/>
            (for the main window in an MDI and
            SDI scenarior) or a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ChildFrameBarManager"/>(for the child windows in an MDI scenario).
            Since the BarManager is a Component derived class, you can simple drag and drop 
            one of the above Managers on your Form during design-time to bind it to your Form.</para>
            <para>When initializing one of the derived classes in code, make sure to call <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.BeginInit"/>
            and <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.EndInit"/>.</para>
            <para>
            Note: A BarManager (ChildFrameBarManager or MainFrameBarManager) cannot be simulateneously used with a 
            <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBarController"/>.
            Use the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.DetachedCommandBars"/> property to
            add generic tool bars to your Form.
            </para>
            </remarks>
            <example>
            Take a look at our XPMenus samples under the Tools\Samples\Menus Package folder
            for usage example.
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.PartialMenusExpandedStateResetDelay">
            <summary>
            Specifies in milliseconds, the time after which an expanded partial menu will revert back to the
            collapsed state.
            </summary>
            <value>Specify the time in milliseconds. Default is 5000.</value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.#ctor">
            <summary>
            Creates an instance of the BarManager class and sets its default properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.BeginInit">
            <summary>
            Begins the initialization of a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager"/> that is used 
            on a form.
            </summary>
            <remarks>
            <para>
            The Visual Studio .NET design environment uses this method to start 
            the initialization of a component that is used on a form or used by 
            another component. The <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.EndInit"/> method ends the initialization. 
            Using the BeginInit and EndInit methods prevents the control from 
            being used before it is fully initialized.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.EndInit">
            <summary>
            Ends the initialization of a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager"/> that is used 
            on a form.
            </summary>
            <remarks>
            <para>
            The Visual Studio .NET design environment uses this method to end 
            the initialization of a component that is used on a form or used by 
            another component. The <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.BeginInit"/> method starts the 
            initialization. Using the BeginInit and EndInit methods prevents the 
            control from being used before it is fully initialized.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.ComponentModel.Component.Dispose"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.GetMergedEquivalent(Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem,Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem)">
            <overload>
            Gets the merged equivalent, if any, of a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> or <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> when in MDI mode.
            </overload>
            <summary>
            Get the merged ParentBarItem that has replaced the original in the menu structure.
            </summary>
            <param name="originalParent">The original <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/>.</param>
            <param name="defaultReturnValue">The default return value if a merged ParentBarItem was not found.</param>
            <returns>A ParentBarItem if a merged equivalent was found; defaultReturnValue otherwise.</returns>
            <remarks>
            <para>Often in an MDI scenario, ParentBarItems created during design-time in the MDI Parent
            and MDI children are merged togather (if satisfying the merge criteria)
            into a new ParentBarItem which will replace the original
            in the menu structure.</para>
            <para>Once replaced chages made to the original ParentBarItem, like adding a new
            <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> will not be reflected in the merged one. So, you should access
            the merged item directly to add child BarItems, for example. This method lets you do the same.</para>
            </remarks>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.GetMergedEquivalent(Syncfusion.Windows.Forms.Tools.XPMenus.Bar,Syncfusion.Windows.Forms.Tools.XPMenus.Bar)">
            <summary>
            Get the merged Bar that has replaced the original in the menu structure.
            </summary>
            <param name="originalBar">The original <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/>.</param>
            <param name="defaultReturnValue">The default return value if a merged Bar was not found.</param>
            <returns>A Bar if a merged equivalent was found; defaultReturnValue otherwise.</returns>
            <remarks>
            <para>Often in an MDI scenario, Bars created during design-time in the MDI Parent
            and MDI children are merged togather (if satisfying the merge criteria)
            into a new Bar which will replace the original
            in the menu structure.</para>
            <para>Once replaced chages made to the original Bar, like adding a new
            <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> will not be reflected in the merged one. So, you should access
            the merged Bar directly to add child BarItems, for example. This method lets you do the same.</para>
            </remarks>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.RemoveReferencesToForeignItems">
            <summary>
            Remove all references to <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItems"/> that are not parented by this 
            <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager"/> and are in the Bars and ParentBarItems
            of this BarManager.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnDetachForm">
            <summary>
            Called when the attached Form is being removed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnAttachForm">
            <summary>
            Called when a Form is set via the Form property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.GetBarControl(Syncfusion.Windows.Forms.Tools.XPMenus.Bar)">
            <summary>
            Gets the <b>CommandBar</b> associated with the <b>Bar</b> object.
            </summary>
            <seealso cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.BarControlBindingChanged"/>
            <param name="bar">The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> instance whose associated CommandBar is needed.</param>
            <returns>The <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> that the Bar is currently bound to. Can be null.</returns>
            <remarks>
            <para>For an MDI app, this binding is very transient as the Bar gets bound and unbound frequently
            as the active child form changes. Hence do not cache the CommandBar returned by this method.</para>
            <para>A <b>Bar</b> is usually bound to a <b>CommandBar</b> whenever the <b>Form</b> containing the corresponding 
            <b>BarManager</b> is active. The method will return null if the <b>Bar</b> is not bound to a 
            <b>CommandBar</b> at the time this method is called.</para>
            <para>
            As an alternative, consider listening to the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.BarControlBindingChanged"/>
            event which occurs whenever the <b>Bar</b> is bound/unbound to a <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.ImportBarItems(Syncfusion.Windows.Forms.Tools.XPMenus.IBarItemsRepository)">
            <summary>
            Will import <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/>s from one BarManager to another. Not to be confused with "MDI Merging".
            </summary>
            <param name="sourceRepository">The source <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.IBarItemsRepository"/> from which to import bar items.</param>
            <remarks>
            <para>
            Note that the BarManager class implements the IBarItemsRepository interface, due to which you can 
            import items from an instance of BarManager. 
            </para>
            <para>
            This method will move all <b>BarItems</b> from the source <b>BarManager</b> to the 
            destination <b>BarManager</b>. The <b>BarItems</b> will be moved into their corresponding 
            categories in the destination <b>BarManager</b>. If there is a clash in Text value 
            of these items (no 2 items within the same category can have the same Text 
            value), a new category will be created and the clashing item from the source 
            <b>BarManager</b> will be moved to that new category.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.GetManagerFromForm(System.Windows.Forms.Form)">
            <summary>
            Looks for a BarManager associated with the specified Form in a global Hashtable, and if found
            returns it.
            </summary>
            <param name="form">A Form that has a BarManager associated with it.</param>
            <returns>The associated BarManager. Null if not found.</returns>
            <remarks>
            A BarManager gets associated with a Form when you create an instance of the BarManager passing in the
            Form in it's constructor.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.Customize(System.Boolean)">
            <summary>
            Start/Stop the Customization mode and open the Customization dialog.
            </summary>
            <param name="start">true to start customization; false to stop.</param>
            <remarks>
            Call this method to start Customization mode by opening the
            Customization dialog. If EnableCustomizing is not true then
            this method will return immediately without starting customization.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.GetItemsInCategory(System.Int32)">
            <summary>
            Returns a list of BarItems under the specified category ID.
            </summary>
            <param name="categoryIndex">An index into the Categories list.</param>
            <returns>A BarItems list containing BarItem objects of has the specified category ID.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnBarControlBindingChanged(Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangedArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.BarControlBindingChanged"/> event.
            </summary>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangedArgs"/> that contains the event data.</param>
            <seealso cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.BarControlBindingChanged"/>
            <remarks>
            The OnBarControlBindingChanged method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnBarControlBindingChanged in a derived 
            class, be sure to call the base class's OnBarControlBindingChanged method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnCustomizingItemChanged(System.EventArgs)">
            <summary>
            Raises the CustomizingItemChanged event.
            </summary>
            <param name="args">
            An <see cref="T:System.EventArgs"/> object containg data pertaining to this event.
            </param>
            <remarks>
            The OnCustomizingItemChanged method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnCustomizingItemChanged in a derived 
            class, be sure to call the base class's OnCustomizingItemChanged method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnSelectedItemChanged(System.EventArgs)">
            <summary>
            Raises the SelectedItemChanged event.
            </summary>
            <param name="args">
            An <see cref="T:System.EventArgs"/> object containg data pertaining to this event.
            </param>
            <remarks>
            The OnSelectedItemChanged method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnSelectedItemChanged in a derived 
            class, be sure to call the base class's OnSelectedItemChanged method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnPropertyChanged(Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="args">
            An <see cref="T:System.EventArgs"/> object containg data pertaining to this event.
            </param>
            <remarks>
            The OnPropertyChanged method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnPropertyChanged in a derived 
            class, be sure to call the base class's OnPropertyChanged method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnBeginCustomization(System.EventArgs)">
            <summary>
            Raises the CustomizationBegin event.
            </summary>
            <param name="args">
            An EventArgs object containg data pertaining to this event.
            </param>
            <remarks>
            The OnBeginCustomization method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnBeginCustomization in a derived 
            class, be sure to call the base class's OnBeginCustomization method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnCustomizationDone(System.EventArgs)">
            <summary>
            Raises the CustomizationDone event.
            </summary>
            <param name="args">
            An EventArgs object containg data pertaining to this event.
            </param>
            <remarks>
            The OnCustomizationDone method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnCustomizationDone in a derived 
            class, be sure to call the base class's OnCustomizationDone method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnItemClicked(Syncfusion.Windows.Forms.Tools.XPMenus.BarItemClickedEventArgs)">
            <summary>
            Raises the ItemClicked event.
            </summary>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItemClickedEventArgs"/> object containg data pertaining to this event.</param>
            <remarks>
            The OnItemClicked method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnItemClicked in a derived 
            class, be sure to call the base class's OnItemClicked method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnAfterClone(Syncfusion.Windows.Forms.Tools.XPMenus.BarManagerClonedEventArgs)">
            <summary>
            Raises the AfterClone event.
            </summary>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItemClickedEventArgs"/> object containg data pertaining to this event.</param>
            <remarks>
            The OnAfterClone method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnAfterClone in a derived 
            class, be sure to call the base class's OnAfterClone method so that 
            registered delegates receive the event.</para>
            </remarks>
            <example>
            <code lang="C#">
            // Listen to the AfterClone event of the ChildFrameBarManager and
            // set the cloned BarManager's ImageList and LargeImageList.
            // This is necessary because cloning an ImageList (il1.ImageStream = il2.ImageStream;) seems to be broken in 1.1.
            private void childFrameBarManager_AfterClone(object sender, Syncfusion.Windows.Forms.Tools.XPMenus.BarManagerClonedEventArgs args)
            {
            	System.Resources.ResourceManager resources = new System.Resources.ResourceManager(this.GetType());
            
            	// Load the images from the resource and set it to the ImageLists. 
            	// You can typically copy the right-hand side portion of the following statements from the 
            	// designer generated code in the InitializeComponent method.
            	// imgList16 and imgList24 are the names of the ImageList instances in this Form.
            	args.ClonedBarManager.ImageList.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imgList16.ImageStream")));
            	args.ClonedBarManager.LargeImageList.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imgList24.ImageStream")));
            }
            </code>
            <code lang="VB">
            ' Listen to the AfterClone event of the ChildFrameBarManager and
            ' set the cloned BarManager's ImageList and LargeImageList.
            ' This is necessary because cloning an ImageList (il1.ImageStream = il2.ImageStream;) seems to be broken in 1.1.
            Private  Sub childFrameBarManager_AfterClone(ByVal sender As Object, ByVal args As Syncfusion.Windows.Forms.Tools.XPMenus.BarManagerClonedEventArgs)
            Dim resources As System.Resources.ResourceManager =  New System.Resources.ResourceManager(Me.GetType()) 
            
            	' Load the images from the resource and set it to the ImageLists. 
            	' You can typically copy the right-hand side portion of the following statements from the 
            	' designer generated code in the InitializeComponent method.
            	args.ClonedBarManager.ImageList.ImageStream = (CType((resources.GetObject("imgList16.ImageStream")), System.Windows.Forms.ImageListStreamer))
            	args.ClonedBarManager.LargeImageList.ImageStream = (CType((resources.GetObject("imgList24.ImageStream")), System.Windows.Forms.ImageListStreamer))
            End Sub
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarManager)">
            <summary>
            Copies the properties of this BarManager into the specified BarManager.
            </summary>
            <param name="barManager">The BarManager where the values should be copied to.</param>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.UpdateUIMFCStyle">
            <summary>
            Specifies whether the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUI"/> events for the BarItems
            should be fired mfc style,
            when the mouse moves over it, or before it gets shown in a dropdown menu.
            </summary>
            <value>true to fire the UpdateUI event; false otherwise. Default is false.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.ShowItemsInCustomizationDialog">
            <summary>
            Specifies whether or not the BarItems in this BarManager should appear in the
            Customization dialog that the user invokes.
            </summary>
            <value>true to indicate they should appear; false otherwise. Default is true.</value>
            <remarks>
            If the value is true, some of the BarItems will still not appear if their 
            correponding Categories are excluded in the CategoriesToIgnoreInCustDialog list.
            If the value is false, then none of the BarItems will apear in the dialog irrespective
            of the settings in the CategoriesToIgnoreInCustDialog property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.PartialMenusResetDelay">
            <summary>
            Specifies the delay in days after which an item's recently used setting will be reset.
            </summary>
            <remarks>
            Specifies the delay after which an item's recently used setting will be reset.
            Default value is 100 days.
            When a user selects an item in a partial menus enabled submenu and if the item 
            is not a recently used item, the item will be marked as recently used (its IsRecentlyUsedItem property will 
            be true) for the time-interval specified by this property. After this 
            time-interval the property will be reset to false.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.UsePartialMenus">
            <summary>
            Enables or disables Partial Menus mode in submenus.
            </summary>
            <remarks>
            Specifies whether the Partial Menus mode should be enabled or disabled globally in all the parent items 
            associated with this BarManager. Default is true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.EnableCustomizing">
            <summary>
            Enable or disable Customizing the menus and toolbars during run-time.
            </summary>
            <remarks>
            <para>Specifies whether Customizing the menus and tool bars is allowed during run-time.
            This property is true by default.</para>
            <para>If this property is set to false, and if the Customize method gets called, then
            it will not start the customization mode.</para>
            <para>
            If this property is true and the <see cref="!:MainFrameBarManager.AutoPersistCustomization"/> is
            set to false, then users will be able to customize their menus, but the customized state
            will not be persisted for use across application instantiations.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.ExpandPartialMenusAfterDelay">
            <summary>
            Enable automatic expansion of the partial menus into full menus after a delay.
            </summary>
            <remarks>
            Specifies whether the partial menus should be expanded automatically.
            This is true by default.
            <para>If this property is false the user will have to click on the expander button to 
            view the full menu. If true the menu will expand automatically after 5 seconds.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.BarPositionInfo">
            <summary>
            Used to store the positional info of the tool bars by the designer.
            </summary>
            <remarks>
            <para>This property is used by the BarManager's designer to store positional information of the
            contained tool bars. In the case of the MainFrameBarManager, this information 
            will be used to initialize the corresponding tool bars during runtime and design
            time. In the case of the ChildFrameBarManager, this information will be used to
            position the tool bars only during design-time.</para>
            <para>The structure of the MemoryStream is internal to this library and hence do not
            try to set/get this property.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.FormName">
            <summary>
            A user-friendly name that will be used to refer to a Form type in the customization dialog.
            </summary>
            <remarks>
            Specifies the user-friendly name that will be used to refer to a Form type in 
            the customization dialog. In an MDI scenarior the customization dialog categorizes the
            tool bars and bar items based on their BarManager/Form type. And its recommended
            to provide a user-friendly name for these BarManager/Form types. If this property is
            null or empty, then the Form type will be used to mark these BarManagers/Forms.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.Customizing">
            <summary>
            Specifies whether the user is currently customizing the Menus.
            </summary>
            <remarks>
            You will typically not have to use this property. Advanced users while extending
            the BarManager framework might find this property useful.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.RightToLeft" -->
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.SelectedItem">
            <summary>
            Specifies the item that is currently selected by the user through the mouse or keyboard.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.CustomizingItem">
            <summary>
            Specifies the item that is currently being selected or dragged by the user
            during customization.
            </summary>
            <remarks>
            <para>You will typically not have to use this property. Advanced users while extending
            the BarManager framework might find this property useful.</para>
            <para>Changing this property's value will throw the CustomizingItemChanged event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.Bars">
            <summary>
            Gets the list of Bars representing the toolbars for the corresponding form.
            </summary>
            <remarks>
            Specifies the list of tool bars associated with this BarManager.
            The BarManager's designer takes care of filling this list with one entry
            for each tool bar.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.Categories">
            <summary>
            Specifies the list of categories defined in this BarManager, under which 
            the BarItems will be grouped.
            </summary>
            <remarks>
            <para>The entries in this list are strings representing the category names.</para>
            <para>The CategoryID property of the BarItems in this BarManager's Items list 
            is an index into this Categories list. Also, the items in the CategoriesToIgnoreInCustDialog
            list are indices into this Categories list.</para>
            <para>The BarItems when added to a BarManager are identified by the framework based
            on their CategoryID and Text property. When these two properties combined is not 
            unique for a BarItem within the BarManager then an exception will be thrown during runtime.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.Items">
            <summary>
            The list of BarItems associated with this BarManager.
            </summary>
            <remarks>
            Specifies the list of BarItems associated with this BarManager.
            <para>
            Every item that needs to be part of the Form's menu structure/tool bar should be
            included in this list. When included in this list, the BarItem's CategoryID and Text
            property, combined, should be unique.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.ImageList">
            <summary>
            The central repository of images to which the BarItems refer to when in small icons mode.
            </summary>
            <remarks>
            Specifies the ImageList where the images that will be used by the BarItems are 
            stored (when in small icons mode). 
            <para>The BarItem's ImageIndex property is usually an index into this ImageList.
            However, if the BarItem has its own ImageList then its ImageIndex property will be
            an index into that ImageList.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.LargeImageList">
            <summary>
            The central repository of images to which the BarItems refer to when in large icons mode.
            </summary>
            <remarks>
            Specifies the ImageList where the images that will be used by the BarItems are 
            stored (when in large icons mode). 
            <para>The BarItem's ImageIndex property is usually an index into this ImageList.
            However, if the BarItem has its own ImageList then its ImageIndex property will be
            an index into that ImageList.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.CategoriesToIgnoreInCustDialog">
            <summary>
            Specifies the categories that should not be shown in the Customization Dialog.
            </summary>
            <value>The IntList instance continaing a list of category indices.</value>
            <remarks>
            The indices in this list refer to an item in the Categories list.
            <para>Note that this list will be consulted only when the ShowItemsInCustomizationDialog
            property is true.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.LargeIcons">
            <summary>
            Enables or disables LargIcons mode for items in the tool bar.
            </summary>
            <remarks>
            Specifies whether the images in the tool bar should be drawn large or small.
            The default value is false.
            <para>When in small icons mode, the images are of the size specified by the BarItem's
            ImageList's ImageSize property. When in large icons mode, the images are of the size
            specified by the BarItem's LargeImageList's ImageSize property. 
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.Form">
            <summary>
            The Form to which this BarManager is associated with.
            </summary>
            <remarks>
            Specifies the Form to which this BarManager is associated with.
            <para>BarManagers should be associated with a Form in order for the Form to be 
            adorned with menus and tool bars.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.MainFrameBarManager">
            <summary>
            Returns the MainFrameBarManager if this is a ChildFrameBarManager.
            </summary>
            <remarks>
            Specifies the MainFrameBarManager if this is a ChildFrameBarManager.
            If this is a MainFrameBarManager then the property will return this.
            If this BarManager is not associated with a Mdi Child Form then this property will
            return null.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.Style">
            <summary>
            Specifies the visual style of the toolbars and main-menus in this <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.MainFrameBarManager"/>.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.VisualStyle"/> value. Default is VisualStyle.OfficeXP.</value>
            <remarks>Note that this setting will be ignored when 
            <see cref="!:MainFrameBarManager.ThemesEnabled"/> is turned on and themes are 
            available in the OS. Also note that setting <b>VisualStyle.Default</b>
            will result in the same effect as <b>VisualStyle.OfficeXP</b>.</remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.BarControlBindingChanged">
            <summary>
            Occurs when a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> object is bound/unbound to a <b>Control</b>.
            </summary>
            
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangedArgs"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnBarControlBindingChanged(Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangedArgs)"/>
            <remarks>
            <para>The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> component (representing a toolbar and a main-menu) gets associated
            with a <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> Control during runtime. This binding is static
            in an SDI app, but usually very transient in an MDI application. In an MDI, a <b>Bar</b>
            will frequently get bound and unbound to Controls as the active Child Form changes.</para>
            <para>The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> object itself exposes some
            styles to affect the look-and-feel of the toolbars through it's <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.BarStyle"/> property.
            However, you might want to access the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> Control hosting
            the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> object for some advanced customization of the toolbar.</para>
            <para>You can do so by handling this event which is fired whenever the
            <b>Bar</b> object gets bound/unbound to a Control. For the toolbars and the main-menu,
            this Control is an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/> class and hence can be cast to it.
            </para>
            <para>
            You could also use the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.GetBarControl(Syncfusion.Windows.Forms.Tools.XPMenus.Bar)"/> method to get the <see cref="T:Syncfusion.Windows.Forms.Tools.CommandBar"/>
            currently bound to a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/>.
            </para>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.CustomizingItemChanged">
            <summary>
            Occurs when the BarManager's CustomizingItem property has changed.
            </summary>
            <remarks>
            <para>This event will also be raised when it's associated
            MainBarManager's CustomizingItem property changes.</para></remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.SelectedItemChanged">
            <summary>
            Occurs when a new <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> is selected or unselected
            by the user.
            </summary>
            <remarks>
            This is a good event to listen to if you want to, for example,
            show a selected item's tooltip in the status bar. Use the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.SelectedItem"/>
            proprety to get a reference to the selected <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/>.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.PropertyChanged">
            <summary>
            Occurs when the BarManager's LargeIcons or ThemesEnabled property has changed.
            </summary>
            <remarks>
            <para>This event will also be raised when it's associated
            MainBarManager's LargeIcons or ThemesEnabled property changes.</para></remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.CustomizationBegin">
            <summary>
            Occurs when the Customization dialog is about to be shown.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.CustomizationDone">
            <summary>
            Occurs when the Customization dialog has been closed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.ItemClicked">
            <summary>
            Occurs when one of the items in this BarManager was clicked.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.AfterClone">
            <summary>
            Occurs after a clone of this BarManager was created in a MDI scenario.
            </summary>
            <remarks><p>This is usually called for a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ChildFrameBarManager"/>
            when merging happens in a MDI scenario.</p>
            <p>
            This event is provided to workaround a 1.1 framework bug which prevents us from cloning an 
            ImageList (The code "imageList.ImageStream = anotherImageList.ImageStream" doesn't work in 1.1).
            </p>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.Initializing">
            <summary>
            Specifies if bar manager is in process of initializing, i.e. <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.BeginInit"/> was called 1st time.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.NewStyleChildTypeRegsitering">
            <summary>
            Internal field, not meant to be used directly.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.SetUserVisibilityPreferenceInBar(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem,Syncfusion.Windows.Forms.Tools.XPMenus.Bar,System.Boolean)">
            <summary>
            This method is called when the user hides a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> via the "Add or Remove Buttons"
            context menu of the toolbar.
            </summary>
            <param name="barItem">The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> that has been made visible or hidden in the specified bar.</param>
            <param name="bar">The corresponding <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/>.</param>
            <param name="showOrHide">Specifies whether to show or hide the barItem in the bar.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.#ctor">
            <summary>
            Creates a new instance of the MainFrameBarManager class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.#ctor(System.Windows.Forms.Form)">
            <summary>
            Creates a new instance of the MainFrameBarManager class and sets its Form property.
            </summary>
            <param name="form">The Form to associate this manager with.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.#ctor(System.ComponentModel.IContainer,System.Windows.Forms.Form)">
            <summary>
            Creates a new instance of the MainFrameBarManager class and sets its Form property.
            </summary>
            <param name="container">The logical container.</param>
            <param name="form">The Form to associate this manager with.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.IsUserCustomizationInfoAvailable(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Called by the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.IsUserCustomizationInfoPersisted"/> to determine if user-customization info is available 
            in the specified serializer.
            </summary>
            <param name="serializer">An <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <returns>true if available, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.OnProvidePresistenceID(Syncfusion.Windows.Forms.ProvidePersistenceIDEventArgs)">
            <summary>
            Raises the ProvidePersisteceID event.
            </summary>
            <param name="e">
            An ProvidePersistenceIDEventArgs object containg data pertaining to this event.
            </param>
            <remarks>
            The OnProvidePresistenceID method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Notes to Inheritors:  When overriding OnProvidePresistenceID in a derived 
            class, be sure to call the base class's OnProvidePresistenceID method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.ProcessMnemonicIntrernal(System.Windows.Forms.Message@)">
            <summary>
            Forces to execute shortcuts in menus when child forms are opened.
            In this case standard ProcessMnemonic doesn't raise.
            </summary>
            <param name="msg"></param>
            <returns>TRUE - if processed, FALSE - otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.OnDetachForm">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnDetachForm"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.EndInit">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.EndInit"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.OnAttachForm">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnAttachForm"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.RegisterMdiChildTypes(System.Type[])">
            <summary>
            Registers the MDI child Form types that could be created
            during the course of an MDI application.
            </summary>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.UnregisterMdiChildTypes(System.Type[])"/>
            <param name="formTypes">An array of Form types.</param>
            <remarks>
            <para><b>Explicit MDI Merging:</b></para>
            <para>
            Calling this method merges the menus and toolbars of the child Forms with that
            of the main Form (in an MDI scenario), immediately. The toolbars from the child Forms
            will then be available in the "Toolbars List" for user-customization. </para> 
            <para>You should call this in either your MDI Parent Form's
            constructor or Load event handler.</para>
            <para>This method is intended to support the following scenario. In an MDI app, 
            you might want the XPMenus framework to
            merge the child Form types's menus and toolbars that the MDI Parent will be
            parented to during the course of the application, even before the child Forms are visible. 
            Doing so will then present a seemless interface to the user with the
            toolbars and menus from all the different child Form types being available
            for user-customization, all the time.</para>
            <para>Also a dummy instance of the child form types will be created at this time
            to retrieve the bar items, requring the child types to include a default constructor.</para>
            <para>Take a look at our User's Guide (section MDI Merging) for more information
            on how the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.MergeType"/>, <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.MergeOrder"/> 
            and the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.Text"/> properties of BarItems influence the merge behavior of
            those BarItems.</para>
            <para><b>Automatic MDI Merging:</b></para>
            <para>If you do not call this method explicitly with your child Form types, 
            the framework will call it for you when a child Form (with XPMenus) gets loaded  
            and then automatically unregister 
            (using the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.UnregisterMdiChildTypes(System.Type[])"/> method)
            the child Form type when all the corresponding instances of the child type are closed.
            </para>
            <para><b>Delayed MDI Merging:</b></para>
            <para>Sometimes you will dynamically load new Child Form types into your 
            MDI. In such cases you could optionally call this method in a later stage after 
            you access these new types and before instances of such types get 
            parented by the MDI parent. If you do not call this method, the child's menus
            will still be merged (see above "Automatic MDI Merging"), but they will be removed 
            when the child Form is closed.</para>
            <para>In such dynamic child-form loading scenarios, you might also not know whether
            your child forms are associated with a ChildFrameBarManager in order for you to register
            such types using this method. You can determine that using the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.GetManagerFromForm(System.Windows.Forms.Form)"/>
            method.</para>
            <para>Use the UnregisterMdiChildTypes method to "unmerge" toolbars and menus from one or 
            more child Form types. Take a look at the method reference for more information.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Will be thrown if either of the types in the array is not derived from
            the Form class, if either of the types do not have a default constructor,
            if the passed in types do not have a ChildFrameBarManager associated with them,
            or if the Form associated with this MainFrameBarManager
            is not an MdiContainer.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.ReRegisterMdiChild(System.Windows.Forms.Form)">
            <summary>
            Call this to re-register forms that have been unregistered with a call to
            <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.UnregisterMdiChildTypes(System.Type[])"/>.
            </summary>
            <param name="childForm">The child Form that needs to be reregistered.</param>
            <remarks>
            <p>
            Use this method in the context of "Automatic MDI Merging" (see <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.RegisterMdiChildTypes(System.Type[])"/>
            for more information). In that context, you can use this method, for example, to merge/unmerge the menus 
            of a child form while it is active. The steps to do so are as follows:
            </p>
            <list type="Number">
            <item><description>Add a show a new Mdi Child form to the Mdi Parent.</description></item>
            <item><description>The menus defined in the Mdi child form (using a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ChildFrameBarManager"/>) will be merged automatically
            with that of the main form.</description></item>
            <item><description></description>Add and show one or more instances of the same child form type, if necessary.</item>
            <item><description>Call <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.UnregisterMdiChildTypes(System.Type[])"/> to unregister this child form type. Then the menus
            defined in these child forms will be unmerged from the mdi parent's menu structure.</description></item>
            <item><description>Call <b>ReRegisterMdiChild</b> one of these child forms to re-register this child form type. Then, 
            the menus of all these child forms will be merged with the mdi parent's menus, once again.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.UnregisterMdiChildTypes(System.Type[])">
            <summary>
            Call this method to remove the merging of one or more child form types.
            </summary>
            <param name="formTypes">An array of Form types.</param>
            <remarks>
            <para>
            This is an advanced method that lets you "unmerge" menus and toolbars from 
            the child types that were either manually-registered using the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.RegisterMdiChildTypes(System.Type[])"/> 
            method or auto-registered when new instances of such types were created (see the <b>RegisterMdiChildTypes</b> 
            method for more information on manual and auto registration).
            </para>
            <para>You can "remerge" the child form's menus
            with a call to <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.ReRegisterMdiChild(System.Windows.Forms.Form)"/>.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.LoadDesignerBarState">
            <summary>
            Lets you reset the toolbar positions to the default designer set positions.
            </summary>
            <remarks>
            Calling this method will move the toolbars to the designer set positions. Note that
            this applies only the toolbars in the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager"/> not the ones
            in the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ChildFrameBarManager"/> (that manages a MDI Child). This is because
            the toolbars in a mdi child do not have any positional information associated with them.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.LoadBarState(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Reads the previously serialized toolbar/menu states.
            </summary>		
            <param name="serializer">A reference to the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <remarks>
            Reads the persisted information from the specified persistent store and applies the new state. 
            This is an advanced method provided to let you customize the serialization path. By default, the framework
            will automatically store the user customized menu and toolbar information in the Isolated Storage (this would however
            be controlled by the AutoPersistCustomization and AutoLoadToolBarPositions settings).
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.LoadCustomizationInfo(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Loads the user customized information from the specified persistence medium.
            </summary>
            <param name="serializer">A reference to the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <remarks>
            <para>This method is not public bacause loading and saving of the user customized info 
            needs to be performed at a specific time and the framework doesn't support calling
            this method at any other time.</para>
            <para>
            To customize this persistence mechanism, please override this method and provide a
            custom <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.SaveBarState(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Saves the current toolbars/menus state information to the specified persistence medium.
            </summary>
            <param name="serializer">A reference to the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <remarks>
            Saves the persisted information into the specified persistent store. 
            This is an advanced method that lets you save the customized state of menus and toolbars into a custom persistence location.
            By default, the framework will handle saving and loading this information automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.SaveCustomizationInfo(Syncfusion.Runtime.Serialization.AppStateSerializer)">
            <summary>
            Saves the user customized information to the specified persistence medium.
            </summary>
            <param name="serializer">A reference to the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.</param>
            <remarks>
            <para>This method is not public bacause loading and saving of the user customized info 
            needs to be performed at a specific time and the framework doesn't support calling
            this method at any other time.</para>
            <para>
            To customize this persistence mechanism, please override this method and provide a
            custom <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.ResetBarItem(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Resets user customization done to this item.
            </summary>
            <param name="barItem">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> instance.</param>
            <returns>true if the reset was done immediately; false if the reset will happen during next application load.</returns>
            <remarks>
            <para>Changes will be seen only when the application is restarted.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.RecordInsert(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem,Syncfusion.Windows.Forms.Tools.XPMenus.BarItem,Syncfusion.Windows.Forms.Tools.XPMenus.IBarItemContainer,System.Boolean)">
            <summary>
            This method will be called when the user inserted an item into a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> or <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/>
            during runtime via customization.
            </summary>
            <param name="sourceItem">The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> that has been inserted into the container.</param>
            <param name="adjacentItem">The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> next to which the above item has been inserted.</param>
            <param name="destination">The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> or <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> into which the soruceItem is being inserted.</param>
            <param name="beforeOrAfter">Specifies whether the sourceItem is inserted before or after the adjacentItem.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.RecordRemove(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem,Syncfusion.Windows.Forms.Tools.XPMenus.IBarItemContainer)">
            <summary>
            This method will be called when the user removed a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> in a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> 
            or <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> during runtime customization.
            </summary>
            <param name="sourceItem">The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/> that was removed.</param>
            <param name="destination">The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> or <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.ParentBarItem"/> from which the sourceItem was removed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarManager)">
            <summary>
            Creates a clone of this MainFrameBarManager instance.
            </summary>
            <returns>An object that has similar properties to this MainFrameBarManager.</returns>
            <remarks>
            Creates a new instance of MainFrameBarManager and calls the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarManager)"/> method to copy over properties.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.CustomizationPanel">
            <summary>
            The UserControl that will be used in the Customization dialog to allow the end user
            to customize the menu structure.
            </summary>
            <remarks>
            <para>Specifies the UserControl that will be used in the Customization dialog to allow the end user
            to customize the application's menu structure.</para>
            <para>This property allows you to provide a custom look for the customization dialog in
            your application. To do so, derive a class from the default CustomizationPanel class
            (the Visual Studio make this a snap via the "Add/Add Inherited Control..." menu item 
            in the Solution Explorer view, even providing your derived class with a design time 
            to work with), instantiate that class and assign that instance to this property, all 
            this from within your Form's constructor.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.IsUserCustomizationInfoPersisted">
            <summary>
            Specifies whether or not user-customization info is available in a persisted state due to a previous run of this application.
            </summary>
            <value>True if it available. False otherwise.</value>
            <remarks>
            If the application is run for the very first time then user-customization info will not be available
            and this method will return false. For subsequent runs, this method will return true if 
            the user-customization info persistence is turned on through the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.AutoPersistCustomization"/> property,
            false otherwise.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.ThemesEnabled">
            <summary>
            Specifies whether or not to use themes ("visual styles") to draw certain portions of the menus and toolbars.
            </summary>
            <value>True to turn on themes, false otherwise.</value>
            <remarks>
            <para>
            Setting this to true will include the BarStyle.RotateWhenVertical in all
            the Bars currently in the manager.
            </para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.SelectedItem" -->
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.Customizing">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.Customizing"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.ResetCustomization">
            <summary>
            Specifies that on application shutdown all persisted information should be reset.
            </summary>
            <remarks>
            Note that setting this property will reset the persisted information only when app is shutdown
            and so the reset state will be seen only when the application is restarted (not as soon as this property
            is set).
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.LargeIcons">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.LargeIcons"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.DetachedCommandBars">
            <summary>
            A list of CommandBar instances that will be merged with the XP Menus framework.
            </summary>
            <remarks>
            Use this property to add generic command bars (containing custom controls) to the 
            XP Menus framework. During design-time you can do the same by invoking the "Add Detached Bar"
            verb in the MainFrameBarManager designer.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.AutoLoadToolBarPositions">
            <summary>
            Gets or Sets a value that indicates whether or not to automatically load the 
            persisted toolbar positions when the application is restarted.
            </summary>
            <value>True to automatically load the toolbar positions; false if not.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.AllowUserRenaming">
            <summary>
            Specifies whether user should be allowed to change the names of the menu items during runtime.
            </summary>
            <value>true to allow renaming; false otherwise.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.AutoPersistCustomization">
            <summary>
            Specifies whether or not to persist and load user-customized info from/to 
            isolated storage.
            </summary>
            <value>true to persist; false otherwise.</value>
            <remarks>
            <para>
            If this property is set to false, persisted user-customized information will neither be loaded
            nor will new information be persisted in isolated storage. Existing information
            in the isolated storage will also be destroyed.
            </para>
            <para>To control persistance of toolbar positions, use the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.AutoLoadToolBarPositions"/> property.</para>
            <para>Users can still customize their menus and toolbars with this flag off, but their
            changes will not be persisted when the application is closed. Use <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.EnableCustomizing"/> to prevent users from customizing.</para>
            <para>
            To prevent loading of user-customized information, this property should be either set (to false) via the designer or
            set in your Form's constructor before calling the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.RegisterMdiChildTypes(System.Type[])"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.UsePartialMenus">
            <summary>
            Overridden. See <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.UsePartialMenus"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.ChildManagers">
            <summary>
            The list of ChildFrameBarManagers associated with this MainFrameBarManager.
            </summary>
            <remarks>
            Specifies the list of ChildFrameBarManagers associated with this 
            MainFrameBarManager. 
            <para>
            This list will be an instance of each Form type specified in the RegisterMDIChildTypes call.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.MainMenuBar">
            <summary>
            Gets the main-menu toolbar in the Form.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> object. Can be null.</value>
            <remarks>
            <para>During design-time a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> is designated as the main-menu by including
            the IsMainMenu enum in the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.BarStyle"/> property.
            </para>
            <para>However, during runtime, a new <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> instance
            is created by merging the main-menus of the mdi container and all the mdi children. This merged
            main-menu <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> is exposed through this property. 
            You can modify insert items into the main-menu during runtime in code, if necessary, through this Bar.
            </para>
            <para>Merging takes place when you call <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.RegisterMdiChildTypes(System.Type[])"/>
            or when the Form gets activated. If you call this property before merging takes place then the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/>
            in the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.Bars"/> collection with the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bar.BarStyle"/>
            property containing the IsMainMenu enum will be returned. Will return null, if no such bar exists.
            </para>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.ProvidePersisteceID">
            <summary>
            Lets you specify a unique ID used to distinguish the persistence information
            of different instances of your Form type.
            </summary>
            <remarks>
            The default persistence logic assumes that there will be only a single MainFrameBarManager
            in an application. But that might not be the case if you have more than 1 MDI parent.
            In such cases, the persisted state of one MDI parent will get overridden by the other
            since the default logic doesn't distinguish these 2 different instances.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.ChildFrameBarManager">
            <summary>
            The ChildFrameBarManager manages the menus and tool bars of a child window (in an MDI
            scenario), in the XP Menus framework. 
            </summary>
            <remarks>
            <para>Make sure to take a look at the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager"/> class's documentation before you start using 
            this derived class. </para>
            <para>Always associate an instance of this class with a Form that will be parented to another Form (making it
            a child Form in an MDI scenario).</para>
            <para>Note that in an MDI scenario, optionally you can provide the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager"/> prior knowledge 
            of the all the child Form types that it might parent, in order that the menus and tool bars
            provide a seamless interface to the user even though they are part of different child Forms' BarManager.
            You do this via the MainFrameBarManager's <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.RegisterMdiChildTypes(System.Type[])"/> method.</para>
            <para>If you do not call the RegisterMdiChildTypes method, the child menus will be added/merged with the parent
            menus as and when the child forms are added to the mdi parent.</para>
            </remarks>
            <example>
            Take a look at our XPMenus samples under the Tools\Samples\Menus Package folder
            for usage example.
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ChildFrameBarManager.#ctor(System.Windows.Forms.Form)">
            <summary>
            Creates a new instance of the ChildFrameBarManager class.
            </summary>
            <param name="form">The Form to which this instance will be associated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ChildFrameBarManager.#ctor(System.ComponentModel.IContainer,System.Windows.Forms.Form)">
            <summary>
            Creates a new instance of the ChildFrameBarManager class.
            </summary>
            <param name="container">The logical container parenting this instance.</param>
            <param name="form">The Form to which this instance will be associated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ChildFrameBarManager.#ctor">
            <summary>
            Creates an instance of the ChildFrameBarManager and sets it's defaults.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.ChildFrameBarManager.Clone">
            <summary>
            Creates a clone of this ChildFrameBarManager instance.
            </summary>
            <returns>An object that has similar properties to this ChildFrameBarManager.</returns>
            <remarks>
            Creates a new instance of ChildFrameBarManager and calls the <see cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.CopyTo(Syncfusion.Windows.Forms.Tools.XPMenus.BarManager)"/> method to copy over properties.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.ChildFrameBarManager.RightToLeft">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.MenuNavigationEventArgs">
            <summary>
            The event args received in the <see cref="E:System.Windows.Forms.Form.MenuStart"/>
            and <see cref="E:System.Windows.Forms.Form.MenuComplete"/> events.
            </summary>
            <remarks>
            <para>This is the type of the EventArgs received in the <b>&gt;Form.MenuStart</b> and <b>Form.MenuComplete</b>
            events when the XPMenus framework is used in the form to show the main-menu and context menus.</para>
            <para>
            Currently this type doesn't include any properties, it just lets you distinguish between
            the .net menus and the XPMenus in the <b>Form.MenuStart</b> and <b>Form.MenuComplete</b> events.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bars">
            <summary>
            Holds a list of <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> instances.
            </summary>
            <remarks>
            Used by a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager"/> class to hold a list of Bar instances representing the tool bars.
            </remarks>
            <example>
            Take a look at our XPMenus samples under the Tools\Samples\Menus Package folder
            for usage example.
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bars.#ctor">
            <summary>
            Creates a new instance of the Bars class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bars.Add(System.Object)">
            <summary>
            Override. See <see cref="M:Syncfusion.Collections.ArrayListExt.Add(System.Object)"/>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bars.AddHandlers(System.Object)">
            <summary>
            Override. See <see cref="M:Syncfusion.Collections.ArrayListExt.AddHandlers(System.Object)"/>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.Bars.OnItemPropertyChanged(System.Object,Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)">
            <summary>
            Override. See <see cref="M:Syncfusion.Collections.ArrayListExt.OnItemPropertyChanged(System.Object,Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.Bars.Item(System.Int32)">
            <summary>
            Returns a Bar instance at the specified index.
            </summary>
            <param name="index">The index where a Bar is searched for.</param>
            <returns>The Bar at the specified index.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangedArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.BarControlBindingChanged"/> event.
            </summary>
            <seealso cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.BarControlBindingChanged"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.OnBarControlBindingChanged(Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangedArgs)"/>
            <remarks>
            A <b>BarControlBindingChangedArgs</b> specifies which <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangedArgs.Bar"/> object
            is being bound/unbound to a <b>Control</b> as specified by the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangeType"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangeType">
            <summary>
            Specifies the nature of change in control binding.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangeType.Unparenting">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> component is being unbound from a toolbar Control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.BarControlBindingChangeType.Parented">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.Bar"/> component is being bound to a Control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManagerClonedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.AfterClone"/> event of the BarManager component in XP Menus framework.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManagerClonedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarManagerClonedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarManager.AfterClone"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.BarManagerClonedEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.XPMenus.BarManager)">
            <summary>
            Creates a new instance of the BarManagerClonedEventArgs type.
            </summary>
            <param name="clonedmanager">The manager that was cloned.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarManagerClonedEventArgs.ClonedBarManager">
            <summary>
            Returns the BarManager that was just cloned.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.CustomizationPanel">
            <summary>
            Specifies the UserControl that will be used in the XP Menus Customization dialog to allow the end user
            to customize the application's menu structure.
            </summary>
            <remarks>
            Derive from this UserControl and customize by adding more Controls, if necessary, etc. during design-time.
            Then use the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.MainFrameBarManager.CustomizationPanel"/> property
            to let the framework use your custom control.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.CustomizationPanel.localBarManager">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.CustomizationPanel.customizingBarManager">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.CustomizationPanel.#ctor">
            <summary>
            Creates a new instance of the CustomizationPanel class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.CustomizationPanel.InitCustomizationPanel(Syncfusion.Windows.Forms.Tools.XPMenus.BarCustomizationDialog,Syncfusion.Windows.Forms.Tools.XPMenus.BarManager)">
            <summary>
            Initializes the CustomizationPanel object.
            </summary>
            <param name="dlg">The dialog where this Control is hosted.</param>
            <param name="customizingManager">The BarManager that this Control is Customizing.</param>
            <remarks>
            This method will be called to initialize the CustomizationPanel
            and pass it references to the above objects.
            <para>Inheritors could override this function and perform custom
            initialization at this time. When you override this function make
            sure to call the base class for proper initialization.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.CustomizationPanel.OnDialogClosing">
            <summary>
            Called when the Dialog in which this Control is hosted in Closing.
            </summary>
            <remarks>
            Inheriotors can override this function to perform custom clean up.
            Make sure to call the base class when you override this function
            for proper clean up.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.CustomizationPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.CustomizationPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.CustomizationPanel.OnDialogLoad">
            <summary>
            Called when the Dialog in which this Control is hosted is loaded.
            </summary>
            <remarks>
            This virutal is available for inheritors to override and
            perform custom initialization. Make sure to call the base
            class when you override.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.CustomizationPanel.OnDialogVisibiltyChanged">
            <summary>
            Called when the dialog in which this Control is hosted is
            either made visible or hidden.
            </summary>
            <remarks>
            This virtual is available for inheritors to override and 
            perform custom operations. Make sure to call the base class
            when you override.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.CustomizationPanel.DesignerHost">
            <summary>
            The IDesignerHost interface in which the BarManager is hosted
            during design time.
            </summary>
            <value>A reference to an object implementing the IDesignerHost interface.</value>
            <remarks>
            This will be called only when the BarManager is Customized
            in design mode.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenuGridFactory.InitMenus">
            <summary>
            Initializes menus for faster dropdown-the first time.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenuGridFactory.MenuGridType">
            <summary>
            Lets you specify a custom type representing the drop-down menus.
            </summary>
            <value>A type deriving from <b>MenuGrid</b>. Default is null.</value>
            <remarks>Specify null to make the framework use the default type.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItemDndData">
            <summary>
            The data passed to the drag drop handlers while dragging a BarItem during 
            User Customization.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.MenuComboBoxCellRenderer.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenusManager">
            <summary>
            Provides the extended "XPContextMenu" property and manages the activation of Context Menus (<see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu"/>) in the XP Menus framework.
            </summary>
            <remarks><para>Using this class you can easily associate a Control with a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu"/>.</para>
            <para>This class provides an extended property "XPContextMenu" through which you can associate
            a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu"/> for any Control on your Form. Once set, the PopupMenusManager will automatically
            show the PopupMenu when the user right-clicks on the Control.</para>
            <para>Note that when this component is Disposed, it will not Dispose any of the associated
            Control or PopupMenus.</para>
            </remarks>
            <example>
            <para>Take a look at our XPToolbarsAndContextMenus sample under the Tools\Samples\Menus Package\ folder
            for usage example.</para>
            <para>To associate a Control with a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu"/>
            use the SetXPContextMenu method in code, like this:</para>
            <code lang="C#">
            this.popupMenusManager1.SetXPContextMenu(this.richTextBox1, this.popupMenu2);
            </code>
            <code lang="VB">
            Me.popupMenusManager1.SetXPContextMenu(Me.richTextBox1, Me.popupMenu2)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenusManager.#ctor">
            <summary>
            Creates a new instance of the PopupMenusManager class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenusManager.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of the PopupMenusManager class and adds itself to the specified container.
            </summary>
            <param name="container">The Container into which to add.</param>
            <remarks>This constructor is used by the design-time to add a Component to the Form's
            IContainer field so that it gets Disposed when the Form gets Disposed.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenusManager.SetXPContextMenu(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu)">
            <summary>
            Associates a PopupMenu with a Control.
            </summary>
            <param name="control">The Control to associate with.</param>
            <param name="contextMenu">The PopupMenu to associate. Null to remove any association with the Control.</param>
            <remarks>The PopupMenusManager will automatically show the PopupMenu when the user
            right clicks on the Control.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenusManager.GetXPContextMenu(System.Windows.Forms.Control)">
            <summary>
            Returns the associated PopupMenu of the Control.
            </summary>
            <param name="control">The Control whose PopupMenu is required.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider">
            <summary>
            The XPMenusProvider class implements the <see cref="T:Syncfusion.Windows.Forms.IContextMenuProvider"/> interface and 
            serves as the menu provider for the Syncfusion Essential Tools XPMenus. Controls that have a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider"/> 
            object set as their menu provider will display a <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu"/> instance.
            <seealso cref="T:Syncfusion.Windows.Forms.IContextMenuProvider"/>
            <seealso cref="!:Sycnfusion.Windows.Forms.Tools.XPMenus.StandardMenusProvider"/>
            </summary>	
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.InitializeContextMenu">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.InitializeContextMenu"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.SetVisualStyle(Syncfusion.Windows.Forms.VisualStyle)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetVisualStyle(Syncfusion.Windows.Forms.VisualStyle)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.AddContextMenuItem(System.String,System.EventHandler)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.AddContextMenuItem(System.String,System.EventHandler)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.AddContextMenuItem(System.String,System.String,System.EventHandler)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.AddContextMenuItem(System.String,System.EventHandler)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.SetContextMenuItemImage(System.String,System.Windows.Forms.ImageList,System.Int32)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemImage(System.String,System.Windows.Forms.ImageList,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.SetContextMenuItemShortcut(System.String,System.Windows.Forms.Shortcut)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemShortcut(System.String,System.Windows.Forms.Shortcut)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.GetContextMenuItemShortcut(System.String)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.GetContextMenuItemShortcut(System.String)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.SetContextMenuItemChecked(System.String,System.Boolean)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemChecked(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.GetContextMenuItemChecked(System.String)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.GetContextMenuItemChecked(System.String)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.SetContextMenuItemEnabled(System.String,System.Boolean)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemEnabled(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.GetContextMenuItemEnabled(System.String)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.GetContextMenuItemEnabled(System.String)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.SetContextMenuItemSeparator(System.String,System.Boolean)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemSeparator(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.RemoveContextMenuItem(System.String)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.RemoveContextMenuItem(System.String)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.ShowContextMenu(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.ShowContextMenu(System.Windows.Forms.Control,System.Drawing.Point)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.DisposeContextMenu">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.DisposeContextMenu"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider.Clear">
            <summary>
            Clears all menu entries.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.GenericNewDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.GenericNewDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.GenericNewDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.NewBarItemDialog">
            <summary>
            Summary description for NewBarItemDialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPMenus.NewBarItemDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.NewBarItemDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.NewBarItemDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.PropertyGridPopupMenu">
            <summary>
            Provides designer like context menu support for a PropertyGrid during runtime.
            </summary>
            <remarks>
            <p>This <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu"/> derived menu has a 
            "Reset" menu item, which automatically
            provides the property-resetting service when made the context-menu of
            a <see cref="T:System.Windows.Forms.PropertyGrid"/>, during runtime. It also
            includes a "Description" menu item to let you show/hide the description portion of the property grid.
            Just as in the VS.Net property grid.</p>
            <p>
            To use this component, just create it passing the PropertyGrid in the constructor.
            The context menu will then start appearing for that PropertyGrid. There is no 
            design time support for this component.
            </p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.PropertyGridPopupMenu.#ctor(System.Windows.Forms.PropertyGrid)">
            <summary>
            Creates a new instance of the <b>PropertyGridPopupMenu</b>.
            </summary>
            <param name="propertyGrid">The <see cref="T:System.Windows.Forms.PropertyGrid"/> to which
            this will be made a context menu.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.XPMenus.PropertyGridPopupMenu.Dispose(System.Boolean)" -->
        <member name="T:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar">
            <summary>
            The XPToolBar class provides you a tool bar like look-and-feel that you can use
            outside the XPMenus framework to display BarItems.
            </summary>
            <remarks>
            The XP tool bar look-and-feel is becoming so popular that they are beginning to get used
            outside of the Form's menu structure, inside the Forms. A good example is the PropertyGrid
            control that uses this look and feel to provide users some command buttons at the top
            (the Categorized/Alphabetic button, etc.).
            <para>This XPToolBar makes it easy for you to get this tool bar look-and-feel outside the
            BarManager framework. Drop this control anywhere in your form and fill the Items list
            with BarItems. You can also insert separators using the BeginGroupAt method.</para>
            </remarks>
            <example>
            <code lang="C#">
            In code, you can initialize an XPToolBar as follows:
            XPToolBar xpToolBar1;
            // Create a new tool bar control.
            
            XPToolBar xptoolbar2 = new XPToolBar();
            // Add some one or more instances of BarItem to it.
            xptoolbar2.Items.AddRange(new BarItem[]{this.barItem1, this.barItem2, this.barItem3});
            // Setup a separator.
            xptoolbar2.BeginGroupAt(this.barItem2);
            
            // Set its position and add it to the Form.
            xptoolbar2.Dock = DockStyle.Top;
            xptoolbar2.Size = new Size(200, 30);
            this.Controls.Add(xptoolbar2);
            </code>
            <code lang="VB">
            Dim xpToolBar1 As XPToolBar
            ' Create a new tool bar control.
            Dim xptoolbar2 As New XPToolBar()
            
            ' Add some one or more instances of BarItem to it.
            xptoolbar2.Items.AddRange(New BarItem() {Me.barItem1, Me.barItem2, Me.barItem3})
            ' Setup a separator.
            xptoolbar2.BeginGroupAt(Me.barItem2)
            
            ' Set its position and add it to the Form.
            xptoolbar2.Dock = DockStyle.Top
            xptoolbar2.Size = New Size(200, 30)
            Me.Controls.Add(xptoolbar2)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.#ctor">
            <summary>
            Initializes a new instance of the XPToolBar class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)"/>.
            </summary>
            <param name="keyData"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.OnGotFocus(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.OnLostFocus(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.BeginGroupAt(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Lets you specify a separator in the BarItems list. The separator will be
            just before the specified BarItem.
            </summary>
            <param name="barItem">A BarItem present in the Items list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.RemoveGroupAt(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            If there was a separator just before this BarItem, then it is removed.
            </summary>
            <param name="barItem">A BarItem present in the Items list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.IsGroupBeginning(Syncfusion.Windows.Forms.Tools.XPMenus.BarItem)">
            <summary>
            Tells you whether a separator is drawn just before the specified BarItem.
            </summary>
            <param name="barItem">A BarItem present in the Items list.</param>
            <returns>true if there is a separator, false if not.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)"/>.
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.OnDragLeave(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.UpdateUIMFCStyle">
            <summary>
            Specifies whether the <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUI"/> events for the BarItems
            should be fired mfc style on Application.Idle.
            </summary>
            <value>true to fire the UpdateUI event; false otherwise. Default is false.</value>
            <remarks>Take a look at <see cref="E:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.UpdateUI"/> event description for more 
            information on when and how this pattern should be used.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.TabStop" -->
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.DefaultSize">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.Items">
            <summary>
            Gets a value indicating the collection of BarItem objects associated 
            with this XPToolBar.
            </summary>
            <remarks>
            A BarItems collection that represents the list of BarItem objects 
            stored in the XPToolBar.
            <para>You can use this property to obtain a reference to the list of bar items 
            that are currently stored in the XPToolBar. With the reference to the 
            collection of bar items for the XPToolBar (provided by this property), 
            you can add and remove bar items, determine the total number of bar items, 
            and clear the list of bar items from the collection.</para>
            </remarks>
            <example>
            The following example code adds three bar items to the XPToolBar.
            <code>
            private void Form_Load(object sender, System.EventArgs e)
            {
            	this.barControl1.Items.Add(this.barItem1);
            	this.barControl1.Items.Add(this.barItem2);
            	this.barControl1.Items.Add(this.parentBarItem1);
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.UpdatedSeparatorPositions">
            <summary>
            Advanced property, meant for use by the design-time.
            </summary>
            <remarks>Do not use this property directly.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.UpdatedBarItemPositions">
            <summary>
            Advanced property, meant for use by the design-time.
            </summary>
            <remarks>Do not use this property directly.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.BackgroundColor">
            <summary>
            The background color, gradient and other styles can be set through 
            this property.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.TreeViewAdv"/> provides this property to enable specialized
            custome gradient backgrounds. This property is used only when XP Themes is disabled
            through the <see cref="!:ThemesEnabled"/> property or when themes are inactive in the OS.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.LargeIcons">
            <summary>
            Specifies that the images from the <see cref="P:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem.LargeImageList"/>
            of the <see cref="T:Syncfusion.Windows.Forms.Tools.XPMenus.BarItem"/>s should be used while drawing the BarItems.
            </summary>
            <value>true to use the large image list; false to use the default image list. Default value is false.</value>
            <remarks>
            Make sure that a large image list is associated with the BarItem when you
            set this property to true. Exceptions will be thrown otherwise.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPMenus.XPToolBar.PreferredSize">
            <summary>
            Gets the preferred size based on the current settings.
            </summary>
            <value>A <see cref="T:System.Drawing.Size"/> instance.</value>
        </member>
        <member name="T:Syncfusion.ToolsWindowsAssembly">
            <summary>
            This class holds the name of the Tools assembly and provides a helper
            routine that helps with resolving types when loading a serialization stream and when the framework probes for assemblies by reflection.
            </summary>
        </member>
        <member name="F:Syncfusion.ToolsWindowsAssembly.Name">
            <summary>
            The full name of this assembly without version information, e.g. "Syncfusion.Tools"
            </summary>
        </member>
        <member name="F:Syncfusion.ToolsWindowsAssembly.Assembly">
            <summary>
            A reference to the <see cref="T:System.Reflection.Assembly"/> for the Tools assembly.
            </summary>
        </member>
        <member name="F:Syncfusion.ToolsWindowsAssembly.RootNamespace">
            <summary>
            The root namespace of this assembly. Used internally for locating resources within the assembly.
            </summary>
        </member>
        <member name="M:Syncfusion.ToolsWindowsAssembly.AssemblyResolver(System.Object,System.ResolveEventArgs)">
            <summary>
            This delegate helps with resolving types and can be used as a eventhandler
            for a <see cref="E:System.AppDomain.AssemblyResolve"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data with information about the type.</param>
            <returns>A reference to the assembly where the type is located.</returns>
            <remarks>
            <para>If the requested assembly is either Tools, Grid or Shared this method returns the reference
            to the corresponding assembly, it is bound to.</para>
            <para>It's mandatory that you distribute Syncfusion.Grid.dll and Syncfusion.Shared.dll when you use this
            method in your application.</para>
            <para>Use this handler when reading back types from a serialization stream
            saved with an earlier version of this assembly.</para>
            </remarks>
            <example>
            <code lang="C#">
            		public static AToolsType LoadSoap(Stream s)
            		{
            			try
            			{
            				AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(ToolsWindowsAssembly.AssemblyResolver);
            				SoapFormatter b = new SoapFormatter();
            				b.AssemblyFormat = FormatterAssemblyStyle.Simple;
            				AToolsType t = b.Deserialize(s) as AToolsType;
            				return t;
            			}
            			finally
            			{
            				AppDomain.CurrentDomain.AssemblyResolve -= new ResolveEventHandler(ToolsWindowsAssembly.AssemblyResolver);
            			}
            		}
            
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SR">
            <summary>
               SR provides localized access to string resources specific 
               from the assembly manifest Syncfusion.Windows.Forms.Tools.SR.resources
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SRCategoryAttribute">
            <summary>
            Specifies the category in which the property or event will be displayed in a visual designer.
            </summary>
            <remarks>
            This is a localized version of CategoryAttribute. The localized string will be loaded from the 
            assembly manifest Syncfusion.Windows.Forms.Tools.SR.resources
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SRDescriptionAttribute">
            <summary>
            Specifies a description for a property or event.
            </summary>
            <remarks>
            This is a localized version of DescriptionAttribute. The localized string will be loaded from the 
            assembly manifest Syncfusion.Windows.Forms.Tools.SR.resources
            </remarks>
        </member>
    </members>
</doc>
